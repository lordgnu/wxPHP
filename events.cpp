/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "cfg.h"
#include "bookctrl.h"
#include "dnd.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "docview.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "html.h"
#include "help.h"
#include "logging.h"
#include "managedwnd.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "media.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "aui.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "dvc.h"
#include "others.h"


void php_wxEventFilter_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEventFilter_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxEventFilter_php* object = static_cast<wxEventFilter_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEventFilter done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
int wxEventFilter_php::FilterEvent(wxEvent& event)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEventFilter::FilterEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "FilterEvent", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxEvent_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&event, le_wxEvent));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'FilterEvent'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return (int) Z_LVAL_P(return_value);
	

}
PHP_METHOD(php_wxEventFilter, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEventFilter::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxEventFilter_php();

				((wxEventFilter_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxEventFilter);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxEventFilter_php*) _this)->evnArray);
		
		array_init(((wxEventFilter_php*) _this)->evnArray);
		
		((wxEventFilter_php*) _this)->phpObj = getThis();
		
		((wxEventFilter_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxEventFilter_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxKeyboardState_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxKeyboardState_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxKeyboardState_php* object = static_cast<wxKeyboardState_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxKeyboardState done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxKeyboardState, AltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::AltDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::AltDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::AltDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxKeyboardState_php*)_this)->AltDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, CmdDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::CmdDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::CmdDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::CmdDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxKeyboardState_php*)_this)->CmdDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, ControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::ControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::ControlDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::ControlDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxKeyboardState_php*)_this)->ControlDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, GetModifiers)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::GetModifiers\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::GetModifiers\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyboardState::GetModifiers())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxKeyboardState_php*)_this)->GetModifiers());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, HasModifiers)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::HasModifiers\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::HasModifiers\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::HasModifiers())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxKeyboardState_php*)_this)->HasModifiers());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::MetaDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::MetaDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxKeyboardState_php*)_this)->MetaDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, RawControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::RawControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::RawControlDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::RawControlDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxKeyboardState_php*)_this)->RawControlDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, SetAltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetAltDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::SetAltDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetAltDown(down0)\n\n");
				#endif
				((wxKeyboardState_php*)_this)->SetAltDown(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, SetControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::SetControlDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetControlDown(down0)\n\n");
				#endif
				((wxKeyboardState_php*)_this)->SetControlDown(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, SetMetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetMetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::SetMetaDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetMetaDown(down0)\n\n");
				#endif
				((wxKeyboardState_php*)_this)->SetMetaDown(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, SetRawControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetRawControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::SetRawControlDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetRawControlDown(down0)\n\n");
				#endif
				((wxKeyboardState_php*)_this)->SetRawControlDown(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, SetShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::SetShiftDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetShiftDown(down0)\n\n");
				#endif
				((wxKeyboardState_php*)_this)->SetShiftDown(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, ShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::ShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyboardState::ShiftDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyboardState){
				references = &((wxKeyboardState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseState) && (!reference_type_found)){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::ShiftDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxKeyboardState_php*)_this)->ShiftDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyboardState, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool controlDown0;
	bool shiftDown0;
	bool altDown0;
	bool metaDown0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|bbbb' (&controlDown0, &shiftDown0, &altDown0, &metaDown0)\n");
		#endif
		char parse_parameters_string[] = "|bbbb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &controlDown0, &shiftDown0, &altDown0, &metaDown0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxKeyboardState_php();

				((wxKeyboardState_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(controlDown0)\n");
				#endif
				_this = new wxKeyboardState_php(controlDown0);

				((wxKeyboardState_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(controlDown0, shiftDown0)\n");
				#endif
				_this = new wxKeyboardState_php(controlDown0, shiftDown0);

				((wxKeyboardState_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(controlDown0, shiftDown0, altDown0)\n");
				#endif
				_this = new wxKeyboardState_php(controlDown0, shiftDown0, altDown0);

				((wxKeyboardState_php*) _this)->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(controlDown0, shiftDown0, altDown0, metaDown0)\n");
				#endif
				_this = new wxKeyboardState_php(controlDown0, shiftDown0, altDown0, metaDown0);

				((wxKeyboardState_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxKeyboardState);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxKeyboardState_php*) _this)->evnArray);
		
		array_init(((wxKeyboardState_php*) _this)->evnArray);
		
		((wxKeyboardState_php*) _this)->phpObj = getThis();
		
		((wxKeyboardState_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxKeyboardState_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxAuiManagerEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxAuiManagerEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxAuiManagerEvent_php* object = static_cast<wxAuiManagerEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxAuiManagerEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxAuiManagerEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long type0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&type0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxAuiManagerEvent_php();

				((wxAuiManagerEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0)\n");
				#endif
				_this = new wxAuiManagerEvent_php((wxEventType) type0);

				((wxAuiManagerEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxAuiManagerEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxAuiManagerEvent_php*) _this)->evnArray);
		
		array_init(((wxAuiManagerEvent_php*) _this)->evnArray);
		
		((wxAuiManagerEvent_php*) _this)->phpObj = getThis();
		
		((wxAuiManagerEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxAuiManagerEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxAuiManagerEvent, Veto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::Veto\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::Veto\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool veto0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&veto0)\n");
		#endif
		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &veto0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::Veto()\n\n");
				#endif
				((wxAuiManagerEvent_php*)_this)->Veto();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::Veto(veto0)\n\n");
				#endif
				((wxAuiManagerEvent_php*)_this)->Veto(veto0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, SetPane)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::SetPane\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::SetPane\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* pane0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&pane0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pane0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pane0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pane0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pane0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::SetPane((wxAuiPaneInfo*) object_pointer0_0)\n\n");
				#endif
				((wxAuiManagerEvent_php*)_this)->SetPane((wxAuiPaneInfo*) object_pointer0_0);

				references->AddReference(pane0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, SetManager)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::SetManager\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::SetManager\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* manager0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&manager0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &manager0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(manager0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(manager0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(manager0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::SetManager((wxAuiManager*) object_pointer0_0)\n\n");
				#endif
				((wxAuiManagerEvent_php*)_this)->SetManager((wxAuiManager*) object_pointer0_0);

				references->AddReference(manager0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, SetDC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::SetDC\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::SetDC\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* pdc0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&pdc0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pdc0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pdc0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pdc0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pdc0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::SetDC((wxDC*) object_pointer0_0)\n\n");
				#endif
				((wxAuiManagerEvent_php*)_this)->SetDC((wxDC*) object_pointer0_0);

				references->AddReference(pdc0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, SetCanVeto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::SetCanVeto\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::SetCanVeto\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool can_veto0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&can_veto0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &can_veto0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::SetCanVeto(can_veto0)\n\n");
				#endif
				((wxAuiManagerEvent_php*)_this)->SetCanVeto(can_veto0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, SetButton)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::SetButton\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::SetButton\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long button0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&button0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &button0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::SetButton((int) button0)\n\n");
				#endif
				((wxAuiManagerEvent_php*)_this)->SetButton((int) button0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, GetVeto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::GetVeto\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::GetVeto\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxAuiManagerEvent::GetVeto())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxAuiManagerEvent_php*)_this)->GetVeto());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, GetPane)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::GetPane\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::GetPane\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::GetPane() to return object pointer\n\n");
				#endif
				wxAuiPaneInfo_php* value_to_return0;
				value_to_return0 = (wxAuiPaneInfo_php*) ((wxAuiManagerEvent_php*)_this)->GetPane();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxAuiPaneInfo_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxAuiPaneInfo));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, GetManager)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::GetManager\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::GetManager\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::GetManager() to return object pointer\n\n");
				#endif
				wxAuiManager_php* value_to_return0;
				value_to_return0 = (wxAuiManager_php*) ((wxAuiManagerEvent_php*)_this)->GetManager();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxAuiManager_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxAuiManager));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, GetDC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::GetDC\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::GetDC\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxAuiManagerEvent::GetDC() to return object pointer\n\n");
				#endif
				wxDC_php* value_to_return0;
				value_to_return0 = (wxDC_php*) ((wxAuiManagerEvent_php*)_this)->GetDC();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDC_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDC));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, GetButton)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::GetButton\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::GetButton\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxAuiManagerEvent::GetButton())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxAuiManagerEvent_php*)_this)->GetButton());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxAuiManagerEvent, CanVeto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAuiManagerEvent::CanVeto\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxAuiManagerEvent::CanVeto\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxAuiManagerEvent){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxAuiManagerEvent::CanVeto())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxAuiManagerEvent_php*)_this)->CanVeto());


				return;
				break;
			}
		}
	}

		
}
void php_wxCalendarEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCalendarEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxCalendarEvent_php* object = static_cast<wxCalendarEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCalendarEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxCalendarEvent, GetWeekDay)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalendarEvent::GetWeekDay\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCalendarEvent::GetWeekDay\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCalendarEvent){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCalendarEvent::GetWeekDay())\n\n");
				#endif
				if(parent_rsrc_type == le_wxCalendarEvent)
				{
					ZVAL_LONG(return_value, ((wxCalendarEvent_php*)_this)->GetWeekDay());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCalendarEvent, SetWeekDay)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalendarEvent::SetWeekDay\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCalendarEvent::SetWeekDay\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCalendarEvent){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long day0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&day0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &day0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCalendarEvent::SetWeekDay((const wxDateTime::WeekDay) day0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxCalendarEvent)
				{
					((wxCalendarEvent_php*)_this)->SetWeekDay((const wxDateTime::WeekDay) day0);
				}


				return;
				break;
			}
		}
	}

		
}
void php_wxColourPickerEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxColourPickerEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxColourPickerEvent_php* object = static_cast<wxColourPickerEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxColourPickerEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxColourPickerEvent, GetColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxColourPickerEvent::GetColour\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxColourPickerEvent::GetColour\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxColourPickerEvent){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxColourPickerEvent::GetColour() to return new object\n\n");
				#endif
				wxColour value_to_return0;
				value_to_return0 = ((wxColourPickerEvent_php*)_this)->GetColour();
				void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxColourPickerEvent, SetColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxColourPickerEvent::SetColour\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxColourPickerEvent::SetColour\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxColourPickerEvent){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* pos0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pos0, php_wxColour_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxColourPickerEvent::SetColour(*(wxColour*) object_pointer0_0)\n\n");
				#endif
				((wxColourPickerEvent_php*)_this)->SetColour(*(wxColour*) object_pointer0_0);

				references->AddReference(pos0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxColourPickerEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxColourPickerEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* generator0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	zval* colour0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zlO' (&generator0, &id0, &colour0, php_wxColour_entry)\n");
		#endif
		char parse_parameters_string[] = "zlO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &generator0, &id0, &colour0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(generator0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(generator0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(colour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxObject*) object_pointer0_0, (int) id0, *(wxColour*) object_pointer0_2)\n");
				#endif
				_this = new wxColourPickerEvent_php((wxObject*) object_pointer0_0, (int) id0, *(wxColour*) object_pointer0_2);

				((wxColourPickerEvent_php*) _this)->references.Initialize();
				((wxColourPickerEvent_php*) _this)->references.AddReference(generator0);
				((wxColourPickerEvent_php*) _this)->references.AddReference(colour0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxColourPickerEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxColourPickerEvent_php*) _this)->evnArray);
		
		array_init(((wxColourPickerEvent_php*) _this)->evnArray);
		
		((wxColourPickerEvent_php*) _this)->phpObj = getThis();
		
		((wxColourPickerEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxColourPickerEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxCollapsiblePaneEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCollapsiblePaneEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxCollapsiblePaneEvent_php* object = static_cast<wxCollapsiblePaneEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCollapsiblePaneEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxCollapsiblePaneEvent, GetCollapsed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCollapsiblePaneEvent::GetCollapsed\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCollapsiblePaneEvent::GetCollapsed\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCollapsiblePaneEvent){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCollapsiblePaneEvent::GetCollapsed())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxCollapsiblePaneEvent_php*)_this)->GetCollapsed());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCollapsiblePaneEvent, SetCollapsed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCollapsiblePaneEvent::SetCollapsed\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCollapsiblePaneEvent::SetCollapsed\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCollapsiblePaneEvent){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool collapsed0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&collapsed0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &collapsed0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCollapsiblePaneEvent::SetCollapsed(collapsed0)\n\n");
				#endif
				((wxCollapsiblePaneEvent_php*)_this)->SetCollapsed(collapsed0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCollapsiblePaneEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCollapsiblePaneEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* generator0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	bool collapsed0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zlb' (&generator0, &id0, &collapsed0)\n");
		#endif
		char parse_parameters_string[] = "zlb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &generator0, &id0, &collapsed0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(generator0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(generator0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxObject*) object_pointer0_0, (int) id0, collapsed0)\n");
				#endif
				_this = new wxCollapsiblePaneEvent_php((wxObject*) object_pointer0_0, (int) id0, collapsed0);

				((wxCollapsiblePaneEvent_php*) _this)->references.Initialize();
				((wxCollapsiblePaneEvent_php*) _this)->references.AddReference(generator0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxCollapsiblePaneEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxCollapsiblePaneEvent_php*) _this)->evnArray);
		
		array_init(((wxCollapsiblePaneEvent_php*) _this)->evnArray);
		
		((wxCollapsiblePaneEvent_php*) _this)->phpObj = getThis();
		
		((wxCollapsiblePaneEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxCollapsiblePaneEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewEvent_php* object = static_cast<wxDataViewEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewEvent, GetCacheFrom)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetCacheFrom\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetCacheFrom\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewEvent::GetCacheFrom())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxDataViewEvent_php*)_this)->GetCacheFrom());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetCacheTo)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetCacheTo\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetCacheTo\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewEvent::GetCacheTo())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxDataViewEvent_php*)_this)->GetCacheTo());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewEvent::GetColumn())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxDataViewEvent_php*)_this)->GetColumn());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetDataBuffer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetDataBuffer\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetDataBuffer\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetDataBuffer()\n\n");
				#endif
				ZVAL_STRING(return_value, (char*) ((wxDataViewEvent_php*)_this)->GetDataBuffer(), 1);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetDataFormat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetDataFormat\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetDataFormat\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetDataFormat() to return new object\n\n");
				#endif
				wxDataFormat value_to_return0;
				value_to_return0 = ((wxDataViewEvent_php*)_this)->GetDataFormat();
				void* ptr = safe_emalloc(1, sizeof(wxDataFormat_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxDataFormat));
				object_init_ex(return_value, php_wxDataFormat_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataFormat));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetDataObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetDataObject\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetDataObject\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetDataObject() to return object pointer\n\n");
				#endif
				wxDataObject_php* value_to_return0;
				value_to_return0 = (wxDataObject_php*) ((wxDataViewEvent_php*)_this)->GetDataObject();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDataObject_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDataObject));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetDataSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetDataSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetDataSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewEvent::GetDataSize())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxDataViewEvent_php*)_this)->GetDataSize());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetDataViewColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetDataViewColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetDataViewColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetDataViewColumn() to return object pointer\n\n");
				#endif
				wxDataViewColumn_php* value_to_return0;
				value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewEvent_php*)_this)->GetDataViewColumn();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDataViewColumn_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDataViewColumn));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetModel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetModel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetModel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetModel() to return object pointer\n\n");
				#endif
				wxDataViewModel_php* value_to_return0;
				value_to_return0 = (wxDataViewModel_php*) ((wxDataViewEvent_php*)_this)->GetModel();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDataViewModel_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDataViewModel));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetPosition() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = ((wxDataViewEvent_php*)_this)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, GetValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetValue\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::GetValue\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetValue() to return object reference\n\n");
				#endif
				wxVariant_php* value_to_return0;
				value_to_return0 = (wxVariant_php*) &((wxDataViewEvent_php*)_this)->GetValue();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxVariant_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxVariant));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, IsEditCancelled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::IsEditCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::IsEditCancelled\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewEvent::IsEditCancelled())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxDataViewEvent_php*)_this)->IsEditCancelled());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, SetColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::SetColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&col0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &col0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetColumn((int) col0)\n\n");
				#endif
				((wxDataViewEvent_php*)_this)->SetColumn((int) col0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, SetDataBuffer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetDataBuffer\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::SetDataBuffer\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* buf0;
	long buf_len0;
	zval* buf0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&buf0, &buf_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &buf0, &buf_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "z";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &buf0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetDataBuffer((void*) buf0)\n\n");
				#endif
				((wxDataViewEvent_php*)_this)->SetDataBuffer((void*) buf0);

				ZVAL_STRING(buf0_ref, (char*) buf0, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, SetDataFormat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetDataFormat\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::SetDataFormat\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* format0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&format0, php_wxDataFormat_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &format0, php_wxDataFormat_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(format0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(format0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(format0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetDataFormat(*(wxDataFormat*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewEvent_php*)_this)->SetDataFormat(*(wxDataFormat*) object_pointer0_0);

				references->AddReference(format0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, SetDataObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetDataObject\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::SetDataObject\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* obj0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&obj0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &obj0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(obj0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(obj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxDataObjectComposite && rsrc_type != le_wxDataObjectSimple && rsrc_type != le_wxTextDataObject && rsrc_type != le_wxURLDataObject && rsrc_type != le_wxFileDataObject && rsrc_type != le_wxBitmapDataObject && rsrc_type != le_wxCustomDataObject))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(obj0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetDataObject((wxDataObject*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewEvent_php*)_this)->SetDataObject((wxDataObject*) object_pointer0_0);

				references->AddReference(obj0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, SetDataSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetDataSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::SetDataSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long size0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&size0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetDataSize((size_t) size0)\n\n");
				#endif
				((wxDataViewEvent_php*)_this)->SetDataSize((size_t) size0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, SetDataViewColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetDataViewColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::SetDataViewColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* col0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&col0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(col0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(col0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(col0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetDataViewColumn((wxDataViewColumn*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewEvent_php*)_this)->SetDataViewColumn((wxDataViewColumn*) object_pointer0_0);

				references->AddReference(col0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, SetModel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetModel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::SetModel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* model0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&model0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &model0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(model0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(model0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxDataViewListModel && rsrc_type != le_wxDataViewIndexListModel && rsrc_type != le_wxDataViewListStore && rsrc_type != le_wxDataViewVirtualListModel && rsrc_type != le_wxDataViewTreeStore))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(model0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetModel((wxDataViewModel*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewEvent_php*)_this)->SetModel((wxDataViewModel*) object_pointer0_0);

				references->AddReference(model0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, SetValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetValue\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewEvent::SetValue\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewEvent){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* value0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&value0, php_wxVariant_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0, php_wxVariant_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(value0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(value0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetValue(*(wxVariant*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewEvent_php*)_this)->SetValue(*(wxVariant*) object_pointer0_0);

				references->AddReference(value0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandType0;
	long winid0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &winid0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &winid0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewEvent_php();

				((wxDataViewEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif
				_this = new wxDataViewEvent_php((wxEventType) commandType0);

				((wxDataViewEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) winid0)\n");
				#endif
				_this = new wxDataViewEvent_php((wxEventType) commandType0, (int) winid0);

				((wxDataViewEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewEvent_php*) _this)->evnArray);
		
		array_init(((wxDataViewEvent_php*) _this)->evnArray);
		
		((wxDataViewEvent_php*) _this)->phpObj = getThis();
		
		((wxDataViewEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDateEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDateEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDateEvent_php* object = static_cast<wxDateEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDateEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDateEvent, GetDate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDateEvent::GetDate\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDateEvent::GetDate\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDateEvent){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDateEvent::GetDate() to return timestamp\n\n");
				#endif
				long value_to_return0;
				if(parent_rsrc_type == le_wxCalendarEvent)
				{
					value_to_return0 = ((wxCalendarEvent_php*)_this)->GetDate().GetTicks();
				}
				else if(parent_rsrc_type == le_wxDateEvent)
				{
					value_to_return0 = ((wxDateEvent_php*)_this)->GetDate().GetTicks();
				}
				ZVAL_LONG(return_value, value_to_return0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDateEvent, SetDate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDateEvent::SetDate\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDateEvent::SetDate\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDateEvent){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long date0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&date0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &date0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDateEvent::SetDate(wxDateTime(date0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxCalendarEvent)
				{
					((wxCalendarEvent_php*)_this)->SetDate(wxDateTime(date0));
				}
				else if(parent_rsrc_type == le_wxDateEvent)
				{
					((wxDateEvent_php*)_this)->SetDate(wxDateTime(date0));
				}


				return;
				break;
			}
		}
	}

		
}
void php_wxEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxEvent_php* object = static_cast<wxEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxEvent, GetEventCategory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetEventCategory\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::GetEventCategory\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::GetEventCategory())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxEvent_php*)_this)->GetEventCategory());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, GetEventObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetEventObject\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::GetEventObject\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::GetEventObject() to return object pointer\n\n");
				#endif
				wxObject_php* value_to_return0;
				value_to_return0 = (wxObject_php*) ((wxEvent_php*)_this)->GetEventObject();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxObject_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxObject));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, GetEventType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetEventType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::GetEventType\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::GetEventType())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxEvent_php*)_this)->GetEventType());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, GetId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetId\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::GetId\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::GetId())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxEvent_php*)_this)->GetId());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, GetSkipped)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetSkipped\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::GetSkipped\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvent::GetSkipped())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxEvent_php*)_this)->GetSkipped());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, GetTimestamp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetTimestamp\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::GetTimestamp\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::GetTimestamp())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxEvent_php*)_this)->GetTimestamp());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, IsCommandEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::IsCommandEvent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::IsCommandEvent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvent::IsCommandEvent())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxEvent_php*)_this)->IsCommandEvent());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, ResumePropagation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::ResumePropagation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::ResumePropagation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long propagationLevel0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&propagationLevel0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &propagationLevel0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::ResumePropagation((int) propagationLevel0)\n\n");
				#endif
				((wxEvent_php*)_this)->ResumePropagation((int) propagationLevel0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, SetEventObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::SetEventObject\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::SetEventObject\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* object0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&object0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &object0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(object0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(object0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(object0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetEventObject((wxObject*) object_pointer0_0)\n\n");
				#endif
				((wxEvent_php*)_this)->SetEventObject((wxObject*) object_pointer0_0);

				references->AddReference(object0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, SetEventType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::SetEventType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::SetEventType\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long type0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&type0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetEventType((wxEventType) type0)\n\n");
				#endif
				((wxEvent_php*)_this)->SetEventType((wxEventType) type0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, SetId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::SetId\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::SetId\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&id0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetId((int) id0)\n\n");
				#endif
				((wxEvent_php*)_this)->SetId((int) id0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, SetTimestamp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::SetTimestamp\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::SetTimestamp\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long timeStamp0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&timeStamp0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &timeStamp0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetTimestamp()\n\n");
				#endif
				((wxEvent_php*)_this)->SetTimestamp();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetTimestamp((long) timeStamp0)\n\n");
				#endif
				((wxEvent_php*)_this)->SetTimestamp((long) timeStamp0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, ShouldPropagate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::ShouldPropagate\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::ShouldPropagate\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvent::ShouldPropagate())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxEvent_php*)_this)->ShouldPropagate());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, Skip)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::Skip\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::Skip\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool skip0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&skip0)\n");
		#endif
		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &skip0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::Skip()\n\n");
				#endif
				((wxEvent_php*)_this)->Skip();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::Skip(skip0)\n\n");
				#endif
				((wxEvent_php*)_this)->Skip(skip0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, StopPropagation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::StopPropagation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::StopPropagation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvent){
				references = &((wxEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuEvent) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxKeyEvent) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCommandEvent) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCloseEvent) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxActivateEvent) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManagerEvent) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSizeEvent) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMoveEvent) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimerEvent) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxThreadEvent) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollWinEvent) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSysColourChangedEvent) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcessEvent) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEraseEvent) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSetCursorEvent) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxIdleEvent) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintEvent) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaletteChangedEvent) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInitDialogEvent) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMaximizeEvent) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNavigationKeyEvent) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFocusEvent) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcherEvent) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDisplayChangedEvent) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalculateLayoutEvent) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxQueryLayoutInfoEvent) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIconEvent) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::StopPropagation())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxEvent_php*)_this)->StopPropagation());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	long eventType0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&id0, &eventType0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &eventType0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxEvent_php();

				((wxEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif
				_this = new wxEvent_php((int) id0);

				((wxEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (wxEventType) eventType0)\n");
				#endif
				_this = new wxEvent_php((int) id0, (wxEventType) eventType0);

				((wxEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxEvent_php*) _this)->evnArray);
		
		array_init(((wxEvent_php*) _this)->evnArray);
		
		((wxEvent_php*) _this)->phpObj = getThis();
		
		((wxEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxEvent, __get)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::__get\n");
	php_printf("===========================================\n");
	#endif
	
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	
	char* name;
	int name_len;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvent::wxEvent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
		}
	}
	else
	{
		zend_error(E_ERROR, "Could not process __get call as static\n");
	}
	
	char parse_parameters_string[] = "s";
	
	if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name, &name_len ) == FAILURE)
	{
		RETVAL_NULL();
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Property to get: %s\n", name);
	php_printf("===========================================\n\n");
	#endif
	
	if(false){}
	else if(strcmp("m_propagationLevel", name) == 0)
	{
		RETVAL_LONG(*((int*)((wxEvent_php*) _this)->properties[0]));
	}
	else
	{
		RETVAL_NULL();
	}
	
}
wxEvent* wxEvent_php::Clone()const
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEvent::Clone\n");
	php_printf("===========================================\n");
	#endif
	
	zval* arguments[1];
	arguments[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "Clone", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 0, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'Clone'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		if(Z_TYPE_P(return_value) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(return_value), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
		{
			id_to_find = Z_RESVAL_P(*tmp);
			return_object = zend_list_find(id_to_find, &rsrc_type);
		}
		return (wxEvent*) return_object;
	

}
void php_wxEventBlocker_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEventBlocker_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxEventBlocker_php* object = static_cast<wxEventBlocker_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEventBlocker done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxEventBlocker, Block)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEventBlocker::Block\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEventBlocker::Block\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEventBlocker){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long eventType0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&eventType0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEventBlocker::Block((wxEventType) eventType0)\n\n");
				#endif
				((wxEventBlocker_php*)_this)->Block((wxEventType) eventType0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEventBlocker, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEventBlocker::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	long type0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&win0, &type0)\n");
		#endif
		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0, &type0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxEventBlocker_php((wxWindow*) object_pointer0_0);

				((wxEventBlocker_php*) _this)->references.Initialize();
				((wxEventBlocker_php*) _this)->references.AddReference(win0);
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxEventType) type0)\n");
				#endif
				_this = new wxEventBlocker_php((wxWindow*) object_pointer0_0, (wxEventType) type0);

				((wxEventBlocker_php*) _this)->references.Initialize();
				((wxEventBlocker_php*) _this)->references.AddReference(win0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxEventBlocker);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxEventBlocker_php*) _this)->evnArray);
		
		array_init(((wxEventBlocker_php*) _this)->evnArray);
		
		((wxEventBlocker_php*) _this)->phpObj = getThis();
		
		((wxEventBlocker_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxEventBlocker_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxEvtHandler_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEvtHandler_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxEvtHandler_php* object = static_cast<wxEvtHandler_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEvtHandler done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxEvtHandler, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxEvtHandler_php();

				((wxEvtHandler_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxEvtHandler);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxEvtHandler_php*) _this)->evnArray);
		
		array_init(((wxEvtHandler_php*) _this)->evnArray);
		
		((wxEvtHandler_php*) _this)->phpObj = getThis();
		
		((wxEvtHandler_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxEvtHandler_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void wxEvtHandler_php::onEvent(wxEvent& evnt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEvtHandler::onEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arg[1];
	MAKE_STD_ZVAL(arg[0]);
	char _wxResource[] = "wxResource";
	TSRMLS_FETCH();

	if(0)
	{}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxMenuEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxMenuEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxMenuEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxMenuEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxKeyEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxKeyEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxKeyEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxKeyEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCommandEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCommandEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCommandEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxCommandEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxNotifyEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxNotifyEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxNotifyEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxNotifyEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxTreeEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxTreeEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxTreeEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxTreeEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxBookCtrlEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxBookCtrlEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxBookCtrlEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxBookCtrlEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxAuiNotebookEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxAuiNotebookEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxAuiNotebookEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxAuiNotebookEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxAuiToolBarEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxAuiToolBarEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxAuiToolBarEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxAuiToolBarEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxListEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxListEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxListEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxListEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSpinEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSpinEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSpinEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxSpinEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSplitterEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSplitterEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSplitterEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxSplitterEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSpinDoubleEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSpinDoubleEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSpinDoubleEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxSpinDoubleEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxGridSizeEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxGridSizeEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxGridSizeEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxGridSizeEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxWizardEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxWizardEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxWizardEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxWizardEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxGridEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxGridEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxGridEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxGridEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxGridRangeSelectEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxGridRangeSelectEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxGridRangeSelectEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxGridRangeSelectEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxDataViewEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxDataViewEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxDataViewEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxDataViewEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHeaderCtrlEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHeaderCtrlEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHeaderCtrlEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxHeaderCtrlEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxRibbonBarEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxRibbonBarEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxRibbonBarEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxRibbonBarEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxStyledTextEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxStyledTextEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxStyledTextEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxStyledTextEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxChildFocusEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxChildFocusEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxChildFocusEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxChildFocusEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHtmlCellEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHtmlCellEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHtmlCellEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxHtmlCellEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHtmlLinkEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHtmlLinkEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHtmlLinkEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxHtmlLinkEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHyperlinkEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHyperlinkEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHyperlinkEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxHyperlinkEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxColourPickerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxColourPickerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxColourPickerEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxColourPickerEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFontPickerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFontPickerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFontPickerEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxFontPickerEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxScrollEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxScrollEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxScrollEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxScrollEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxWindowModalDialogEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxWindowModalDialogEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxWindowModalDialogEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxWindowModalDialogEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxDateEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxDateEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxDateEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxDateEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCalendarEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCalendarEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCalendarEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxCalendarEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxWindowCreateEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxWindowCreateEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxWindowCreateEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxWindowCreateEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxWindowDestroyEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxWindowDestroyEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxWindowDestroyEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxWindowDestroyEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxUpdateUIEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxUpdateUIEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxUpdateUIEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxUpdateUIEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHelpEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHelpEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHelpEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxHelpEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxGridEditorCreatedEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxGridEditorCreatedEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxGridEditorCreatedEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxGridEditorCreatedEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCollapsiblePaneEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCollapsiblePaneEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCollapsiblePaneEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxCollapsiblePaneEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxClipboardTextEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxClipboardTextEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxClipboardTextEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxClipboardTextEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFileCtrlEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFileCtrlEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFileCtrlEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxFileCtrlEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSashEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSashEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSashEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxSashEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFileDirPickerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFileDirPickerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFileDirPickerEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxFileDirPickerEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxContextMenuEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxContextMenuEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxContextMenuEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxContextMenuEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxRibbonButtonBarEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxRibbonButtonBarEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxRibbonButtonBarEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxRibbonButtonBarEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxRibbonGalleryEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxRibbonGalleryEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxRibbonGalleryEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxRibbonGalleryEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCloseEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCloseEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCloseEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxCloseEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxActivateEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxActivateEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxActivateEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxActivateEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxAuiManagerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxAuiManagerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxAuiManagerEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxAuiManagerEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSizeEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSizeEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSizeEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxSizeEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxMouseEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxMouseEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxMouseEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxMouseEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxMoveEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxMoveEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxMoveEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxMoveEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxTimerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxTimerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxTimerEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxTimerEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxThreadEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxThreadEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxThreadEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxThreadEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxScrollWinEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxScrollWinEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxScrollWinEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxScrollWinEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSysColourChangedEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSysColourChangedEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSysColourChangedEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxSysColourChangedEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxProcessEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxProcessEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxProcessEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxProcessEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxEraseEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxEraseEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxEraseEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxEraseEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSetCursorEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSetCursorEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSetCursorEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxSetCursorEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxIdleEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxIdleEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxIdleEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxIdleEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxPaintEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxPaintEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxPaintEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxPaintEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxPaletteChangedEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxPaletteChangedEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxPaletteChangedEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxPaletteChangedEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxInitDialogEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxInitDialogEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxInitDialogEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxInitDialogEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxMaximizeEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxMaximizeEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxMaximizeEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxMaximizeEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxNavigationKeyEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxNavigationKeyEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxNavigationKeyEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxNavigationKeyEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFocusEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFocusEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFocusEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxFocusEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFileSystemWatcherEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFileSystemWatcherEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFileSystemWatcherEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxFileSystemWatcherEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxDisplayChangedEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxDisplayChangedEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxDisplayChangedEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxDisplayChangedEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCalculateLayoutEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCalculateLayoutEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCalculateLayoutEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxCalculateLayoutEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxQueryLayoutInfoEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxQueryLayoutInfoEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxQueryLayoutInfoEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxQueryLayoutInfoEvent));
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxTaskBarIconEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxTaskBarIconEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxTaskBarIconEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxTaskBarIconEvent));
	}
		else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxEvent));
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Event type not declared\n\n");
		#endif
		
		wxString errorMsg;
		errorMsg += "Failed to pass as argument event of type: ";
		errorMsg += evnt.GetClassInfo()->GetClassName();
		wxMessageBox(errorMsg);
	}

	char* wxname;
	zval dummy;
	zval* fc_name;
	wxCommandEvent* ce;
	wxPhpClientData* co;

	ce = (wxCommandEvent*) evnt.m_callbackUserData;
	co = (wxPhpClientData*) ce->GetClientObject();

	MAKE_STD_ZVAL(fc_name);
	
	wxname = (char*)malloc(sizeof(wxChar)*(ce->GetString().size()+1));
	strcpy(wxname, (const char *) ce->GetString().char_str());
	
	ZVAL_STRING(fc_name, wxname, 1);
	
	//Free allocated memory since ZVAL_STRING does a copy of it
	free(wxname);

	if(call_user_function(NULL, &(co->phpObj), fc_name, &dummy, 1, arg TSRMLS_CC) == FAILURE)
	{
		wxString errorMessage = "Failed to call method: '";
		errorMessage += ce->GetString().char_str();
		errorMessage += "'";
		
		wxMessageBox(errorMessage);
	}
	
}
PHP_METHOD(php_wxEvtHandler, Connect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::Connect\n");
	php_printf("===========================================\n");
	php_printf("Parameters received: %d\n", ZEND_NUM_ARGS());
	#endif
	
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	int valid = 1;
	char _wxResource[] = "wxResource";
	wxEvtHandler *_this;

	if(getThis())
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			return;
		}
	}
	else
	{
		zend_error(E_ERROR, "Failed to get parent object of Connect method");
	}
	
	id_to_find = Z_RESVAL_P(*tmp);
	_this = (wxEvtHandler*) zend_list_find(id_to_find, &rsrc_type);

	zval* fc;
	long flag, id0 = 0, id1 = 0;

	zval** fc_obj;
	zval** fc_name;
	char* ct;
	int args = ZEND_NUM_ARGS();
	
	//To supress some warnings due to passing a string directly
	char parse_parameters_4[] = "lllz";
	char parse_parameters_3[] = "llz";
	char parse_parameters_2[] = "lz";

	switch(args)
	{
		case 4:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Parsing parameters with \"lllz\"\n");
			#endif
			if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, args TSRMLS_CC, parse_parameters_4, &id0, &id1, &flag , (void**)&fc) == FAILURE)
			{
				zend_error(E_ERROR, "Incorrect type of parameters");
				return;
			}
			break;
		case 3:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Parsing parameters with \"llz\"\n");
			#endif
			if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, args TSRMLS_CC, parse_parameters_3, &id0, &flag , (void**)&fc) == FAILURE)
			{
				zend_error(E_ERROR, "Incorrect type of parameters");
				return;
			}
			break;
		case 2:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Parsing parameters with \"lz\"\n");
			#endif
			if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, args TSRMLS_CC, parse_parameters_2, &flag , (void**)&fc) == FAILURE)
			{
				zend_error(E_ERROR, "Incorrect type of parameters");
				return;
			}
			break;
		default:
			zend_error(E_ERROR, "Wrong amount of parameters");
	}
	
	zend_hash_index_find(HASH_OF(fc), 0, (void**)&fc_obj);
	zend_hash_index_find(HASH_OF(fc), 1, (void**)&fc_name);
	Z_ADDREF_P(*fc_obj);
	
	ct = (*fc_name)->value.str.val;

	wxCommandEvent* ce = new wxCommandEvent();
	ce->SetString(wxString::Format(wxT("%s"), ct));
	ce->SetClientObject(new wxPhpClientData(*fc_obj));
	
	switch(args)
	{
		case 4:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Executing: _this->Connect(id0, id1, flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);\n");
			php_printf("Object id: %d Object last id: %d Event type: %d\n", (int)id0, (int)id1, (int)flag);
			#endif
			_this->Connect(id0, id1, flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);
			break;
		case 3:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Executing: _this->Connect(id0, flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);\n");
			php_printf("Object id: %d Event type: %d\n", (int)id0, (int)flag);
			#endif
			_this->Connect(id0, flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);
			break;
		case 2:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Executing: _this->Connect(flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);\n");
			php_printf("Event type: %d\n", (int)flag);
			#endif
			_this->Connect(flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);
			break;
		default:
			wxMessageBox(_T("Failed to create event\n"));
			break;
	}	
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxEvtHandler, AddFilter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::AddFilter\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::AddFilter\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* filter0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&filter0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filter0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(filter0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(filter0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(filter0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxEvtHandler::AddFilter((wxEventFilter*) object_pointer0_0)\n\n");
				#endif
				wxEvtHandler::AddFilter((wxEventFilter*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, AddPendingEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::AddPendingEvent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::AddPendingEvent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* event0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event0, php_wxEvent_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0, php_wxEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::AddPendingEvent(*(wxEvent*) object_pointer0_0)\n\n");
				#endif
				((wxEvtHandler_php*)_this)->AddPendingEvent(*(wxEvent*) object_pointer0_0);

				references->AddReference(event0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, DeletePendingEvents)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::DeletePendingEvents\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::DeletePendingEvents\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::DeletePendingEvents()\n\n");
				#endif
				((wxEvtHandler_php*)_this)->DeletePendingEvents();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, GetEvtHandlerEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::GetEvtHandlerEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::GetEvtHandlerEnabled\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::GetEvtHandlerEnabled())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)_this)->GetEvtHandlerEnabled());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, GetNextHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::GetNextHandler\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::GetNextHandler\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::GetNextHandler() to return object pointer\n\n");
				#endif
				wxEvtHandler_php* value_to_return0;
				value_to_return0 = (wxEvtHandler_php*) ((wxEvtHandler_php*)_this)->GetNextHandler();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxEvtHandler_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxEvtHandler));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, GetPreviousHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::GetPreviousHandler\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::GetPreviousHandler\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::GetPreviousHandler() to return object pointer\n\n");
				#endif
				wxEvtHandler_php* value_to_return0;
				value_to_return0 = (wxEvtHandler_php*) ((wxEvtHandler_php*)_this)->GetPreviousHandler();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxEvtHandler_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxEvtHandler));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, IsUnlinked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::IsUnlinked\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::IsUnlinked\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::IsUnlinked())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)_this)->IsUnlinked());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, ProcessEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::ProcessEvent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::ProcessEvent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* event0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event0, php_wxEvent_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0, php_wxEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::ProcessEvent(*(wxEvent*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)_this)->ProcessEvent(*(wxEvent*) object_pointer0_0));

				references->AddReference(event0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, ProcessEventLocally)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::ProcessEventLocally\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::ProcessEventLocally\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* event0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event0, php_wxEvent_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0, php_wxEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::ProcessEventLocally(*(wxEvent*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)_this)->ProcessEventLocally(*(wxEvent*) object_pointer0_0));

				references->AddReference(event0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, ProcessPendingEvents)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::ProcessPendingEvents\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::ProcessPendingEvents\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::ProcessPendingEvents()\n\n");
				#endif
				((wxEvtHandler_php*)_this)->ProcessPendingEvents();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, QueueEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::QueueEvent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::QueueEvent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* event0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&event0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::QueueEvent((wxEvent*) object_pointer0_0)\n\n");
				#endif
				((wxEvtHandler_php*)_this)->QueueEvent((wxEvent*) object_pointer0_0);

				references->AddReference(event0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, RemoveFilter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::RemoveFilter\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::RemoveFilter\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* filter0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&filter0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filter0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(filter0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(filter0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(filter0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxEvtHandler::RemoveFilter((wxEventFilter*) object_pointer0_0)\n\n");
				#endif
				wxEvtHandler::RemoveFilter((wxEventFilter*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, SafelyProcessEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::SafelyProcessEvent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::SafelyProcessEvent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* event0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event0, php_wxEvent_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0, php_wxEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::SafelyProcessEvent(*(wxEvent*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)_this)->SafelyProcessEvent(*(wxEvent*) object_pointer0_0));

				references->AddReference(event0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, SetEvtHandlerEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::SetEvtHandlerEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::SetEvtHandlerEnabled\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool enabled0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&enabled0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &enabled0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::SetEvtHandlerEnabled(enabled0)\n\n");
				#endif
				((wxEvtHandler_php*)_this)->SetEvtHandlerEnabled(enabled0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, SetNextHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::SetNextHandler\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::SetNextHandler\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* handler0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&handler0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &handler0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(handler0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(handler0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(handler0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::SetNextHandler((wxEvtHandler*) object_pointer0_0)\n\n");
				#endif
				((wxEvtHandler_php*)_this)->SetNextHandler((wxEvtHandler*) object_pointer0_0);

				references->AddReference(handler0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEvtHandler, SetPreviousHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::SetPreviousHandler\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::SetPreviousHandler\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* handler0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&handler0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &handler0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(handler0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(handler0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(handler0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::SetPreviousHandler((wxEvtHandler*) object_pointer0_0)\n\n");
				#endif
				((wxEvtHandler_php*)_this)->SetPreviousHandler((wxEvtHandler*) object_pointer0_0);

				references->AddReference(handler0);

				return;
				break;
			}
		}
	}

		
}
bool wxEvtHandler_php::TryAfter(wxEvent& event)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEvtHandler::TryAfter\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "TryAfter", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxEvent_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&event, le_wxEvent));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxEvtHandler::TryAfter(event);

}
bool wxEvtHandler_php::TryBefore(wxEvent& event)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEvtHandler::TryBefore\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "TryBefore", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxEvent_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&event, le_wxEvent));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxEvtHandler::TryBefore(event);

}
PHP_METHOD(php_wxEvtHandler, Unlink)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::Unlink\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEvtHandler::Unlink\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEvtHandler){
				references = &((wxEvtHandler_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindow) && (!reference_type_found)){
				references = &((wxWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNonOwnedWindow) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTopLevelWindow) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupWindow) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControl) && (!reference_type_found)){
				references = &((wxControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStatusBar) && (!reference_type_found)){
				references = &((wxStatusBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnyButton) && (!reference_type_found)){
				references = &((wxAnyButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxButton) && (!reference_type_found)){
				references = &((wxButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapButton) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToggleButton) && (!reference_type_found)){
				references = &((wxToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapToggleButton) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeCtrl) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxControlWithItems) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListBox) && (!reference_type_found)){
				references = &((wxListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckListBox) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRearrangeList) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoice) && (!reference_type_found)){
				references = &((wxChoice_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlBase) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebook) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListbook) && (!reference_type_found)){
				references = &((wxListbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChoicebook) && (!reference_type_found)){
				references = &((wxChoicebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotebook) && (!reference_type_found)){
				references = &((wxNotebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreebook) && (!reference_type_found)){
				references = &((wxTreebook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolbook) && (!reference_type_found)){
				references = &((wxToolbook_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAnimationCtrl) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextCtrl) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollBar) && (!reference_type_found)){
				references = &((wxScrollBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticText) && (!reference_type_found)){
				references = &((wxStaticText_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticLine) && (!reference_type_found)){
				references = &((wxStaticLine_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBox) && (!reference_type_found)){
				references = &((wxStaticBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStaticBitmap) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCheckBox) && (!reference_type_found)){
				references = &((wxCheckBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextCtrl) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSearchCtrl) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboBox) && (!reference_type_found)){
				references = &((wxComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBitmapComboBox) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBar) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListCtrl) && (!reference_type_found)){
				references = &((wxListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListView) && (!reference_type_found)){
				references = &((wxListView_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioBox) && (!reference_type_found)){
				references = &((wxRadioBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRadioButton) && (!reference_type_found)){
				references = &((wxRadioButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSlider) && (!reference_type_found)){
				references = &((wxSlider_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrl) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinButton) && (!reference_type_found)){
				references = &((wxSpinButton_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGauge) && (!reference_type_found)){
				references = &((wxGauge_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkCtrl) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinCtrlDouble) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericDirCtrl) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarCtrl) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPickerBase) && (!reference_type_found)){
				references = &((wxPickerBase_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerCtrl) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerCtrl) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFilePickerCtrl) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirPickerCtrl) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimePickerCtrl) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxToolBar) && (!reference_type_found)){
				references = &((wxToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDatePickerCtrl) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePane) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxComboCtrl) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCtrl) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListCtrl) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeCtrl) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrl) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlSimple) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrl) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxInfoBar) && (!reference_type_found)){
				references = &((wxInfoBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonControl) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBar) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBar) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGallery) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPage) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonPanel) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonToolBar) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterWindow) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPanel) && (!reference_type_found)){
				references = &((wxPanel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrolledWindow) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlWindow) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGrid) && (!reference_type_found)){
				references = &((wxGrid_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewCanvas) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPage) && (!reference_type_found)){
				references = &((wxWizardPage_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardPageSimple) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEditableListBox) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHScrolledWindow) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewControlBar) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenuBar) && (!reference_type_found)){
				references = &((wxMenuBar_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBannerWindow) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIClientWindow) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeListCtrl) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashWindow) && (!reference_type_found)){
				references = &((wxSashWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashLayoutWindow) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpWindow) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxValidator) && (!reference_type_found)){
				references = &((wxValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextValidator) && (!reference_type_found)){
				references = &((wxTextValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericValidator) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMenu) && (!reference_type_found)){
				references = &((wxMenu_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiManager) && (!reference_type_found)){
				references = &((wxAuiManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEventsManager) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTimer) && (!reference_type_found)){
				references = &((wxTimer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxEventBlocker) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProcess) && (!reference_type_found)){
				references = &((wxProcess_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileSystemWatcher) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTaskBarIcon) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotificationMessage) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::Unlink()\n\n");
				#endif
				((wxEvtHandler_php*)_this)->Unlink();


				return;
				break;
			}
		}
	}

		
}
void php_wxKeyEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxKeyEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxKeyEvent_php* object = static_cast<wxKeyEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxKeyEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxKeyEvent, DoAllowNextEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::DoAllowNextEvent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyEvent::DoAllowNextEvent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyEvent){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyEvent::DoAllowNextEvent()\n\n");
				#endif
				((wxKeyEvent_php*)_this)->DoAllowNextEvent();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyEvent, GetKeyCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetKeyCode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyEvent::GetKeyCode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyEvent){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetKeyCode())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxKeyEvent_php*)_this)->GetKeyCode());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyEvent){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long* x1;
	zval* x1_ref;
	long* y1;
	zval* y1_ref;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (x1, y1)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, x1, y1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &x1_ref, &y1_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyEvent::GetPosition() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = ((wxKeyEvent_php*)_this)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyEvent::GetPosition((long*) x1, (long*) y1)\n\n");
				#endif
				((wxKeyEvent_php*)_this)->GetPosition((long*) x1, (long*) y1);

				size_t elements_returned1_0 = sizeof(x1)/sizeof(*x1);
				array_init(x1_ref);
				for(size_t i=0; i<elements_returned1_0; i++)
				{
					add_next_index_long(x1_ref, x1[i]);
				}
				size_t elements_returned1_1 = sizeof(y1)/sizeof(*y1);
				array_init(y1_ref);
				for(size_t i=0; i<elements_returned1_1; i++)
				{
					add_next_index_long(y1_ref, y1[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyEvent, GetRawKeyCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetRawKeyCode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyEvent::GetRawKeyCode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyEvent){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetRawKeyCode())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxKeyEvent_php*)_this)->GetRawKeyCode());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyEvent, GetRawKeyFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetRawKeyFlags\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyEvent::GetRawKeyFlags\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyEvent){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetRawKeyFlags())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxKeyEvent_php*)_this)->GetRawKeyFlags());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyEvent, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyEvent::GetX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyEvent){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetX())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxKeyEvent_php*)_this)->GetX());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyEvent, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyEvent::GetY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyEvent){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetY())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxKeyEvent_php*)_this)->GetY());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyEvent, IsKeyInCategory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::IsKeyInCategory\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyEvent::IsKeyInCategory\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyEvent){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long category0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&category0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &category0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyEvent::IsKeyInCategory((int) category0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxKeyEvent_php*)_this)->IsKeyInCategory((int) category0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyEvent, IsNextEventAllowed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::IsNextEventAllowed\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxKeyEvent::IsNextEventAllowed\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxKeyEvent){
				references = &((wxKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyEvent::IsNextEventAllowed())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxKeyEvent_php*)_this)->IsNextEventAllowed());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxKeyEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long keyEventType0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&keyEventType0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &keyEventType0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxKeyEvent_php();

				((wxKeyEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) keyEventType0)\n");
				#endif
				_this = new wxKeyEvent_php((wxEventType) keyEventType0);

				((wxKeyEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxKeyEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxKeyEvent_php*) _this)->evnArray);
		
		array_init(((wxKeyEvent_php*) _this)->evnArray);
		
		((wxKeyEvent_php*) _this)->phpObj = getThis();
		
		((wxKeyEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxKeyEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxScrollWinEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxScrollWinEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxScrollWinEvent_php* object = static_cast<wxScrollWinEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxScrollWinEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxScrollWinEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandType0;
	long pos0;
	long orientation0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lll' (&commandType0, &pos0, &orientation0)\n");
		#endif
		char parse_parameters_string[] = "|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &pos0, &orientation0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxScrollWinEvent_php();

				((wxScrollWinEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif
				_this = new wxScrollWinEvent_php((wxEventType) commandType0);

				((wxScrollWinEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) pos0)\n");
				#endif
				_this = new wxScrollWinEvent_php((wxEventType) commandType0, (int) pos0);

				((wxScrollWinEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) pos0, (int) orientation0)\n");
				#endif
				_this = new wxScrollWinEvent_php((wxEventType) commandType0, (int) pos0, (int) orientation0);

				((wxScrollWinEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxScrollWinEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxScrollWinEvent_php*) _this)->evnArray);
		
		array_init(((wxScrollWinEvent_php*) _this)->evnArray);
		
		((wxScrollWinEvent_php*) _this)->phpObj = getThis();
		
		((wxScrollWinEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxScrollWinEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxScrollWinEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScrollWinEvent::SetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScrollWinEvent){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxScrollWinEvent::SetPosition((int) pos0)\n\n");
				#endif
				((wxScrollWinEvent_php*)_this)->SetPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxScrollWinEvent, SetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::SetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScrollWinEvent::SetOrientation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScrollWinEvent){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long orient0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&orient0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &orient0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxScrollWinEvent::SetOrientation((int) orient0)\n\n");
				#endif
				((wxScrollWinEvent_php*)_this)->SetOrientation((int) orient0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxScrollWinEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScrollWinEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScrollWinEvent){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxScrollWinEvent::GetPosition())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxScrollWinEvent_php*)_this)->GetPosition());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxScrollWinEvent, GetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::GetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScrollWinEvent::GetOrientation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScrollWinEvent){
				references = &((wxScrollWinEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxScrollWinEvent::GetOrientation())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxScrollWinEvent_php*)_this)->GetOrientation());


				return;
				break;
			}
		}
	}

		
}
void php_wxSysColourChangedEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSysColourChangedEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxSysColourChangedEvent_php* object = static_cast<wxSysColourChangedEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSysColourChangedEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxSysColourChangedEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSysColourChangedEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxSysColourChangedEvent_php();

				((wxSysColourChangedEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxSysColourChangedEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxSysColourChangedEvent_php*) _this)->evnArray);
		
		array_init(((wxSysColourChangedEvent_php*) _this)->evnArray);
		
		((wxSysColourChangedEvent_php*) _this)->phpObj = getThis();
		
		((wxSysColourChangedEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxSysColourChangedEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxWindowCreateEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWindowCreateEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxWindowCreateEvent_php* object = static_cast<wxWindowCreateEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxWindowCreateEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxWindowCreateEvent, GetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWindowCreateEvent::GetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxWindowCreateEvent::GetWindow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxWindowCreateEvent){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxWindowCreateEvent::GetWindow() to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxWindowCreateEvent_php*)_this)->GetWindow();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxWindowCreateEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWindowCreateEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&win0)\n");
		#endif
		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxWindowCreateEvent_php();

				((wxWindowCreateEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxWindowCreateEvent_php((wxWindow*) object_pointer0_0);

				((wxWindowCreateEvent_php*) _this)->references.Initialize();
				((wxWindowCreateEvent_php*) _this)->references.AddReference(win0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxWindowCreateEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxWindowCreateEvent_php*) _this)->evnArray);
		
		array_init(((wxWindowCreateEvent_php*) _this)->evnArray);
		
		((wxWindowCreateEvent_php*) _this)->phpObj = getThis();
		
		((wxWindowCreateEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxWindowCreateEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxPaintEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPaintEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxPaintEvent_php* object = static_cast<wxPaintEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxPaintEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxPaintEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPaintEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxPaintEvent_php();

				((wxPaintEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif
				_this = new wxPaintEvent_php((int) id0);

				((wxPaintEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxPaintEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxPaintEvent_php*) _this)->evnArray);
		
		array_init(((wxPaintEvent_php*) _this)->evnArray);
		
		((wxPaintEvent_php*) _this)->phpObj = getThis();
		
		((wxPaintEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxPaintEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxMaximizeEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMaximizeEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxMaximizeEvent_php* object = static_cast<wxMaximizeEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMaximizeEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxMaximizeEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMaximizeEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMaximizeEvent_php();

				((wxMaximizeEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif
				_this = new wxMaximizeEvent_php((int) id0);

				((wxMaximizeEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMaximizeEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMaximizeEvent_php*) _this)->evnArray);
		
		array_init(((wxMaximizeEvent_php*) _this)->evnArray);
		
		((wxMaximizeEvent_php*) _this)->phpObj = getThis();
		
		((wxMaximizeEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMaximizeEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxUpdateUIEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxUpdateUIEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxUpdateUIEvent_php* object = static_cast<wxUpdateUIEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxUpdateUIEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxUpdateUIEvent, CanUpdate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::CanUpdate\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::CanUpdate\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* window0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::CanUpdate((wxWindow*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxUpdateUIEvent::CanUpdate((wxWindow*) object_pointer0_0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, Check)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::Check\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::Check\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool check0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&check0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &check0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxUpdateUIEvent::Check(check0)\n\n");
				#endif
				((wxUpdateUIEvent_php*)_this)->Check(check0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, Enable)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::Enable\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::Enable\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool enable0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&enable0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &enable0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxUpdateUIEvent::Enable(enable0)\n\n");
				#endif
				((wxUpdateUIEvent_php*)_this)->Enable(enable0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetEnabled\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetEnabled())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)_this)->GetEnabled());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetChecked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetChecked\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetChecked\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetChecked())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)_this)->GetChecked());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_LONG(wxUpdateUIEvent::GetMode())\n\n");
				#endif
				ZVAL_LONG(return_value, wxUpdateUIEvent::GetMode());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetSetChecked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetSetChecked\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetSetChecked\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetSetChecked())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)_this)->GetSetChecked());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetSetEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetSetEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetSetEnabled\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetSetEnabled())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)_this)->GetSetEnabled());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetSetShown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetSetShown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetSetShown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetSetShown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)_this)->GetSetShown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetSetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetSetText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetSetText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetSetText())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)_this)->GetSetText());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetShown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetShown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetShown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetShown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)_this)->GetShown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxUpdateUIEvent::GetText().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxUpdateUIEvent_php*)_this)->GetText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, GetUpdateInterval)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetUpdateInterval\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::GetUpdateInterval\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_LONG(wxUpdateUIEvent::GetUpdateInterval())\n\n");
				#endif
				ZVAL_LONG(return_value, wxUpdateUIEvent::GetUpdateInterval());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, ResetUpdateTime)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::ResetUpdateTime\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::ResetUpdateTime\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxUpdateUIEvent::ResetUpdateTime()\n\n");
				#endif
				wxUpdateUIEvent::ResetUpdateTime();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, SetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::SetMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::SetMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&mode0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxUpdateUIEvent::SetMode((wxUpdateUIMode) mode0)\n\n");
				#endif
				wxUpdateUIEvent::SetMode((wxUpdateUIMode) mode0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, SetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::SetText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::SetText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxUpdateUIEvent::SetText(wxString(text0, wxConvUTF8))\n\n");
				#endif
				((wxUpdateUIEvent_php*)_this)->SetText(wxString(text0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, SetUpdateInterval)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::SetUpdateInterval\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::SetUpdateInterval\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long updateInterval0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&updateInterval0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &updateInterval0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxUpdateUIEvent::SetUpdateInterval((long) updateInterval0)\n\n");
				#endif
				wxUpdateUIEvent::SetUpdateInterval((long) updateInterval0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, Show)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::Show\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxUpdateUIEvent::Show\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxUpdateUIEvent){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool show0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&show0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &show0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxUpdateUIEvent::Show(show0)\n\n");
				#endif
				((wxUpdateUIEvent_php*)_this)->Show(show0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxUpdateUIEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandId0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&commandId0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandId0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxUpdateUIEvent_php();

				((wxUpdateUIEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindowID) commandId0)\n");
				#endif
				_this = new wxUpdateUIEvent_php((wxWindowID) commandId0);

				((wxUpdateUIEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxUpdateUIEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxUpdateUIEvent_php*) _this)->evnArray);
		
		array_init(((wxUpdateUIEvent_php*) _this)->evnArray);
		
		((wxUpdateUIEvent_php*) _this)->phpObj = getThis();
		
		((wxUpdateUIEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxUpdateUIEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxClipboardTextEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxClipboardTextEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxClipboardTextEvent_php* object = static_cast<wxClipboardTextEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxClipboardTextEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxClipboardTextEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxClipboardTextEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxClipboardTextEvent_php();

				((wxClipboardTextEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif
				_this = new wxClipboardTextEvent_php((wxEventType) commandType0);

				((wxClipboardTextEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif
				_this = new wxClipboardTextEvent_php((wxEventType) commandType0, (int) id0);

				((wxClipboardTextEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxClipboardTextEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxClipboardTextEvent_php*) _this)->evnArray);
		
		array_init(((wxClipboardTextEvent_php*) _this)->evnArray);
		
		((wxClipboardTextEvent_php*) _this)->phpObj = getThis();
		
		((wxClipboardTextEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxClipboardTextEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxMouseEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMouseEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxMouseEvent_php* object = static_cast<wxMouseEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMouseEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxMouseEvent, Aux1DClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux1DClick\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Aux1DClick\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux1DClick())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Aux1DClick());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Aux1Down)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux1Down\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Aux1Down\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux1Down())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Aux1Down());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Aux1Up)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux1Up\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Aux1Up\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux1Up())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Aux1Up());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Aux2DClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux2DClick\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Aux2DClick\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux2DClick())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Aux2DClick());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Aux2Down)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux2Down\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Aux2Down\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux2Down())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Aux2Down());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Aux2Up)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux2Up\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Aux2Up\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux2Up())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Aux2Up());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Button)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Button\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Button\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long but0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&but0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &but0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Button((wxMouseButton) but0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Button((wxMouseButton) but0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, ButtonDClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::ButtonDClick\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::ButtonDClick\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long but0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&but0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &but0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonDClick())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->ButtonDClick());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonDClick((wxMouseButton) but0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->ButtonDClick((wxMouseButton) but0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, ButtonDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::ButtonDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::ButtonDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long but0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&but0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &but0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->ButtonDown());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonDown((wxMouseButton) but0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->ButtonDown((wxMouseButton) but0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, ButtonUp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::ButtonUp\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::ButtonUp\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long but0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&but0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &but0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonUp())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->ButtonUp());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonUp((wxMouseButton) but0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->ButtonUp((wxMouseButton) but0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Dragging)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Dragging\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Dragging\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Dragging())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Dragging());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Entering)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Entering\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Entering\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Entering())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Entering());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, GetButton)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetButton\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::GetButton\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetButton())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxMouseEvent_php*)_this)->GetButton());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, GetClickCount)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetClickCount\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::GetClickCount\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetClickCount())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxMouseEvent_php*)_this)->GetClickCount());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, GetLinesPerAction)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetLinesPerAction\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::GetLinesPerAction\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetLinesPerAction())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxMouseEvent_php*)_this)->GetLinesPerAction());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, GetLogicalPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetLogicalPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::GetLogicalPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* dc0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&dc0, php_wxDC_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc0, php_wxDC_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseEvent::GetLogicalPosition(*(wxDC*) object_pointer0_0) to return new object\n\n");
				#endif
				wxPoint value_to_return1;
				value_to_return1 = ((wxMouseEvent_php*)_this)->GetLogicalPosition(*(wxDC*) object_pointer0_0);
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return1, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));

				references->AddReference(dc0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, GetWheelDelta)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetWheelDelta\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::GetWheelDelta\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetWheelDelta())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxMouseEvent_php*)_this)->GetWheelDelta());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, GetWheelRotation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetWheelRotation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::GetWheelRotation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetWheelRotation())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxMouseEvent_php*)_this)->GetWheelRotation());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, IsButton)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::IsButton\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::IsButton\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::IsButton())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->IsButton());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, IsPageScroll)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::IsPageScroll\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::IsPageScroll\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::IsPageScroll())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->IsPageScroll());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Leaving)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Leaving\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Leaving\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Leaving())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Leaving());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, LeftDClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::LeftDClick\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::LeftDClick\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::LeftDClick())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->LeftDClick());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, LeftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::LeftDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::LeftDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::LeftDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->LeftDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, LeftUp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::LeftUp\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::LeftUp\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::LeftUp())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->LeftUp());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::MetaDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::MetaDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->MetaDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, MiddleDClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::MiddleDClick\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::MiddleDClick\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::MiddleDClick())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->MiddleDClick());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, MiddleDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::MiddleDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::MiddleDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::MiddleDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->MiddleDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, MiddleUp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::MiddleUp\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::MiddleUp\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::MiddleUp())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->MiddleUp());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, Moving)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Moving\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::Moving\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Moving())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->Moving());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, RightDClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::RightDClick\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::RightDClick\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::RightDClick())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->RightDClick());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, RightDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::RightDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::RightDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::RightDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->RightDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, RightUp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::RightUp\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::RightUp\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::RightUp())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)_this)->RightUp());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long mouseEventType0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&mouseEventType0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mouseEventType0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMouseEvent_php();

				((wxMouseEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) mouseEventType0)\n");
				#endif
				_this = new wxMouseEvent_php((wxEventType) mouseEventType0);

				((wxMouseEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMouseEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMouseEvent_php*) _this)->evnArray);
		
		array_init(((wxMouseEvent_php*) _this)->evnArray);
		
		((wxMouseEvent_php*) _this)->phpObj = getThis();
		
		((wxMouseEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMouseEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxMouseEvent, GetWheelAxis)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetWheelAxis\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEvent::GetWheelAxis\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEvent){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetWheelAxis())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxMouseEvent_php*)_this)->GetWheelAxis());


				return;
				break;
			}
		}
	}

		
}
void php_wxCommandEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCommandEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxCommandEvent_php* object = static_cast<wxCommandEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCommandEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxCommandEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandEventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandEventType0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandEventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxCommandEvent_php();

				((wxCommandEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandEventType0)\n");
				#endif
				_this = new wxCommandEvent_php((wxEventType) commandEventType0);

				((wxCommandEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandEventType0, (int) id0)\n");
				#endif
				_this = new wxCommandEvent_php((wxEventType) commandEventType0, (int) id0);

				((wxCommandEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxCommandEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxCommandEvent_php*) _this)->evnArray);
		
		array_init(((wxCommandEvent_php*) _this)->evnArray);
		
		((wxCommandEvent_php*) _this)->phpObj = getThis();
		
		((wxCommandEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxCommandEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxCommandEvent, SetString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::SetString\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCommandEvent::SetString\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCommandEvent){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&string0, &string_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCommandEvent::SetString(wxString(string0, wxConvUTF8))\n\n");
				#endif
				((wxCommandEvent_php*)_this)->SetString(wxString(string0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCommandEvent, SetInt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::SetInt\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCommandEvent::SetInt\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCommandEvent){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long intCommand0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&intCommand0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &intCommand0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCommandEvent::SetInt((int) intCommand0)\n\n");
				#endif
				((wxCommandEvent_php*)_this)->SetInt((int) intCommand0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCommandEvent, SetExtraLong)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::SetExtraLong\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCommandEvent::SetExtraLong\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCommandEvent){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long extraLong0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&extraLong0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &extraLong0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCommandEvent::SetExtraLong((long) extraLong0)\n\n");
				#endif
				((wxCommandEvent_php*)_this)->SetExtraLong((long) extraLong0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCommandEvent, IsSelection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::IsSelection\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCommandEvent::IsSelection\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCommandEvent){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCommandEvent::IsSelection())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxCommandEvent_php*)_this)->IsSelection());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCommandEvent, IsChecked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::IsChecked\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCommandEvent::IsChecked\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCommandEvent){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCommandEvent::IsChecked())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxCommandEvent_php*)_this)->IsChecked());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCommandEvent, GetString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::GetString\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCommandEvent::GetString\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCommandEvent){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxCommandEvent::GetString().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxCommandEvent_php*)_this)->GetString();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCommandEvent, GetSelection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::GetSelection\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCommandEvent::GetSelection\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCommandEvent){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCommandEvent::GetSelection())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxCommandEvent_php*)_this)->GetSelection());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCommandEvent, GetInt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::GetInt\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCommandEvent::GetInt\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCommandEvent){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCommandEvent::GetInt())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxCommandEvent_php*)_this)->GetInt());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCommandEvent, GetExtraLong)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::GetExtraLong\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCommandEvent::GetExtraLong\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCommandEvent){
				references = &((wxCommandEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxNotifyEvent) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxStyledTextEvent) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxChildFocusEvent) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlCellEvent) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlLinkEvent) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHyperlinkEvent) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourPickerEvent) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontPickerEvent) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScrollEvent) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowModalDialogEvent) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDateEvent) && (!reference_type_found)){
				references = &((wxDateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCalendarEvent) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowCreateEvent) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDestroyEvent) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxUpdateUIEvent) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHelpEvent) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEditorCreatedEvent) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxCollapsiblePaneEvent) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClipboardTextEvent) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileCtrlEvent) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSashEvent) && (!reference_type_found)){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDirPickerEvent) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxContextMenuEvent) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonButtonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonGalleryEvent) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCommandEvent::GetExtraLong())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxCommandEvent_php*)_this)->GetExtraLong());


				return;
				break;
			}
		}
	}

		
}
void php_wxActivateEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxActivateEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxActivateEvent_php* object = static_cast<wxActivateEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxActivateEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxActivateEvent, GetActive)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxActivateEvent::GetActive\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxActivateEvent::GetActive\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxActivateEvent){
				references = &((wxActivateEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxActivateEvent::GetActive())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxActivateEvent_php*)_this)->GetActive());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxActivateEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxActivateEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long eventType0;
	bool active0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lbl' (&eventType0, &active0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|lbl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &active0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxActivateEvent_php();

				((wxActivateEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif
				_this = new wxActivateEvent_php((wxEventType) eventType0);

				((wxActivateEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, active0)\n");
				#endif
				_this = new wxActivateEvent_php((wxEventType) eventType0, active0);

				((wxActivateEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, active0, (int) id0)\n");
				#endif
				_this = new wxActivateEvent_php((wxEventType) eventType0, active0, (int) id0);

				((wxActivateEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxActivateEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxActivateEvent_php*) _this)->evnArray);
		
		array_init(((wxActivateEvent_php*) _this)->evnArray);
		
		((wxActivateEvent_php*) _this)->phpObj = getThis();
		
		((wxActivateEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxActivateEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxContextMenuEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxContextMenuEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxContextMenuEvent_php* object = static_cast<wxContextMenuEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxContextMenuEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxContextMenuEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxContextMenuEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxContextMenuEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxContextMenuEvent){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxContextMenuEvent::GetPosition() to return object reference\n\n");
				#endif
				wxPoint_php* value_to_return0;
				value_to_return0 = (wxPoint_php*) &((wxContextMenuEvent_php*)_this)->GetPosition();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxPoint));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxContextMenuEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxContextMenuEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxContextMenuEvent::SetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxContextMenuEvent){
				references = &((wxContextMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* point0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&point0, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &point0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(point0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(point0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(point0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxContextMenuEvent::SetPosition(*(wxPoint*) object_pointer0_0)\n\n");
				#endif
				((wxContextMenuEvent_php*)_this)->SetPosition(*(wxPoint*) object_pointer0_0);

				references->AddReference(point0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxContextMenuEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxContextMenuEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long type0;
	long id0;
	zval* pos0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llO' (&type0, &id0, &pos0, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "|llO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &id0, &pos0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxContextMenuEvent_php();

				((wxContextMenuEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0)\n");
				#endif
				_this = new wxContextMenuEvent_php((wxEventType) type0);

				((wxContextMenuEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0)\n");
				#endif
				_this = new wxContextMenuEvent_php((wxEventType) type0, (int) id0);

				((wxContextMenuEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0, *(wxPoint*) object_pointer0_2)\n");
				#endif
				_this = new wxContextMenuEvent_php((wxEventType) type0, (int) id0, *(wxPoint*) object_pointer0_2);

				((wxContextMenuEvent_php*) _this)->references.Initialize();
				((wxContextMenuEvent_php*) _this)->references.AddReference(pos0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxContextMenuEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxContextMenuEvent_php*) _this)->evnArray);
		
		array_init(((wxContextMenuEvent_php*) _this)->evnArray);
		
		((wxContextMenuEvent_php*) _this)->phpObj = getThis();
		
		((wxContextMenuEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxContextMenuEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxEraseEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEraseEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxEraseEvent_php* object = static_cast<wxEraseEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEraseEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxEraseEvent, GetDC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEraseEvent::GetDC\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxEraseEvent::GetDC\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxEraseEvent){
				references = &((wxEraseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEraseEvent::GetDC() to return object pointer\n\n");
				#endif
				wxDC_php* value_to_return0;
				value_to_return0 = (wxDC_php*) ((wxEraseEvent_php*)_this)->GetDC();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDC_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDC));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxEraseEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEraseEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	zval* dc0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lz' (&id0, &dc0)\n");
		#endif
		char parse_parameters_string[] = "|lz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &dc0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(dc0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxEraseEvent_php();

				((wxEraseEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif
				_this = new wxEraseEvent_php((int) id0);

				((wxEraseEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (wxDC*) object_pointer0_1)\n");
				#endif
				_this = new wxEraseEvent_php((int) id0, (wxDC*) object_pointer0_1);

				((wxEraseEvent_php*) _this)->references.Initialize();
				((wxEraseEvent_php*) _this)->references.AddReference(dc0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxEraseEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxEraseEvent_php*) _this)->evnArray);
		
		array_init(((wxEraseEvent_php*) _this)->evnArray);
		
		((wxEraseEvent_php*) _this)->phpObj = getThis();
		
		((wxEraseEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxEraseEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxFocusEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFocusEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxFocusEvent_php* object = static_cast<wxFocusEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFocusEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxFocusEvent, GetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFocusEvent::GetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFocusEvent::GetWindow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFocusEvent){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFocusEvent::GetWindow() to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxFocusEvent_php*)_this)->GetWindow();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFocusEvent, SetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFocusEvent::SetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFocusEvent::SetWindow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFocusEvent){
				references = &((wxFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFocusEvent::SetWindow((wxWindow*) object_pointer0_0)\n\n");
				#endif
				((wxFocusEvent_php*)_this)->SetWindow((wxWindow*) object_pointer0_0);

				references->AddReference(win0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFocusEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFocusEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long eventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&eventType0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxFocusEvent_php();

				((wxFocusEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif
				_this = new wxFocusEvent_php((wxEventType) eventType0);

				((wxFocusEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, (int) id0)\n");
				#endif
				_this = new wxFocusEvent_php((wxEventType) eventType0, (int) id0);

				((wxFocusEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxFocusEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxFocusEvent_php*) _this)->evnArray);
		
		array_init(((wxFocusEvent_php*) _this)->evnArray);
		
		((wxFocusEvent_php*) _this)->phpObj = getThis();
		
		((wxFocusEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxFocusEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxChildFocusEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxChildFocusEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxChildFocusEvent_php* object = static_cast<wxChildFocusEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxChildFocusEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxChildFocusEvent, GetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxChildFocusEvent::GetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxChildFocusEvent::GetWindow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxChildFocusEvent){
				references = &((wxChildFocusEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxChildFocusEvent::GetWindow() to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxChildFocusEvent_php*)_this)->GetWindow();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxChildFocusEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxChildFocusEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&win0)\n");
		#endif
		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxChildFocusEvent_php();

				((wxChildFocusEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxChildFocusEvent_php((wxWindow*) object_pointer0_0);

				((wxChildFocusEvent_php*) _this)->references.Initialize();
				((wxChildFocusEvent_php*) _this)->references.AddReference(win0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxChildFocusEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxChildFocusEvent_php*) _this)->evnArray);
		
		array_init(((wxChildFocusEvent_php*) _this)->evnArray);
		
		((wxChildFocusEvent_php*) _this)->phpObj = getThis();
		
		((wxChildFocusEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxChildFocusEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxNotifyEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxNotifyEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxNotifyEvent_php* object = static_cast<wxNotifyEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxNotifyEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxNotifyEvent, Allow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNotifyEvent::Allow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNotifyEvent::Allow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNotifyEvent){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNotifyEvent::Allow()\n\n");
				#endif
				((wxNotifyEvent_php*)_this)->Allow();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNotifyEvent, IsAllowed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNotifyEvent::IsAllowed\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNotifyEvent::IsAllowed\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNotifyEvent){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxNotifyEvent::IsAllowed())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxNotifyEvent_php*)_this)->IsAllowed());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNotifyEvent, Veto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNotifyEvent::Veto\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNotifyEvent::Veto\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNotifyEvent){
				references = &((wxNotifyEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTreeEvent) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBookCtrlEvent) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiNotebookEvent) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAuiToolBarEvent) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxListEvent) && (!reference_type_found)){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinEvent) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplitterEvent) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSpinDoubleEvent) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridSizeEvent) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizardEvent) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridEvent) && (!reference_type_found)){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGridRangeSelectEvent) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewEvent) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHeaderCtrlEvent) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxRibbonBarEvent) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNotifyEvent::Veto()\n\n");
				#endif
				((wxNotifyEvent_php*)_this)->Veto();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNotifyEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNotifyEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long eventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&eventType0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxNotifyEvent_php();

				((wxNotifyEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif
				_this = new wxNotifyEvent_php((wxEventType) eventType0);

				((wxNotifyEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, (int) id0)\n");
				#endif
				_this = new wxNotifyEvent_php((wxEventType) eventType0, (int) id0);

				((wxNotifyEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxNotifyEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxNotifyEvent_php*) _this)->evnArray);
		
		array_init(((wxNotifyEvent_php*) _this)->evnArray);
		
		((wxNotifyEvent_php*) _this)->phpObj = getThis();
		
		((wxNotifyEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxNotifyEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxThreadEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxThreadEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxThreadEvent_php* object = static_cast<wxThreadEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxThreadEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxThreadEvent, Clone)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::Clone\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxThreadEvent::Clone\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxThreadEvent){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxThreadEvent::Clone() to return object pointer\n\n");
				#endif
				wxEvent_php* value_to_return0;
				value_to_return0 = (wxEvent_php*) ((wxThreadEvent_php*)_this)->Clone();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxEvent_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxEvent));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxThreadEvent, GetExtraLong)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::GetExtraLong\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxThreadEvent::GetExtraLong\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxThreadEvent){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxThreadEvent::GetExtraLong())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxThreadEvent_php*)_this)->GetExtraLong());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxThreadEvent, GetEventCategory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::GetEventCategory\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxThreadEvent::GetEventCategory\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxThreadEvent){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxThreadEvent::GetEventCategory())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxThreadEvent_php*)_this)->GetEventCategory());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxThreadEvent, GetInt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::GetInt\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxThreadEvent::GetInt\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxThreadEvent){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxThreadEvent::GetInt())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxThreadEvent_php*)_this)->GetInt());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxThreadEvent, GetString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::GetString\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxThreadEvent::GetString\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxThreadEvent){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxThreadEvent::GetString().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxThreadEvent_php*)_this)->GetString();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxThreadEvent, SetInt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::SetInt\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxThreadEvent::SetInt\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxThreadEvent){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long intCommand0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&intCommand0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &intCommand0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxThreadEvent::SetInt((int) intCommand0)\n\n");
				#endif
				((wxThreadEvent_php*)_this)->SetInt((int) intCommand0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxThreadEvent, SetExtraLong)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::SetExtraLong\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxThreadEvent::SetExtraLong\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxThreadEvent){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long extraLong0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&extraLong0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &extraLong0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxThreadEvent::SetExtraLong((long) extraLong0)\n\n");
				#endif
				((wxThreadEvent_php*)_this)->SetExtraLong((long) extraLong0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxThreadEvent, SetString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::SetString\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxThreadEvent::SetString\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxThreadEvent){
				references = &((wxThreadEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&string0, &string_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxThreadEvent::SetString(wxString(string0, wxConvUTF8))\n\n");
				#endif
				((wxThreadEvent_php*)_this)->SetString(wxString(string0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxThreadEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long eventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&eventType0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxThreadEvent_php();

				((wxThreadEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif
				_this = new wxThreadEvent_php((wxEventType) eventType0);

				((wxThreadEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, (int) id0)\n");
				#endif
				_this = new wxThreadEvent_php((wxEventType) eventType0, (int) id0);

				((wxThreadEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxThreadEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxThreadEvent_php*) _this)->evnArray);
		
		array_init(((wxThreadEvent_php*) _this)->evnArray);
		
		((wxThreadEvent_php*) _this)->phpObj = getThis();
		
		((wxThreadEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxThreadEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxHelpEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHelpEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxHelpEvent_php* object = static_cast<wxHelpEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHelpEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxHelpEvent, GetOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::GetOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxHelpEvent::GetOrigin\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxHelpEvent){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHelpEvent::GetOrigin())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxHelpEvent_php*)_this)->GetOrigin());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxHelpEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxHelpEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxHelpEvent){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHelpEvent::GetPosition() to return object reference\n\n");
				#endif
				wxPoint_php* value_to_return0;
				value_to_return0 = (wxPoint_php*) &((wxHelpEvent_php*)_this)->GetPosition();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxPoint));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxHelpEvent, SetOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::SetOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxHelpEvent::SetOrigin\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxHelpEvent){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long origin0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&origin0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &origin0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHelpEvent::SetOrigin((wxHelpEvent::Origin) origin0)\n\n");
				#endif
				((wxHelpEvent_php*)_this)->SetOrigin((wxHelpEvent::Origin) origin0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxHelpEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxHelpEvent::SetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxHelpEvent){
				references = &((wxHelpEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* pt0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHelpEvent::SetPosition(*(wxPoint*) object_pointer0_0)\n\n");
				#endif
				((wxHelpEvent_php*)_this)->SetPosition(*(wxPoint*) object_pointer0_0);

				references->AddReference(pt0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxHelpEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long type0;
	long winid0;
	zval* pt0 = 0;
	void* object_pointer0_2 = 0;
	long origin0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llOl' (&type0, &winid0, &pt0, php_wxPoint_entry, &origin0)\n");
		#endif
		char parse_parameters_string[] = "|llOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &winid0, &pt0, php_wxPoint_entry, &origin0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(pt0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxHelpEvent_php();

				((wxHelpEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0)\n");
				#endif
				_this = new wxHelpEvent_php((wxEventType) type0);

				((wxHelpEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxWindowID) winid0)\n");
				#endif
				_this = new wxHelpEvent_php((wxEventType) type0, (wxWindowID) winid0);

				((wxHelpEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxWindowID) winid0, *(wxPoint*) object_pointer0_2)\n");
				#endif
				_this = new wxHelpEvent_php((wxEventType) type0, (wxWindowID) winid0, *(wxPoint*) object_pointer0_2);

				((wxHelpEvent_php*) _this)->references.Initialize();
				((wxHelpEvent_php*) _this)->references.AddReference(pt0);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxWindowID) winid0, *(wxPoint*) object_pointer0_2, (wxHelpEvent::Origin) origin0)\n");
				#endif
				_this = new wxHelpEvent_php((wxEventType) type0, (wxWindowID) winid0, *(wxPoint*) object_pointer0_2, (wxHelpEvent::Origin) origin0);

				((wxHelpEvent_php*) _this)->references.Initialize();
				((wxHelpEvent_php*) _this)->references.AddReference(pt0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxHelpEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxHelpEvent_php*) _this)->evnArray);
		
		array_init(((wxHelpEvent_php*) _this)->evnArray);
		
		((wxHelpEvent_php*) _this)->phpObj = getThis();
		
		((wxHelpEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxHelpEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxScrollEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxScrollEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxScrollEvent_php* object = static_cast<wxScrollEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxScrollEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxScrollEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	long pos0;
	long orientation0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llll' (&commandType0, &id0, &pos0, &orientation0)\n");
		#endif
		char parse_parameters_string[] = "|llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0, &pos0, &orientation0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxScrollEvent_php();

				((wxScrollEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif
				_this = new wxScrollEvent_php((wxEventType) commandType0);

				((wxScrollEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif
				_this = new wxScrollEvent_php((wxEventType) commandType0, (int) id0);

				((wxScrollEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0, (int) pos0)\n");
				#endif
				_this = new wxScrollEvent_php((wxEventType) commandType0, (int) id0, (int) pos0);

				((wxScrollEvent_php*) _this)->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0, (int) pos0, (int) orientation0)\n");
				#endif
				_this = new wxScrollEvent_php((wxEventType) commandType0, (int) id0, (int) pos0, (int) orientation0);

				((wxScrollEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxScrollEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxScrollEvent_php*) _this)->evnArray);
		
		array_init(((wxScrollEvent_php*) _this)->evnArray);
		
		((wxScrollEvent_php*) _this)->phpObj = getThis();
		
		((wxScrollEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxScrollEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxScrollEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScrollEvent::SetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScrollEvent){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxScrollEvent::SetPosition((int) pos0)\n\n");
				#endif
				((wxScrollEvent_php*)_this)->SetPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxScrollEvent, SetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::SetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScrollEvent::SetOrientation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScrollEvent){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long orient0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&orient0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &orient0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxScrollEvent::SetOrientation((int) orient0)\n\n");
				#endif
				((wxScrollEvent_php*)_this)->SetOrientation((int) orient0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxScrollEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScrollEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScrollEvent){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxScrollEvent::GetPosition())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxScrollEvent_php*)_this)->GetPosition());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxScrollEvent, GetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::GetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScrollEvent::GetOrientation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScrollEvent){
				references = &((wxScrollEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxScrollEvent::GetOrientation())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxScrollEvent_php*)_this)->GetOrientation());


				return;
				break;
			}
		}
	}

		
}
void php_wxIdleEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxIdleEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxIdleEvent_php* object = static_cast<wxIdleEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxIdleEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxIdleEvent, GetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::GetMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxIdleEvent::GetMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxIdleEvent){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_LONG(wxIdleEvent::GetMode())\n\n");
				#endif
				ZVAL_LONG(return_value, wxIdleEvent::GetMode());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxIdleEvent, MoreRequested)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::MoreRequested\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxIdleEvent::MoreRequested\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxIdleEvent){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxIdleEvent::MoreRequested())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxIdleEvent_php*)_this)->MoreRequested());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxIdleEvent, RequestMore)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::RequestMore\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxIdleEvent::RequestMore\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxIdleEvent){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool needMore0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&needMore0)\n");
		#endif
		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &needMore0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxIdleEvent::RequestMore()\n\n");
				#endif
				((wxIdleEvent_php*)_this)->RequestMore();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxIdleEvent::RequestMore(needMore0)\n\n");
				#endif
				((wxIdleEvent_php*)_this)->RequestMore(needMore0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxIdleEvent, SetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::SetMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxIdleEvent::SetMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxIdleEvent){
				references = &((wxIdleEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&mode0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxIdleEvent::SetMode((wxIdleMode) mode0)\n\n");
				#endif
				wxIdleEvent::SetMode((wxIdleMode) mode0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxIdleEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxIdleEvent_php();

				((wxIdleEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxIdleEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxIdleEvent_php*) _this)->evnArray);
		
		array_init(((wxIdleEvent_php*) _this)->evnArray);
		
		((wxIdleEvent_php*) _this)->phpObj = getThis();
		
		((wxIdleEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxIdleEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxInitDialogEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxInitDialogEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxInitDialogEvent_php* object = static_cast<wxInitDialogEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxInitDialogEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxInitDialogEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxInitDialogEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxInitDialogEvent_php();

				((wxInitDialogEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif
				_this = new wxInitDialogEvent_php((int) id0);

				((wxInitDialogEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxInitDialogEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxInitDialogEvent_php*) _this)->evnArray);
		
		array_init(((wxInitDialogEvent_php*) _this)->evnArray);
		
		((wxInitDialogEvent_php*) _this)->phpObj = getThis();
		
		((wxInitDialogEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxInitDialogEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxWindowDestroyEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWindowDestroyEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxWindowDestroyEvent_php* object = static_cast<wxWindowDestroyEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxWindowDestroyEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxWindowDestroyEvent, GetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWindowDestroyEvent::GetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxWindowDestroyEvent::GetWindow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxWindowDestroyEvent){
				references = &((wxWindowDestroyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxWindowDestroyEvent::GetWindow() to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxWindowDestroyEvent_php*)_this)->GetWindow();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxWindowDestroyEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWindowDestroyEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&win0)\n");
		#endif
		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxWindowDestroyEvent_php();

				((wxWindowDestroyEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxWindowDestroyEvent_php((wxWindow*) object_pointer0_0);

				((wxWindowDestroyEvent_php*) _this)->references.Initialize();
				((wxWindowDestroyEvent_php*) _this)->references.AddReference(win0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxWindowDestroyEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxWindowDestroyEvent_php*) _this)->evnArray);
		
		array_init(((wxWindowDestroyEvent_php*) _this)->evnArray);
		
		((wxWindowDestroyEvent_php*) _this)->phpObj = getThis();
		
		((wxWindowDestroyEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxWindowDestroyEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxNavigationKeyEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxNavigationKeyEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxNavigationKeyEvent_php* object = static_cast<wxNavigationKeyEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxNavigationKeyEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxNavigationKeyEvent, GetCurrentFocus)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::GetCurrentFocus\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNavigationKeyEvent::GetCurrentFocus\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNavigationKeyEvent){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::GetCurrentFocus() to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxNavigationKeyEvent_php*)_this)->GetCurrentFocus();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNavigationKeyEvent, GetDirection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::GetDirection\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNavigationKeyEvent::GetDirection\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNavigationKeyEvent){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxNavigationKeyEvent::GetDirection())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxNavigationKeyEvent_php*)_this)->GetDirection());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNavigationKeyEvent, IsFromTab)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::IsFromTab\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNavigationKeyEvent::IsFromTab\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNavigationKeyEvent){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxNavigationKeyEvent::IsFromTab())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxNavigationKeyEvent_php*)_this)->IsFromTab());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNavigationKeyEvent, IsWindowChange)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::IsWindowChange\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNavigationKeyEvent::IsWindowChange\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNavigationKeyEvent){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxNavigationKeyEvent::IsWindowChange())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxNavigationKeyEvent_php*)_this)->IsWindowChange());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNavigationKeyEvent, SetCurrentFocus)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetCurrentFocus\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNavigationKeyEvent::SetCurrentFocus\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNavigationKeyEvent){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* currentFocus0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&currentFocus0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &currentFocus0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(currentFocus0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(currentFocus0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(currentFocus0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetCurrentFocus((wxWindow*) object_pointer0_0)\n\n");
				#endif
				((wxNavigationKeyEvent_php*)_this)->SetCurrentFocus((wxWindow*) object_pointer0_0);

				references->AddReference(currentFocus0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNavigationKeyEvent, SetDirection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetDirection\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNavigationKeyEvent::SetDirection\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNavigationKeyEvent){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool direction0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&direction0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &direction0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetDirection(direction0)\n\n");
				#endif
				((wxNavigationKeyEvent_php*)_this)->SetDirection(direction0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNavigationKeyEvent, SetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNavigationKeyEvent::SetFlags\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNavigationKeyEvent){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&flags0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetFlags((long) flags0)\n\n");
				#endif
				((wxNavigationKeyEvent_php*)_this)->SetFlags((long) flags0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNavigationKeyEvent, SetFromTab)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetFromTab\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNavigationKeyEvent::SetFromTab\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNavigationKeyEvent){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool fromTab0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&fromTab0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &fromTab0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetFromTab(fromTab0)\n\n");
				#endif
				((wxNavigationKeyEvent_php*)_this)->SetFromTab(fromTab0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNavigationKeyEvent, SetWindowChange)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetWindowChange\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxNavigationKeyEvent::SetWindowChange\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxNavigationKeyEvent){
				references = &((wxNavigationKeyEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool windowChange0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&windowChange0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &windowChange0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetWindowChange(windowChange0)\n\n");
				#endif
				((wxNavigationKeyEvent_php*)_this)->SetWindowChange(windowChange0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxNavigationKeyEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxNavigationKeyEvent_php();

				((wxNavigationKeyEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxNavigationKeyEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxNavigationKeyEvent_php*) _this)->evnArray);
		
		array_init(((wxNavigationKeyEvent_php*) _this)->evnArray);
		
		((wxNavigationKeyEvent_php*) _this)->phpObj = getThis();
		
		((wxNavigationKeyEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxNavigationKeyEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxCloseEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCloseEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxCloseEvent_php* object = static_cast<wxCloseEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCloseEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxCloseEvent, CanVeto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::CanVeto\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCloseEvent::CanVeto\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCloseEvent){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCloseEvent::CanVeto())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxCloseEvent_php*)_this)->CanVeto());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCloseEvent, GetLoggingOff)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::GetLoggingOff\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCloseEvent::GetLoggingOff\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCloseEvent){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCloseEvent::GetLoggingOff())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxCloseEvent_php*)_this)->GetLoggingOff());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCloseEvent, SetCanVeto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::SetCanVeto\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCloseEvent::SetCanVeto\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCloseEvent){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool canVeto0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&canVeto0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &canVeto0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCloseEvent::SetCanVeto(canVeto0)\n\n");
				#endif
				((wxCloseEvent_php*)_this)->SetCanVeto(canVeto0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCloseEvent, SetLoggingOff)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::SetLoggingOff\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCloseEvent::SetLoggingOff\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCloseEvent){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool loggingOff0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&loggingOff0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &loggingOff0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCloseEvent::SetLoggingOff(loggingOff0)\n\n");
				#endif
				((wxCloseEvent_php*)_this)->SetLoggingOff(loggingOff0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCloseEvent, Veto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::Veto\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCloseEvent::Veto\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCloseEvent){
				references = &((wxCloseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool veto0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&veto0)\n");
		#endif
		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &veto0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCloseEvent::Veto()\n\n");
				#endif
				((wxCloseEvent_php*)_this)->Veto();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCloseEvent::Veto(veto0)\n\n");
				#endif
				((wxCloseEvent_php*)_this)->Veto(veto0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCloseEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandEventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandEventType0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandEventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxCloseEvent_php();

				((wxCloseEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandEventType0)\n");
				#endif
				_this = new wxCloseEvent_php((wxEventType) commandEventType0);

				((wxCloseEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandEventType0, (int) id0)\n");
				#endif
				_this = new wxCloseEvent_php((wxEventType) commandEventType0, (int) id0);

				((wxCloseEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxCloseEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxCloseEvent_php*) _this)->evnArray);
		
		array_init(((wxCloseEvent_php*) _this)->evnArray);
		
		((wxCloseEvent_php*) _this)->phpObj = getThis();
		
		((wxCloseEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxCloseEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxMenuEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMenuEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxMenuEvent_php* object = static_cast<wxMenuEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMenuEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxMenuEvent, GetMenu)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMenuEvent::GetMenu\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMenuEvent::GetMenu\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMenuEvent){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMenuEvent::GetMenu() to return object pointer\n\n");
				#endif
				wxMenu_php* value_to_return0;
				value_to_return0 = (wxMenu_php*) ((wxMenuEvent_php*)_this)->GetMenu();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxMenu_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxMenu));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMenuEvent, GetMenuId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMenuEvent::GetMenuId\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMenuEvent::GetMenuId\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMenuEvent){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMenuEvent::GetMenuId())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxMenuEvent_php*)_this)->GetMenuId());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMenuEvent, IsPopup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMenuEvent::IsPopup\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMenuEvent::IsPopup\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMenuEvent){
				references = &((wxMenuEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMenuEvent::IsPopup())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMenuEvent_php*)_this)->IsPopup());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMenuEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMenuEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long type0;
	long id0;
	zval* menu0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llz' (&type0, &id0, &menu0)\n");
		#endif
		char parse_parameters_string[] = "|llz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &id0, &menu0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(menu0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(menu0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(menu0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMenuEvent_php();

				((wxMenuEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0)\n");
				#endif
				_this = new wxMenuEvent_php((wxEventType) type0);

				((wxMenuEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0)\n");
				#endif
				_this = new wxMenuEvent_php((wxEventType) type0, (int) id0);

				((wxMenuEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0, (wxMenu*) object_pointer0_2)\n");
				#endif
				_this = new wxMenuEvent_php((wxEventType) type0, (int) id0, (wxMenu*) object_pointer0_2);

				((wxMenuEvent_php*) _this)->references.Initialize();
				((wxMenuEvent_php*) _this)->references.AddReference(menu0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMenuEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMenuEvent_php*) _this)->evnArray);
		
		array_init(((wxMenuEvent_php*) _this)->evnArray);
		
		((wxMenuEvent_php*) _this)->phpObj = getThis();
		
		((wxMenuEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMenuEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxMoveEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMoveEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxMoveEvent_php* object = static_cast<wxMoveEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMoveEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxMoveEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMoveEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMoveEvent){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMoveEvent::GetPosition() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = ((wxMoveEvent_php*)_this)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMoveEvent, GetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::GetRect\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMoveEvent::GetRect\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMoveEvent){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMoveEvent::GetRect() to return new object\n\n");
				#endif
				wxRect value_to_return0;
				value_to_return0 = ((wxMoveEvent_php*)_this)->GetRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMoveEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMoveEvent::SetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMoveEvent){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* pos0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pos0, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMoveEvent::SetPosition(*(wxPoint*) object_pointer0_0)\n\n");
				#endif
				((wxMoveEvent_php*)_this)->SetPosition(*(wxPoint*) object_pointer0_0);

				references->AddReference(pos0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMoveEvent, SetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::SetRect\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMoveEvent::SetRect\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMoveEvent){
				references = &((wxMoveEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* rect0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect0, php_wxRect_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect0, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMoveEvent::SetRect(*(wxRect*) object_pointer0_0)\n\n");
				#endif
				((wxMoveEvent_php*)_this)->SetRect(*(wxRect*) object_pointer0_0);

				references->AddReference(rect0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMoveEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* pt0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O|l' (&pt0, php_wxPoint_entry, &id0)\n");
		#endif
		char parse_parameters_string[] = "O|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt0, php_wxPoint_entry, &id0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxPoint*) object_pointer0_0)\n");
				#endif
				_this = new wxMoveEvent_php(*(wxPoint*) object_pointer0_0);

				((wxMoveEvent_php*) _this)->references.Initialize();
				((wxMoveEvent_php*) _this)->references.AddReference(pt0);
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxPoint*) object_pointer0_0, (int) id0)\n");
				#endif
				_this = new wxMoveEvent_php(*(wxPoint*) object_pointer0_0, (int) id0);

				((wxMoveEvent_php*) _this)->references.Initialize();
				((wxMoveEvent_php*) _this)->references.AddReference(pt0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMoveEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMoveEvent_php*) _this)->evnArray);
		
		array_init(((wxMoveEvent_php*) _this)->evnArray);
		
		((wxMoveEvent_php*) _this)->phpObj = getThis();
		
		((wxMoveEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMoveEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxSizeEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSizeEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxSizeEvent_php* object = static_cast<wxSizeEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSizeEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxSizeEvent, GetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::GetRect\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSizeEvent::GetRect\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSizeEvent){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSizeEvent::GetRect() to return new object\n\n");
				#endif
				wxRect value_to_return0;
				value_to_return0 = ((wxSizeEvent_php*)_this)->GetRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSizeEvent, GetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::GetSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSizeEvent::GetSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSizeEvent){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSizeEvent::GetSize() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				value_to_return0 = ((wxSizeEvent_php*)_this)->GetSize();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSizeEvent, SetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::SetRect\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSizeEvent::SetRect\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSizeEvent){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* rect0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect0, php_wxRect_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect0, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSizeEvent::SetRect(*(wxRect*) object_pointer0_0)\n\n");
				#endif
				((wxSizeEvent_php*)_this)->SetRect(*(wxRect*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSizeEvent, SetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::SetSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSizeEvent::SetSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSizeEvent){
				references = &((wxSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* size0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&size0, php_wxSize_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSizeEvent::SetSize(*(wxSize*) object_pointer0_0)\n\n");
				#endif
				((wxSizeEvent_php*)_this)->SetSize(*(wxSize*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSizeEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* sz0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O|l' (&sz0, php_wxSize_entry, &id0)\n");
		#endif
		char parse_parameters_string[] = "O|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &sz0, php_wxSize_entry, &id0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(sz0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(sz0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(sz0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxSize*) object_pointer0_0)\n");
				#endif
				_this = new wxSizeEvent_php(*(wxSize*) object_pointer0_0);

				((wxSizeEvent_php*) _this)->references.Initialize();
				((wxSizeEvent_php*) _this)->references.AddReference(sz0);
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxSize*) object_pointer0_0, (int) id0)\n");
				#endif
				_this = new wxSizeEvent_php(*(wxSize*) object_pointer0_0, (int) id0);

				((wxSizeEvent_php*) _this)->references.Initialize();
				((wxSizeEvent_php*) _this)->references.AddReference(sz0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxSizeEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxSizeEvent_php*) _this)->evnArray);
		
		array_init(((wxSizeEvent_php*) _this)->evnArray);
		
		((wxSizeEvent_php*) _this)->phpObj = getThis();
		
		((wxSizeEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxSizeEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxSetCursorEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSetCursorEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxSetCursorEvent_php* object = static_cast<wxSetCursorEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSetCursorEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxSetCursorEvent, GetCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::GetCursor\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSetCursorEvent::GetCursor\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSetCursorEvent){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSetCursorEvent::GetCursor() to return object reference\n\n");
				#endif
				wxCursor_php* value_to_return0;
				value_to_return0 = (wxCursor_php*) &((wxSetCursorEvent_php*)_this)->GetCursor();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxCursor_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxCursor));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSetCursorEvent, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSetCursorEvent::GetX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSetCursorEvent){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSetCursorEvent::GetX())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSetCursorEvent_php*)_this)->GetX());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSetCursorEvent, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSetCursorEvent::GetY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSetCursorEvent){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSetCursorEvent::GetY())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSetCursorEvent_php*)_this)->GetY());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSetCursorEvent, HasCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::HasCursor\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSetCursorEvent::HasCursor\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSetCursorEvent){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxSetCursorEvent::HasCursor())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxSetCursorEvent_php*)_this)->HasCursor());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSetCursorEvent, SetCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::SetCursor\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSetCursorEvent::SetCursor\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSetCursorEvent){
				references = &((wxSetCursorEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&cursor0, php_wxCursor_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0, php_wxCursor_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cursor0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSetCursorEvent::SetCursor(*(wxCursor*) object_pointer0_0)\n\n");
				#endif
				((wxSetCursorEvent_php*)_this)->SetCursor(*(wxCursor*) object_pointer0_0);

				references->AddReference(cursor0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSetCursorEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxSetCursorEvent_php();

				((wxSetCursorEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxCoord) x0)\n");
				#endif
				_this = new wxSetCursorEvent_php((wxCoord) x0);

				((wxSetCursorEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxCoord) x0, (wxCoord) y0)\n");
				#endif
				_this = new wxSetCursorEvent_php((wxCoord) x0, (wxCoord) y0);

				((wxSetCursorEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxSetCursorEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxSetCursorEvent_php*) _this)->evnArray);
		
		array_init(((wxSetCursorEvent_php*) _this)->evnArray);
		
		((wxSetCursorEvent_php*) _this)->phpObj = getThis();
		
		((wxSetCursorEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxSetCursorEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxFileCtrlEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFileCtrlEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxFileCtrlEvent_php* object = static_cast<wxFileCtrlEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFileCtrlEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxFileCtrlEvent, GetDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::GetDirectory\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileCtrlEvent::GetDirectory\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileCtrlEvent){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileCtrlEvent::GetDirectory().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxFileCtrlEvent_php*)_this)->GetDirectory();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileCtrlEvent, GetFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::GetFile\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileCtrlEvent::GetFile\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileCtrlEvent){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileCtrlEvent::GetFile().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxFileCtrlEvent_php*)_this)->GetFile();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileCtrlEvent, GetFiles)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::GetFiles\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileCtrlEvent::GetFiles\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileCtrlEvent){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileCtrlEvent::GetFiles() to return strings array\n\n");
				#endif
				wxArrayString value_to_return0;
				value_to_return0 = ((wxFileCtrlEvent_php*)_this)->GetFiles();
				char* temp_string0;
				array_init(return_value);
				for(size_t i=0; i<value_to_return0.GetCount(); i++)
				{
					temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0[i].size()+1));
					strcpy (temp_string0, (const char *) value_to_return0[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string0, 1);
					free(temp_string0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileCtrlEvent, GetFilterIndex)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::GetFilterIndex\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileCtrlEvent::GetFilterIndex\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileCtrlEvent){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxFileCtrlEvent::GetFilterIndex())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxFileCtrlEvent_php*)_this)->GetFilterIndex());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileCtrlEvent, SetDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::SetDirectory\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileCtrlEvent::SetDirectory\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileCtrlEvent){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* directory0;
	long directory_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&directory0, &directory_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &directory0, &directory_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileCtrlEvent::SetDirectory(wxString(directory0, wxConvUTF8))\n\n");
				#endif
				((wxFileCtrlEvent_php*)_this)->SetDirectory(wxString(directory0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileCtrlEvent, SetFiles)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::SetFiles\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileCtrlEvent::SetFiles\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileCtrlEvent){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* files0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'a' (&files0)\n");
		#endif
		char parse_parameters_string[] = "a";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &files0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_0;
		bool strings_continue0_0 = true;

		switch(arguments_received)
		{
			case 1:
			{
				int array_index0_0 = 0;
				zval** temp_array_value0_0 = 0;
				while(strings_continue0_0)
				{
					if(zend_hash_index_find(HASH_OF(files0), array_index0_0, (void**)&temp_array_value0_0) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_0);
						strings_array0_0.Add(wxString(Z_STRVAL_PP(temp_array_value0_0), wxConvUTF8));
						array_index0_0++;
					}
					else
					{
						strings_continue0_0 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileCtrlEvent::SetFiles(strings_array0_0)\n\n");
				#endif
				((wxFileCtrlEvent_php*)_this)->SetFiles(strings_array0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileCtrlEvent, SetFilterIndex)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::SetFilterIndex\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileCtrlEvent::SetFilterIndex\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileCtrlEvent){
				references = &((wxFileCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long index0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&index0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &index0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileCtrlEvent::SetFilterIndex((int) index0)\n\n");
				#endif
				((wxFileCtrlEvent_php*)_this)->SetFilterIndex((int) index0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileCtrlEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long type0;
	zval* evtObject0 = 0;
	void* object_pointer0_1 = 0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lzl' (&type0, &evtObject0, &id0)\n");
		#endif
		char parse_parameters_string[] = "lzl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &evtObject0, &id0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(evtObject0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(evtObject0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(evtObject0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxObject*) object_pointer0_1, (int) id0)\n");
				#endif
				_this = new wxFileCtrlEvent_php((wxEventType) type0, (wxObject*) object_pointer0_1, (int) id0);

				((wxFileCtrlEvent_php*) _this)->references.Initialize();
				((wxFileCtrlEvent_php*) _this)->references.AddReference(evtObject0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxFileCtrlEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxFileCtrlEvent_php*) _this)->evnArray);
		
		array_init(((wxFileCtrlEvent_php*) _this)->evnArray);
		
		((wxFileCtrlEvent_php*) _this)->phpObj = getThis();
		
		((wxFileCtrlEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxFileCtrlEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxFileDirPickerEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFileDirPickerEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxFileDirPickerEvent_php* object = static_cast<wxFileDirPickerEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFileDirPickerEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxFileDirPickerEvent, GetPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileDirPickerEvent::GetPath\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileDirPickerEvent::GetPath\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileDirPickerEvent){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileDirPickerEvent::GetPath().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxFileDirPickerEvent_php*)_this)->GetPath();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileDirPickerEvent, SetPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileDirPickerEvent::SetPath\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileDirPickerEvent::SetPath\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileDirPickerEvent){
				references = &((wxFileDirPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &path0, &path_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileDirPickerEvent::SetPath(wxString(path0, wxConvUTF8))\n\n");
				#endif
				((wxFileDirPickerEvent_php*)_this)->SetPath(wxString(path0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileDirPickerEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileDirPickerEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long type0;
	zval* generator0 = 0;
	void* object_pointer0_1 = 0;
	long id0;
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lzls' (&type0, &generator0, &id0, &path0, &path_len0)\n");
		#endif
		char parse_parameters_string[] = "lzls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &generator0, &id0, &path0, &path_len0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(generator0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(generator0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxObject*) object_pointer0_1, (int) id0, wxString(path0, wxConvUTF8))\n");
				#endif
				_this = new wxFileDirPickerEvent_php((wxEventType) type0, (wxObject*) object_pointer0_1, (int) id0, wxString(path0, wxConvUTF8));

				((wxFileDirPickerEvent_php*) _this)->references.Initialize();
				((wxFileDirPickerEvent_php*) _this)->references.AddReference(generator0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxFileDirPickerEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxFileDirPickerEvent_php*) _this)->evnArray);
		
		array_init(((wxFileDirPickerEvent_php*) _this)->evnArray);
		
		((wxFileDirPickerEvent_php*) _this)->phpObj = getThis();
		
		((wxFileDirPickerEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxFileDirPickerEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxFontPickerEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFontPickerEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxFontPickerEvent_php* object = static_cast<wxFontPickerEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFontPickerEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxFontPickerEvent, GetFont)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFontPickerEvent::GetFont\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFontPickerEvent::GetFont\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFontPickerEvent){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFontPickerEvent::GetFont() to return new object\n\n");
				#endif
				wxFont value_to_return0;
				value_to_return0 = ((wxFontPickerEvent_php*)_this)->GetFont();
				void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxFont));
				object_init_ex(return_value, php_wxFont_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFontPickerEvent, SetFont)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFontPickerEvent::SetFont\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFontPickerEvent::SetFont\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFontPickerEvent){
				references = &((wxFontPickerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* f0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&f0, php_wxFont_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &f0, php_wxFont_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(f0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(f0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(f0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFontPickerEvent::SetFont(*(wxFont*) object_pointer0_0)\n\n");
				#endif
				((wxFontPickerEvent_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);

				references->AddReference(f0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFontPickerEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFontPickerEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* generator0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	zval* font0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zlO' (&generator0, &id0, &font0, php_wxFont_entry)\n");
		#endif
		char parse_parameters_string[] = "zlO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &generator0, &id0, &font0, php_wxFont_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(generator0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(generator0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(font0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(font0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxObject*) object_pointer0_0, (int) id0, *(wxFont*) object_pointer0_2)\n");
				#endif
				_this = new wxFontPickerEvent_php((wxObject*) object_pointer0_0, (int) id0, *(wxFont*) object_pointer0_2);

				((wxFontPickerEvent_php*) _this)->references.Initialize();
				((wxFontPickerEvent_php*) _this)->references.AddReference(generator0);
				((wxFontPickerEvent_php*) _this)->references.AddReference(font0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxFontPickerEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxFontPickerEvent_php*) _this)->evnArray);
		
		array_init(((wxFontPickerEvent_php*) _this)->evnArray);
		
		((wxFontPickerEvent_php*) _this)->phpObj = getThis();
		
		((wxFontPickerEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxFontPickerEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxFileSystemWatcherEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFileSystemWatcherEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxFileSystemWatcherEvent_php* object = static_cast<wxFileSystemWatcherEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFileSystemWatcherEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxFileSystemWatcherEvent, GetChangeType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::GetChangeType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileSystemWatcherEvent::GetChangeType\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileSystemWatcherEvent){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxFileSystemWatcherEvent::GetChangeType())\n\n");
				#endif
				if(parent_rsrc_type == le_wxFileSystemWatcherEvent)
				{
					ZVAL_LONG(return_value, ((wxFileSystemWatcherEvent_php*)_this)->GetChangeType());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileSystemWatcherEvent, GetErrorDescription)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::GetErrorDescription\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileSystemWatcherEvent::GetErrorDescription\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileSystemWatcherEvent){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileSystemWatcherEvent::GetErrorDescription().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				if(parent_rsrc_type == le_wxFileSystemWatcherEvent)
				{
					value_to_return0 = ((wxFileSystemWatcherEvent_php*)_this)->GetErrorDescription();
				}
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileSystemWatcherEvent, GetNewPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::GetNewPath\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileSystemWatcherEvent::GetNewPath\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileSystemWatcherEvent){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileSystemWatcherEvent::GetNewPath() to return object reference\n\n");
				#endif
				wxFileName_php* value_to_return0;
				if(parent_rsrc_type == le_wxFileSystemWatcherEvent)
				{
					value_to_return0 = (wxFileName_php*) &((wxFileSystemWatcherEvent_php*)_this)->GetNewPath();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxFileName_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxFileName));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileSystemWatcherEvent, GetPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::GetPath\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileSystemWatcherEvent::GetPath\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileSystemWatcherEvent){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileSystemWatcherEvent::GetPath() to return object reference\n\n");
				#endif
				wxFileName_php* value_to_return0;
				if(parent_rsrc_type == le_wxFileSystemWatcherEvent)
				{
					value_to_return0 = (wxFileName_php*) &((wxFileSystemWatcherEvent_php*)_this)->GetPath();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxFileName_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxFileName));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileSystemWatcherEvent, IsError)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::IsError\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileSystemWatcherEvent::IsError\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileSystemWatcherEvent){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFileSystemWatcherEvent::IsError())\n\n");
				#endif
				if(parent_rsrc_type == le_wxFileSystemWatcherEvent)
				{
					ZVAL_BOOL(return_value, ((wxFileSystemWatcherEvent_php*)_this)->IsError());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFileSystemWatcherEvent, ToString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::ToString\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFileSystemWatcherEvent::ToString\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFileSystemWatcherEvent){
				references = &((wxFileSystemWatcherEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileSystemWatcherEvent::ToString().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				if(parent_rsrc_type == le_wxFileSystemWatcherEvent)
				{
					value_to_return0 = ((wxFileSystemWatcherEvent_php*)_this)->ToString();
				}
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
void php_wxGridEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxGridEvent_php* object = static_cast<wxGridEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxGridEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxGridEvent, AltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::AltDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEvent::AltDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEvent){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::AltDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridEvent_php*)_this)->AltDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEvent, ControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::ControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEvent::ControlDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEvent){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::ControlDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridEvent_php*)_this)->ControlDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEvent, GetCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::GetCol\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEvent::GetCol\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEvent){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridEvent::GetCol())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxGridEvent_php*)_this)->GetCol());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEvent){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEvent::GetPosition() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = ((wxGridEvent_php*)_this)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEvent, GetRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::GetRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEvent::GetRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEvent){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridEvent::GetRow())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxGridEvent_php*)_this)->GetRow());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEvent, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEvent::MetaDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEvent){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::MetaDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridEvent_php*)_this)->MetaDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEvent, Selecting)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::Selecting\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEvent::Selecting\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEvent){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::Selecting())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridEvent_php*)_this)->Selecting());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEvent, ShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::ShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEvent::ShiftDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEvent){
				references = &((wxGridEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::ShiftDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridEvent_php*)_this)->ShiftDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long id1;
	long type1;
	zval* obj1 = 0;
	void* object_pointer1_2 = 0;
	long row1;
	long col1;
	long x1;
	long y1;
	bool sel1;
	zval* kbd1 = 0;
	void* object_pointer1_8 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 9)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llz|llllbO' (&id1, &type1, &obj1, &row1, &col1, &x1, &y1, &sel1, &kbd1, php_wxKeyboardState_entry)\n");
		#endif
		char parse_parameters_string[] = "llz|llllbO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id1, &type1, &obj1, &row1, &col1, &x1, &y1, &sel1, &kbd1, php_wxKeyboardState_entry ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(obj1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(obj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_2 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(obj1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 9){
				if(Z_TYPE_P(kbd1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(kbd1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_8 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_8 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(kbd1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxGridEvent_php();

				((wxGridEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2)\n");
				#endif
				_this = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2);

				((wxGridEvent_php*) _this)->references.Initialize();
				((wxGridEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1)\n");
				#endif
				_this = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1);

				((wxGridEvent_php*) _this)->references.Initialize();
				((wxGridEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1)\n");
				#endif
				_this = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1);

				((wxGridEvent_php*) _this)->references.Initialize();
				((wxGridEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1)\n");
				#endif
				_this = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1);

				((wxGridEvent_php*) _this)->references.Initialize();
				((wxGridEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1)\n");
				#endif
				_this = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1);

				((wxGridEvent_php*) _this)->references.Initialize();
				((wxGridEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1, sel1)\n");
				#endif
				_this = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1, sel1);

				((wxGridEvent_php*) _this)->references.Initialize();
				((wxGridEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1, sel1, *(wxKeyboardState*) object_pointer1_8)\n");
				#endif
				_this = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1, sel1, *(wxKeyboardState*) object_pointer1_8);

				((wxGridEvent_php*) _this)->references.Initialize();
				((wxGridEvent_php*) _this)->references.AddReference(obj1);
				((wxGridEvent_php*) _this)->references.AddReference(kbd1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxGridEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxGridEvent_php*) _this)->evnArray);
		
		array_init(((wxGridEvent_php*) _this)->evnArray);
		
		((wxGridEvent_php*) _this)->phpObj = getThis();
		
		((wxGridEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxGridEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxGridSizeEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridSizeEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxGridSizeEvent_php* object = static_cast<wxGridSizeEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxGridSizeEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxGridSizeEvent, AltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::AltDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridSizeEvent::AltDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridSizeEvent){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridSizeEvent::AltDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridSizeEvent_php*)_this)->AltDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridSizeEvent, ControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::ControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridSizeEvent::ControlDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridSizeEvent){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridSizeEvent::ControlDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridSizeEvent_php*)_this)->ControlDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridSizeEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridSizeEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridSizeEvent){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridSizeEvent::GetPosition() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = ((wxGridSizeEvent_php*)_this)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridSizeEvent, GetRowOrCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::GetRowOrCol\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridSizeEvent::GetRowOrCol\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridSizeEvent){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridSizeEvent::GetRowOrCol())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxGridSizeEvent_php*)_this)->GetRowOrCol());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridSizeEvent, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridSizeEvent::MetaDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridSizeEvent){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridSizeEvent::MetaDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridSizeEvent_php*)_this)->MetaDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridSizeEvent, ShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::ShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridSizeEvent::ShiftDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridSizeEvent){
				references = &((wxGridSizeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridSizeEvent::ShiftDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridSizeEvent_php*)_this)->ShiftDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridSizeEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long id1;
	long type1;
	zval* obj1 = 0;
	void* object_pointer1_2 = 0;
	long rowOrCol1;
	long x1;
	long y1;
	zval* kbd1 = 0;
	void* object_pointer1_6 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llz|lllO' (&id1, &type1, &obj1, &rowOrCol1, &x1, &y1, &kbd1, php_wxKeyboardState_entry)\n");
		#endif
		char parse_parameters_string[] = "llz|lllO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id1, &type1, &obj1, &rowOrCol1, &x1, &y1, &kbd1, php_wxKeyboardState_entry ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(obj1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(obj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_2 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(obj1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 7){
				if(Z_TYPE_P(kbd1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(kbd1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_6 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_6 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(kbd1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxGridSizeEvent_php();

				((wxGridSizeEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2)\n");
				#endif
				_this = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2);

				((wxGridSizeEvent_php*) _this)->references.Initialize();
				((wxGridSizeEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1)\n");
				#endif
				_this = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1);

				((wxGridSizeEvent_php*) _this)->references.Initialize();
				((wxGridSizeEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1)\n");
				#endif
				_this = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1);

				((wxGridSizeEvent_php*) _this)->references.Initialize();
				((wxGridSizeEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1, (int) y1)\n");
				#endif
				_this = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1, (int) y1);

				((wxGridSizeEvent_php*) _this)->references.Initialize();
				((wxGridSizeEvent_php*) _this)->references.AddReference(obj1);
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1, (int) y1, *(wxKeyboardState*) object_pointer1_6)\n");
				#endif
				_this = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1, (int) y1, *(wxKeyboardState*) object_pointer1_6);

				((wxGridSizeEvent_php*) _this)->references.Initialize();
				((wxGridSizeEvent_php*) _this)->references.AddReference(obj1);
				((wxGridSizeEvent_php*) _this)->references.AddReference(kbd1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxGridSizeEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxGridSizeEvent_php*) _this)->evnArray);
		
		array_init(((wxGridSizeEvent_php*) _this)->evnArray);
		
		((wxGridSizeEvent_php*) _this)->phpObj = getThis();
		
		((wxGridSizeEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxGridSizeEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxGridRangeSelectEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridRangeSelectEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxGridRangeSelectEvent_php* object = static_cast<wxGridRangeSelectEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxGridRangeSelectEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxGridRangeSelectEvent, AltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::AltDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridRangeSelectEvent::AltDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridRangeSelectEvent){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::AltDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)_this)->AltDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridRangeSelectEvent, ControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::ControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridRangeSelectEvent::ControlDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridRangeSelectEvent){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::ControlDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)_this)->ControlDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridRangeSelectEvent, GetBottomRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetBottomRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridRangeSelectEvent::GetBottomRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridRangeSelectEvent){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridRangeSelectEvent::GetBottomRow())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxGridRangeSelectEvent_php*)_this)->GetBottomRow());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridRangeSelectEvent, GetLeftCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetLeftCol\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridRangeSelectEvent::GetLeftCol\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridRangeSelectEvent){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridRangeSelectEvent::GetLeftCol())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxGridRangeSelectEvent_php*)_this)->GetLeftCol());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridRangeSelectEvent, GetRightCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetRightCol\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridRangeSelectEvent::GetRightCol\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridRangeSelectEvent){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridRangeSelectEvent::GetRightCol())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxGridRangeSelectEvent_php*)_this)->GetRightCol());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridRangeSelectEvent, GetTopRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetTopRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridRangeSelectEvent::GetTopRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridRangeSelectEvent){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridRangeSelectEvent::GetTopRow())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxGridRangeSelectEvent_php*)_this)->GetTopRow());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridRangeSelectEvent, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridRangeSelectEvent::MetaDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridRangeSelectEvent){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::MetaDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)_this)->MetaDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridRangeSelectEvent, Selecting)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::Selecting\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridRangeSelectEvent::Selecting\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridRangeSelectEvent){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::Selecting())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)_this)->Selecting());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridRangeSelectEvent, ShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::ShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridRangeSelectEvent::ShiftDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridRangeSelectEvent){
				references = &((wxGridRangeSelectEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::ShiftDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)_this)->ShiftDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridRangeSelectEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxGridRangeSelectEvent_php();

				((wxGridRangeSelectEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxGridRangeSelectEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxGridRangeSelectEvent_php*) _this)->evnArray);
		
		array_init(((wxGridRangeSelectEvent_php*) _this)->evnArray);
		
		((wxGridRangeSelectEvent_php*) _this)->phpObj = getThis();
		
		((wxGridRangeSelectEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxGridRangeSelectEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxGridEditorCreatedEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridEditorCreatedEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxGridEditorCreatedEvent_php* object = static_cast<wxGridEditorCreatedEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxGridEditorCreatedEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxGridEditorCreatedEvent, GetCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::GetCol\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEditorCreatedEvent::GetCol\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEditorCreatedEvent){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridEditorCreatedEvent::GetCol())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxGridEditorCreatedEvent_php*)_this)->GetCol());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEditorCreatedEvent, GetControl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::GetControl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEditorCreatedEvent::GetControl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEditorCreatedEvent){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEditorCreatedEvent::GetControl() to return object pointer\n\n");
				#endif
				wxControl_php* value_to_return0;
				value_to_return0 = (wxControl_php*) ((wxGridEditorCreatedEvent_php*)_this)->GetControl();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxControl_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxControl));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEditorCreatedEvent, GetRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::GetRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEditorCreatedEvent::GetRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEditorCreatedEvent){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridEditorCreatedEvent::GetRow())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxGridEditorCreatedEvent_php*)_this)->GetRow());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEditorCreatedEvent, SetCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::SetCol\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEditorCreatedEvent::SetCol\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEditorCreatedEvent){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&col0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &col0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEditorCreatedEvent::SetCol((int) col0)\n\n");
				#endif
				((wxGridEditorCreatedEvent_php*)_this)->SetCol((int) col0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEditorCreatedEvent, SetControl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::SetControl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEditorCreatedEvent::SetControl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEditorCreatedEvent){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* ctrl0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&ctrl0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &ctrl0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(ctrl0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(ctrl0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(ctrl0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEditorCreatedEvent::SetControl((wxControl*) object_pointer0_0)\n\n");
				#endif
				((wxGridEditorCreatedEvent_php*)_this)->SetControl((wxControl*) object_pointer0_0);

				references->AddReference(ctrl0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEditorCreatedEvent, SetRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::SetRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxGridEditorCreatedEvent::SetRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxGridEditorCreatedEvent){
				references = &((wxGridEditorCreatedEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long row0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&row0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &row0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEditorCreatedEvent::SetRow((int) row0)\n\n");
				#endif
				((wxGridEditorCreatedEvent_php*)_this)->SetRow((int) row0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxGridEditorCreatedEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long id1;
	long type1;
	zval* obj1 = 0;
	void* object_pointer1_2 = 0;
	long row1;
	long col1;
	zval* ctrl1 = 0;
	void* object_pointer1_5 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llzllz' (&id1, &type1, &obj1, &row1, &col1, &ctrl1)\n");
		#endif
		char parse_parameters_string[] = "llzllz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id1, &type1, &obj1, &row1, &col1, &ctrl1 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(obj1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(obj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_2 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(obj1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 6){
				if(Z_TYPE_P(ctrl1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(ctrl1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_5 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_5 || (rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(ctrl1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxGridEditorCreatedEvent_php();

				((wxGridEditorCreatedEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (wxControl*) object_pointer1_5)\n");
				#endif
				_this = new wxGridEditorCreatedEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (wxControl*) object_pointer1_5);

				((wxGridEditorCreatedEvent_php*) _this)->references.Initialize();
				((wxGridEditorCreatedEvent_php*) _this)->references.AddReference(obj1);
				((wxGridEditorCreatedEvent_php*) _this)->references.AddReference(ctrl1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxGridEditorCreatedEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxGridEditorCreatedEvent_php*) _this)->evnArray);
		
		array_init(((wxGridEditorCreatedEvent_php*) _this)->evnArray);
		
		((wxGridEditorCreatedEvent_php*) _this)->phpObj = getThis();
		
		((wxGridEditorCreatedEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxGridEditorCreatedEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxHeaderCtrlEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHeaderCtrlEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxHeaderCtrlEvent_php* object = static_cast<wxHeaderCtrlEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHeaderCtrlEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxHeaderCtrlEvent, GetColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHeaderCtrlEvent::GetColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxHeaderCtrlEvent::GetColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxHeaderCtrlEvent){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHeaderCtrlEvent::GetColumn())\n\n");
				#endif
				if(parent_rsrc_type == le_wxHeaderCtrlEvent)
				{
					ZVAL_LONG(return_value, ((wxHeaderCtrlEvent_php*)_this)->GetColumn());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxHeaderCtrlEvent, GetNewOrder)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHeaderCtrlEvent::GetNewOrder\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxHeaderCtrlEvent::GetNewOrder\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxHeaderCtrlEvent){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHeaderCtrlEvent::GetNewOrder())\n\n");
				#endif
				if(parent_rsrc_type == le_wxHeaderCtrlEvent)
				{
					ZVAL_LONG(return_value, ((wxHeaderCtrlEvent_php*)_this)->GetNewOrder());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxHeaderCtrlEvent, GetWidth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHeaderCtrlEvent::GetWidth\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxHeaderCtrlEvent::GetWidth\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxHeaderCtrlEvent){
				references = &((wxHeaderCtrlEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHeaderCtrlEvent::GetWidth())\n\n");
				#endif
				if(parent_rsrc_type == le_wxHeaderCtrlEvent)
				{
					ZVAL_LONG(return_value, ((wxHeaderCtrlEvent_php*)_this)->GetWidth());
				}


				return;
				break;
			}
		}
	}

		
}
void php_wxHyperlinkEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHyperlinkEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxHyperlinkEvent_php* object = static_cast<wxHyperlinkEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHyperlinkEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxHyperlinkEvent, GetURL)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHyperlinkEvent::GetURL\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxHyperlinkEvent::GetURL\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxHyperlinkEvent){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHyperlinkEvent::GetURL().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxHyperlinkEvent_php*)_this)->GetURL();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxHyperlinkEvent, SetURL)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHyperlinkEvent::SetURL\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxHyperlinkEvent::SetURL\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxHyperlinkEvent){
				references = &((wxHyperlinkEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* url0;
	long url_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&url0, &url_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &url0, &url_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHyperlinkEvent::SetURL(wxString(url0, wxConvUTF8))\n\n");
				#endif
				((wxHyperlinkEvent_php*)_this)->SetURL(wxString(url0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxHyperlinkEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHyperlinkEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* generator0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	char* url0;
	long url_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls' (&generator0, &id0, &url0, &url_len0)\n");
		#endif
		char parse_parameters_string[] = "zls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &generator0, &id0, &url0, &url_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(generator0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(generator0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxEvtHandler && rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage && rsrc_type != le_wxBitmapHandler && rsrc_type != le_wxImage && rsrc_type != le_wxSizer && rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer && rsrc_type != le_wxSizerItem && rsrc_type != le_wxGBSizerItem && rsrc_type != le_wxImageList && rsrc_type != le_wxDC && rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC && rsrc_type != le_wxColour && rsrc_type != le_wxMenuItem && rsrc_type != le_wxEvent && rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent && rsrc_type != le_wxAcceleratorTable && rsrc_type != le_wxGDIObject && rsrc_type != le_wxBitmap && rsrc_type != le_wxPalette && rsrc_type != le_wxIcon && rsrc_type != le_wxFont && rsrc_type != le_wxAnimation && rsrc_type != le_wxIconBundle && rsrc_type != le_wxCursor && rsrc_type != le_wxRegion && rsrc_type != le_wxPen && rsrc_type != le_wxBrush && rsrc_type != le_wxArtProvider && rsrc_type != le_wxHtmlCell && rsrc_type != le_wxHtmlContainerCell && rsrc_type != le_wxHtmlColourCell && rsrc_type != le_wxHtmlWidgetCell && rsrc_type != le_wxHtmlEasyPrinting && rsrc_type != le_wxHtmlLinkInfo && rsrc_type != le_wxFindReplaceData && rsrc_type != le_wxSound && rsrc_type != le_wxFileSystem && rsrc_type != le_wxFileSystemHandler && rsrc_type != le_wxMask && rsrc_type != le_wxToolTip && rsrc_type != le_wxGraphicsRenderer && rsrc_type != le_wxLayoutConstraints && rsrc_type != le_wxFSFile && rsrc_type != le_wxColourData && rsrc_type != le_wxFontData && rsrc_type != le_wxGridTableBase && rsrc_type != le_wxDataViewRenderer && rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer && rsrc_type != le_wxDataViewIconText && rsrc_type != le_wxVariant && rsrc_type != le_wxClipboard && rsrc_type != le_wxConfigBase && rsrc_type != le_wxFileConfig && rsrc_type != le_wxXmlResource && rsrc_type != le_wxPageSetupDialogData && rsrc_type != le_wxPrintDialogData && rsrc_type != le_wxPrintData && rsrc_type != le_wxPrintPreview && rsrc_type != le_wxPrinter && rsrc_type != le_wxPrintout && rsrc_type != le_wxHtmlPrintout && rsrc_type != le_wxHtmlDCRenderer && rsrc_type != le_wxHtmlFilter && rsrc_type != le_wxHtmlHelpData && rsrc_type != le_wxHtmlTagHandler && rsrc_type != le_wxHtmlWinTagHandler && rsrc_type != le_wxModule && rsrc_type != le_wxHtmlTagsModule && rsrc_type != le_wxImageHandler && rsrc_type != le_wxXmlResourceHandler && rsrc_type != le_wxXmlDocument && rsrc_type != le_wxLayoutAlgorithm && rsrc_type != le_wxFileHistory && rsrc_type != le_wxToolBarToolBase))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxObject*) object_pointer0_0, (int) id0, wxString(url0, wxConvUTF8))\n");
				#endif
				_this = new wxHyperlinkEvent_php((wxObject*) object_pointer0_0, (int) id0, wxString(url0, wxConvUTF8));

				((wxHyperlinkEvent_php*) _this)->references.Initialize();
				((wxHyperlinkEvent_php*) _this)->references.AddReference(generator0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxHyperlinkEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxHyperlinkEvent_php*) _this)->evnArray);
		
		array_init(((wxHyperlinkEvent_php*) _this)->evnArray);
		
		((wxHyperlinkEvent_php*) _this)->phpObj = getThis();
		
		((wxHyperlinkEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxHyperlinkEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxQueryLayoutInfoEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxQueryLayoutInfoEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxQueryLayoutInfoEvent_php* object = static_cast<wxQueryLayoutInfoEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxQueryLayoutInfoEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetAlignment)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetAlignment\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::GetAlignment\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxQueryLayoutInfoEvent::GetAlignment())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxQueryLayoutInfoEvent_php*)_this)->GetAlignment());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::GetFlags\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxQueryLayoutInfoEvent::GetFlags())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxQueryLayoutInfoEvent_php*)_this)->GetFlags());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::GetOrientation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxQueryLayoutInfoEvent::GetOrientation())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxQueryLayoutInfoEvent_php*)_this)->GetOrientation());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetRequestedLength)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetRequestedLength\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::GetRequestedLength\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxQueryLayoutInfoEvent::GetRequestedLength())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxQueryLayoutInfoEvent_php*)_this)->GetRequestedLength());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::GetSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::GetSize() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				value_to_return0 = ((wxQueryLayoutInfoEvent_php*)_this)->GetSize();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetAlignment)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetAlignment\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::SetAlignment\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long alignment0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&alignment0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &alignment0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetAlignment((wxLayoutAlignment) alignment0)\n\n");
				#endif
				((wxQueryLayoutInfoEvent_php*)_this)->SetAlignment((wxLayoutAlignment) alignment0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::SetFlags\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&flags0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetFlags((int) flags0)\n\n");
				#endif
				((wxQueryLayoutInfoEvent_php*)_this)->SetFlags((int) flags0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::SetOrientation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long orientation0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&orientation0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &orientation0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetOrientation((wxLayoutOrientation) orientation0)\n\n");
				#endif
				((wxQueryLayoutInfoEvent_php*)_this)->SetOrientation((wxLayoutOrientation) orientation0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetRequestedLength)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetRequestedLength\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::SetRequestedLength\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long length0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&length0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &length0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetRequestedLength((int) length0)\n\n");
				#endif
				((wxQueryLayoutInfoEvent_php*)_this)->SetRequestedLength((int) length0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxQueryLayoutInfoEvent::SetSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxQueryLayoutInfoEvent){
				references = &((wxQueryLayoutInfoEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* size0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&size0, php_wxSize_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetSize(*(wxSize*) object_pointer0_0)\n\n");
				#endif
				((wxQueryLayoutInfoEvent_php*)_this)->SetSize(*(wxSize*) object_pointer0_0);

				references->AddReference(size0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxQueryLayoutInfoEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxQueryLayoutInfoEvent_php();

				((wxQueryLayoutInfoEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindowID) id0)\n");
				#endif
				_this = new wxQueryLayoutInfoEvent_php((wxWindowID) id0);

				((wxQueryLayoutInfoEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxQueryLayoutInfoEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxQueryLayoutInfoEvent_php*) _this)->evnArray);
		
		array_init(((wxQueryLayoutInfoEvent_php*) _this)->evnArray);
		
		((wxQueryLayoutInfoEvent_php*) _this)->phpObj = getThis();
		
		((wxQueryLayoutInfoEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxQueryLayoutInfoEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxCalculateLayoutEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCalculateLayoutEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxCalculateLayoutEvent_php* object = static_cast<wxCalculateLayoutEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCalculateLayoutEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxCalculateLayoutEvent, GetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::GetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCalculateLayoutEvent::GetFlags\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCalculateLayoutEvent){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCalculateLayoutEvent::GetFlags())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxCalculateLayoutEvent_php*)_this)->GetFlags());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCalculateLayoutEvent, GetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::GetRect\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCalculateLayoutEvent::GetRect\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCalculateLayoutEvent){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCalculateLayoutEvent::GetRect() to return new object\n\n");
				#endif
				wxRect value_to_return0;
				value_to_return0 = ((wxCalculateLayoutEvent_php*)_this)->GetRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCalculateLayoutEvent, SetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::SetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCalculateLayoutEvent::SetFlags\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCalculateLayoutEvent){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&flags0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCalculateLayoutEvent::SetFlags((int) flags0)\n\n");
				#endif
				((wxCalculateLayoutEvent_php*)_this)->SetFlags((int) flags0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCalculateLayoutEvent, SetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::SetRect\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxCalculateLayoutEvent::SetRect\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxCalculateLayoutEvent){
				references = &((wxCalculateLayoutEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* rect0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect0, php_wxRect_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect0, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCalculateLayoutEvent::SetRect(*(wxRect*) object_pointer0_0)\n\n");
				#endif
				((wxCalculateLayoutEvent_php*)_this)->SetRect(*(wxRect*) object_pointer0_0);

				references->AddReference(rect0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxCalculateLayoutEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxCalculateLayoutEvent_php();

				((wxCalculateLayoutEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindowID) id0)\n");
				#endif
				_this = new wxCalculateLayoutEvent_php((wxWindowID) id0);

				((wxCalculateLayoutEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxCalculateLayoutEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxCalculateLayoutEvent_php*) _this)->evnArray);
		
		array_init(((wxCalculateLayoutEvent_php*) _this)->evnArray);
		
		((wxCalculateLayoutEvent_php*) _this)->phpObj = getThis();
		
		((wxCalculateLayoutEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxCalculateLayoutEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxListEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxListEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxListEvent_php* object = static_cast<wxListEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxListEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxListEvent, GetCacheFrom)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetCacheFrom\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetCacheFrom\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetCacheFrom())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxListEvent_php*)_this)->GetCacheFrom());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetCacheTo)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetCacheTo\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetCacheTo\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetCacheTo())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxListEvent_php*)_this)->GetCacheTo());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetColumn())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxListEvent_php*)_this)->GetColumn());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetData)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetData\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetData\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetData())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxListEvent_php*)_this)->GetData());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetImage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetImage\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetImage\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetImage())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxListEvent_php*)_this)->GetImage());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetIndex)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetIndex\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetIndex\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetIndex())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxListEvent_php*)_this)->GetIndex());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxListEvent::GetItem() to return object reference\n\n");
				#endif
				wxListItem_php* value_to_return0;
				value_to_return0 = (wxListItem_php*) &((wxListEvent_php*)_this)->GetItem();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxListItem_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxListItem));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetKeyCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetKeyCode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetKeyCode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetKeyCode())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxListEvent_php*)_this)->GetKeyCode());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetLabel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetLabel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxListEvent::GetLabel().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxListEvent_php*)_this)->GetLabel();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetMask)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetMask\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetMask\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetMask())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxListEvent_php*)_this)->GetMask());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetPoint)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetPoint\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetPoint\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxListEvent::GetPoint() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = ((wxListEvent_php*)_this)->GetPoint();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, GetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::GetText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxListEvent::GetText().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxListEvent_php*)_this)->GetText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, IsEditCancelled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::IsEditCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxListEvent::IsEditCancelled\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxListEvent){
				references = &((wxListEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxListEvent::IsEditCancelled())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxListEvent_php*)_this)->IsEditCancelled());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxListEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxListEvent_php();

				((wxListEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif
				_this = new wxListEvent_php((wxEventType) commandType0);

				((wxListEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif
				_this = new wxListEvent_php((wxEventType) commandType0, (int) id0);

				((wxListEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxListEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxListEvent_php*) _this)->evnArray);
		
		array_init(((wxListEvent_php*) _this)->evnArray);
		
		((wxListEvent_php*) _this)->phpObj = getThis();
		
		((wxListEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxListEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxMouseEventsManager_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMouseEventsManager_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxMouseEventsManager_php* object = static_cast<wxMouseEventsManager_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMouseEventsManager done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxMouseEventsManager, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEventsManager::Create\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseEventsManager::Create\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseEventsManager){
				references = &((wxMouseEventsManager_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEventsManager::Create((wxWindow*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseEventsManager_php*)_this)->Create((wxWindow*) object_pointer0_0));

				references->AddReference(win0);

				return;
				break;
			}
		}
	}

		
}
void wxMouseEventsManager_php::MouseClickBegin(int item)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseClickBegin\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseClickBegin", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	wxMouseEventsManager::MouseClickBegin(item);

}
void wxMouseEventsManager_php::MouseClickCancelled(int item)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseClickCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseClickCancelled", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	wxMouseEventsManager::MouseClickCancelled(item);

}
bool wxMouseEventsManager_php::MouseClicked(int item)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseClicked\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseClicked", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'MouseClicked'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
bool wxMouseEventsManager_php::MouseDragBegin(int item, const wxPoint& pos)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseDragBegin\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseDragBegin", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
	object_init_ex(arguments[1], php_wxPoint_entry);
	add_property_resource(arguments[1], _wxResource, zend_list_insert((void*)&pos, le_wxPoint));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 2, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'MouseDragBegin'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
void wxMouseEventsManager_php::MouseDragCancelled(int item)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseDragCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseDragCancelled", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'MouseDragCancelled'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	

}
void wxMouseEventsManager_php::MouseDragEnd(int item, const wxPoint& pos)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseDragEnd\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseDragEnd", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
	object_init_ex(arguments[1], php_wxPoint_entry);
	add_property_resource(arguments[1], _wxResource, zend_list_insert((void*)&pos, le_wxPoint));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 2, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'MouseDragEnd'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	

}
void wxMouseEventsManager_php::MouseDragging(int item, const wxPoint& pos)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseDragging\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseDragging", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
	object_init_ex(arguments[1], php_wxPoint_entry);
	add_property_resource(arguments[1], _wxResource, zend_list_insert((void*)&pos, le_wxPoint));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 2, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'MouseDragging'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	

}
int wxMouseEventsManager_php::MouseHitTest(const wxPoint& pos)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseHitTest\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseHitTest", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxPoint_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&pos, le_wxPoint));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'MouseHitTest'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return (int) Z_LVAL_P(return_value);
	

}
PHP_METHOD(php_wxMouseEventsManager, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEventsManager::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* win1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win1)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMouseEventsManager_php();

				((wxMouseEventsManager_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
				#endif
				_this = new wxMouseEventsManager_php((wxWindow*) object_pointer1_0);

				((wxMouseEventsManager_php*) _this)->references.Initialize();
				((wxMouseEventsManager_php*) _this)->references.AddReference(win1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMouseEventsManager);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMouseEventsManager_php*) _this)->evnArray);
		
		array_init(((wxMouseEventsManager_php*) _this)->evnArray);
		
		((wxMouseEventsManager_php*) _this)->phpObj = getThis();
		
		((wxMouseEventsManager_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMouseEventsManager_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxMouseState_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMouseState_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxMouseState_php* object = static_cast<wxMouseState_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMouseState done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxMouseState, Aux1IsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::Aux1IsDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::Aux1IsDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::Aux1IsDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseState_php*)_this)->Aux1IsDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, Aux2IsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::Aux2IsDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::Aux2IsDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::Aux2IsDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseState_php*)_this)->Aux2IsDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::GetPosition() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = ((wxMouseState_php*)_this)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::GetX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseState::GetX())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxMouseState_php*)_this)->GetX());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::GetY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseState::GetY())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxMouseState_php*)_this)->GetY());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, LeftIsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::LeftIsDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::LeftIsDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::LeftIsDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseState_php*)_this)->LeftIsDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, MiddleIsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::MiddleIsDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::MiddleIsDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::MiddleIsDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseState_php*)_this)->MiddleIsDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, RightIsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::RightIsDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::RightIsDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::RightIsDown())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMouseState_php*)_this)->RightIsDown());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, SetAux1Down)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetAux1Down\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::SetAux1Down\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetAux1Down(down0)\n\n");
				#endif
				((wxMouseState_php*)_this)->SetAux1Down(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, SetAux2Down)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetAux2Down\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::SetAux2Down\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetAux2Down(down0)\n\n");
				#endif
				((wxMouseState_php*)_this)->SetAux2Down(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, SetLeftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetLeftDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::SetLeftDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetLeftDown(down0)\n\n");
				#endif
				((wxMouseState_php*)_this)->SetLeftDown(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, SetMiddleDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetMiddleDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::SetMiddleDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetMiddleDown(down0)\n\n");
				#endif
				((wxMouseState_php*)_this)->SetMiddleDown(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::SetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* pos0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pos0, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetPosition(*(wxPoint*) object_pointer0_0)\n\n");
				#endif
				((wxMouseState_php*)_this)->SetPosition(*(wxPoint*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, SetRightDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetRightDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::SetRightDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetRightDown(down0)\n\n");
				#endif
				((wxMouseState_php*)_this)->SetRightDown(down0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, SetState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetState\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::SetState\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* state0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&state0, php_wxMouseState_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &state0, php_wxMouseState_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(state0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(state0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(state0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetState(*(wxMouseState*) object_pointer0_0)\n\n");
				#endif
				((wxMouseState_php*)_this)->SetState(*(wxMouseState*) object_pointer0_0);

				references->AddReference(state0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, SetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::SetX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetX((wxCoord) x0)\n\n");
				#endif
				((wxMouseState_php*)_this)->SetX((wxCoord) x0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, SetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMouseState::SetY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMouseState){
				references = &((wxMouseState_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMouseEvent) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&y0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetY((wxCoord) y0)\n\n");
				#endif
				((wxMouseState_php*)_this)->SetY((wxCoord) y0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMouseState, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMouseState_php();

				((wxMouseState_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMouseState);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMouseState_php*) _this)->evnArray);
		
		array_init(((wxMouseState_php*) _this)->evnArray);
		
		((wxMouseState_php*) _this)->phpObj = getThis();
		
		((wxMouseState_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMouseState_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxProcessEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxProcessEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxProcessEvent_php* object = static_cast<wxProcessEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxProcessEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxProcessEvent, GetExitCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxProcessEvent::GetExitCode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxProcessEvent::GetExitCode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxProcessEvent){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxProcessEvent::GetExitCode())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxProcessEvent_php*)_this)->GetExitCode());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxProcessEvent, GetPid)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxProcessEvent::GetPid\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxProcessEvent::GetPid\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxProcessEvent){
				references = &((wxProcessEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxProcessEvent::GetPid())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxProcessEvent_php*)_this)->GetPid());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxProcessEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxProcessEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	long pid0;
	long exitcode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lll' (&id0, &pid0, &exitcode0)\n");
		#endif
		char parse_parameters_string[] = "|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &pid0, &exitcode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxProcessEvent_php();

				((wxProcessEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif
				_this = new wxProcessEvent_php((int) id0);

				((wxProcessEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (int) pid0)\n");
				#endif
				_this = new wxProcessEvent_php((int) id0, (int) pid0);

				((wxProcessEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (int) pid0, (int) exitcode0)\n");
				#endif
				_this = new wxProcessEvent_php((int) id0, (int) pid0, (int) exitcode0);

				((wxProcessEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxProcessEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxProcessEvent_php*) _this)->evnArray);
		
		array_init(((wxProcessEvent_php*) _this)->evnArray);
		
		((wxProcessEvent_php*) _this)->phpObj = getThis();
		
		((wxProcessEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxProcessEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxRibbonBarEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxRibbonBarEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxRibbonBarEvent_php* object = static_cast<wxRibbonBarEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxRibbonBarEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxRibbonBarEvent, GetPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonBarEvent::GetPage\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxRibbonBarEvent::GetPage\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxRibbonBarEvent){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonBarEvent::GetPage() to return object pointer\n\n");
				#endif
				wxRibbonPage_php* value_to_return0;
				value_to_return0 = (wxRibbonPage_php*) ((wxRibbonBarEvent_php*)_this)->GetPage();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxRibbonPage_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxRibbonPage));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxRibbonBarEvent, SetPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonBarEvent::SetPage\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxRibbonBarEvent::SetPage\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxRibbonBarEvent){
				references = &((wxRibbonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* page0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&page0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &page0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(page0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(page0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(page0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonBarEvent::SetPage((wxRibbonPage*) object_pointer0_0)\n\n");
				#endif
				((wxRibbonBarEvent_php*)_this)->SetPage((wxRibbonPage*) object_pointer0_0);

				references->AddReference(page0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxRibbonBarEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonBarEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long command_type0;
	long win_id0;
	zval* page0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llz' (&command_type0, &win_id0, &page0)\n");
		#endif
		char parse_parameters_string[] = "|llz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &command_type0, &win_id0, &page0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(page0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(page0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(page0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxRibbonBarEvent_php();

				((wxRibbonBarEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0)\n");
				#endif
				_this = new wxRibbonBarEvent_php((wxEventType) command_type0);

				((wxRibbonBarEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0)\n");
				#endif
				_this = new wxRibbonBarEvent_php((wxEventType) command_type0, (int) win_id0);

				((wxRibbonBarEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0, (wxRibbonPage*) object_pointer0_2)\n");
				#endif
				_this = new wxRibbonBarEvent_php((wxEventType) command_type0, (int) win_id0, (wxRibbonPage*) object_pointer0_2);

				((wxRibbonBarEvent_php*) _this)->references.Initialize();
				((wxRibbonBarEvent_php*) _this)->references.AddReference(page0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxRibbonBarEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxRibbonBarEvent_php*) _this)->evnArray);
		
		array_init(((wxRibbonBarEvent_php*) _this)->evnArray);
		
		((wxRibbonBarEvent_php*) _this)->phpObj = getThis();
		
		((wxRibbonBarEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxRibbonBarEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxRibbonButtonBarEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxRibbonButtonBarEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxRibbonButtonBarEvent_php* object = static_cast<wxRibbonButtonBarEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxRibbonButtonBarEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxRibbonButtonBarEvent, GetBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonButtonBarEvent::GetBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxRibbonButtonBarEvent::GetBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxRibbonButtonBarEvent){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonButtonBarEvent::GetBar() to return object pointer\n\n");
				#endif
				wxRibbonButtonBar_php* value_to_return0;
				value_to_return0 = (wxRibbonButtonBar_php*) ((wxRibbonButtonBarEvent_php*)_this)->GetBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxRibbonButtonBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxRibbonButtonBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxRibbonButtonBarEvent, PopupMenu)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonButtonBarEvent::PopupMenu\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxRibbonButtonBarEvent::PopupMenu\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxRibbonButtonBarEvent){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* menu0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&menu0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &menu0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(menu0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(menu0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(menu0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxRibbonButtonBarEvent::PopupMenu((wxMenu*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxRibbonButtonBarEvent_php*)_this)->PopupMenu((wxMenu*) object_pointer0_0));

				references->AddReference(menu0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxRibbonButtonBarEvent, SetBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonButtonBarEvent::SetBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxRibbonButtonBarEvent::SetBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxRibbonButtonBarEvent){
				references = &((wxRibbonButtonBarEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* bar0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&bar0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bar0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bar0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bar0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bar0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonButtonBarEvent::SetBar((wxRibbonButtonBar*) object_pointer0_0)\n\n");
				#endif
				((wxRibbonButtonBarEvent_php*)_this)->SetBar((wxRibbonButtonBar*) object_pointer0_0);

				references->AddReference(bar0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxRibbonButtonBarEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonButtonBarEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long command_type0;
	long win_id0;
	zval* bar0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llz' (&command_type0, &win_id0, &bar0)\n");
		#endif
		char parse_parameters_string[] = "|llz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &command_type0, &win_id0, &bar0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(bar0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bar0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bar0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxRibbonButtonBarEvent_php();

				((wxRibbonButtonBarEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0)\n");
				#endif
				_this = new wxRibbonButtonBarEvent_php((wxEventType) command_type0);

				((wxRibbonButtonBarEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0)\n");
				#endif
				_this = new wxRibbonButtonBarEvent_php((wxEventType) command_type0, (int) win_id0);

				((wxRibbonButtonBarEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0, (wxRibbonButtonBar*) object_pointer0_2)\n");
				#endif
				_this = new wxRibbonButtonBarEvent_php((wxEventType) command_type0, (int) win_id0, (wxRibbonButtonBar*) object_pointer0_2);

				((wxRibbonButtonBarEvent_php*) _this)->references.Initialize();
				((wxRibbonButtonBarEvent_php*) _this)->references.AddReference(bar0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxRibbonButtonBarEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxRibbonButtonBarEvent_php*) _this)->evnArray);
		
		array_init(((wxRibbonButtonBarEvent_php*) _this)->evnArray);
		
		((wxRibbonButtonBarEvent_php*) _this)->phpObj = getThis();
		
		((wxRibbonButtonBarEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxRibbonButtonBarEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxRibbonGalleryEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxRibbonGalleryEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxRibbonGalleryEvent_php* object = static_cast<wxRibbonGalleryEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxRibbonGalleryEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxRibbonGalleryEvent, GetGallery)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::GetGallery\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxRibbonGalleryEvent::GetGallery\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxRibbonGalleryEvent){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonGalleryEvent::GetGallery() to return object pointer\n\n");
				#endif
				wxRibbonGallery_php* value_to_return0;
				value_to_return0 = (wxRibbonGallery_php*) ((wxRibbonGalleryEvent_php*)_this)->GetGallery();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxRibbonGallery_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxRibbonGallery));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxRibbonGalleryEvent, GetGalleryItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::GetGalleryItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxRibbonGalleryEvent::GetGalleryItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxRibbonGalleryEvent){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonGalleryEvent::GetGalleryItem() to return object pointer\n\n");
				#endif
				wxRibbonGalleryItem_php* value_to_return0;
				value_to_return0 = (wxRibbonGalleryItem_php*) ((wxRibbonGalleryEvent_php*)_this)->GetGalleryItem();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxRibbonGalleryItem_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxRibbonGalleryItem));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxRibbonGalleryEvent, SetGallery)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::SetGallery\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxRibbonGalleryEvent::SetGallery\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxRibbonGalleryEvent){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* gallery0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&gallery0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &gallery0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(gallery0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(gallery0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(gallery0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonGalleryEvent::SetGallery((wxRibbonGallery*) object_pointer0_0)\n\n");
				#endif
				((wxRibbonGalleryEvent_php*)_this)->SetGallery((wxRibbonGallery*) object_pointer0_0);

				references->AddReference(gallery0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxRibbonGalleryEvent, SetGalleryItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::SetGalleryItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxRibbonGalleryEvent::SetGalleryItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxRibbonGalleryEvent){
				references = &((wxRibbonGalleryEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&item0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonGalleryEvent::SetGalleryItem((wxRibbonGalleryItem*) object_pointer0_0)\n\n");
				#endif
				((wxRibbonGalleryEvent_php*)_this)->SetGalleryItem((wxRibbonGalleryItem*) object_pointer0_0);

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxRibbonGalleryEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long command_type0;
	long win_id0;
	zval* gallery0 = 0;
	void* object_pointer0_2 = 0;
	zval* item0 = 0;
	void* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llzz' (&command_type0, &win_id0, &gallery0, &item0)\n");
		#endif
		char parse_parameters_string[] = "|llzz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &command_type0, &win_id0, &gallery0, &item0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(gallery0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(gallery0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(gallery0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxRibbonGalleryEvent_php();

				((wxRibbonGalleryEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0)\n");
				#endif
				_this = new wxRibbonGalleryEvent_php((wxEventType) command_type0);

				((wxRibbonGalleryEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0)\n");
				#endif
				_this = new wxRibbonGalleryEvent_php((wxEventType) command_type0, (int) win_id0);

				((wxRibbonGalleryEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0, (wxRibbonGallery*) object_pointer0_2)\n");
				#endif
				_this = new wxRibbonGalleryEvent_php((wxEventType) command_type0, (int) win_id0, (wxRibbonGallery*) object_pointer0_2);

				((wxRibbonGalleryEvent_php*) _this)->references.Initialize();
				((wxRibbonGalleryEvent_php*) _this)->references.AddReference(gallery0);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0, (wxRibbonGallery*) object_pointer0_2, (wxRibbonGalleryItem*) object_pointer0_3)\n");
				#endif
				_this = new wxRibbonGalleryEvent_php((wxEventType) command_type0, (int) win_id0, (wxRibbonGallery*) object_pointer0_2, (wxRibbonGalleryItem*) object_pointer0_3);

				((wxRibbonGalleryEvent_php*) _this)->references.Initialize();
				((wxRibbonGalleryEvent_php*) _this)->references.AddReference(gallery0);
				((wxRibbonGalleryEvent_php*) _this)->references.AddReference(item0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxRibbonGalleryEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxRibbonGalleryEvent_php*) _this)->evnArray);
		
		array_init(((wxRibbonGalleryEvent_php*) _this)->evnArray);
		
		((wxRibbonGalleryEvent_php*) _this)->phpObj = getThis();
		
		((wxRibbonGalleryEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxRibbonGalleryEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxSashEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSashEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxSashEvent_php* object = static_cast<wxSashEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSashEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxSashEvent, GetDragRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSashEvent::GetDragRect\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSashEvent::GetDragRect\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSashEvent){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSashEvent::GetDragRect() to return new object\n\n");
				#endif
				wxRect value_to_return0;
				value_to_return0 = ((wxSashEvent_php*)_this)->GetDragRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSashEvent, GetDragStatus)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSashEvent::GetDragStatus\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSashEvent::GetDragStatus\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSashEvent){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSashEvent::GetDragStatus())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSashEvent_php*)_this)->GetDragStatus());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSashEvent, GetEdge)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSashEvent::GetEdge\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSashEvent::GetEdge\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSashEvent){
				references = &((wxSashEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSashEvent::GetEdge())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSashEvent_php*)_this)->GetEdge());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSashEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSashEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	long edge0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&id0, &edge0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &edge0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxSashEvent_php();

				((wxSashEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif
				_this = new wxSashEvent_php((int) id0);

				((wxSashEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (wxSashEdgePosition) edge0)\n");
				#endif
				_this = new wxSashEvent_php((int) id0, (wxSashEdgePosition) edge0);

				((wxSashEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxSashEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxSashEvent_php*) _this)->evnArray);
		
		array_init(((wxSashEvent_php*) _this)->evnArray);
		
		((wxSashEvent_php*) _this)->phpObj = getThis();
		
		((wxSashEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxSashEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxSpinEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSpinEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxSpinEvent_php* object = static_cast<wxSpinEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSpinEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxSpinEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSpinEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSpinEvent){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSpinEvent::GetPosition())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSpinEvent_php*)_this)->GetPosition());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSpinEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSpinEvent::SetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSpinEvent){
				references = &((wxSpinEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSpinEvent::SetPosition((int) pos0)\n\n");
				#endif
				((wxSpinEvent_php*)_this)->SetPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSpinEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxSpinEvent_php();

				((wxSpinEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif
				_this = new wxSpinEvent_php((wxEventType) commandType0);

				((wxSpinEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif
				_this = new wxSpinEvent_php((wxEventType) commandType0, (int) id0);

				((wxSpinEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxSpinEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxSpinEvent_php*) _this)->evnArray);
		
		array_init(((wxSpinEvent_php*) _this)->evnArray);
		
		((wxSpinEvent_php*) _this)->phpObj = getThis();
		
		((wxSpinEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxSpinEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxSpinDoubleEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSpinDoubleEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxSpinDoubleEvent_php* object = static_cast<wxSpinDoubleEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSpinDoubleEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxSpinDoubleEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinDoubleEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* event0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	long commandType1;
	long winid1;
	double value1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event0, php_wxSpinDoubleEvent_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0, php_wxSpinDoubleEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lld' (&commandType1, &winid1, &value1)\n");
		#endif
		char parse_parameters_string[] = "|lld";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType1, &winid1, &value1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxSpinDoubleEvent*) object_pointer0_0)\n");
				#endif
				_this = new wxSpinDoubleEvent_php(*(wxSpinDoubleEvent*) object_pointer0_0);

				((wxSpinDoubleEvent_php*) _this)->references.Initialize();
				((wxSpinDoubleEvent_php*) _this)->references.AddReference(event0);
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxSpinDoubleEvent_php();

				((wxSpinDoubleEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType1)\n");
				#endif
				_this = new wxSpinDoubleEvent_php((wxEventType) commandType1);

				((wxSpinDoubleEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType1, (int) winid1)\n");
				#endif
				_this = new wxSpinDoubleEvent_php((wxEventType) commandType1, (int) winid1);

				((wxSpinDoubleEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType1, (int) winid1, value1)\n");
				#endif
				_this = new wxSpinDoubleEvent_php((wxEventType) commandType1, (int) winid1, value1);

				((wxSpinDoubleEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxSpinDoubleEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxSpinDoubleEvent_php*) _this)->evnArray);
		
		array_init(((wxSpinDoubleEvent_php*) _this)->evnArray);
		
		((wxSpinDoubleEvent_php*) _this)->phpObj = getThis();
		
		((wxSpinDoubleEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxSpinDoubleEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxSpinDoubleEvent, SetValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinDoubleEvent::SetValue\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSpinDoubleEvent::SetValue\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSpinDoubleEvent){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	double value0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&value0)\n");
		#endif
		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSpinDoubleEvent::SetValue(value0)\n\n");
				#endif
				((wxSpinDoubleEvent_php*)_this)->SetValue(value0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSpinDoubleEvent, GetValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinDoubleEvent::GetValue\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSpinDoubleEvent::GetValue\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSpinDoubleEvent){
				references = &((wxSpinDoubleEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSpinDoubleEvent::GetValue())\n\n");
				#endif
				ZVAL_DOUBLE(return_value, ((wxSpinDoubleEvent_php*)_this)->GetValue());


				return;
				break;
			}
		}
	}

		
}
void php_wxSplitterEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSplitterEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxSplitterEvent_php* object = static_cast<wxSplitterEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSplitterEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxSplitterEvent, GetSashPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::GetSashPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSplitterEvent::GetSashPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSplitterEvent){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplitterEvent::GetSashPosition())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSplitterEvent_php*)_this)->GetSashPosition());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSplitterEvent, GetWindowBeingRemoved)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::GetWindowBeingRemoved\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSplitterEvent::GetWindowBeingRemoved\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSplitterEvent){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSplitterEvent::GetWindowBeingRemoved() to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxSplitterEvent_php*)_this)->GetWindowBeingRemoved();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSplitterEvent, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSplitterEvent::GetX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSplitterEvent){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplitterEvent::GetX())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSplitterEvent_php*)_this)->GetX());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSplitterEvent, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSplitterEvent::GetY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSplitterEvent){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplitterEvent::GetY())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSplitterEvent_php*)_this)->GetY());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSplitterEvent, SetSashPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::SetSashPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSplitterEvent::SetSashPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSplitterEvent){
				references = &((wxSplitterEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSplitterEvent::SetSashPosition((int) pos0)\n\n");
				#endif
				((wxSplitterEvent_php*)_this)->SetSashPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSplitterEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long eventType0;
	zval* splitter0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lz' (&eventType0, &splitter0)\n");
		#endif
		char parse_parameters_string[] = "|lz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &splitter0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(splitter0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(splitter0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(splitter0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxSplitterEvent_php();

				((wxSplitterEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif
				_this = new wxSplitterEvent_php((wxEventType) eventType0);

				((wxSplitterEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, (wxSplitterWindow*) object_pointer0_1)\n");
				#endif
				_this = new wxSplitterEvent_php((wxEventType) eventType0, (wxSplitterWindow*) object_pointer0_1);

				((wxSplitterEvent_php*) _this)->references.Initialize();
				((wxSplitterEvent_php*) _this)->references.AddReference(splitter0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxSplitterEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxSplitterEvent_php*) _this)->evnArray);
		
		array_init(((wxSplitterEvent_php*) _this)->evnArray);
		
		((wxSplitterEvent_php*) _this)->phpObj = getThis();
		
		((wxSplitterEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxSplitterEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxStyledTextEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxStyledTextEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxStyledTextEvent_php* object = static_cast<wxStyledTextEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxStyledTextEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxStyledTextEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* event1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &id0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event1, php_wxStyledTextEvent_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event1, php_wxStyledTextEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxStyledTextEvent_php();

				((wxStyledTextEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif
				_this = new wxStyledTextEvent_php((wxEventType) commandType0);

				((wxStyledTextEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif
				_this = new wxStyledTextEvent_php((wxEventType) commandType0, (int) id0);

				((wxStyledTextEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxStyledTextEvent*) object_pointer1_0)\n");
				#endif
				_this = new wxStyledTextEvent_php(*(wxStyledTextEvent*) object_pointer1_0);

				((wxStyledTextEvent_php*) _this)->references.Initialize();
				((wxStyledTextEvent_php*) _this)->references.AddReference(event1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxStyledTextEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxStyledTextEvent_php*) _this)->evnArray);
		
		array_init(((wxStyledTextEvent_php*) _this)->evnArray);
		
		((wxStyledTextEvent_php*) _this)->phpObj = getThis();
		
		((wxStyledTextEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxStyledTextEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxStyledTextEvent, SetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetY((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetY((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetX((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetX((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetWParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetWParam\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetWParam\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetWParam((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetWParam((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* t0;
	long t_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&t0, &t_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &t0, &t_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetText(wxString(t0, wxConvUTF8))\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetText(wxString(t0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetPosition((int) pos0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetModifiers)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetModifiers\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetModifiers\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long m0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&m0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &m0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetModifiers((int) m0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetModifiers((int) m0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetModificationType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetModificationType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetModificationType\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long t0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&t0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &t0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetModificationType((int) t0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetModificationType((int) t0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetMessage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetMessage\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetMessage\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetMessage((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetMessage((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetMargin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetMargin\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetMargin\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetMargin((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetMargin((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetListType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetListType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetListType\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetListType((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetListType((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetLinesAdded)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetLinesAdded\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetLinesAdded\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long num0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&num0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &num0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetLinesAdded((int) num0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetLinesAdded((int) num0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetLine)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetLine\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetLine\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetLine((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetLine((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetAlt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetAlt\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetAlt\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxStyledTextEvent::GetAlt())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxStyledTextEvent_php*)_this)->GetAlt());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetControl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetControl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetControl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxStyledTextEvent::GetControl())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxStyledTextEvent_php*)_this)->GetControl());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetDragAllowMove)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetDragAllowMove\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetDragAllowMove\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxStyledTextEvent::GetDragAllowMove())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxStyledTextEvent_php*)_this)->GetDragAllowMove());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetDragText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetDragText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetDragText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxStyledTextEvent::GetDragText().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxStyledTextEvent_php*)_this)->GetDragText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetFoldLevelNow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetFoldLevelNow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetFoldLevelNow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetFoldLevelNow())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetFoldLevelNow());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetFoldLevelPrev)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetFoldLevelPrev\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetFoldLevelPrev\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetFoldLevelPrev())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetFoldLevelPrev());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetKey)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetKey\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetKey\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetKey())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetKey());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetLParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetLParam\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetLParam\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetLParam())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetLParam());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetLength)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetLength\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetLength\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetLength())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetLength());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetLine)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetLine\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetLine\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetLine())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetLine());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetLinesAdded)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetLinesAdded\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetLinesAdded\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetLinesAdded())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetLinesAdded());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetListType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetListType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetListType\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetListType())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetListType());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetMargin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetMargin\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetMargin\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetMargin())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetMargin());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetMessage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetMessage\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetMessage\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetMessage())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetMessage());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetModificationType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetModificationType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetModificationType\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetModificationType())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetModificationType());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetModifiers)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetModifiers\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetModifiers\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetModifiers())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetModifiers());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetPosition\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetPosition())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetPosition());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetShift)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetShift\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetShift\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxStyledTextEvent::GetShift())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxStyledTextEvent_php*)_this)->GetShift());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxStyledTextEvent::GetText().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxStyledTextEvent_php*)_this)->GetText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetWParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetWParam\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetWParam\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetWParam())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetWParam());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetX())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetX());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetY())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetY());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetDragAllowMove)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetDragAllowMove\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetDragAllowMove\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&val0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetDragAllowMove(val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetDragAllowMove(val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetDragResult)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetDragResult\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetDragResult\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetDragResult((wxDragResult) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetDragResult((wxDragResult) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetDragText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetDragText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetDragText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* val0;
	long val_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&val0, &val_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0, &val_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetDragText(wxString(val0, wxConvUTF8))\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetDragText(wxString(val0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetFoldLevelNow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetFoldLevelNow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetFoldLevelNow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetFoldLevelNow((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetFoldLevelNow((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetFoldLevelPrev)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetFoldLevelPrev\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetFoldLevelPrev\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetFoldLevelPrev((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetFoldLevelPrev((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetKey)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetKey\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetKey\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long k0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&k0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &k0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetKey((int) k0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetKey((int) k0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetLParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetLParam\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetLParam\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetLParam((int) val0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetLParam((int) val0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, SetLength)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetLength\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::SetLength\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&len0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetLength((int) len0)\n\n");
				#endif
				((wxStyledTextEvent_php*)_this)->SetLength((int) len0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxStyledTextEvent, GetDragResult)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetDragResult\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxStyledTextEvent::GetDragResult\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxStyledTextEvent){
				references = &((wxStyledTextEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetDragResult())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)_this)->GetDragResult());


				return;
				break;
			}
		}
	}

		
}
void php_wxTaskBarIconEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTaskBarIconEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxTaskBarIconEvent_php* object = static_cast<wxTaskBarIconEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxTaskBarIconEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxTaskBarIconEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTaskBarIconEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long evtType0;
	zval* tbIcon0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lz' (&evtType0, &tbIcon0)\n");
		#endif
		char parse_parameters_string[] = "lz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &evtType0, &tbIcon0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(tbIcon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(tbIcon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(tbIcon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) evtType0, (wxTaskBarIcon*) object_pointer0_1)\n");
				#endif
				_this = new wxTaskBarIconEvent_php((wxEventType) evtType0, (wxTaskBarIcon*) object_pointer0_1);

				((wxTaskBarIconEvent_php*) _this)->references.Initialize();
				((wxTaskBarIconEvent_php*) _this)->references.AddReference(tbIcon0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxTaskBarIconEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxTaskBarIconEvent_php*) _this)->evnArray);
		
		array_init(((wxTaskBarIconEvent_php*) _this)->evnArray);
		
		((wxTaskBarIconEvent_php*) _this)->phpObj = getThis();
		
		((wxTaskBarIconEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxTaskBarIconEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxTimerEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTimerEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxTimerEvent_php* object = static_cast<wxTimerEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxTimerEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxTimerEvent, GetInterval)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTimerEvent::GetInterval\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTimerEvent::GetInterval\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTimerEvent){
				references = &((wxTimerEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxTimerEvent::GetInterval())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxTimerEvent_php*)_this)->GetInterval());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTimerEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTimerEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* timer1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&timer1, php_wxTimer_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &timer1, php_wxTimer_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(timer1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(timer1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(timer1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxTimerEvent_php();

				((wxTimerEvent_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxTimer*) object_pointer1_0)\n");
				#endif
				_this = new wxTimerEvent_php(*(wxTimer*) object_pointer1_0);

				((wxTimerEvent_php*) _this)->references.Initialize();
				((wxTimerEvent_php*) _this)->references.AddReference(timer1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxTimerEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxTimerEvent_php*) _this)->evnArray);
		
		array_init(((wxTimerEvent_php*) _this)->evnArray);
		
		((wxTimerEvent_php*) _this)->phpObj = getThis();
		
		((wxTimerEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxTimerEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxTreeEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTreeEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxTreeEvent_php* object = static_cast<wxTreeEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxTreeEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxTreeEvent, GetItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTreeEvent::GetItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTreeEvent){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::GetItem() to return new object\n\n");
				#endif
				wxTreeItemId value_to_return0;
				value_to_return0 = ((wxTreeEvent_php*)_this)->GetItem();
				void* ptr = safe_emalloc(1, sizeof(wxTreeItemId_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxTreeItemId));
				object_init_ex(return_value, php_wxTreeItemId_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTreeEvent, GetKeyCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetKeyCode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTreeEvent::GetKeyCode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTreeEvent){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxTreeEvent::GetKeyCode())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxTreeEvent_php*)_this)->GetKeyCode());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTreeEvent, GetKeyEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetKeyEvent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTreeEvent::GetKeyEvent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTreeEvent){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::GetKeyEvent() to return object reference\n\n");
				#endif
				wxKeyEvent_php* value_to_return0;
				value_to_return0 = (wxKeyEvent_php*) &((wxTreeEvent_php*)_this)->GetKeyEvent();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxKeyEvent_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxKeyEvent));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTreeEvent, GetLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetLabel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTreeEvent::GetLabel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTreeEvent){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxTreeEvent::GetLabel().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxTreeEvent_php*)_this)->GetLabel();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTreeEvent, GetOldItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetOldItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTreeEvent::GetOldItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTreeEvent){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::GetOldItem() to return new object\n\n");
				#endif
				wxTreeItemId value_to_return0;
				value_to_return0 = ((wxTreeEvent_php*)_this)->GetOldItem();
				void* ptr = safe_emalloc(1, sizeof(wxTreeItemId_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxTreeItemId));
				object_init_ex(return_value, php_wxTreeItemId_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTreeEvent, GetPoint)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetPoint\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTreeEvent::GetPoint\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTreeEvent){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::GetPoint() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = ((wxTreeEvent_php*)_this)->GetPoint();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTreeEvent, IsEditCancelled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::IsEditCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTreeEvent::IsEditCancelled\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTreeEvent){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTreeEvent::IsEditCancelled())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTreeEvent_php*)_this)->IsEditCancelled());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTreeEvent, SetToolTip)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::SetToolTip\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTreeEvent::SetToolTip\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTreeEvent){
				references = &((wxTreeEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* tooltip0;
	long tooltip_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&tooltip0, &tooltip_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &tooltip0, &tooltip_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::SetToolTip(wxString(tooltip0, wxConvUTF8))\n\n");
				#endif
				((wxTreeEvent_php*)_this)->SetToolTip(wxString(tooltip0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTreeEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long commandType0;
	zval* tree0 = 0;
	void* object_pointer0_1 = 0;
	zval* item0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lz|O' (&commandType0, &tree0, &item0, php_wxTreeItemId_entry)\n");
		#endif
		char parse_parameters_string[] = "lz|O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &tree0, &item0, php_wxTreeItemId_entry ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(tree0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(tree0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(tree0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (wxTreeCtrl*) object_pointer0_1)\n");
				#endif
				_this = new wxTreeEvent_php((wxEventType) commandType0, (wxTreeCtrl*) object_pointer0_1);

				((wxTreeEvent_php*) _this)->references.Initialize();
				((wxTreeEvent_php*) _this)->references.AddReference(tree0);
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (wxTreeCtrl*) object_pointer0_1, *(wxTreeItemId*) object_pointer0_2)\n");
				#endif
				_this = new wxTreeEvent_php((wxEventType) commandType0, (wxTreeCtrl*) object_pointer0_1, *(wxTreeItemId*) object_pointer0_2);

				((wxTreeEvent_php*) _this)->references.Initialize();
				((wxTreeEvent_php*) _this)->references.AddReference(tree0);
				((wxTreeEvent_php*) _this)->references.AddReference(item0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxTreeEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxTreeEvent_php*) _this)->evnArray);
		
		array_init(((wxTreeEvent_php*) _this)->evnArray);
		
		((wxTreeEvent_php*) _this)->phpObj = getThis();
		
		((wxTreeEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxTreeEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxWizardEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWizardEvent_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxWizardEvent_php* object = static_cast<wxWizardEvent_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxWizardEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxWizardEvent, GetDirection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWizardEvent::GetDirection\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxWizardEvent::GetDirection\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxWizardEvent){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxWizardEvent::GetDirection())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxWizardEvent_php*)_this)->GetDirection());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxWizardEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWizardEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long type0;
	long id0;
	bool direction0;
	zval* page0 = 0;
	void* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llbz' (&type0, &id0, &direction0, &page0)\n");
		#endif
		char parse_parameters_string[] = "|llbz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &id0, &direction0, &page0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(page0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(page0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxWizardPageSimple))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(page0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxWizardEvent_php();

				((wxWizardEvent_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0)\n");
				#endif
				_this = new wxWizardEvent_php((wxEventType) type0);

				((wxWizardEvent_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0)\n");
				#endif
				_this = new wxWizardEvent_php((wxEventType) type0, (int) id0);

				((wxWizardEvent_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0, direction0)\n");
				#endif
				_this = new wxWizardEvent_php((wxEventType) type0, (int) id0, direction0);

				((wxWizardEvent_php*) _this)->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0, direction0, (wxWizardPage*) object_pointer0_3)\n");
				#endif
				_this = new wxWizardEvent_php((wxEventType) type0, (int) id0, direction0, (wxWizardPage*) object_pointer0_3);

				((wxWizardEvent_php*) _this)->references.Initialize();
				((wxWizardEvent_php*) _this)->references.AddReference(page0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxWizardEvent);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxWizardEvent_php*) _this)->evnArray);
		
		array_init(((wxWizardEvent_php*) _this)->evnArray);
		
		((wxWizardEvent_php*) _this)->phpObj = getThis();
		
		((wxWizardEvent_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxWizardEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxWizardEvent, GetPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWizardEvent::GetPage\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxWizardEvent::GetPage\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxWizardEvent){
				references = &((wxWizardEvent_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxWizardEvent::GetPage() to return object pointer\n\n");
				#endif
				wxWizardPage_php* value_to_return0;
				value_to_return0 = (wxWizardPage_php*) ((wxWizardEvent_php*)_this)->GetPage();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWizardPage_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWizardPage));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}

/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @description
 * File that holds the functions code of the wxWidgets extension
 * 
 * @note
 * Some parts of this file are auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "functions.h"

#include "appmanagement.h"
#include "cfg.h"
#include "bookctrl.h"
#include "dnd.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "docview.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "html.h"
#include "help.h"
#include "logging.h"
#include "managedwnd.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "media.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "aui.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "dvc.h"
#include "others.h"

/**
 * Predefined handcoded set of functions
 */
PHP_FUNCTION(php_wxInitialize)
{
	wxInitAllImageHandlers();
	RETVAL_BOOL(wxInitialize());
}

PHP_FUNCTION(php_wxInitAllImageHandlers)
{
	wxInitAllImageHandlers();
	RETVAL_TRUE;
}

PHP_FUNCTION(php_wxExecute)
{
	char* _argStr0;
	int _argStr0_len;
	
	char parse_parameters[] = "s";
    
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, parse_parameters, &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		long ret0;
		ret0 = wxExecute(wxString(_argStr0, wxConvUTF8));
		
		RETURN_LONG((long)ret0)
	}
}

PHP_FUNCTION(php_wxEntry)
{
	int argc = 1;
	char application_name[] = "wxPHP";
	char *argv[2] = { application_name, NULL };
	
	RETVAL_LONG(wxEntry(argc,argv));
}

PHP_FUNCTION(php_wxAboutBox)
{
    zval **tmp;
	int id_to_find;
	wxAboutDialogInfo *property;
	zval *objvar;
	char _wxResource[] = "wxResource";
	
	char parse_parameters[] = "O";
	
	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, parse_parameters, &objvar, php_wxAboutDialogInfo_entry) == FAILURE)
	{
		RETURN_NULL();
	}
	
	if(zend_hash_find(Z_OBJPROP_P(objvar), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	
	id_to_find = Z_LVAL_PP(tmp);
	
	property = (wxAboutDialogInfo*) zend_list_find(id_to_find, &le_wxAboutDialogInfo);
	
	wxAboutBox(*property);
}

/**
 * Space reserved for autogenerated functions
 */
PHP_FUNCTION(php_wxHandleFatalExceptions)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxHandleFatalExceptions\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool doIt0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&doIt0)\n");
		#endif
		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &doIt0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxHandleFatalExceptions())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxHandleFatalExceptions());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxHandleFatalExceptions(doIt0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxHandleFatalExceptions(doIt0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxUninitialize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxUninitialize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload1_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxUninitialize()\n\n");
				#endif
				wxUninitialize();


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxUninitialize()\n\n");
				#endif
				wxUninitialize();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxWakeUpIdle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxWakeUpIdle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxWakeUpIdle()\n\n");
				#endif
				wxWakeUpIdle();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxYield)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxYield\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxYield())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxYield());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSafeYield)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSafeYield\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	bool onlyIfNeeded0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|zb' (&win0, &onlyIfNeeded0)\n");
		#endif
		char parse_parameters_string[] = "|zb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0, &onlyIfNeeded0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSafeYield())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSafeYield());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSafeYield((wxWindow*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSafeYield((wxWindow*) object_pointer0_0));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSafeYield((wxWindow*) object_pointer0_0, onlyIfNeeded0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSafeYield((wxWindow*) object_pointer0_0, onlyIfNeeded0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxExit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxExit\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxExit()\n\n");
				#endif
				wxExit();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFromString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFromString\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	zval* font0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* string1;
	long string_len1;
	zval* colour1 = 0;
	void* object_pointer1_1 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sz' (&string0, &string_len0, &font0)\n");
		#endif
		char parse_parameters_string[] = "sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0, &font0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(font0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(font0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sz' (&string1, &string_len1, &colour1)\n");
		#endif
		char parse_parameters_string[] = "sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string1, &string_len1, &colour1 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(colour1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxFromString(wxString(string0, wxConvUTF8), (wxFont*) object_pointer0_1))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxFromString(wxString(string0, wxConvUTF8), (wxFont*) object_pointer0_1));


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxFromString(wxString(string1, wxConvUTF8), (wxColour*) object_pointer1_1))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxFromString(wxString(string1, wxConvUTF8), (wxColour*) object_pointer1_1));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxToString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxToString\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* font0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* colour1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&font0, php_wxFont_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &font0, php_wxFont_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(font0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(font0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&colour1, php_wxColour_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &colour1, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(colour1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxToString(*(wxFont*) object_pointer0_0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxToString(*(wxFont*) object_pointer0_0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxToString(*(wxColour*) object_pointer1_0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxToString(*(wxColour*) object_pointer1_0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSafeShowMessage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSafeShowMessage\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* title0;
	long title_len0;
	char* text0;
	long text_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&title0, &title_len0, &text0, &text_len0)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &title0, &title_len0, &text0, &text_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSafeShowMessage(wxString(title0, wxConvUTF8), wxString(text0, wxConvUTF8))\n\n");
				#endif
				wxSafeShowMessage(wxString(title0, wxConvUTF8), wxString(text0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSysErrorCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSysErrorCode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxSysErrorCode())\n\n");
				#endif
				ZVAL_LONG(return_value, wxSysErrorCode());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsMainThread)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsMainThread\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsMainThread())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsMainThread());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMutexGuiEnter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMutexGuiEnter\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMutexGuiEnter()\n\n");
				#endif
				wxMutexGuiEnter();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMutexGuiLeave)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMutexGuiLeave\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMutexGuiLeave()\n\n");
				#endif
				wxMutexGuiLeave();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBase64Encode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64Encode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dst0;
	long dst_len0;
	zval* dst0_ref;
	long dstLen0;
	char* src0;
	long src_len0;
	long srcLen0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* src1;
	long src_len1;
	long srcLen1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'slsl' (&dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0)\n");
		#endif
		char parse_parameters_string[] = "slsl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dst0_ref, &dummy, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&src1, &src_len1, &srcLen1)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &src1, &src_len1, &srcLen1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Encode(dst0, (size_t) dstLen0, (const void*) src0, (size_t) srcLen0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Encode(dst0, (size_t) dstLen0, (const void*) src0, (size_t) srcLen0));

				ZVAL_STRING(dst0_ref, dst0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxBase64Encode((const void*) src1, (size_t) srcLen1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxBase64Encode((const void*) src1, (size_t) srcLen1);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBase64DecodedSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64DecodedSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long srcLen0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&srcLen0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &srcLen0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64DecodedSize((size_t) srcLen0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64DecodedSize((size_t) srcLen0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBase64EncodedSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64EncodedSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&len0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64EncodedSize((size_t) len0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64EncodedSize((size_t) len0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBase64Decode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64Decode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dst0;
	long dst_len0;
	zval* dst0_ref;
	long dstLen0;
	char* src0;
	long src_len0;
	long srcLen0;
	long mode0;
	long* posErr0;
	zval* posErr0_ref;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dst1;
	long dst_len1;
	zval* dst1_ref;
	long dstLen1;
	char* str1;
	long str_len1;
	long mode1;
	long* posErr1;
	zval* posErr1_ref;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sls|lll' (&dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0, &mode0, posErr0)\n");
		#endif
		char parse_parameters_string[] = "sls|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0, &mode0, posErr0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz|zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dst0_ref, &dummy, &dummy, &dummy, &dummy, &posErr0_ref );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sls|ll' (&dst1, &dst_len1, &dstLen1, &str1, &str_len1, &mode1, posErr1)\n");
		#endif
		char parse_parameters_string[] = "sls|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dst1, &dst_len1, &dstLen1, &str1, &str_len1, &mode1, posErr1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zzz|zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dst1_ref, &dummy, &dummy, &dummy, &posErr1_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0, (size_t*) posErr0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0, (size_t*) posErr0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);
				size_t elements_returned0_5 = sizeof(posErr0)/sizeof(*posErr0);
				array_init(posErr0_ref);
				for(size_t i=0; i<elements_returned0_5; i++)
				{
					add_next_index_long(posErr0_ref, posErr0[i]);
				}

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8)));

				ZVAL_STRING(dst1_ref, (char*) dst1, 1);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1));

				ZVAL_STRING(dst1_ref, (char*) dst1, 1);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1, (size_t*) posErr1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1, (size_t*) posErr1));

				ZVAL_STRING(dst1_ref, (char*) dst1, 1);
				size_t elements_returned1_4 = sizeof(posErr1)/sizeof(*posErr1);
				array_init(posErr1_ref);
				for(size_t i=0; i<elements_returned1_4; i++)
				{
					add_next_index_long(posErr1_ref, posErr1[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetSingleChoiceIndex)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetSingleChoiceIndex\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	zval* aChoices0 = 0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	long width0;
	long height0;
	long initialSelection0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* message1;
	long message_len1;
	char* caption1;
	long caption_len1;
	long n1;
	zval* choices1;
	zval* parent1 = 0;
	void* object_pointer1_4 = 0;
	long x1;
	long y1;
	bool centre1;
	long width1;
	long height1;
	long initialSelection1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* message2;
	long message_len2;
	char* caption2;
	long caption_len2;
	zval* choices2 = 0;
	long initialSelection2;
	zval* parent2 = 0;
	void* object_pointer2_4 = 0;
	bool overload2_called = false;
	//Parameters for overload 3
	char* message3;
	long message_len3;
	char* caption3;
	long caption_len3;
	long n3;
	zval* choices3;
	long initialSelection3;
	zval* parent3 = 0;
	void* object_pointer3_5 = 0;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 10)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssa|zllblll' (&message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0)\n");
		#endif
		char parse_parameters_string[] = "ssa|zllblll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 4  && arguments_received <= 11)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssla|zllblll' (&message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1)\n");
		#endif
		char parse_parameters_string[] = "ssla|zllblll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received >= 4  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssal|z' (&message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2)\n");
		#endif
		char parse_parameters_string[] = "ssal|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload3;
					}
				}
				else if(Z_TYPE_P(parent2) != IS_NULL)
				{
						goto overload3;
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received >= 5  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sslal|z' (&message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3)\n");
		#endif
		char parse_parameters_string[] = "sslal|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3 ) == SUCCESS)
		{
			if(arguments_received >= 6){
				if(Z_TYPE_P(parent3) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer3_5 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer3_5 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent3) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload3_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_2;
		bool strings_continue0_2 = true;

		switch(arguments_received)
		{
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2));


				return;
				break;
			}
			case 4:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3));


				return;
				break;
			}
			case 5:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0));


				return;
				break;
			}
			case 6:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0));


				return;
				break;
			}
			case 7:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0));


				return;
				break;
			}
			case 8:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0));


				return;
				break;
			}
			case 9:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0));


				return;
				break;
			}
			case 10:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0));


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		int array_count1_3 = 1;
		HashTable* arr_hash1_3;
		if(arguments_received > 3)
		{
			arr_hash1_3 = Z_ARRVAL_P(choices1);
			array_count1_3 = zend_hash_num_elements(arr_hash1_3);
		}
		wxString* strings_array1_3 = new wxString[array_count1_3];
		bool strings_continue1_3 = true;

		switch(arguments_received)
		{
			case 4:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 5:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 6:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 7:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 8:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 9:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 10:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 11:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1));

				delete[] strings_array1_3;

				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		wxArrayString strings_array2_2;
		bool strings_continue2_2 = true;

		switch(arguments_received)
		{
			case 4:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2));


				return;
				break;
			}
			case 5:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4));


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		int array_count3_3 = 1;
		HashTable* arr_hash3_3;
		if(arguments_received > 3)
		{
			arr_hash3_3 = Z_ARRVAL_P(choices3);
			array_count3_3 = zend_hash_num_elements(arr_hash3_3);
		}
		wxString* strings_array3_3 = new wxString[array_count3_3];
		bool strings_continue3_3 = true;

		switch(arguments_received)
		{
			case 5:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3));

				delete[] strings_array3_3;

				return;
				break;
			}
			case 6:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5));

				delete[] strings_array3_3;

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetSingleChoice)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetSingleChoice\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	zval* aChoices0 = 0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	long width0;
	long height0;
	long initialSelection0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* message1;
	long message_len1;
	char* caption1;
	long caption_len1;
	long n1;
	zval* choices1;
	zval* parent1 = 0;
	void* object_pointer1_4 = 0;
	long x1;
	long y1;
	bool centre1;
	long width1;
	long height1;
	long initialSelection1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* message2;
	long message_len2;
	char* caption2;
	long caption_len2;
	zval* choices2 = 0;
	long initialSelection2;
	zval* parent2 = 0;
	void* object_pointer2_4 = 0;
	bool overload2_called = false;
	//Parameters for overload 3
	char* message3;
	long message_len3;
	char* caption3;
	long caption_len3;
	long n3;
	zval* choices3;
	long initialSelection3;
	zval* parent3 = 0;
	void* object_pointer3_5 = 0;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 10)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssa|zllblll' (&message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0)\n");
		#endif
		char parse_parameters_string[] = "ssa|zllblll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 4  && arguments_received <= 11)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssla|zllblll' (&message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1)\n");
		#endif
		char parse_parameters_string[] = "ssla|zllblll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received >= 4  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssal|z' (&message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2)\n");
		#endif
		char parse_parameters_string[] = "ssal|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload3;
					}
				}
				else if(Z_TYPE_P(parent2) != IS_NULL)
				{
						goto overload3;
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received >= 5  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sslal|z' (&message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3)\n");
		#endif
		char parse_parameters_string[] = "sslal|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3 ) == SUCCESS)
		{
			if(arguments_received >= 6){
				if(Z_TYPE_P(parent3) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer3_5 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer3_5 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent3) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload3_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_2;
		bool strings_continue0_2 = true;

		switch(arguments_received)
		{
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2);
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
			case 8:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return8;
				value_to_return8 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);


				return;
				break;
			}
			case 9:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return9;
				value_to_return9 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);


				return;
				break;
			}
			case 10:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return10;
				value_to_return10 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0);
				char* temp_string10;
				temp_string10 = (char*)malloc(sizeof(wxChar)*(value_to_return10.size()+1));
				strcpy (temp_string10, (const char *) value_to_return10.char_str() );
				ZVAL_STRING(return_value, temp_string10, 1);
				free(temp_string10);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		int array_count1_3 = 1;
		HashTable* arr_hash1_3;
		if(arguments_received > 3)
		{
			arr_hash1_3 = Z_ARRVAL_P(choices1);
			array_count1_3 = zend_hash_num_elements(arr_hash1_3);
		}
		wxString* strings_array1_3 = new wxString[array_count1_3];
		bool strings_continue1_3 = true;

		switch(arguments_received)
		{
			case 4:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 5:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 6:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 7:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 8:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return8;
				value_to_return8 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 9:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return9;
				value_to_return9 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 10:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return10;
				value_to_return10 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1);
				char* temp_string10;
				temp_string10 = (char*)malloc(sizeof(wxChar)*(value_to_return10.size()+1));
				strcpy (temp_string10, (const char *) value_to_return10.char_str() );
				ZVAL_STRING(return_value, temp_string10, 1);
				free(temp_string10);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 11:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return11;
				value_to_return11 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1);
				char* temp_string11;
				temp_string11 = (char*)malloc(sizeof(wxChar)*(value_to_return11.size()+1));
				strcpy (temp_string11, (const char *) value_to_return11.char_str() );
				ZVAL_STRING(return_value, temp_string11, 1);
				free(temp_string11);

				delete[] strings_array1_3;

				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		wxArrayString strings_array2_2;
		bool strings_continue2_2 = true;

		switch(arguments_received)
		{
			case 4:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		int array_count3_3 = 1;
		HashTable* arr_hash3_3;
		if(arguments_received > 3)
		{
			arr_hash3_3 = Z_ARRVAL_P(choices3);
			array_count3_3 = zend_hash_num_elements(arr_hash3_3);
		}
		wxString* strings_array3_3 = new wxString[array_count3_3];
		bool strings_continue3_3 = true;

		switch(arguments_received)
		{
			case 5:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);

				delete[] strings_array3_3;

				return;
				break;
			}
			case 6:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);

				delete[] strings_array3_3;

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetColourFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetColourFromUser\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	zval* colInit0 = 0;
	void* object_pointer0_1 = 0;
	char* caption0;
	long caption_len0;
	zval* data0 = 0;
	void* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO|sz' (&parent0, &colInit0, php_wxColour_entry, &caption0, &caption_len0, &data0)\n");
		#endif
		char parse_parameters_string[] = "zO|sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &colInit0, php_wxColour_entry, &caption0, &caption_len0, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(colInit0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colInit0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colInit0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(data0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(data0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1) to return new object\n\n");
				#endif
				wxColour value_to_return2;
				value_to_return2 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1);
				void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxColour value_to_return3;
				value_to_return3 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8), (wxColourData*) object_pointer0_3) to return new object\n\n");
				#endif
				wxColour value_to_return4;
				value_to_return4 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8), (wxColourData*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxAbort)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAbort\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxAbort()\n\n");
				#endif
				wxAbort();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDisableAsserts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisableAsserts\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxDisableAsserts()\n\n");
				#endif
				wxDisableAsserts();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsDebuggerRunning)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsDebuggerRunning\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsDebuggerRunning())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsDebuggerRunning());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetDefaultAssertHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetDefaultAssertHandler\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSetDefaultAssertHandler()\n\n");
				#endif
				wxSetDefaultAssertHandler();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTrap)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTrap\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxTrap()\n\n");
				#endif
				wxTrap();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDirSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDirSelector\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* default_path0;
	long default_path_len0;
	long style0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* parent0 = 0;
	void* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sslOz' (&message0, &message_len0, &default_path0, &default_path_len0, &style0, &pos0, php_wxPoint_entry, &parent0)\n");
		#endif
		char parse_parameters_string[] = "|sslOz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &default_path0, &default_path_len0, &style0, &pos0, php_wxPoint_entry, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxDirSelector();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxDirSelector(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0);
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3, (wxWindow*) object_pointer0_4).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3, (wxWindow*) object_pointer0_4);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxNewEventType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxNewEventType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxNewEventType())\n\n");
				#endif
				ZVAL_LONG(return_value, wxNewEventType());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxPostEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxPostEvent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* dest0 = 0;
	void* object_pointer0_0 = 0;
	zval* event0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO' (&dest0, &event0, php_wxEvent_entry)\n");
		#endif
		char parse_parameters_string[] = "zO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &event0, php_wxEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dest0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dest0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dest0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxPostEvent((wxEvtHandler*) object_pointer0_0, *(wxEvent*) object_pointer0_1)\n\n");
				#endif
				wxPostEvent((wxEvtHandler*) object_pointer0_0, *(wxEvent*) object_pointer0_1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxQueueEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxQueueEvent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* dest0 = 0;
	void* object_pointer0_0 = 0;
	zval* event0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zz' (&dest0, &event0)\n");
		#endif
		char parse_parameters_string[] = "zz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dest0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dest0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dest0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxQueueEvent((wxEvtHandler*) object_pointer0_0, (wxEvent*) object_pointer0_1)\n\n");
				#endif
				wxQueueEvent((wxEvtHandler*) object_pointer0_0, (wxEvent*) object_pointer0_1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFileSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFileSelector\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* default_path0;
	long default_path_len0;
	char* default_filename0;
	long default_filename_len0;
	char* default_extension0;
	long default_extension_len0;
	char* wildcard0;
	long wildcard_len0;
	long flags0;
	zval* parent0 = 0;
	void* object_pointer0_6 = 0;
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 9)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sssslzll' (&message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, &default_extension0, &default_extension_len0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "s|sssslzll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, &default_extension0, &default_extension_len0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0 ) == SUCCESS)
		{
			if(arguments_received >= 7){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_6 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_6 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxFileSelector(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8));
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8));
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return8;
				value_to_return8 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);


				return;
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return9;
				value_to_return9 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFileSelectorEx)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFileSelectorEx\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* default_path0;
	long default_path_len0;
	char* default_filename0;
	long default_filename_len0;
	long* indexDefaultExtension0;
	zval* indexDefaultExtension0_ref;
	char* wildcard0;
	long wildcard_len0;
	long flags0;
	zval* parent0 = 0;
	void* object_pointer0_6 = 0;
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 9)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ssslslzll' (&message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, indexDefaultExtension0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "|ssslslzll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, indexDefaultExtension0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0 ) == SUCCESS)
		{
			if(arguments_received >= 7){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_6 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_6 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "|zzzzzzzzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dummy, &dummy, &dummy, &indexDefaultExtension0_ref, &dummy, &dummy, &dummy, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxFileSelectorEx();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxFileSelectorEx(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8));
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return8;
				value_to_return8 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return9;
				value_to_return9 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxLoadFileSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxLoadFileSelector\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* what0;
	long what_len0;
	char* extension0;
	long extension_len0;
	char* default_name0;
	long default_name_len0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|sz' (&what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0)\n");
		#endif
		char parse_parameters_string[] = "ss|sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSaveFileSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSaveFileSelector\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* what0;
	long what_len0;
	char* extension0;
	long extension_len0;
	char* default_name0;
	long default_name_len0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|sz' (&what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0)\n");
		#endif
		char parse_parameters_string[] = "ss|sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetOSDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetOSDirectory\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetOSDirectory().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetOSDirectory();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxParseCommonDialogsFilter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxParseCommonDialogsFilter\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* wildCard0;
	long wildCard_len0;
	zval* descriptions0 = 0;
	zval* descriptions0_ref;
	zval* filters0 = 0;
	zval* filters0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'saa' (&wildCard0, &wildCard_len0, &descriptions0, &filters0)\n");
		#endif
		char parse_parameters_string[] = "saa";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &wildCard0, &wildCard_len0, &descriptions0, &filters0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_1;
		bool strings_continue0_1 = true;

		wxArrayString strings_array0_2;
		bool strings_continue0_2 = true;

		switch(arguments_received)
		{
			case 3:
			{
				int array_index0_1 = 0;
				zval** temp_array_value0_1 = 0;
				while(strings_continue0_1)
				{
					if(zend_hash_index_find(HASH_OF(descriptions0), array_index0_1, (void**)&temp_array_value0_1) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_1);
						strings_array0_1.Add(wxString(Z_STRVAL_PP(temp_array_value0_1), wxConvUTF8));
						array_index0_1++;
					}
					else
					{
						strings_continue0_1 = false;
					}
				}
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(filters0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxParseCommonDialogsFilter(wxString(wildCard0, wxConvUTF8), strings_array0_1, strings_array0_2))\n\n");
				#endif
				ZVAL_LONG(return_value, wxParseCommonDialogsFilter(wxString(wildCard0, wxConvUTF8), strings_array0_1, strings_array0_2));

				char* temp_string0_1;
				array_init(descriptions0);
				for(size_t i=0; i<strings_array0_1.GetCount(); i++)
				{
					temp_string0_1 = (char*)malloc(sizeof(wxChar)*(strings_array0_1[i].size()+1));
					strcpy (temp_string0_1, (const char *) strings_array0_1[i].char_str() );
					add_next_index_string(descriptions0, (char*) temp_string0_1, 1);
					free(temp_string0_1);

				}
				char* temp_string0_2;
				array_init(filters0);
				for(size_t i=0; i<strings_array0_2.GetCount(); i++)
				{
					temp_string0_2 = (char*)malloc(sizeof(wxChar)*(strings_array0_2[i].size()+1));
					strcpy (temp_string0_2, (const char *) strings_array0_2[i].char_str() );
					add_next_index_string(filters0, (char*) temp_string0_2, 1);
					free(temp_string0_2);

				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDirExists)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDirExists\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dirname0;
	long dirname_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&dirname0, &dirname_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dirname0, &dirname_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxDirExists(wxString(dirname0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxDirExists(wxString(dirname0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSplitPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSplitPath\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* fullname0;
	long fullname_len0;
	char* path0;
	long path_len0;
	zval* path0_ref;
	char* name0;
	long name_len0;
	zval* name0_ref;
	char* ext0;
	long ext_len0;
	zval* ext0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssss' (&fullname0, &fullname_len0, &path0, &path_len0, &name0, &name_len0, &ext0, &ext_len0)\n");
		#endif
		char parse_parameters_string[] = "ssss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &fullname0, &fullname_len0, &path0, &path_len0, &name0, &name_len0, &ext0, &ext_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dummy, &path0_ref, &name0_ref, &ext0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				wxString string_arg0_1 = wxString(path0, wxConvUTF8);
				wxString string_arg0_2 = wxString(name0, wxConvUTF8);
				wxString string_arg0_3 = wxString(ext0, wxConvUTF8);
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSplitPath(wxString(fullname0, wxConvUTF8), &string_arg0_1, &string_arg0_2, &string_arg0_3)\n\n");
				#endif
				wxSplitPath(wxString(fullname0, wxConvUTF8), &string_arg0_1, &string_arg0_2, &string_arg0_3);

				char* temp_string0_1;
				temp_string0_1 = (char*)malloc(sizeof(wxChar)*(string_arg0_1.size()+1));
				strcpy (temp_string0_1, (const char *) string_arg0_1.char_str() );
				ZVAL_STRING(path0_ref, (char*) temp_string0_1, 1);
				free(temp_string0_1);

				char* temp_string0_2;
				temp_string0_2 = (char*)malloc(sizeof(wxChar)*(string_arg0_2.size()+1));
				strcpy (temp_string0_2, (const char *) string_arg0_2.char_str() );
				ZVAL_STRING(name0_ref, (char*) temp_string0_2, 1);
				free(temp_string0_2);

				char* temp_string0_3;
				temp_string0_3 = (char*)malloc(sizeof(wxChar)*(string_arg0_3.size()+1));
				strcpy (temp_string0_3, (const char *) string_arg0_3.char_str() );
				ZVAL_STRING(ext0_ref, (char*) temp_string0_3, 1);
				free(temp_string0_3);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRenameFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRenameFile\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* file10;
	long file1_len0;
	char* file20;
	long file2_len0;
	bool overwrite0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|b' (&file10, &file1_len0, &file20, &file2_len0, &overwrite0)\n");
		#endif
		char parse_parameters_string[] = "ss|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &file10, &file1_len0, &file20, &file2_len0, &overwrite0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxCopyFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxCopyFile\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* file10;
	long file1_len0;
	char* file20;
	long file2_len0;
	bool overwrite0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|b' (&file10, &file1_len0, &file20, &file2_len0, &overwrite0)\n");
		#endif
		char parse_parameters_string[] = "ss|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &file10, &file1_len0, &file20, &file2_len0, &overwrite0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFileExists)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFileExists\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* filename0;
	long filename_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filename0, &filename_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxFileExists(wxString(filename0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxFileExists(wxString(filename0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMatchWild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMatchWild\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* pattern0;
	long pattern_len0;
	char* text0;
	long text_len0;
	bool dot_special0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssb' (&pattern0, &pattern_len0, &text0, &text_len0, &dot_special0)\n");
		#endif
		char parse_parameters_string[] = "ssb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pattern0, &pattern_len0, &text0, &text_len0, &dot_special0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxMatchWild(wxString(pattern0, wxConvUTF8), wxString(text0, wxConvUTF8), dot_special0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxMatchWild(wxString(pattern0, wxConvUTF8), wxString(text0, wxConvUTF8), dot_special0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxPathOnly)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxPathOnly\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &path0, &path_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxPathOnly(wxString(path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxPathOnly(wxString(path0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsWild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsWild\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* pattern0;
	long pattern_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&pattern0, &pattern_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pattern0, &pattern_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsWild(wxString(pattern0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsWild(wxString(pattern0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsAbsolutePath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsAbsolutePath\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* filename0;
	long filename_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filename0, &filename_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsAbsolutePath(wxString(filename0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsAbsolutePath(wxString(filename0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetCwd)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetCwd\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetCwd().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetCwd();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetWorkingDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetWorkingDirectory\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dir0;
	long dir_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&dir0, &dir_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dir0, &dir_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSetWorkingDirectory(wxString(dir0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSetWorkingDirectory(wxString(dir0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxConcatFiles)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxConcatFiles\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* file10;
	long file1_len0;
	char* file20;
	long file2_len0;
	char* file30;
	long file3_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sss' (&file10, &file1_len0, &file20, &file2_len0, &file30, &file3_len0)\n");
		#endif
		char parse_parameters_string[] = "sss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &file10, &file1_len0, &file20, &file2_len0, &file30, &file3_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxConcatFiles(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), wxString(file30, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxConcatFiles(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), wxString(file30, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRemoveFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRemoveFile\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* file0;
	long file_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&file0, &file_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &file0, &file_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRemoveFile(wxString(file0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRemoveFile(wxString(file0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMkdir)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMkdir\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dir0;
	long dir_len0;
	long perm0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&dir0, &dir_len0, &perm0)\n");
		#endif
		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dir0, &dir_len0, &perm0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxMkdir(wxString(dir0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxMkdir(wxString(dir0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxMkdir(wxString(dir0, wxConvUTF8), (int) perm0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxMkdir(wxString(dir0, wxConvUTF8), (int) perm0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRmdir)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRmdir\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dir0;
	long dir_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&dir0, &dir_len0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dir0, &dir_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRmdir(wxString(dir0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRmdir(wxString(dir0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRmdir(wxString(dir0, wxConvUTF8), (int) flags0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRmdir(wxString(dir0, wxConvUTF8), (int) flags0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindNextFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindNextFile\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFindNextFile().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxFindNextFile();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindFirstFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindFirstFile\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* spec0;
	long spec_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&spec0, &spec_len0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &spec0, &spec_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFindFirstFile(wxString(spec0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxFindFirstFile(wxString(spec0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFindFirstFile(wxString(spec0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxFindFirstFile(wxString(spec0, wxConvUTF8), (int) flags0);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetFileKind)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetFileKind\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long fd0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&fd0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &fd0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetFileKind((int) fd0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetFileKind((int) fd0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetFontFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetFontFromUser\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	zval* fontInit0 = 0;
	void* object_pointer0_1 = 0;
	char* caption0;
	long caption_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO|s' (&parent0, &fontInit0, php_wxFont_entry, &caption0, &caption_len0)\n");
		#endif
		char parse_parameters_string[] = "zO|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &fontInit0, php_wxFont_entry, &caption0, &caption_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(fontInit0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(fontInit0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(fontInit0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1) to return new object\n\n");
				#endif
				wxFont value_to_return2;
				value_to_return2 = wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1);
				void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxFont));
				object_init_ex(return_value, php_wxFont_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1, wxString(caption0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxFont value_to_return3;
				value_to_return3 = wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1, wxString(caption0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxFont));
				object_init_ex(return_value, php_wxFont_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxColourDisplay)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxColourDisplay\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxColourDisplay())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxColourDisplay());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDisplayDepth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisplayDepth\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxDisplayDepth())\n\n");
				#endif
				ZVAL_LONG(return_value, wxDisplayDepth());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetCursor\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&cursor0, php_wxCursor_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0, php_wxCursor_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cursor0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSetCursor(*(wxCursor*) object_pointer0_0)\n\n");
				#endif
				wxSetCursor(*(wxCursor*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxClientDisplayRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxClientDisplayRect\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long* x0;
	zval* x0_ref;
	long* y0;
	zval* y0_ref;
	long* width0;
	zval* width0_ref;
	long* height0;
	zval* height0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (x0, y0, width0, height0)\n");
		#endif
		char parse_parameters_string[] = "llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, x0, y0, width0, height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &x0_ref, &y0_ref, &width0_ref, &height0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxClientDisplayRect((int*) x0, (int*) y0, (int*) width0, (int*) height0)\n\n");
				#endif
				wxClientDisplayRect((int*) x0, (int*) y0, (int*) width0, (int*) height0);

				size_t elements_returned0_0 = sizeof(x0)/sizeof(*x0);
				array_init(x0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(x0_ref, x0[i]);
				}
				size_t elements_returned0_1 = sizeof(y0)/sizeof(*y0);
				array_init(y0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(y0_ref, y0[i]);
				}
				size_t elements_returned0_2 = sizeof(width0)/sizeof(*width0);
				array_init(width0_ref);
				for(size_t i=0; i<elements_returned0_2; i++)
				{
					add_next_index_long(width0_ref, width0[i]);
				}
				size_t elements_returned0_3 = sizeof(height0)/sizeof(*height0);
				array_init(height0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(height0_ref, height0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetClientDisplayRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetClientDisplayRect\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetClientDisplayRect() to return new object\n\n");
				#endif
				wxRect value_to_return0;
				value_to_return0 = wxGetClientDisplayRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetDisplayPPI)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetDisplayPPI\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetDisplayPPI() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				value_to_return0 = wxGetDisplayPPI();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDisplaySize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisplaySize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long* width0;
	zval* width0_ref;
	long* height0;
	zval* height0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (width0, height0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, width0, height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &width0_ref, &height0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxDisplaySize((int*) width0, (int*) height0)\n\n");
				#endif
				wxDisplaySize((int*) width0, (int*) height0);

				size_t elements_returned0_0 = sizeof(width0)/sizeof(*width0);
				array_init(width0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(width0_ref, width0[i]);
				}
				size_t elements_returned0_1 = sizeof(height0)/sizeof(*height0);
				array_init(height0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(height0_ref, height0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetDisplaySize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetDisplaySize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetDisplaySize() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				value_to_return0 = wxGetDisplaySize();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDisplaySizeMM)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisplaySizeMM\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long* width0;
	zval* width0_ref;
	long* height0;
	zval* height0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (width0, height0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, width0, height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &width0_ref, &height0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxDisplaySizeMM((int*) width0, (int*) height0)\n\n");
				#endif
				wxDisplaySizeMM((int*) width0, (int*) height0);

				size_t elements_returned0_0 = sizeof(width0)/sizeof(*width0);
				array_init(width0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(width0_ref, width0[i]);
				}
				size_t elements_returned0_1 = sizeof(height0)/sizeof(*height0);
				array_init(height0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(height0_ref, height0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetDisplaySizeMM)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetDisplaySizeMM\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetDisplaySizeMM() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				value_to_return0 = wxGetDisplaySizeMM();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxEntryCleanup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxEntryCleanup\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEntryCleanup()\n\n");
				#endif
				wxEntryCleanup();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFinite)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFinite\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif
		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxFinite(x0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxFinite(x0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsNaN)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsNaN\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif
		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsNaN(x0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsNaN(x0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRound)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRound\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif
		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxRound(x0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxRound(x0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsSameDouble)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsSameDouble\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	double y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'dd' (&x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "dd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsSameDouble(x0, y0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsSameDouble(x0, y0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsNullDouble)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsNullDouble\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif
		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsNullDouble(x0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsNullDouble(x0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMessageBox)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMessageBox\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	long style0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|slzll' (&message0, &message_len0, &caption0, &caption_len0, &style0, &parent0, &x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "s|slzll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &style0, &parent0, &x0, &y0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0));


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3));


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0));


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0, (int) y0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0, (int) y0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxCreateDynamicObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxCreateDynamicObject\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* className0;
	long className_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&className0, &className_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &className0, &className_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxCreateDynamicObject(wxString(className0, wxConvUTF8)) to return object pointer\n\n");
				#endif
				wxObject_php* value_to_return1;
				value_to_return1 = (wxObject_php*) wxCreateDynamicObject(wxString(className0, wxConvUTF8));
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxObject_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxObject));
				}



				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindWindowAtPointer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowAtPointer\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* pt0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowAtPointer(*(wxPoint*) object_pointer0_0) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxFindWindowAtPointer(*(wxPoint*) object_pointer0_0);
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));
				}



				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetActiveWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetActiveWindow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetActiveWindow() to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) wxGetActiveWindow();
				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));
				}



				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetTopLevelParent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTopLevelParent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* window0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetTopLevelParent((wxWindow*) object_pointer0_0) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxGetTopLevelParent((wxWindow*) object_pointer0_0);
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));
				}



				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRichTextHasStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRichTextHasStyle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long flags0;
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&flags0, &style0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0, &style0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRichTextHasStyle((int) flags0, (int) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRichTextHasStyle((int) flags0, (int) style0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetStockLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetStockLabel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long id0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l|l' (&id0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "l|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetStockLabel((wxWindowID) id0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetStockLabel((wxWindowID) id0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetStockLabel((wxWindowID) id0, (long) flags0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxGetStockLabel((wxWindowID) id0, (long) flags0);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetTextFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTextFromUser\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	char* default_value0;
	long default_value_len0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sszllb' (&message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0)\n");
		#endif
		char parse_parameters_string[] = "s|sszllb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetTextFromUser(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetPasswordFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetPasswordFromUser\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	char* default_value0;
	long default_value_len0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sszllb' (&message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0)\n");
		#endif
		char parse_parameters_string[] = "s|sszllb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetTimeZone)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTimeZone\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetTimeZone())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetTimeZone());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetLocalTime)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetLocalTime\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetLocalTime())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetLocalTime());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetUTCTime)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetUTCTime\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetUTCTime())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetUTCTime());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStringTokenize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStringTokenize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	char* delims0;
	long delims_len0;
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sl' (&str0, &str_len0, &delims0, &delims_len0, &mode0)\n");
		#endif
		char parse_parameters_string[] = "s|sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0, &delims0, &delims_len0, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8)) to return strings array\n\n");
				#endif
				wxArrayString value_to_return1;
				value_to_return1 = wxStringTokenize(wxString(str0, wxConvUTF8));
				char* temp_string1;
				array_init(return_value);
				for(size_t i=0; i<value_to_return1.GetCount(); i++)
				{
					temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1[i].size()+1));
					strcpy (temp_string1, (const char *) value_to_return1[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string1, 1);
					free(temp_string1);
				}


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8)) to return strings array\n\n");
				#endif
				wxArrayString value_to_return2;
				value_to_return2 = wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8));
				char* temp_string2;
				array_init(return_value);
				for(size_t i=0; i<value_to_return2.GetCount(); i++)
				{
					temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2[i].size()+1));
					strcpy (temp_string2, (const char *) value_to_return2[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string2, 1);
					free(temp_string2);
				}


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8), (wxStringTokenizerMode) mode0) to return strings array\n\n");
				#endif
				wxArrayString value_to_return3;
				value_to_return3 = wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8), (wxStringTokenizerMode) mode0);
				char* temp_string3;
				array_init(return_value);
				for(size_t i=0; i<value_to_return3.GetCount(); i++)
				{
					temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3[i].size()+1));
					strcpy (temp_string3, (const char *) value_to_return3[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string3, 1);
					free(temp_string3);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetTranslation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTranslation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	char* domain0;
	long domain_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* string1;
	long string_len1;
	char* plural1;
	long plural_len1;
	long n1;
	char* domain1;
	long domain_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|s' (&string0, &string_len0, &domain0, &domain_len0)\n");
		#endif
		char parse_parameters_string[] = "s|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0, &domain0, &domain_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl|s' (&string1, &string_len1, &plural1, &plural_len1, &n1, &domain1, &domain_len1)\n");
		#endif
		char parse_parameters_string[] = "ssl|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string1, &string_len1, &plural1, &plural_len1, &n1, &domain1, &domain_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetTranslation(wxString(string0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string0, wxConvUTF8), wxString(domain0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxGetTranslation(wxString(string0, wxConvUTF8), wxString(domain0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1);
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1, wxString(domain1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1, wxString(domain1, wxConvUTF8));
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBeginBusyCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBeginBusyCursor\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&cursor0)\n");
		#endif
		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cursor0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxBeginBusyCursor()\n\n");
				#endif
				wxBeginBusyCursor();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxBeginBusyCursor((const wxCursor*) object_pointer0_0)\n\n");
				#endif
				wxBeginBusyCursor((const wxCursor*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxEndBusyCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxEndBusyCursor\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEndBusyCursor()\n\n");
				#endif
				wxEndBusyCursor();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsBusy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsBusy\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsBusy())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsBusy());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBell\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxBell()\n\n");
				#endif
				wxBell();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxInfoMessageBox)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxInfoMessageBox\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&parent0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxInfoMessageBox((wxWindow*) object_pointer0_0)\n\n");
				#endif
				wxInfoMessageBox((wxWindow*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetLibraryVersionInfo)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetLibraryVersionInfo\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetLibraryVersionInfo() to return new object\n\n");
				#endif
				wxVersionInfo value_to_return0;
				value_to_return0 = wxGetLibraryVersionInfo();
				void* ptr = safe_emalloc(1, sizeof(wxVersionInfo_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxVersionInfo));
				object_init_ex(return_value, php_wxVersionInfo_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxVersionInfo));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetenv)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetenv\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* name0;
	long name_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name0, &name_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&name1, &name_len1)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name1, &name_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetenv(name0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return1;
				value_to_return1 = wxGetenv(name0);
				ZVAL_STRING(return_value, value_to_return1, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetenv(wxString(name1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return1;
				value_to_return1 = wxGetenv(wxString(name1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return1, 1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetEnv)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetEnv\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* var0;
	long var_len0;
	char* value0;
	long value_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&var0, &var_len0, &value0, &value_len0)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &var0, &var_len0, &value0, &value_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSetEnv(wxString(var0, wxConvUTF8), wxString(value0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSetEnv(wxString(var0, wxConvUTF8), wxString(value0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxUnsetEnv)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxUnsetEnv\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* var0;
	long var_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&var0, &var_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &var0, &var_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxUnsetEnv(wxString(var0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxUnsetEnv(wxString(var0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetBatteryState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetBatteryState\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetBatteryState())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetBatteryState());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetPowerType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetPowerType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetPowerType())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetPowerType());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetKeyState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetKeyState\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long key0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&key0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &key0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxGetKeyState((wxKeyCode) key0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxGetKeyState((wxKeyCode) key0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetMousePosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetMousePosition\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetMousePosition() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = wxGetMousePosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetMouseState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetMouseState\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetMouseState() to return new object\n\n");
				#endif
				wxMouseState value_to_return0;
				value_to_return0 = wxGetMouseState();
				void* ptr = safe_emalloc(1, sizeof(wxMouseState_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxMouseState));
				object_init_ex(return_value, php_wxMouseState_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxMouseState));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxEnableTopLevelWindows)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxEnableTopLevelWindows\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool enable0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&enable0)\n");
		#endif
		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &enable0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEnableTopLevelWindows()\n\n");
				#endif
				wxEnableTopLevelWindows();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEnableTopLevelWindows(enable0)\n\n");
				#endif
				wxEnableTopLevelWindows(enable0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindWindowAtPoint)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowAtPoint\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* pt0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowAtPoint(*(wxPoint*) object_pointer0_0) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxFindWindowAtPoint(*(wxPoint*) object_pointer0_0);
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));
				}



				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindWindowByLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowByLabel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* label0;
	long label_len0;
	zval* parent0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|z' (&label0, &label_len0, &parent0)\n");
		#endif
		char parse_parameters_string[] = "s|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &label0, &label_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByLabel(wxString(label0, wxConvUTF8)) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxFindWindowByLabel(wxString(label0, wxConvUTF8));
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));
				}



				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByLabel(wxString(label0, wxConvUTF8), (wxWindow*) object_pointer0_1) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return2;
				value_to_return2 = (wxWindow_php*) wxFindWindowByLabel(wxString(label0, wxConvUTF8), (wxWindow*) object_pointer0_1);
				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return2, le_wxWindow));
				}



				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindWindowByName)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowByName\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* name0;
	long name_len0;
	zval* parent0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|z' (&name0, &name_len0, &parent0)\n");
		#endif
		char parse_parameters_string[] = "s|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name0, &name_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByName(wxString(name0, wxConvUTF8)) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxFindWindowByName(wxString(name0, wxConvUTF8));
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));
				}



				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByName(wxString(name0, wxConvUTF8), (wxWindow*) object_pointer0_1) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return2;
				value_to_return2 = (wxWindow_php*) wxFindWindowByName(wxString(name0, wxConvUTF8), (wxWindow*) object_pointer0_1);
				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return2, le_wxWindow));
				}



				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindMenuItemId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindMenuItemId\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* frame0 = 0;
	void* object_pointer0_0 = 0;
	char* menuString0;
	long menuString_len0;
	char* itemString0;
	long itemString_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zss' (&frame0, &menuString0, &menuString_len0, &itemString0, &itemString_len0)\n");
		#endif
		char parse_parameters_string[] = "zss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &frame0, &menuString0, &menuString_len0, &itemString0, &itemString_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(frame0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(frame0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(frame0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxFindMenuItemId((wxFrame*) object_pointer0_0, wxString(menuString0, wxConvUTF8), wxString(itemString0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxFindMenuItemId((wxFrame*) object_pointer0_0, wxString(menuString0, wxConvUTF8), wxString(itemString0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxNewId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxNewId\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxNewId())\n\n");
				#endif
				ZVAL_LONG(return_value, wxNewId());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRegisterId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRegisterId\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&id0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxRegisterId((long) id0)\n\n");
				#endif
				wxRegisterId((long) id0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxLaunchDefaultApplication)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxLaunchDefaultApplication\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* document0;
	long document_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&document0, &document_len0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &document0, &document_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultApplication(wxString(document0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxLaunchDefaultApplication(wxString(document0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultApplication(wxString(document0, wxConvUTF8), (int) flags0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxLaunchDefaultApplication(wxString(document0, wxConvUTF8), (int) flags0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxLaunchDefaultBrowser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxLaunchDefaultBrowser\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* url0;
	long url_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&url0, &url_len0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &url0, &url_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8), (int) flags0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8), (int) flags0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStripMenuCodes)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStripMenuCodes\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&str0, &str_len0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStripMenuCodes(wxString(str0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxStripMenuCodes(wxString(str0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStripMenuCodes(wxString(str0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxStripMenuCodes(wxString(str0, wxConvUTF8), (int) flags0);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetHomeDir)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetHomeDir\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetHomeDir().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetHomeDir();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetFullHostName)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetFullHostName\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetFullHostName().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetFullHostName();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetUserHome)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetUserHome\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* user0;
	long user_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|s' (&user0, &user_len0)\n");
		#endif
		char parse_parameters_string[] = "|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &user0, &user_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetUserHome().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetUserHome();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetUserHome(wxString(user0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetUserHome(wxString(user0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetOsDescription)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetOsDescription\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetOsDescription().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetOsDescription();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetOsVersion)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetOsVersion\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long* major0;
	zval* major0_ref;
	long* minor0;
	zval* minor0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (major0, minor0)\n");
		#endif
		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, major0, minor0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "|zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &major0_ref, &minor0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetOsVersion())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetOsVersion());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetOsVersion((int*) major0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetOsVersion((int*) major0));

				size_t elements_returned0_0 = sizeof(major0)/sizeof(*major0);
				array_init(major0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(major0_ref, major0[i]);
				}

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetOsVersion((int*) major0, (int*) minor0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetOsVersion((int*) major0, (int*) minor0));

				size_t elements_returned0_0 = sizeof(major0)/sizeof(*major0);
				array_init(major0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(major0_ref, major0[i]);
				}
				size_t elements_returned0_1 = sizeof(minor0)/sizeof(*minor0);
				array_init(minor0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(minor0_ref, minor0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsPlatform64Bit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsPlatform64Bit\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsPlatform64Bit())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsPlatform64Bit());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsPlatformLittleEndian)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsPlatformLittleEndian\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsPlatformLittleEndian())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsPlatformLittleEndian());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetProcessId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetProcessId\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetProcessId())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetProcessId());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxKill)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxKill\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long pid0;
	long sig0;
	long* rc0;
	zval* rc0_ref;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l|lll' (&pid0, &sig0, rc0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "l|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pid0, &sig0, rc0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "z|zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dummy, &dummy, &rc0_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxKill((long) pid0));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxKill((long) pid0, (wxSignal) sig0));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0));

				size_t elements_returned0_2 = sizeof(rc0)/sizeof(*rc0);
				array_init(rc0_ref);
				for(size_t i=0; i<elements_returned0_2; i++)
				{
					add_next_index_long(rc0_ref, rc0[i]);
				}

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0, (int) flags0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0, (int) flags0));

				size_t elements_returned0_2 = sizeof(rc0)/sizeof(*rc0);
				array_init(rc0_ref);
				for(size_t i=0; i<elements_returned0_2; i++)
				{
					add_next_index_long(rc0_ref, rc0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxShell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxShell\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* command0;
	long command_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|s' (&command0, &command_len0)\n");
		#endif
		char parse_parameters_string[] = "|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &command0, &command_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShell())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxShell());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShell(wxString(command0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxShell(wxString(command0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxShutdown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxShutdown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&flags0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShutdown())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxShutdown());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShutdown((int) flags0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxShutdown((int) flags0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMicroSleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMicroSleep\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long microseconds0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&microseconds0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &microseconds0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMicroSleep((unsigned long) microseconds0)\n\n");
				#endif
				wxMicroSleep((unsigned long) microseconds0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMilliSleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMilliSleep\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long milliseconds0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&milliseconds0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &milliseconds0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMilliSleep((unsigned long) milliseconds0)\n\n");
				#endif
				wxMilliSleep((unsigned long) milliseconds0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxNow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxNow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxNow().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxNow();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSleep\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long secs0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&secs0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &secs0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSleep((int) secs0)\n\n");
				#endif
				wxSleep((int) secs0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxUsleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxUsleep\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long milliseconds0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&milliseconds0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &milliseconds0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxUsleep((unsigned long) milliseconds0)\n\n");
				#endif
				wxUsleep((unsigned long) milliseconds0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsEmpty)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsEmpty\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s1, &s_len1)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s1, &s_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsEmpty(s0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsEmpty(s0));


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsEmpty(wxString(s1, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsEmpty(wxString(s1, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemchr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemchr\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	long c0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sll' (&s0, &s_len0, &c0, &len0)\n");
		#endif
		char parse_parameters_string[] = "sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0, &c0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemchr(s0, (char) c0, (size_t) len0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxTmemchr(s0, (char) c0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemcmp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemcmp\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* sz10;
	long sz1_len0;
	char* sz20;
	long sz2_len0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&sz10, &sz1_len0, &sz20, &sz2_len0, &len0)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &sz10, &sz1_len0, &sz20, &sz2_len0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxTmemcmp(sz10, sz20, (size_t) len0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxTmemcmp(sz10, sz20, (size_t) len0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemcpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemcpy\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* szOut0;
	long szOut_len0;
	zval* szOut0_ref;
	char* szIn0;
	long szIn_len0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &szOut0_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemcpy(szOut0, szIn0, (size_t) len0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxTmemcpy(szOut0, szIn0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(szOut0_ref, szOut0, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemmove)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemmove\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* szOut0;
	long szOut_len0;
	zval* szOut0_ref;
	char* szIn0;
	long szIn_len0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &szOut0_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemmove(szOut0, szIn0, (size_t) len0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxTmemmove(szOut0, szIn0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(szOut0_ref, szOut0, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemset)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemset\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* szOut0;
	long szOut_len0;
	zval* szOut0_ref;
	long cIn0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sll' (&szOut0, &szOut_len0, &cIn0, &len0)\n");
		#endif
		char parse_parameters_string[] = "sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &szOut0, &szOut_len0, &cIn0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &szOut0_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemset(szOut0, (const char) cIn0, (size_t) len0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxTmemset(szOut0, (const char) cIn0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(szOut0_ref, szOut0, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetlocale)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetlocale\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long category0;
	char* locale0;
	long locale_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ls' (&category0, &locale0, &locale_len0)\n");
		#endif
		char parse_parameters_string[] = "ls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &category0, &locale0, &locale_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxSetlocale((int) category0, wxString(locale0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxSetlocale((int) category0, wxString(locale0, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrlen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrlen\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrlen(wxString(s0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrlen(wxString(s0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrnlen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrnlen\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	long maxlen0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&str0, &str_len0, &maxlen0)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0, &maxlen0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrnlen(str0, (size_t) maxlen0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrnlen(str0, (size_t) maxlen0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrdup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrdup\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrdup(wxString(s0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return1;
				value_to_return1 = wxStrdup(wxString(s0, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return1, 1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrcpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrcpy\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest0, &dest_len0, &src0, &src_len0)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest1, &dest_len1, &src1, &src_len1)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcpy(dest0, src0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrcpy(dest0, src0);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcpy(dest1, wxString(src1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrcpy(dest1, wxString(src1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrncpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrncpy\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	long n1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncpy(dest0, src0, (size_t) n0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxStrncpy(dest0, src0, (size_t) n0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncpy(dest1, wxString(src1, wxConvUTF8), (size_t) n1).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxStrncpy(dest1, wxString(src1, wxConvUTF8), (size_t) n1);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrlcpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrlcpy\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrlcpy(dest0, src0, (size_t) n0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrlcpy(dest0, src0, (size_t) n0));

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrcat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrcat\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest0, &dest_len0, &src0, &src_len0)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest1, &dest_len1, &src1, &src_len1)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcat(dest0, src0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrcat(dest0, src0);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcat(dest1, wxString(src1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrcat(dest1, wxString(src1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrncat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrncat\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	long n1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncat(dest0, src0, (size_t) n0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxStrncat(dest0, src0, (size_t) n0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncat(dest1, wxString(src1, wxConvUTF8), (size_t) n1).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxStrncat(dest1, wxString(src1, wxConvUTF8), (size_t) n1);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrxfrm)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrxfrm\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	long n1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
		#endif
		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrxfrm(dest0, src0, (size_t) n0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrxfrm(dest0, src0, (size_t) n0));

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrxfrm(dest1, wxString(src1, wxConvUTF8), (size_t) n1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrxfrm(dest1, wxString(src1, wxConvUTF8), (size_t) n1));

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrstr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrstr\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* haystack0;
	long haystack_len0;
	char* needle0;
	long needle_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* haystack1;
	long haystack_len1;
	char* needle1;
	long needle_len1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* haystack2;
	long haystack_len2;
	char* needle2;
	long needle_len2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* haystack3;
	long haystack_len3;
	char* needle3;
	long needle_len3;
	bool overload3_called = false;
	//Parameters for overload 4
	char* haystack4;
	long haystack_len4;
	zval* haystack4_ref;
	char* needle4;
	long needle_len4;
	bool overload4_called = false;
	//Parameters for overload 5
	char* haystack5;
	long haystack_len5;
	zval* haystack5_ref;
	char* needle5;
	long needle_len5;
	bool overload5_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack0, &haystack_len0, &needle0, &needle_len0)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack0, &haystack_len0, &needle0, &needle_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack1, &haystack_len1, &needle1, &needle_len1)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack1, &haystack_len1, &needle1, &needle_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack2, &haystack_len2, &needle2, &needle_len2)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack2, &haystack_len2, &needle2, &needle_len2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack3, &haystack_len3, &needle3, &needle_len3)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack3, &haystack_len3, &needle3, &needle_len3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;
		}
	}

	//Overload 4
	overload4:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack4, &haystack_len4, &needle4, &needle_len4)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack4, &haystack_len4, &needle4, &needle_len4 ) == SUCCESS)
		{
			overload4_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &haystack4_ref, &dummy );
		}
	}

	//Overload 5
	overload5:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack5, &haystack_len5, &needle5, &needle_len5)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack5, &haystack_len5, &needle5, &needle_len5 ) == SUCCESS)
		{
			overload5_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &haystack5_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack0, needle0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrstr(haystack0, needle0));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack1, wxString(needle1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrstr(haystack1, wxString(needle1, wxConvUTF8)));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(wxString(haystack2, wxConvUTF8), wxString(needle2, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrstr(wxString(haystack2, wxConvUTF8), wxString(needle2, wxConvUTF8)));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(wxString(haystack3, wxConvUTF8), needle3).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrstr(wxString(haystack3, wxConvUTF8), needle3));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload4_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack4, needle4).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrstr(haystack4, needle4);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(haystack4_ref, haystack4, 1);

				return;
				break;
			}
		}
	}

	if(overload5_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack5, wxString(needle5, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrstr(haystack5, wxString(needle5, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(haystack5_ref, haystack5, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrchr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrchr\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	long c0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	long c1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* s2;
	long s_len2;
	long c2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* s3;
	long s_len3;
	zval* s3_ref;
	long c3;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s0, &s_len0, &c0)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0, &c0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s1, &s_len1, &c1)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s1, &s_len1, &c1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s2, &s_len2, &c2)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s2, &s_len2, &c2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s3, &s_len3, &c3)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s3, &s_len3, &c3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &s3_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(s0, (char) c0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrchr(s0, (char) c0));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(wxString(s1, wxConvUTF8), (char) c1).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrchr(wxString(s1, wxConvUTF8), (char) c1));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(wxString(s2, wxConvUTF8), (int) c2).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrchr(wxString(s2, wxConvUTF8), (int) c2));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(s3, (char) c3).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrchr(s3, (char) c3);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s3_ref, s3, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrrchr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrrchr\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	long c0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	long c1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* s2;
	long s_len2;
	long c2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* s3;
	long s_len3;
	zval* s3_ref;
	long c3;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s0, &s_len0, &c0)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0, &c0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s1, &s_len1, &c1)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s1, &s_len1, &c1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s2, &s_len2, &c2)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s2, &s_len2, &c2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s3, &s_len3, &c3)\n");
		#endif
		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s3, &s_len3, &c3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &s3_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(s0, (char) c0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrrchr(s0, (char) c0));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(wxString(s1, wxConvUTF8), (char) c1).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrrchr(wxString(s1, wxConvUTF8), (char) c1));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(wxString(s2, wxConvUTF8), (int) c2).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrrchr(wxString(s2, wxConvUTF8), (int) c2));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(s3, (char) c3).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrrchr(s3, (char) c3);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s3_ref, s3, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrpbrk)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrpbrk\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	char* accept0;
	long accept_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	char* accept1;
	long accept_len1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* s2;
	long s_len2;
	char* accept2;
	long accept_len2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* s3;
	long s_len3;
	char* accept3;
	long accept_len3;
	bool overload3_called = false;
	//Parameters for overload 4
	char* s4;
	long s_len4;
	zval* s4_ref;
	char* accept4;
	long accept_len4;
	bool overload4_called = false;
	//Parameters for overload 5
	char* s5;
	long s_len5;
	zval* s5_ref;
	char* accept5;
	long accept_len5;
	bool overload5_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s0, &s_len0, &accept0, &accept_len0)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0, &accept0, &accept_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s1, &s_len1, &accept1, &accept_len1)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s1, &s_len1, &accept1, &accept_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s2, &s_len2, &accept2, &accept_len2)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s2, &s_len2, &accept2, &accept_len2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s3, &s_len3, &accept3, &accept_len3)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s3, &s_len3, &accept3, &accept_len3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;
		}
	}

	//Overload 4
	overload4:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s4, &s_len4, &accept4, &accept_len4)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s4, &s_len4, &accept4, &accept_len4 ) == SUCCESS)
		{
			overload4_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &s4_ref, &dummy );
		}
	}

	//Overload 5
	overload5:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s5, &s_len5, &accept5, &accept_len5)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s5, &s_len5, &accept5, &accept_len5 ) == SUCCESS)
		{
			overload5_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &s5_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s0, accept0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrpbrk(s0, accept0));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s1, wxString(accept1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrpbrk(s1, wxString(accept1, wxConvUTF8)));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(wxString(s2, wxConvUTF8), wxString(accept2, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrpbrk(wxString(s2, wxConvUTF8), wxString(accept2, wxConvUTF8)));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(wxString(s3, wxConvUTF8), accept3).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrpbrk(wxString(s3, wxConvUTF8), accept3));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload4_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s4, accept4).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrpbrk(s4, accept4);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s4_ref, s4, 1);

				return;
				break;
			}
		}
	}

	if(overload5_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s5, wxString(accept5, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrpbrk(s5, wxString(accept5, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s5_ref, s5, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRemove)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRemove\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &path0, &path_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxRemove(wxString(path0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxRemove(wxString(path0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRename)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRename\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* oldpath0;
	long oldpath_len0;
	char* newpath0;
	long newpath_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&oldpath0, &oldpath_len0, &newpath0, &newpath_len0)\n");
		#endif
		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &oldpath0, &oldpath_len0, &newpath0, &newpath_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxRename(wxString(oldpath0, wxConvUTF8), wxString(newpath0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxRename(wxString(oldpath0, wxConvUTF8), wxString(newpath0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxAtoi)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAtoi\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxAtoi(wxString(str0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxAtoi(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxAtol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAtol\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxAtol(wxString(str0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxAtol(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxAtof)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAtof\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxAtof(wxString(str0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_DOUBLE(return_value, wxAtof(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSystem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSystem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxSystem(wxString(str0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxSystem(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDynamicCast)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;

	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	
	char parse_parameters[] = "z!s!";
	
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, parse_parameters, &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS){

		if(_argObj0)
		{
			if(Z_TYPE_P(_argObj0)==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
			}
		}
		
		if(valid){
			if(!strcmp(_argStr0, "wxScrolledWindow")){
				object_init_ex(return_value, php_wxScrolledWindow_entry);
				wxScrolledWindow* ret = wxDynamicCast(_ptrObj0, wxScrolledWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxScrolledWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFrame")){
				object_init_ex(return_value, php_wxFrame_entry);
				wxFrame* ret = wxDynamicCast(_ptrObj0, wxFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTopLevelWindow")){
				object_init_ex(return_value, php_wxTopLevelWindow_entry);
				wxTopLevelWindow* ret = wxDynamicCast(_ptrObj0, wxTopLevelWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxTopLevelWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNonOwnedWindow")){
				object_init_ex(return_value, php_wxNonOwnedWindow_entry);
				wxNonOwnedWindow* ret = wxDynamicCast(_ptrObj0, wxNonOwnedWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxNonOwnedWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindow")){
				object_init_ex(return_value, php_wxWindow_entry);
				wxWindow* ret = wxDynamicCast(_ptrObj0, wxWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEvtHandler")){
				object_init_ex(return_value, php_wxEvtHandler_entry);
				wxEvtHandler* ret = wxDynamicCast(_ptrObj0, wxEvtHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxEvtHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStatusBar")){
				object_init_ex(return_value, php_wxStatusBar_entry);
				wxStatusBar* ret = wxDynamicCast(_ptrObj0, wxStatusBar_php);
				long id_to_find = zend_list_insert(ret, le_wxStatusBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxButton")){
				object_init_ex(return_value, php_wxButton_entry);
				wxButton* ret = wxDynamicCast(_ptrObj0, wxButton_php);
				long id_to_find = zend_list_insert(ret, le_wxButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAnyButton")){
				object_init_ex(return_value, php_wxAnyButton_entry);
				wxAnyButton* ret = wxDynamicCast(_ptrObj0, wxAnyButton_php);
				long id_to_find = zend_list_insert(ret, le_wxAnyButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxControl")){
				object_init_ex(return_value, php_wxControl_entry);
				wxControl* ret = wxDynamicCast(_ptrObj0, wxControl_php);
				long id_to_find = zend_list_insert(ret, le_wxControl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxValidator")){
				object_init_ex(return_value, php_wxValidator_entry);
				wxValidator* ret = wxDynamicCast(_ptrObj0, wxValidator_php);
				long id_to_find = zend_list_insert(ret, le_wxValidator);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmapHandler")){
				object_init_ex(return_value, php_wxBitmapHandler_entry);
				wxBitmapHandler* ret = wxDynamicCast(_ptrObj0, wxBitmapHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmapHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmap")){
				object_init_ex(return_value, php_wxBitmap_entry);
				wxBitmap* ret = wxDynamicCast(_ptrObj0, wxBitmap_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmap);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPalette")){
				object_init_ex(return_value, php_wxPalette_entry);
				wxPalette* ret = wxDynamicCast(_ptrObj0, wxPalette_php);
				long id_to_find = zend_list_insert(ret, le_wxPalette);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxImage")){
				object_init_ex(return_value, php_wxImage_entry);
				wxImage* ret = wxDynamicCast(_ptrObj0, wxImage_php);
				long id_to_find = zend_list_insert(ret, le_wxImage);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxIcon")){
				object_init_ex(return_value, php_wxIcon_entry);
				wxIcon* ret = wxDynamicCast(_ptrObj0, wxIcon_php);
				long id_to_find = zend_list_insert(ret, le_wxIcon);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSplitterWindow")){
				object_init_ex(return_value, php_wxSplitterWindow_entry);
				wxSplitterWindow* ret = wxDynamicCast(_ptrObj0, wxSplitterWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxSplitterWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBoxSizer")){
				object_init_ex(return_value, php_wxBoxSizer_entry);
				wxBoxSizer* ret = wxDynamicCast(_ptrObj0, wxBoxSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxBoxSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSizer")){
				object_init_ex(return_value, php_wxSizer_entry);
				wxSizer* ret = wxDynamicCast(_ptrObj0, wxSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSizerItem")){
				object_init_ex(return_value, php_wxSizerItem_entry);
				wxSizerItem* ret = wxDynamicCast(_ptrObj0, wxSizerItem_php);
				long id_to_find = zend_list_insert(ret, le_wxSizerItem);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTreeCtrl")){
				object_init_ex(return_value, php_wxTreeCtrl_entry);
				wxTreeCtrl* ret = wxDynamicCast(_ptrObj0, wxTreeCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxTreeCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxImageList")){
				object_init_ex(return_value, php_wxImageList_entry);
				wxImageList* ret = wxDynamicCast(_ptrObj0, wxImageList_php);
				long id_to_find = zend_list_insert(ret, le_wxImageList);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDC")){
				object_init_ex(return_value, php_wxDC_entry);
				wxDC* ret = wxDynamicCast(_ptrObj0, wxDC_php);
				long id_to_find = zend_list_insert(ret, le_wxDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColour")){
				object_init_ex(return_value, php_wxColour_entry);
				wxColour* ret = wxDynamicCast(_ptrObj0, wxColour_php);
				long id_to_find = zend_list_insert(ret, le_wxColour);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFont")){
				object_init_ex(return_value, php_wxFont_entry);
				wxFont* ret = wxDynamicCast(_ptrObj0, wxFont_php);
				long id_to_find = zend_list_insert(ret, le_wxFont);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPanel")){
				object_init_ex(return_value, php_wxPanel_entry);
				wxPanel* ret = wxDynamicCast(_ptrObj0, wxPanel_php);
				long id_to_find = zend_list_insert(ret, le_wxPanel);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCheckListBox")){
				object_init_ex(return_value, php_wxCheckListBox_entry);
				wxCheckListBox* ret = wxDynamicCast(_ptrObj0, wxCheckListBox_php);
				long id_to_find = zend_list_insert(ret, le_wxCheckListBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListBox")){
				object_init_ex(return_value, php_wxListBox_entry);
				wxListBox* ret = wxDynamicCast(_ptrObj0, wxListBox_php);
				long id_to_find = zend_list_insert(ret, le_wxListBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxControlWithItems")){
				object_init_ex(return_value, php_wxControlWithItems_entry);
				wxControlWithItems* ret = wxDynamicCast(_ptrObj0, wxControlWithItems_php);
				long id_to_find = zend_list_insert(ret, le_wxControlWithItems);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMenuBar")){
				object_init_ex(return_value, php_wxMenuBar_entry);
				wxMenuBar* ret = wxDynamicCast(_ptrObj0, wxMenuBar_php);
				long id_to_find = zend_list_insert(ret, le_wxMenuBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMenuEvent")){
				object_init_ex(return_value, php_wxMenuEvent_entry);
				wxMenuEvent* ret = wxDynamicCast(_ptrObj0, wxMenuEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMenuEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMenuItem")){
				object_init_ex(return_value, php_wxMenuItem_entry);
				wxMenuItem* ret = wxDynamicCast(_ptrObj0, wxMenuItem_php);
				long id_to_find = zend_list_insert(ret, le_wxMenuItem);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMenu")){
				object_init_ex(return_value, php_wxMenu_entry);
				wxMenu* ret = wxDynamicCast(_ptrObj0, wxMenu_php);
				long id_to_find = zend_list_insert(ret, le_wxMenu);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEvent")){
				object_init_ex(return_value, php_wxEvent_entry);
				wxEvent* ret = wxDynamicCast(_ptrObj0, wxEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTreeEvent")){
				object_init_ex(return_value, php_wxTreeEvent_entry);
				wxTreeEvent* ret = wxDynamicCast(_ptrObj0, wxTreeEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxTreeEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxKeyEvent")){
				object_init_ex(return_value, php_wxKeyEvent_entry);
				wxKeyEvent* ret = wxDynamicCast(_ptrObj0, wxKeyEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxKeyEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNotifyEvent")){
				object_init_ex(return_value, php_wxNotifyEvent_entry);
				wxNotifyEvent* ret = wxDynamicCast(_ptrObj0, wxNotifyEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxNotifyEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCommandEvent")){
				object_init_ex(return_value, php_wxCommandEvent_entry);
				wxCommandEvent* ret = wxDynamicCast(_ptrObj0, wxCommandEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCommandEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCloseEvent")){
				object_init_ex(return_value, php_wxCloseEvent_entry);
				wxCloseEvent* ret = wxDynamicCast(_ptrObj0, wxCloseEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCloseEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxActivateEvent")){
				object_init_ex(return_value, php_wxActivateEvent_entry);
				wxActivateEvent* ret = wxDynamicCast(_ptrObj0, wxActivateEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxActivateEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiManager")){
				object_init_ex(return_value, php_wxAuiManager_entry);
				wxAuiManager* ret = wxDynamicCast(_ptrObj0, wxAuiManager_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiManager);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiManagerEvent")){
				object_init_ex(return_value, php_wxAuiManagerEvent_entry);
				wxAuiManagerEvent* ret = wxDynamicCast(_ptrObj0, wxAuiManagerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiManagerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiNotebook")){
				object_init_ex(return_value, php_wxAuiNotebook_entry);
				wxAuiNotebook* ret = wxDynamicCast(_ptrObj0, wxAuiNotebook_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiNotebook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiNotebookEvent")){
				object_init_ex(return_value, php_wxAuiNotebookEvent_entry);
				wxAuiNotebookEvent* ret = wxDynamicCast(_ptrObj0, wxAuiNotebookEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiNotebookEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBookCtrlEvent")){
				object_init_ex(return_value, php_wxBookCtrlEvent_entry);
				wxBookCtrlEvent* ret = wxDynamicCast(_ptrObj0, wxBookCtrlEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxBookCtrlEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBookCtrlBase")){
				object_init_ex(return_value, php_wxBookCtrlBase_entry);
				wxBookCtrlBase* ret = wxDynamicCast(_ptrObj0, wxBookCtrlBase_php);
				long id_to_find = zend_list_insert(ret, le_wxBookCtrlBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAcceleratorTable")){
				object_init_ex(return_value, php_wxAcceleratorTable_entry);
				wxAcceleratorTable* ret = wxDynamicCast(_ptrObj0, wxAcceleratorTable_php);
				long id_to_find = zend_list_insert(ret, le_wxAcceleratorTable);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGDIObject")){
				object_init_ex(return_value, php_wxGDIObject_entry);
				wxGDIObject* ret = wxDynamicCast(_ptrObj0, wxGDIObject_php);
				long id_to_find = zend_list_insert(ret, le_wxGDIObject);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAnimation")){
				object_init_ex(return_value, php_wxAnimation_entry);
				wxAnimation* ret = wxDynamicCast(_ptrObj0, wxAnimation_php);
				long id_to_find = zend_list_insert(ret, le_wxAnimation);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAnimationCtrl")){
				object_init_ex(return_value, php_wxAnimationCtrl_entry);
				wxAnimationCtrl* ret = wxDynamicCast(_ptrObj0, wxAnimationCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxAnimationCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxArtProvider")){
				object_init_ex(return_value, php_wxArtProvider_entry);
				wxArtProvider* ret = wxDynamicCast(_ptrObj0, wxArtProvider_php);
				long id_to_find = zend_list_insert(ret, le_wxArtProvider);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxIconBundle")){
				object_init_ex(return_value, php_wxIconBundle_entry);
				wxIconBundle* ret = wxDynamicCast(_ptrObj0, wxIconBundle_php);
				long id_to_find = zend_list_insert(ret, le_wxIconBundle);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStyledTextCtrl")){
				object_init_ex(return_value, php_wxStyledTextCtrl_entry);
				wxStyledTextCtrl* ret = wxDynamicCast(_ptrObj0, wxStyledTextCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxStyledTextCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStyledTextEvent")){
				object_init_ex(return_value, php_wxStyledTextEvent_entry);
				wxStyledTextEvent* ret = wxDynamicCast(_ptrObj0, wxStyledTextEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxStyledTextEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxScrollBar")){
				object_init_ex(return_value, php_wxScrollBar_entry);
				wxScrollBar* ret = wxDynamicCast(_ptrObj0, wxScrollBar_php);
				long id_to_find = zend_list_insert(ret, le_wxScrollBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticText")){
				object_init_ex(return_value, php_wxStaticText_entry);
				wxStaticText* ret = wxDynamicCast(_ptrObj0, wxStaticText_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticText);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticLine")){
				object_init_ex(return_value, php_wxStaticLine_entry);
				wxStaticLine* ret = wxDynamicCast(_ptrObj0, wxStaticLine_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticLine);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticBoxSizer")){
				object_init_ex(return_value, php_wxStaticBoxSizer_entry);
				wxStaticBoxSizer* ret = wxDynamicCast(_ptrObj0, wxStaticBoxSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticBoxSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticBox")){
				object_init_ex(return_value, php_wxStaticBox_entry);
				wxStaticBox* ret = wxDynamicCast(_ptrObj0, wxStaticBox_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticBitmap")){
				object_init_ex(return_value, php_wxStaticBitmap_entry);
				wxStaticBitmap* ret = wxDynamicCast(_ptrObj0, wxStaticBitmap_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticBitmap);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCheckBox")){
				object_init_ex(return_value, php_wxCheckBox_entry);
				wxCheckBox* ret = wxDynamicCast(_ptrObj0, wxCheckBox_php);
				long id_to_find = zend_list_insert(ret, le_wxCheckBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWrapSizer")){
				object_init_ex(return_value, php_wxWrapSizer_entry);
				wxWrapSizer* ret = wxDynamicCast(_ptrObj0, wxWrapSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxWrapSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmapButton")){
				object_init_ex(return_value, php_wxBitmapButton_entry);
				wxBitmapButton* ret = wxDynamicCast(_ptrObj0, wxBitmapButton_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmapButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTextCtrl")){
				object_init_ex(return_value, php_wxTextCtrl_entry);
				wxTextCtrl* ret = wxDynamicCast(_ptrObj0, wxTextCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxTextCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTextEntryDialog")){
				object_init_ex(return_value, php_wxTextEntryDialog_entry);
				wxTextEntryDialog* ret = wxDynamicCast(_ptrObj0, wxTextEntryDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxTextEntryDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxComboBox")){
				object_init_ex(return_value, php_wxComboBox_entry);
				wxComboBox* ret = wxDynamicCast(_ptrObj0, wxComboBox_php);
				long id_to_find = zend_list_insert(ret, le_wxComboBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmapComboBox")){
				object_init_ex(return_value, php_wxBitmapComboBox_entry);
				wxBitmapComboBox* ret = wxDynamicCast(_ptrObj0, wxBitmapComboBox_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmapComboBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiToolBarEvent")){
				object_init_ex(return_value, php_wxAuiToolBarEvent_entry);
				wxAuiToolBarEvent* ret = wxDynamicCast(_ptrObj0, wxAuiToolBarEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiToolBarEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiToolBar")){
				object_init_ex(return_value, php_wxAuiToolBar_entry);
				wxAuiToolBar* ret = wxDynamicCast(_ptrObj0, wxAuiToolBar_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiToolBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBannerWindow")){
				object_init_ex(return_value, php_wxBannerWindow_entry);
				wxBannerWindow* ret = wxDynamicCast(_ptrObj0, wxBannerWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxBannerWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxChoice")){
				object_init_ex(return_value, php_wxChoice_entry);
				wxChoice* ret = wxDynamicCast(_ptrObj0, wxChoice_php);
				long id_to_find = zend_list_insert(ret, le_wxChoice);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListEvent")){
				object_init_ex(return_value, php_wxListEvent_entry);
				wxListEvent* ret = wxDynamicCast(_ptrObj0, wxListEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxListEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListCtrl")){
				object_init_ex(return_value, php_wxListCtrl_entry);
				wxListCtrl* ret = wxDynamicCast(_ptrObj0, wxListCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxListCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListbook")){
				object_init_ex(return_value, php_wxListbook_entry);
				wxListbook* ret = wxDynamicCast(_ptrObj0, wxListbook_php);
				long id_to_find = zend_list_insert(ret, le_wxListbook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxChildFocusEvent")){
				object_init_ex(return_value, php_wxChildFocusEvent_entry);
				wxChildFocusEvent* ret = wxDynamicCast(_ptrObj0, wxChildFocusEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxChildFocusEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxChoicebook")){
				object_init_ex(return_value, php_wxChoicebook_entry);
				wxChoicebook* ret = wxDynamicCast(_ptrObj0, wxChoicebook_php);
				long id_to_find = zend_list_insert(ret, le_wxChoicebook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRadioBox")){
				object_init_ex(return_value, php_wxRadioBox_entry);
				wxRadioBox* ret = wxDynamicCast(_ptrObj0, wxRadioBox_php);
				long id_to_find = zend_list_insert(ret, le_wxRadioBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRadioButton")){
				object_init_ex(return_value, php_wxRadioButton_entry);
				wxRadioButton* ret = wxDynamicCast(_ptrObj0, wxRadioButton_php);
				long id_to_find = zend_list_insert(ret, le_wxRadioButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRearrangeList")){
				object_init_ex(return_value, php_wxRearrangeList_entry);
				wxRearrangeList* ret = wxDynamicCast(_ptrObj0, wxRearrangeList_php);
				long id_to_find = zend_list_insert(ret, le_wxRearrangeList);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSlider")){
				object_init_ex(return_value, php_wxSlider_entry);
				wxSlider* ret = wxDynamicCast(_ptrObj0, wxSlider_php);
				long id_to_find = zend_list_insert(ret, le_wxSlider);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinCtrl")){
				object_init_ex(return_value, php_wxSpinCtrl_entry);
				wxSpinCtrl* ret = wxDynamicCast(_ptrObj0, wxSpinCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinButton")){
				object_init_ex(return_value, php_wxSpinButton_entry);
				wxSpinButton* ret = wxDynamicCast(_ptrObj0, wxSpinButton_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinEvent")){
				object_init_ex(return_value, php_wxSpinEvent_entry);
				wxSpinEvent* ret = wxDynamicCast(_ptrObj0, wxSpinEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSplitterEvent")){
				object_init_ex(return_value, php_wxSplitterEvent_entry);
				wxSplitterEvent* ret = wxDynamicCast(_ptrObj0, wxSplitterEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSplitterEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSplashScreen")){
				object_init_ex(return_value, php_wxSplashScreen_entry);
				wxSplashScreen* ret = wxDynamicCast(_ptrObj0, wxSplashScreen_php);
				long id_to_find = zend_list_insert(ret, le_wxSplashScreen);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSizeEvent")){
				object_init_ex(return_value, php_wxSizeEvent_entry);
				wxSizeEvent* ret = wxDynamicCast(_ptrObj0, wxSizeEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSizeEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGauge")){
				object_init_ex(return_value, php_wxGauge_entry);
				wxGauge* ret = wxDynamicCast(_ptrObj0, wxGauge_php);
				long id_to_find = zend_list_insert(ret, le_wxGauge);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlWindow")){
				object_init_ex(return_value, php_wxHtmlWindow_entry);
				wxHtmlWindow* ret = wxDynamicCast(_ptrObj0, wxHtmlWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlContainerCell")){
				object_init_ex(return_value, php_wxHtmlContainerCell_entry);
				wxHtmlContainerCell* ret = wxDynamicCast(_ptrObj0, wxHtmlContainerCell_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlContainerCell);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlCell")){
				object_init_ex(return_value, php_wxHtmlCell_entry);
				wxHtmlCell* ret = wxDynamicCast(_ptrObj0, wxHtmlCell_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlCell);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlCellEvent")){
				object_init_ex(return_value, php_wxHtmlCellEvent_entry);
				wxHtmlCellEvent* ret = wxDynamicCast(_ptrObj0, wxHtmlCellEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlCellEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlColourCell")){
				object_init_ex(return_value, php_wxHtmlColourCell_entry);
				wxHtmlColourCell* ret = wxDynamicCast(_ptrObj0, wxHtmlColourCell_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlColourCell);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlEasyPrinting")){
				object_init_ex(return_value, php_wxHtmlEasyPrinting_entry);
				wxHtmlEasyPrinting* ret = wxDynamicCast(_ptrObj0, wxHtmlEasyPrinting_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlEasyPrinting);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlLinkEvent")){
				object_init_ex(return_value, php_wxHtmlLinkEvent_entry);
				wxHtmlLinkEvent* ret = wxDynamicCast(_ptrObj0, wxHtmlLinkEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlLinkEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlLinkInfo")){
				object_init_ex(return_value, php_wxHtmlLinkInfo_entry);
				wxHtmlLinkInfo* ret = wxDynamicCast(_ptrObj0, wxHtmlLinkInfo_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlLinkInfo);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMouseEvent")){
				object_init_ex(return_value, php_wxMouseEvent_entry);
				wxMouseEvent* ret = wxDynamicCast(_ptrObj0, wxMouseEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMouseEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMoveEvent")){
				object_init_ex(return_value, php_wxMoveEvent_entry);
				wxMoveEvent* ret = wxDynamicCast(_ptrObj0, wxMoveEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMoveEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMouseEventsManager")){
				object_init_ex(return_value, php_wxMouseEventsManager_entry);
				wxMouseEventsManager* ret = wxDynamicCast(_ptrObj0, wxMouseEventsManager_php);
				long id_to_find = zend_list_insert(ret, le_wxMouseEventsManager);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMessageDialog")){
				object_init_ex(return_value, php_wxMessageDialog_entry);
				wxMessageDialog* ret = wxDynamicCast(_ptrObj0, wxMessageDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxMessageDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHyperlinkCtrl")){
				object_init_ex(return_value, php_wxHyperlinkCtrl_entry);
				wxHyperlinkCtrl* ret = wxDynamicCast(_ptrObj0, wxHyperlinkCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxHyperlinkCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHyperlinkEvent")){
				object_init_ex(return_value, php_wxHyperlinkEvent_entry);
				wxHyperlinkEvent* ret = wxDynamicCast(_ptrObj0, wxHyperlinkEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHyperlinkEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCursor")){
				object_init_ex(return_value, php_wxCursor_entry);
				wxCursor* ret = wxDynamicCast(_ptrObj0, wxCursor_php);
				long id_to_find = zend_list_insert(ret, le_wxCursor);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToggleButton")){
				object_init_ex(return_value, php_wxToggleButton_entry);
				wxToggleButton* ret = wxDynamicCast(_ptrObj0, wxToggleButton_php);
				long id_to_find = zend_list_insert(ret, le_wxToggleButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTimer")){
				object_init_ex(return_value, php_wxTimer_entry);
				wxTimer* ret = wxDynamicCast(_ptrObj0, wxTimer_php);
				long id_to_find = zend_list_insert(ret, le_wxTimer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTimerEvent")){
				object_init_ex(return_value, php_wxTimerEvent_entry);
				wxTimerEvent* ret = wxDynamicCast(_ptrObj0, wxTimerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxTimerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxThreadEvent")){
				object_init_ex(return_value, php_wxThreadEvent_entry);
				wxThreadEvent* ret = wxDynamicCast(_ptrObj0, wxThreadEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxThreadEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSearchCtrl")){
				object_init_ex(return_value, php_wxSearchCtrl_entry);
				wxSearchCtrl* ret = wxDynamicCast(_ptrObj0, wxSearchCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxSearchCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColourPickerEvent")){
				object_init_ex(return_value, php_wxColourPickerEvent_entry);
				wxColourPickerEvent* ret = wxDynamicCast(_ptrObj0, wxColourPickerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxColourPickerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColourPickerCtrl")){
				object_init_ex(return_value, php_wxColourPickerCtrl_entry);
				wxColourPickerCtrl* ret = wxDynamicCast(_ptrObj0, wxColourPickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxColourPickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFontPickerCtrl")){
				object_init_ex(return_value, php_wxFontPickerCtrl_entry);
				wxFontPickerCtrl* ret = wxDynamicCast(_ptrObj0, wxFontPickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxFontPickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFontPickerEvent")){
				object_init_ex(return_value, php_wxFontPickerEvent_entry);
				wxFontPickerEvent* ret = wxDynamicCast(_ptrObj0, wxFontPickerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFontPickerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFilePickerCtrl")){
				object_init_ex(return_value, php_wxFilePickerCtrl_entry);
				wxFilePickerCtrl* ret = wxDynamicCast(_ptrObj0, wxFilePickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxFilePickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFindReplaceDialog")){
				object_init_ex(return_value, php_wxFindReplaceDialog_entry);
				wxFindReplaceDialog* ret = wxDynamicCast(_ptrObj0, wxFindReplaceDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxFindReplaceDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFindReplaceData")){
				object_init_ex(return_value, php_wxFindReplaceData_entry);
				wxFindReplaceData* ret = wxDynamicCast(_ptrObj0, wxFindReplaceData_php);
				long id_to_find = zend_list_insert(ret, le_wxFindReplaceData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDirPickerCtrl")){
				object_init_ex(return_value, php_wxDirPickerCtrl_entry);
				wxDirPickerCtrl* ret = wxDynamicCast(_ptrObj0, wxDirPickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDirPickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDirDialog")){
				object_init_ex(return_value, php_wxDirDialog_entry);
				wxDirDialog* ret = wxDynamicCast(_ptrObj0, wxDirDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxDirDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinDoubleEvent")){
				object_init_ex(return_value, php_wxSpinDoubleEvent_entry);
				wxSpinDoubleEvent* ret = wxDynamicCast(_ptrObj0, wxSpinDoubleEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinDoubleEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinCtrlDouble")){
				object_init_ex(return_value, php_wxSpinCtrlDouble_entry);
				wxSpinCtrlDouble* ret = wxDynamicCast(_ptrObj0, wxSpinCtrlDouble_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinCtrlDouble);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGenericDirCtrl")){
				object_init_ex(return_value, php_wxGenericDirCtrl_entry);
				wxGenericDirCtrl* ret = wxDynamicCast(_ptrObj0, wxGenericDirCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxGenericDirCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridSizeEvent")){
				object_init_ex(return_value, php_wxGridSizeEvent_entry);
				wxGridSizeEvent* ret = wxDynamicCast(_ptrObj0, wxGridSizeEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxGridSizeEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridSizer")){
				object_init_ex(return_value, php_wxGridSizer_entry);
				wxGridSizer* ret = wxDynamicCast(_ptrObj0, wxGridSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxGridSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFlexGridSizer")){
				object_init_ex(return_value, php_wxFlexGridSizer_entry);
				wxFlexGridSizer* ret = wxDynamicCast(_ptrObj0, wxFlexGridSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxFlexGridSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridBagSizer")){
				object_init_ex(return_value, php_wxGridBagSizer_entry);
				wxGridBagSizer* ret = wxDynamicCast(_ptrObj0, wxGridBagSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxGridBagSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStdDialogButtonSizer")){
				object_init_ex(return_value, php_wxStdDialogButtonSizer_entry);
				wxStdDialogButtonSizer* ret = wxDynamicCast(_ptrObj0, wxStdDialogButtonSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxStdDialogButtonSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxScrollEvent")){
				object_init_ex(return_value, php_wxScrollEvent_entry);
				wxScrollEvent* ret = wxDynamicCast(_ptrObj0, wxScrollEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxScrollEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxScrollWinEvent")){
				object_init_ex(return_value, php_wxScrollWinEvent_entry);
				wxScrollWinEvent* ret = wxDynamicCast(_ptrObj0, wxScrollWinEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxScrollWinEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNotebook")){
				object_init_ex(return_value, php_wxNotebook_entry);
				wxNotebook* ret = wxDynamicCast(_ptrObj0, wxNotebook_php);
				long id_to_find = zend_list_insert(ret, le_wxNotebook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDialog")){
				object_init_ex(return_value, php_wxDialog_entry);
				wxDialog* ret = wxDynamicCast(_ptrObj0, wxDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSysColourChangedEvent")){
				object_init_ex(return_value, php_wxSysColourChangedEvent_entry);
				wxSysColourChangedEvent* ret = wxDynamicCast(_ptrObj0, wxSysColourChangedEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSysColourChangedEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSymbolPickerDialog")){
				object_init_ex(return_value, php_wxSymbolPickerDialog_entry);
				wxSymbolPickerDialog* ret = wxDynamicCast(_ptrObj0, wxSymbolPickerDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxSymbolPickerDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGBSizerItem")){
				object_init_ex(return_value, php_wxGBSizerItem_entry);
				wxGBSizerItem* ret = wxDynamicCast(_ptrObj0, wxGBSizerItem_php);
				long id_to_find = zend_list_insert(ret, le_wxGBSizerItem);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPopupWindow")){
				object_init_ex(return_value, php_wxPopupWindow_entry);
				wxPopupWindow* ret = wxDynamicCast(_ptrObj0, wxPopupWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxPopupWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMDIChildFrame")){
				object_init_ex(return_value, php_wxMDIChildFrame_entry);
				wxMDIChildFrame* ret = wxDynamicCast(_ptrObj0, wxMDIChildFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxMDIChildFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMDIClientWindow")){
				object_init_ex(return_value, php_wxMDIClientWindow_entry);
				wxMDIClientWindow* ret = wxDynamicCast(_ptrObj0, wxMDIClientWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxMDIClientWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMDIParentFrame")){
				object_init_ex(return_value, php_wxMDIParentFrame_entry);
				wxMDIParentFrame* ret = wxDynamicCast(_ptrObj0, wxMDIParentFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxMDIParentFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMiniFrame")){
				object_init_ex(return_value, php_wxMiniFrame_entry);
				wxMiniFrame* ret = wxDynamicCast(_ptrObj0, wxMiniFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxMiniFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPropertySheetDialog")){
				object_init_ex(return_value, php_wxPropertySheetDialog_entry);
				wxPropertySheetDialog* ret = wxDynamicCast(_ptrObj0, wxPropertySheetDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxPropertySheetDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWizard")){
				object_init_ex(return_value, php_wxWizard_entry);
				wxWizard* ret = wxDynamicCast(_ptrObj0, wxWizard_php);
				long id_to_find = zend_list_insert(ret, le_wxWizard);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWizardEvent")){
				object_init_ex(return_value, php_wxWizardEvent_entry);
				wxWizardEvent* ret = wxDynamicCast(_ptrObj0, wxWizardEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxWizardEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWizardPage")){
				object_init_ex(return_value, php_wxWizardPage_entry);
				wxWizardPage* ret = wxDynamicCast(_ptrObj0, wxWizardPage_php);
				long id_to_find = zend_list_insert(ret, le_wxWizardPage);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWizardPageSimple")){
				object_init_ex(return_value, php_wxWizardPageSimple_entry);
				wxWizardPageSimple* ret = wxDynamicCast(_ptrObj0, wxWizardPageSimple_php);
				long id_to_find = zend_list_insert(ret, le_wxWizardPageSimple);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindowModalDialogEvent")){
				object_init_ex(return_value, php_wxWindowModalDialogEvent_entry);
				wxWindowModalDialogEvent* ret = wxDynamicCast(_ptrObj0, wxWindowModalDialogEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxWindowModalDialogEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTreebook")){
				object_init_ex(return_value, php_wxTreebook_entry);
				wxTreebook* ret = wxDynamicCast(_ptrObj0, wxTreebook_php);
				long id_to_find = zend_list_insert(ret, le_wxTreebook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTreeListCtrl")){
				object_init_ex(return_value, php_wxTreeListCtrl_entry);
				wxTreeListCtrl* ret = wxDynamicCast(_ptrObj0, wxTreeListCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxTreeListCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSound")){
				object_init_ex(return_value, php_wxSound_entry);
				wxSound* ret = wxDynamicCast(_ptrObj0, wxSound_php);
				long id_to_find = zend_list_insert(ret, le_wxSound);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileSystem")){
				object_init_ex(return_value, php_wxFileSystem_entry);
				wxFileSystem* ret = wxDynamicCast(_ptrObj0, wxFileSystem_php);
				long id_to_find = zend_list_insert(ret, le_wxFileSystem);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileSystemHandler")){
				object_init_ex(return_value, php_wxFileSystemHandler_entry);
				wxFileSystemHandler* ret = wxDynamicCast(_ptrObj0, wxFileSystemHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxFileSystemHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDateEvent")){
				object_init_ex(return_value, php_wxDateEvent_entry);
				wxDateEvent* ret = wxDynamicCast(_ptrObj0, wxDateEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxDateEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmapToggleButton")){
				object_init_ex(return_value, php_wxBitmapToggleButton_entry);
				wxBitmapToggleButton* ret = wxDynamicCast(_ptrObj0, wxBitmapToggleButton_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmapToggleButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCalendarCtrl")){
				object_init_ex(return_value, php_wxCalendarCtrl_entry);
				wxCalendarCtrl* ret = wxDynamicCast(_ptrObj0, wxCalendarCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxCalendarCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMask")){
				object_init_ex(return_value, php_wxMask_entry);
				wxMask* ret = wxDynamicCast(_ptrObj0, wxMask_php);
				long id_to_find = zend_list_insert(ret, le_wxMask);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToolTip")){
				object_init_ex(return_value, php_wxToolTip_entry);
				wxToolTip* ret = wxDynamicCast(_ptrObj0, wxToolTip_php);
				long id_to_find = zend_list_insert(ret, le_wxToolTip);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRegion")){
				object_init_ex(return_value, php_wxRegion_entry);
				wxRegion* ret = wxDynamicCast(_ptrObj0, wxRegion_php);
				long id_to_find = zend_list_insert(ret, le_wxRegion);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPopupTransientWindow")){
				object_init_ex(return_value, php_wxPopupTransientWindow_entry);
				wxPopupTransientWindow* ret = wxDynamicCast(_ptrObj0, wxPopupTransientWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxPopupTransientWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxProcessEvent")){
				object_init_ex(return_value, php_wxProcessEvent_entry);
				wxProcessEvent* ret = wxDynamicCast(_ptrObj0, wxProcessEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxProcessEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxProgressDialog")){
				object_init_ex(return_value, php_wxProgressDialog_entry);
				wxProgressDialog* ret = wxDynamicCast(_ptrObj0, wxProgressDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxProgressDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGraphicsRenderer")){
				object_init_ex(return_value, php_wxGraphicsRenderer_entry);
				wxGraphicsRenderer* ret = wxDynamicCast(_ptrObj0, wxGraphicsRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxGraphicsRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindowDC")){
				object_init_ex(return_value, php_wxWindowDC_entry);
				wxWindowDC* ret = wxDynamicCast(_ptrObj0, wxWindowDC_php);
				long id_to_find = zend_list_insert(ret, le_wxWindowDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindowCreateEvent")){
				object_init_ex(return_value, php_wxWindowCreateEvent_entry);
				wxWindowCreateEvent* ret = wxDynamicCast(_ptrObj0, wxWindowCreateEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxWindowCreateEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindowDestroyEvent")){
				object_init_ex(return_value, php_wxWindowDestroyEvent_entry);
				wxWindowDestroyEvent* ret = wxDynamicCast(_ptrObj0, wxWindowDestroyEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxWindowDestroyEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEventBlocker")){
				object_init_ex(return_value, php_wxEventBlocker_entry);
				wxEventBlocker* ret = wxDynamicCast(_ptrObj0, wxEventBlocker_php);
				long id_to_find = zend_list_insert(ret, le_wxEventBlocker);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEraseEvent")){
				object_init_ex(return_value, php_wxEraseEvent_entry);
				wxEraseEvent* ret = wxDynamicCast(_ptrObj0, wxEraseEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxEraseEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPickerBase")){
				object_init_ex(return_value, php_wxPickerBase_entry);
				wxPickerBase* ret = wxDynamicCast(_ptrObj0, wxPickerBase_php);
				long id_to_find = zend_list_insert(ret, le_wxPickerBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridEvent")){
				object_init_ex(return_value, php_wxGridEvent_entry);
				wxGridEvent* ret = wxDynamicCast(_ptrObj0, wxGridEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxGridEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxUpdateUIEvent")){
				object_init_ex(return_value, php_wxUpdateUIEvent_entry);
				wxUpdateUIEvent* ret = wxDynamicCast(_ptrObj0, wxUpdateUIEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxUpdateUIEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHelpEvent")){
				object_init_ex(return_value, php_wxHelpEvent_entry);
				wxHelpEvent* ret = wxDynamicCast(_ptrObj0, wxHelpEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHelpEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxLayoutConstraints")){
				object_init_ex(return_value, php_wxLayoutConstraints_entry);
				wxLayoutConstraints* ret = wxDynamicCast(_ptrObj0, wxLayoutConstraints_php);
				long id_to_find = zend_list_insert(ret, le_wxLayoutConstraints);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFSFile")){
				object_init_ex(return_value, php_wxFSFile_entry);
				wxFSFile* ret = wxDynamicCast(_ptrObj0, wxFSFile_php);
				long id_to_find = zend_list_insert(ret, le_wxFSFile);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTimePickerCtrl")){
				object_init_ex(return_value, php_wxTimePickerCtrl_entry);
				wxTimePickerCtrl* ret = wxDynamicCast(_ptrObj0, wxTimePickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxTimePickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColourDialog")){
				object_init_ex(return_value, php_wxColourDialog_entry);
				wxColourDialog* ret = wxDynamicCast(_ptrObj0, wxColourDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxColourDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColourData")){
				object_init_ex(return_value, php_wxColourData_entry);
				wxColourData* ret = wxDynamicCast(_ptrObj0, wxColourData_php);
				long id_to_find = zend_list_insert(ret, le_wxColourData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileDialog")){
				object_init_ex(return_value, php_wxFileDialog_entry);
				wxFileDialog* ret = wxDynamicCast(_ptrObj0, wxFileDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxFileDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFontData")){
				object_init_ex(return_value, php_wxFontData_entry);
				wxFontData* ret = wxDynamicCast(_ptrObj0, wxFontData_php);
				long id_to_find = zend_list_insert(ret, le_wxFontData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFontDialog")){
				object_init_ex(return_value, php_wxFontDialog_entry);
				wxFontDialog* ret = wxDynamicCast(_ptrObj0, wxFontDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxFontDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToolBar")){
				object_init_ex(return_value, php_wxToolBar_entry);
				wxToolBar* ret = wxDynamicCast(_ptrObj0, wxToolBar_php);
				long id_to_find = zend_list_insert(ret, le_wxToolBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCalendarEvent")){
				object_init_ex(return_value, php_wxCalendarEvent_entry);
				wxCalendarEvent* ret = wxDynamicCast(_ptrObj0, wxCalendarEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCalendarEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGrid")){
				object_init_ex(return_value, php_wxGrid_entry);
				wxGrid* ret = wxDynamicCast(_ptrObj0, wxGrid_php);
				long id_to_find = zend_list_insert(ret, le_wxGrid);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridEditorCreatedEvent")){
				object_init_ex(return_value, php_wxGridEditorCreatedEvent_entry);
				wxGridEditorCreatedEvent* ret = wxDynamicCast(_ptrObj0, wxGridEditorCreatedEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxGridEditorCreatedEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridRangeSelectEvent")){
				object_init_ex(return_value, php_wxGridRangeSelectEvent_entry);
				wxGridRangeSelectEvent* ret = wxDynamicCast(_ptrObj0, wxGridRangeSelectEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxGridRangeSelectEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridTableBase")){
				object_init_ex(return_value, php_wxGridTableBase_entry);
				wxGridTableBase* ret = wxDynamicCast(_ptrObj0, wxGridTableBase_php);
				long id_to_find = zend_list_insert(ret, le_wxGridTableBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDatePickerCtrl")){
				object_init_ex(return_value, php_wxDatePickerCtrl_entry);
				wxDatePickerCtrl* ret = wxDynamicCast(_ptrObj0, wxDatePickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDatePickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPasswordEntryDialog")){
				object_init_ex(return_value, php_wxPasswordEntryDialog_entry);
				wxPasswordEntryDialog* ret = wxDynamicCast(_ptrObj0, wxPasswordEntryDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxPasswordEntryDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxScreenDC")){
				object_init_ex(return_value, php_wxScreenDC_entry);
				wxScreenDC* ret = wxDynamicCast(_ptrObj0, wxScreenDC_php);
				long id_to_find = zend_list_insert(ret, le_wxScreenDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCollapsiblePane")){
				object_init_ex(return_value, php_wxCollapsiblePane_entry);
				wxCollapsiblePane* ret = wxDynamicCast(_ptrObj0, wxCollapsiblePane_php);
				long id_to_find = zend_list_insert(ret, le_wxCollapsiblePane);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCollapsiblePaneEvent")){
				object_init_ex(return_value, php_wxCollapsiblePaneEvent_entry);
				wxCollapsiblePaneEvent* ret = wxDynamicCast(_ptrObj0, wxCollapsiblePaneEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCollapsiblePaneEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxComboCtrl")){
				object_init_ex(return_value, php_wxComboCtrl_entry);
				wxComboCtrl* ret = wxDynamicCast(_ptrObj0, wxComboCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxComboCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewCtrl")){
				object_init_ex(return_value, php_wxDataViewCtrl_entry);
				wxDataViewCtrl* ret = wxDynamicCast(_ptrObj0, wxDataViewCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewRenderer")){
				object_init_ex(return_value, php_wxDataViewRenderer_entry);
				wxDataViewRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewListCtrl")){
				object_init_ex(return_value, php_wxDataViewListCtrl_entry);
				wxDataViewListCtrl* ret = wxDynamicCast(_ptrObj0, wxDataViewListCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewListCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewEvent")){
				object_init_ex(return_value, php_wxDataViewEvent_entry);
				wxDataViewEvent* ret = wxDynamicCast(_ptrObj0, wxDataViewEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewBitmapRenderer")){
				object_init_ex(return_value, php_wxDataViewBitmapRenderer_entry);
				wxDataViewBitmapRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewBitmapRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewBitmapRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewChoiceRenderer")){
				object_init_ex(return_value, php_wxDataViewChoiceRenderer_entry);
				wxDataViewChoiceRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewChoiceRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewChoiceRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewCustomRenderer")){
				object_init_ex(return_value, php_wxDataViewCustomRenderer_entry);
				wxDataViewCustomRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewCustomRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewCustomRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewDateRenderer")){
				object_init_ex(return_value, php_wxDataViewDateRenderer_entry);
				wxDataViewDateRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewDateRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewDateRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewIconText")){
				object_init_ex(return_value, php_wxDataViewIconText_entry);
				wxDataViewIconText* ret = wxDynamicCast(_ptrObj0, wxDataViewIconText_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewIconText);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewIconTextRenderer")){
				object_init_ex(return_value, php_wxDataViewIconTextRenderer_entry);
				wxDataViewIconTextRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewIconTextRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewIconTextRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewProgressRenderer")){
				object_init_ex(return_value, php_wxDataViewProgressRenderer_entry);
				wxDataViewProgressRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewProgressRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewProgressRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewSpinRenderer")){
				object_init_ex(return_value, php_wxDataViewSpinRenderer_entry);
				wxDataViewSpinRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewSpinRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewSpinRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewTextRenderer")){
				object_init_ex(return_value, php_wxDataViewTextRenderer_entry);
				wxDataViewTextRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewTextRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewTextRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewToggleRenderer")){
				object_init_ex(return_value, php_wxDataViewToggleRenderer_entry);
				wxDataViewToggleRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewToggleRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewToggleRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewTreeCtrl")){
				object_init_ex(return_value, php_wxDataViewTreeCtrl_entry);
				wxDataViewTreeCtrl* ret = wxDynamicCast(_ptrObj0, wxDataViewTreeCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewTreeCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxVariant")){
				object_init_ex(return_value, php_wxVariant_entry);
				wxVariant* ret = wxDynamicCast(_ptrObj0, wxVariant_php);
				long id_to_find = zend_list_insert(ret, le_wxVariant);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxClipboard")){
				object_init_ex(return_value, php_wxClipboard_entry);
				wxClipboard* ret = wxDynamicCast(_ptrObj0, wxClipboard_php);
				long id_to_find = zend_list_insert(ret, le_wxClipboard);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxClipboardTextEvent")){
				object_init_ex(return_value, php_wxClipboardTextEvent_entry);
				wxClipboardTextEvent* ret = wxDynamicCast(_ptrObj0, wxClipboardTextEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxClipboardTextEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListView")){
				object_init_ex(return_value, php_wxListView_entry);
				wxListView* ret = wxDynamicCast(_ptrObj0, wxListView_php);
				long id_to_find = zend_list_insert(ret, le_wxListView);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxConfigBase")){
				object_init_ex(return_value, php_wxConfigBase_entry);
				wxConfigBase* ret = wxDynamicCast(_ptrObj0, wxConfigBase_php);
				long id_to_find = zend_list_insert(ret, le_wxConfigBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHeaderCtrlEvent")){
				object_init_ex(return_value, php_wxHeaderCtrlEvent_entry);
				wxHeaderCtrlEvent* ret = wxDynamicCast(_ptrObj0, wxHeaderCtrlEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHeaderCtrlEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHeaderCtrl")){
				object_init_ex(return_value, php_wxHeaderCtrl_entry);
				wxHeaderCtrl* ret = wxDynamicCast(_ptrObj0, wxHeaderCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxHeaderCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHeaderCtrlSimple")){
				object_init_ex(return_value, php_wxHeaderCtrlSimple_entry);
				wxHeaderCtrlSimple* ret = wxDynamicCast(_ptrObj0, wxHeaderCtrlSimple_php);
				long id_to_find = zend_list_insert(ret, le_wxHeaderCtrlSimple);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSetCursorEvent")){
				object_init_ex(return_value, php_wxSetCursorEvent_entry);
				wxSetCursorEvent* ret = wxDynamicCast(_ptrObj0, wxSetCursorEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSetCursorEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxIdleEvent")){
				object_init_ex(return_value, php_wxIdleEvent_entry);
				wxIdleEvent* ret = wxDynamicCast(_ptrObj0, wxIdleEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxIdleEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPen")){
				object_init_ex(return_value, php_wxPen_entry);
				wxPen* ret = wxDynamicCast(_ptrObj0, wxPen_php);
				long id_to_find = zend_list_insert(ret, le_wxPen);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEditableListBox")){
				object_init_ex(return_value, php_wxEditableListBox_entry);
				wxEditableListBox* ret = wxDynamicCast(_ptrObj0, wxEditableListBox_php);
				long id_to_find = zend_list_insert(ret, le_wxEditableListBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileCtrlEvent")){
				object_init_ex(return_value, php_wxFileCtrlEvent_entry);
				wxFileCtrlEvent* ret = wxDynamicCast(_ptrObj0, wxFileCtrlEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFileCtrlEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileCtrl")){
				object_init_ex(return_value, php_wxFileCtrl_entry);
				wxFileCtrl* ret = wxDynamicCast(_ptrObj0, wxFileCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxFileCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxProcess")){
				object_init_ex(return_value, php_wxProcess_entry);
				wxProcess* ret = wxDynamicCast(_ptrObj0, wxProcess_php);
				long id_to_find = zend_list_insert(ret, le_wxProcess);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTextValidator")){
				object_init_ex(return_value, php_wxTextValidator_entry);
				wxTextValidator* ret = wxDynamicCast(_ptrObj0, wxTextValidator_php);
				long id_to_find = zend_list_insert(ret, le_wxTextValidator);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHScrolledWindow")){
				object_init_ex(return_value, php_wxHScrolledWindow_entry);
				wxHScrolledWindow* ret = wxDynamicCast(_ptrObj0, wxHScrolledWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxHScrolledWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxInfoBar")){
				object_init_ex(return_value, php_wxInfoBar_entry);
				wxInfoBar* ret = wxDynamicCast(_ptrObj0, wxInfoBar_php);
				long id_to_find = zend_list_insert(ret, le_wxInfoBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxXmlResource")){
				object_init_ex(return_value, php_wxXmlResource_entry);
				wxXmlResource* ret = wxDynamicCast(_ptrObj0, wxXmlResource_php);
				long id_to_find = zend_list_insert(ret, le_wxXmlResource);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGenericValidator")){
				object_init_ex(return_value, php_wxGenericValidator_entry);
				wxGenericValidator* ret = wxDynamicCast(_ptrObj0, wxGenericValidator_php);
				long id_to_find = zend_list_insert(ret, le_wxGenericValidator);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSashWindow")){
				object_init_ex(return_value, php_wxSashWindow_entry);
				wxSashWindow* ret = wxDynamicCast(_ptrObj0, wxSashWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxSashWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSashEvent")){
				object_init_ex(return_value, php_wxSashEvent_entry);
				wxSashEvent* ret = wxDynamicCast(_ptrObj0, wxSashEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSashEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSashLayoutWindow")){
				object_init_ex(return_value, php_wxSashLayoutWindow_entry);
				wxSashLayoutWindow* ret = wxDynamicCast(_ptrObj0, wxSashLayoutWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxSashLayoutWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBrush")){
				object_init_ex(return_value, php_wxBrush_entry);
				wxBrush* ret = wxDynamicCast(_ptrObj0, wxBrush_php);
				long id_to_find = zend_list_insert(ret, le_wxBrush);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPageSetupDialog")){
				object_init_ex(return_value, php_wxPageSetupDialog_entry);
				wxPageSetupDialog* ret = wxDynamicCast(_ptrObj0, wxPageSetupDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxPageSetupDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPageSetupDialogData")){
				object_init_ex(return_value, php_wxPageSetupDialogData_entry);
				wxPageSetupDialogData* ret = wxDynamicCast(_ptrObj0, wxPageSetupDialogData_php);
				long id_to_find = zend_list_insert(ret, le_wxPageSetupDialogData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintDialog")){
				object_init_ex(return_value, php_wxPrintDialog_entry);
				wxPrintDialog* ret = wxDynamicCast(_ptrObj0, wxPrintDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintDialogData")){
				object_init_ex(return_value, php_wxPrintDialogData_entry);
				wxPrintDialogData* ret = wxDynamicCast(_ptrObj0, wxPrintDialogData_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintDialogData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintData")){
				object_init_ex(return_value, php_wxPrintData_entry);
				wxPrintData* ret = wxDynamicCast(_ptrObj0, wxPrintData_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPostScriptDC")){
				object_init_ex(return_value, php_wxPostScriptDC_entry);
				wxPostScriptDC* ret = wxDynamicCast(_ptrObj0, wxPostScriptDC_php);
				long id_to_find = zend_list_insert(ret, le_wxPostScriptDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintPreview")){
				object_init_ex(return_value, php_wxPrintPreview_entry);
				wxPrintPreview* ret = wxDynamicCast(_ptrObj0, wxPrintPreview_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintPreview);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrinter")){
				object_init_ex(return_value, php_wxPrinter_entry);
				wxPrinter* ret = wxDynamicCast(_ptrObj0, wxPrinter_php);
				long id_to_find = zend_list_insert(ret, le_wxPrinter);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrinterDC")){
				object_init_ex(return_value, php_wxPrinterDC_entry);
				wxPrinterDC* ret = wxDynamicCast(_ptrObj0, wxPrinterDC_php);
				long id_to_find = zend_list_insert(ret, le_wxPrinterDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintout")){
				object_init_ex(return_value, php_wxPrintout_entry);
				wxPrintout* ret = wxDynamicCast(_ptrObj0, wxPrintout_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintout);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPreviewFrame")){
				object_init_ex(return_value, php_wxPreviewFrame_entry);
				wxPreviewFrame* ret = wxDynamicCast(_ptrObj0, wxPreviewFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxPreviewFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPreviewControlBar")){
				object_init_ex(return_value, php_wxPreviewControlBar_entry);
				wxPreviewControlBar* ret = wxDynamicCast(_ptrObj0, wxPreviewControlBar_php);
				long id_to_find = zend_list_insert(ret, le_wxPreviewControlBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPreviewCanvas")){
				object_init_ex(return_value, php_wxPreviewCanvas_entry);
				wxPreviewCanvas* ret = wxDynamicCast(_ptrObj0, wxPreviewCanvas_php);
				long id_to_find = zend_list_insert(ret, le_wxPreviewCanvas);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSingleChoiceDialog")){
				object_init_ex(return_value, php_wxSingleChoiceDialog_entry);
				wxSingleChoiceDialog* ret = wxDynamicCast(_ptrObj0, wxSingleChoiceDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxSingleChoiceDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlDCRenderer")){
				object_init_ex(return_value, php_wxHtmlDCRenderer_entry);
				wxHtmlDCRenderer* ret = wxDynamicCast(_ptrObj0, wxHtmlDCRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlDCRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlFilter")){
				object_init_ex(return_value, php_wxHtmlFilter_entry);
				wxHtmlFilter* ret = wxDynamicCast(_ptrObj0, wxHtmlFilter_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlFilter);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlHelpData")){
				object_init_ex(return_value, php_wxHtmlHelpData_entry);
				wxHtmlHelpData* ret = wxDynamicCast(_ptrObj0, wxHtmlHelpData_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlHelpData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlHelpDialog")){
				object_init_ex(return_value, php_wxHtmlHelpDialog_entry);
				wxHtmlHelpDialog* ret = wxDynamicCast(_ptrObj0, wxHtmlHelpDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlHelpDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlHelpFrame")){
				object_init_ex(return_value, php_wxHtmlHelpFrame_entry);
				wxHtmlHelpFrame* ret = wxDynamicCast(_ptrObj0, wxHtmlHelpFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlHelpFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlHelpWindow")){
				object_init_ex(return_value, php_wxHtmlHelpWindow_entry);
				wxHtmlHelpWindow* ret = wxDynamicCast(_ptrObj0, wxHtmlHelpWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlHelpWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlPrintout")){
				object_init_ex(return_value, php_wxHtmlPrintout_entry);
				wxHtmlPrintout* ret = wxDynamicCast(_ptrObj0, wxHtmlPrintout_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlPrintout);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlTagHandler")){
				object_init_ex(return_value, php_wxHtmlTagHandler_entry);
				wxHtmlTagHandler* ret = wxDynamicCast(_ptrObj0, wxHtmlTagHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlTagHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlTagsModule")){
				object_init_ex(return_value, php_wxHtmlTagsModule_entry);
				wxHtmlTagsModule* ret = wxDynamicCast(_ptrObj0, wxHtmlTagsModule_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlTagsModule);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxModule")){
				object_init_ex(return_value, php_wxModule_entry);
				wxModule* ret = wxDynamicCast(_ptrObj0, wxModule_php);
				long id_to_find = zend_list_insert(ret, le_wxModule);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlWidgetCell")){
				object_init_ex(return_value, php_wxHtmlWidgetCell_entry);
				wxHtmlWidgetCell* ret = wxDynamicCast(_ptrObj0, wxHtmlWidgetCell_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlWidgetCell);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlWinTagHandler")){
				object_init_ex(return_value, php_wxHtmlWinTagHandler_entry);
				wxHtmlWinTagHandler* ret = wxDynamicCast(_ptrObj0, wxHtmlWinTagHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlWinTagHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAutoBufferedPaintDC")){
				object_init_ex(return_value, php_wxAutoBufferedPaintDC_entry);
				wxAutoBufferedPaintDC* ret = wxDynamicCast(_ptrObj0, wxAutoBufferedPaintDC_php);
				long id_to_find = zend_list_insert(ret, le_wxAutoBufferedPaintDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBufferedDC")){
				object_init_ex(return_value, php_wxBufferedDC_entry);
				wxBufferedDC* ret = wxDynamicCast(_ptrObj0, wxBufferedDC_php);
				long id_to_find = zend_list_insert(ret, le_wxBufferedDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBufferedPaintDC")){
				object_init_ex(return_value, php_wxBufferedPaintDC_entry);
				wxBufferedPaintDC* ret = wxDynamicCast(_ptrObj0, wxBufferedPaintDC_php);
				long id_to_find = zend_list_insert(ret, le_wxBufferedPaintDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxClientDC")){
				object_init_ex(return_value, php_wxClientDC_entry);
				wxClientDC* ret = wxDynamicCast(_ptrObj0, wxClientDC_php);
				long id_to_find = zend_list_insert(ret, le_wxClientDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPaintEvent")){
				object_init_ex(return_value, php_wxPaintEvent_entry);
				wxPaintEvent* ret = wxDynamicCast(_ptrObj0, wxPaintEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxPaintEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPaintDC")){
				object_init_ex(return_value, php_wxPaintDC_entry);
				wxPaintDC* ret = wxDynamicCast(_ptrObj0, wxPaintDC_php);
				long id_to_find = zend_list_insert(ret, le_wxPaintDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMemoryDC")){
				object_init_ex(return_value, php_wxMemoryDC_entry);
				wxMemoryDC* ret = wxDynamicCast(_ptrObj0, wxMemoryDC_php);
				long id_to_find = zend_list_insert(ret, le_wxMemoryDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMirrorDC")){
				object_init_ex(return_value, php_wxMirrorDC_entry);
				wxMirrorDC* ret = wxDynamicCast(_ptrObj0, wxMirrorDC_php);
				long id_to_find = zend_list_insert(ret, le_wxMirrorDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPaletteChangedEvent")){
				object_init_ex(return_value, php_wxPaletteChangedEvent_entry);
				wxPaletteChangedEvent* ret = wxDynamicCast(_ptrObj0, wxPaletteChangedEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxPaletteChangedEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxImageHandler")){
				object_init_ex(return_value, php_wxImageHandler_entry);
				wxImageHandler* ret = wxDynamicCast(_ptrObj0, wxImageHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxImageHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxInitDialogEvent")){
				object_init_ex(return_value, php_wxInitDialogEvent_entry);
				wxInitDialogEvent* ret = wxDynamicCast(_ptrObj0, wxInitDialogEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxInitDialogEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMaximizeEvent")){
				object_init_ex(return_value, php_wxMaximizeEvent_entry);
				wxMaximizeEvent* ret = wxDynamicCast(_ptrObj0, wxMaximizeEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMaximizeEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNavigationKeyEvent")){
				object_init_ex(return_value, php_wxNavigationKeyEvent_entry);
				wxNavigationKeyEvent* ret = wxDynamicCast(_ptrObj0, wxNavigationKeyEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxNavigationKeyEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxXmlResourceHandler")){
				object_init_ex(return_value, php_wxXmlResourceHandler_entry);
				wxXmlResourceHandler* ret = wxDynamicCast(_ptrObj0, wxXmlResourceHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxXmlResourceHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxXmlDocument")){
				object_init_ex(return_value, php_wxXmlDocument_entry);
				wxXmlDocument* ret = wxDynamicCast(_ptrObj0, wxXmlDocument_php);
				long id_to_find = zend_list_insert(ret, le_wxXmlDocument);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxLayoutAlgorithm")){
				object_init_ex(return_value, php_wxLayoutAlgorithm_entry);
				wxLayoutAlgorithm* ret = wxDynamicCast(_ptrObj0, wxLayoutAlgorithm_php);
				long id_to_find = zend_list_insert(ret, le_wxLayoutAlgorithm);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFocusEvent")){
				object_init_ex(return_value, php_wxFocusEvent_entry);
				wxFocusEvent* ret = wxDynamicCast(_ptrObj0, wxFocusEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFocusEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileConfig")){
				object_init_ex(return_value, php_wxFileConfig_entry);
				wxFileConfig* ret = wxDynamicCast(_ptrObj0, wxFileConfig_php);
				long id_to_find = zend_list_insert(ret, le_wxFileConfig);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileDirPickerEvent")){
				object_init_ex(return_value, php_wxFileDirPickerEvent_entry);
				wxFileDirPickerEvent* ret = wxDynamicCast(_ptrObj0, wxFileDirPickerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFileDirPickerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileHistory")){
				object_init_ex(return_value, php_wxFileHistory_entry);
				wxFileHistory* ret = wxDynamicCast(_ptrObj0, wxFileHistory_php);
				long id_to_find = zend_list_insert(ret, le_wxFileHistory);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileSystemWatcher")){
				object_init_ex(return_value, php_wxFileSystemWatcher_entry);
				wxFileSystemWatcher* ret = wxDynamicCast(_ptrObj0, wxFileSystemWatcher_php);
				long id_to_find = zend_list_insert(ret, le_wxFileSystemWatcher);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileSystemWatcherEvent")){
				object_init_ex(return_value, php_wxFileSystemWatcherEvent_entry);
				wxFileSystemWatcherEvent* ret = wxDynamicCast(_ptrObj0, wxFileSystemWatcherEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFileSystemWatcherEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDisplayChangedEvent")){
				object_init_ex(return_value, php_wxDisplayChangedEvent_entry);
				wxDisplayChangedEvent* ret = wxDynamicCast(_ptrObj0, wxDisplayChangedEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxDisplayChangedEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCalculateLayoutEvent")){
				object_init_ex(return_value, php_wxCalculateLayoutEvent_entry);
				wxCalculateLayoutEvent* ret = wxDynamicCast(_ptrObj0, wxCalculateLayoutEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCalculateLayoutEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxContextMenuEvent")){
				object_init_ex(return_value, php_wxContextMenuEvent_entry);
				wxContextMenuEvent* ret = wxDynamicCast(_ptrObj0, wxContextMenuEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxContextMenuEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxQueryLayoutInfoEvent")){
				object_init_ex(return_value, php_wxQueryLayoutInfoEvent_entry);
				wxQueryLayoutInfoEvent* ret = wxDynamicCast(_ptrObj0, wxQueryLayoutInfoEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxQueryLayoutInfoEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToolbook")){
				object_init_ex(return_value, php_wxToolbook_entry);
				wxToolbook* ret = wxDynamicCast(_ptrObj0, wxToolbook_php);
				long id_to_find = zend_list_insert(ret, le_wxToolbook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonControl")){
				object_init_ex(return_value, php_wxRibbonControl_entry);
				wxRibbonControl* ret = wxDynamicCast(_ptrObj0, wxRibbonControl_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonControl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonBar")){
				object_init_ex(return_value, php_wxRibbonBar_entry);
				wxRibbonBar* ret = wxDynamicCast(_ptrObj0, wxRibbonBar_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonBarEvent")){
				object_init_ex(return_value, php_wxRibbonBarEvent_entry);
				wxRibbonBarEvent* ret = wxDynamicCast(_ptrObj0, wxRibbonBarEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonBarEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonButtonBar")){
				object_init_ex(return_value, php_wxRibbonButtonBar_entry);
				wxRibbonButtonBar* ret = wxDynamicCast(_ptrObj0, wxRibbonButtonBar_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonButtonBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonButtonBarEvent")){
				object_init_ex(return_value, php_wxRibbonButtonBarEvent_entry);
				wxRibbonButtonBarEvent* ret = wxDynamicCast(_ptrObj0, wxRibbonButtonBarEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonButtonBarEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonGallery")){
				object_init_ex(return_value, php_wxRibbonGallery_entry);
				wxRibbonGallery* ret = wxDynamicCast(_ptrObj0, wxRibbonGallery_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonGallery);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonGalleryEvent")){
				object_init_ex(return_value, php_wxRibbonGalleryEvent_entry);
				wxRibbonGalleryEvent* ret = wxDynamicCast(_ptrObj0, wxRibbonGalleryEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonGalleryEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonPage")){
				object_init_ex(return_value, php_wxRibbonPage_entry);
				wxRibbonPage* ret = wxDynamicCast(_ptrObj0, wxRibbonPage_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonPage);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonPanel")){
				object_init_ex(return_value, php_wxRibbonPanel_entry);
				wxRibbonPanel* ret = wxDynamicCast(_ptrObj0, wxRibbonPanel_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonPanel);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonToolBar")){
				object_init_ex(return_value, php_wxRibbonToolBar_entry);
				wxRibbonToolBar* ret = wxDynamicCast(_ptrObj0, wxRibbonToolBar_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonToolBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTaskBarIcon")){
				object_init_ex(return_value, php_wxTaskBarIcon_entry);
				wxTaskBarIcon* ret = wxDynamicCast(_ptrObj0, wxTaskBarIcon_php);
				long id_to_find = zend_list_insert(ret, le_wxTaskBarIcon);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTaskBarIconEvent")){
				object_init_ex(return_value, php_wxTaskBarIconEvent_entry);
				wxTaskBarIconEvent* ret = wxDynamicCast(_ptrObj0, wxTaskBarIconEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxTaskBarIconEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNotificationMessage")){
				object_init_ex(return_value, php_wxNotificationMessage_entry);
				wxNotificationMessage* ret = wxDynamicCast(_ptrObj0, wxNotificationMessage_php);
				long id_to_find = zend_list_insert(ret, le_wxNotificationMessage);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGenericProgressDialog")){
				object_init_ex(return_value, php_wxGenericProgressDialog_entry);
				wxGenericProgressDialog* ret = wxDynamicCast(_ptrObj0, wxGenericProgressDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxGenericProgressDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToolBarToolBase")){
				object_init_ex(return_value, php_wxToolBarToolBase_entry);
				wxToolBarToolBase* ret = wxDynamicCast(_ptrObj0, wxToolBarToolBase_php);
				long id_to_find = zend_list_insert(ret, le_wxToolBarToolBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
		}
	}
}

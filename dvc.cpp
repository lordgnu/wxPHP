/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "cfg.h"
#include "bookctrl.h"
#include "dnd.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "docview.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "html.h"
#include "help.h"
#include "logging.h"
#include "managedwnd.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "media.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "aui.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "dvc.h"
#include "others.h"


void php_wxDataViewModel_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewModel_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
}
PHP_METHOD(php_wxDataViewModel, AddNotifier)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::AddNotifier\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::AddNotifier\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* notifier0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&notifier0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &notifier0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(notifier0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(notifier0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(notifier0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModel::AddNotifier((wxDataViewModelNotifier*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					((wxDataViewListModel_php*)_this)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					((wxDataViewIndexListModel_php*)_this)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					((wxDataViewListStore_php*)_this)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					((wxDataViewVirtualListModel_php*)_this)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					((wxDataViewTreeStore_php*)_this)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					((wxDataViewModel_php*)_this)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}

				references->AddReference(notifier0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, ChangeValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ChangeValue\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::ChangeValue\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* variant0 = 0;
	void* object_pointer0_0 = 0;
	zval* item0 = 0;
	void* object_pointer0_1 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOl' (&variant0, php_wxVariant_entry, &item0, php_wxDataViewItem_entry, &col0)\n");
		#endif
		char parse_parameters_string[] = "OOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &variant0, php_wxVariant_entry, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(variant0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(variant0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(variant0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}

				references->AddReference(variant0);
				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, Cleared)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::Cleared\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::Cleared\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::Cleared())\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->Cleared());
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->Cleared());
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->Cleared());
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->Cleared());
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->Cleared());
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->Cleared());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, Compare)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::Compare\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::Compare\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item10 = 0;
	void* object_pointer0_0 = 0;
	zval* item20 = 0;
	void* object_pointer0_1 = 0;
	long column0;
	bool ascending0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOlb' (&item10, php_wxDataViewItem_entry, &item20, php_wxDataViewItem_entry, &column0, &ascending0)\n");
		#endif
		char parse_parameters_string[] = "OOlb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item10, php_wxDataViewItem_entry, &item20, php_wxDataViewItem_entry, &column0, &ascending0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item10) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item10), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item10) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(item20) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item20), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item20) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewModel::Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewListModel_php*)_this)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewIndexListModel_php*)_this)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_LONG(return_value, ((wxDataViewListStore_php*)_this)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewVirtualListModel_php*)_this)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_LONG(return_value, ((wxDataViewTreeStore_php*)_this)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewModel_php*)_this)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}

				references->AddReference(item10);
				references->AddReference(item20);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, GetAttr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::GetAttr\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::GetAttr\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	long col0;
	zval* attr0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OlO' (&item0, php_wxDataViewItem_entry, &col0, &attr0, php_wxDataViewItemAttr_entry)\n");
		#endif
		char parse_parameters_string[] = "OlO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &col0, &attr0, php_wxDataViewItemAttr_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(attr0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(attr0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(attr0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}

				references->AddReference(item0);
				references->AddReference(attr0);

				return;
				break;
			}
		}
	}

		
}
unsigned int wxDataViewModel_php::GetColumnCount()const
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::GetColumnCount\n");
	php_printf("===========================================\n");
	#endif
	
	zval* arguments[1];
	arguments[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetColumnCount", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 0, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'GetColumnCount'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return (unsigned int) Z_LVAL_P(return_value);
	

}
wxString wxDataViewModel_php::GetColumnType(unsigned int col)const
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::GetColumnType\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetColumnType", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], col);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'GetColumnType'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return wxString(Z_STRVAL_P(return_value), wxConvUTF8);
	

}
wxDataViewItem wxDataViewModel_php::GetParent(const wxDataViewItem& item)const
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::GetParent\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetParent", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&item, le_wxDataViewItem));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'GetParent'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		if(Z_TYPE_P(return_value) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(return_value), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
		{
			id_to_find = Z_RESVAL_P(*tmp);
			return_object = zend_list_find(id_to_find, &rsrc_type);
		}
		return *(wxDataViewItem*) return_object;
	

}
void wxDataViewModel_php::GetValue(wxVariant& variant, const wxDataViewItem& item, unsigned int col)const
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::GetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetValue", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&variant, le_wxVariant));
	object_init_ex(arguments[1], php_wxDataViewItem_entry);
	add_property_resource(arguments[1], _wxResource, zend_list_insert((void*)&item, le_wxDataViewItem));
	ZVAL_LONG(arguments[2], col);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 3, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'GetValue'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	

}
PHP_METHOD(php_wxDataViewModel, HasContainerColumns)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::HasContainerColumns\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::HasContainerColumns\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::HasContainerColumns(*(wxDataViewItem*) object_pointer0_0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, HasDefaultCompare)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::HasDefaultCompare\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::HasDefaultCompare\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::HasDefaultCompare())\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->HasDefaultCompare());
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->HasDefaultCompare());
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->HasDefaultCompare());
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->HasDefaultCompare());
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->HasDefaultCompare());
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->HasDefaultCompare());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, HasValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::HasValue\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::HasValue\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ol' (&item0, php_wxDataViewItem_entry, &col0)\n");
		#endif
		char parse_parameters_string[] = "Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
bool wxDataViewModel_php::IsContainer(const wxDataViewItem& item)const
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::IsContainer\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "IsContainer", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&item, le_wxDataViewItem));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'IsContainer'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
PHP_METHOD(php_wxDataViewModel, IsEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::IsEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::IsEnabled\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ol' (&item0, php_wxDataViewItem_entry, &col0)\n");
		#endif
		char parse_parameters_string[] = "Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, ItemAdded)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ItemAdded\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::ItemAdded\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	zval* item0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&parent0, php_wxDataViewItem_entry, &item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}

				references->AddReference(parent0);
				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, ItemChanged)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ItemChanged\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::ItemChanged\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ItemChanged(*(wxDataViewItem*) object_pointer0_0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, ItemDeleted)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ItemDeleted\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::ItemDeleted\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	zval* item0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&parent0, php_wxDataViewItem_entry, &item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}

				references->AddReference(parent0);
				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, RemoveNotifier)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::RemoveNotifier\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::RemoveNotifier\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* notifier0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&notifier0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &notifier0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(notifier0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(notifier0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(notifier0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModel::RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					((wxDataViewListModel_php*)_this)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					((wxDataViewIndexListModel_php*)_this)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					((wxDataViewListStore_php*)_this)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					((wxDataViewVirtualListModel_php*)_this)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					((wxDataViewTreeStore_php*)_this)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					((wxDataViewModel_php*)_this)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}

				references->AddReference(notifier0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewModel, Resort)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::Resort\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::Resort\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModel::Resort()\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					((wxDataViewListModel_php*)_this)->Resort();
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					((wxDataViewIndexListModel_php*)_this)->Resort();
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					((wxDataViewListStore_php*)_this)->Resort();
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					((wxDataViewVirtualListModel_php*)_this)->Resort();
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					((wxDataViewTreeStore_php*)_this)->Resort();
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					((wxDataViewModel_php*)_this)->Resort();
				}


				return;
				break;
			}
		}
	}

		
}
bool wxDataViewModel_php::SetValue(const wxVariant& variant, const wxDataViewItem& item, unsigned int col)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::SetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "SetValue", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&variant, le_wxVariant));
	object_init_ex(arguments[1], php_wxDataViewItem_entry);
	add_property_resource(arguments[1], _wxResource, zend_list_insert((void*)&item, le_wxDataViewItem));
	ZVAL_LONG(arguments[2], col);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 3, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'SetValue'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
PHP_METHOD(php_wxDataViewModel, ValueChanged)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ValueChanged\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModel::ValueChanged\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModel){
				references = &((wxDataViewModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListModel) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTreeStore) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ol' (&item0, php_wxDataViewItem_entry, &col0)\n");
		#endif
		char parse_parameters_string[] = "Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewTreeStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)_this)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)_this)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
void php_wxDataViewListModel_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewListModel_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewListModel_php* object = static_cast<wxDataViewListModel_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewListModel done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewListModel, GetAttrByRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListModel::GetAttrByRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListModel::GetAttrByRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListModel){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long row0;
	long col0;
	zval* attr0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llO' (&row0, &col0, &attr0, php_wxDataViewItemAttr_entry)\n");
		#endif
		char parse_parameters_string[] = "llO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &row0, &col0, &attr0, php_wxDataViewItemAttr_entry ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(attr0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(attr0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(attr0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewListModel::GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}

				references->AddReference(attr0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListModel, GetCount)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListModel::GetCount\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListModel::GetCount\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListModel){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewListModel::GetCount())\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewIndexListModel_php*)_this)->GetCount());
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_LONG(return_value, ((wxDataViewListStore_php*)_this)->GetCount());
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewVirtualListModel_php*)_this)->GetCount());
				}
				else if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewListModel_php*)_this)->GetCount());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListModel, GetRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListModel::GetRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListModel::GetRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListModel){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewListModel::GetRow(*(wxDataViewItem*) object_pointer0_0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewIndexListModel_php*)_this)->GetRow(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_LONG(return_value, ((wxDataViewListStore_php*)_this)->GetRow(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewVirtualListModel_php*)_this)->GetRow(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_LONG(return_value, ((wxDataViewListModel_php*)_this)->GetRow(*(wxDataViewItem*) object_pointer0_0));
				}

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
void wxDataViewListModel_php::GetValueByRow(wxVariant& variant, unsigned int row, unsigned int col)const
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewListModel::GetValueByRow\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetValueByRow", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&variant, le_wxVariant));
	ZVAL_LONG(arguments[1], row);
	ZVAL_LONG(arguments[2], col);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 3, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'GetValueByRow'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	

}
PHP_METHOD(php_wxDataViewListModel, IsEnabledByRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListModel::IsEnabledByRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListModel::IsEnabledByRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListModel){
				references = &((wxDataViewListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIndexListModel) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewListStore) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewVirtualListModel) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long row0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&row0, &col0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &row0, &col0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewListModel::IsEnabledByRow((unsigned int) row0, (unsigned int) col0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewIndexListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)_this)->IsEnabledByRow((unsigned int) row0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewListStore)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->IsEnabledByRow((unsigned int) row0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewVirtualListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)_this)->IsEnabledByRow((unsigned int) row0, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewListModel)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)_this)->IsEnabledByRow((unsigned int) row0, (unsigned int) col0));
				}


				return;
				break;
			}
		}
	}

		
}
bool wxDataViewListModel_php::SetValueByRow(const wxVariant& variant, unsigned int row, unsigned int col)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewListModel::SetValueByRow\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "SetValueByRow", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&variant, le_wxVariant));
	ZVAL_LONG(arguments[1], row);
	ZVAL_LONG(arguments[2], col);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 3, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'SetValueByRow'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
void php_wxDataViewIndexListModel_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewIndexListModel_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewIndexListModel_php* object = static_cast<wxDataViewIndexListModel_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewIndexListModel done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
void php_wxDataViewVirtualListModel_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewVirtualListModel_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewVirtualListModel_php* object = static_cast<wxDataViewVirtualListModel_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewVirtualListModel done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
void php_wxDataViewItemAttr_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewItemAttr_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewItemAttr_php* object = static_cast<wxDataViewItemAttr_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewItemAttr done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewItemAttr, SetBold)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItemAttr::SetBold\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewItemAttr::SetBold\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewItemAttr){
				references = &((wxDataViewItemAttr_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool set0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&set0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &set0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewItemAttr::SetBold(set0)\n\n");
				#endif
				((wxDataViewItemAttr_php*)_this)->SetBold(set0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewItemAttr, SetColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItemAttr::SetColour\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewItemAttr::SetColour\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewItemAttr){
				references = &((wxDataViewItemAttr_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* colour0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&colour0, php_wxColour_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &colour0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(colour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewItemAttr::SetColour(*(wxColour*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewItemAttr_php*)_this)->SetColour(*(wxColour*) object_pointer0_0);

				references->AddReference(colour0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewItemAttr, SetItalic)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItemAttr::SetItalic\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewItemAttr::SetItalic\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewItemAttr){
				references = &((wxDataViewItemAttr_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool set0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&set0)\n");
		#endif
		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &set0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewItemAttr::SetItalic(set0)\n\n");
				#endif
				((wxDataViewItemAttr_php*)_this)->SetItalic(set0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewItemAttr, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItemAttr::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewItemAttr_php();

				((wxDataViewItemAttr_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewItemAttr);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewItemAttr_php*) _this)->evnArray);
		
		array_init(((wxDataViewItemAttr_php*) _this)->evnArray);
		
		((wxDataViewItemAttr_php*) _this)->phpObj = getThis();
		
		((wxDataViewItemAttr_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewItemAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewItem_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewItem_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewItem_php* object = static_cast<wxDataViewItem_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewItem done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewItem, GetID)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItem::GetID\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewItem::GetID\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewItem){
				references = &((wxDataViewItem_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewItem::GetID()\n\n");
				#endif
				ZVAL_STRING(return_value, (char*) ((wxDataViewItem_php*)_this)->GetID(), 1);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewItem, IsOk)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItem::IsOk\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewItem::IsOk\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewItem){
				references = &((wxDataViewItem_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewItem::IsOk())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxDataViewItem_php*)_this)->IsOk());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewItem, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItem::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* item1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
	//Parameters for overload 2
	char* id2;
	long id_len2;
	zval* id2_ref;
	bool overload2_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item1, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item1, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(item1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&id2, &id_len2)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id2, &id_len2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;

			char parse_references_string[] = "z";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &id2_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewItem_php();

				((wxDataViewItem_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxDataViewItem*) object_pointer1_0)\n");
				#endif
				_this = new wxDataViewItem_php(*(wxDataViewItem*) object_pointer1_0);

				((wxDataViewItem_php*) _this)->references.Initialize();
				((wxDataViewItem_php*) _this)->references.AddReference(item1);
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((void*) id2)\n");
				#endif
				_this = new wxDataViewItem_php((void*) id2);

				((wxDataViewItem_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewItem);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewItem_php*) _this)->evnArray);
		
		array_init(((wxDataViewItem_php*) _this)->evnArray);
		
		((wxDataViewItem_php*) _this)->phpObj = getThis();
		
		((wxDataViewItem_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewItem_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewModelNotifier_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewModelNotifier_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewModelNotifier_php* object = static_cast<wxDataViewModelNotifier_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewModelNotifier done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
bool wxDataViewModelNotifier_php::Cleared()
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::Cleared\n");
	php_printf("===========================================\n");
	#endif
	
	zval* arguments[1];
	arguments[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "Cleared", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 0, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'Cleared'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
PHP_METHOD(php_wxDataViewModelNotifier, GetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModelNotifier::GetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModelNotifier::GetOwner\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModelNotifier){
				references = &((wxDataViewModelNotifier_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModelNotifier::GetOwner() to return object pointer\n\n");
				#endif
				wxDataViewModel_php* value_to_return0;
				value_to_return0 = (wxDataViewModel_php*) ((wxDataViewModelNotifier_php*)_this)->GetOwner();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDataViewModel_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDataViewModel));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
bool wxDataViewModelNotifier_php::ItemAdded(const wxDataViewItem& parent, const wxDataViewItem& item)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::ItemAdded\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "ItemAdded", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&parent, le_wxDataViewItem));
	object_init_ex(arguments[1], php_wxDataViewItem_entry);
	add_property_resource(arguments[1], _wxResource, zend_list_insert((void*)&item, le_wxDataViewItem));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 2, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'ItemAdded'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
bool wxDataViewModelNotifier_php::ItemChanged(const wxDataViewItem& item)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::ItemChanged\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "ItemChanged", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&item, le_wxDataViewItem));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'ItemChanged'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
bool wxDataViewModelNotifier_php::ItemDeleted(const wxDataViewItem& parent, const wxDataViewItem& item)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::ItemDeleted\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "ItemDeleted", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&parent, le_wxDataViewItem));
	object_init_ex(arguments[1], php_wxDataViewItem_entry);
	add_property_resource(arguments[1], _wxResource, zend_list_insert((void*)&item, le_wxDataViewItem));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 2, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'ItemDeleted'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
void wxDataViewModelNotifier_php::Resort()
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::Resort\n");
	php_printf("===========================================\n");
	#endif
	
	zval* arguments[1];
	arguments[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "Resort", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 0, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'Resort'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	

}
PHP_METHOD(php_wxDataViewModelNotifier, SetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModelNotifier::SetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewModelNotifier::SetOwner\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewModelNotifier){
				references = &((wxDataViewModelNotifier_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* owner0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&owner0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &owner0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(owner0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(owner0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxDataViewListModel && rsrc_type != le_wxDataViewIndexListModel && rsrc_type != le_wxDataViewListStore && rsrc_type != le_wxDataViewVirtualListModel && rsrc_type != le_wxDataViewTreeStore))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(owner0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModelNotifier::SetOwner((wxDataViewModel*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewModelNotifier_php*)_this)->SetOwner((wxDataViewModel*) object_pointer0_0);

				references->AddReference(owner0);

				return;
				break;
			}
		}
	}

		
}
bool wxDataViewModelNotifier_php::ValueChanged(const wxDataViewItem& item, unsigned int col)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::ValueChanged\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "ValueChanged", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&item, le_wxDataViewItem));
	ZVAL_LONG(arguments[1], col);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 2, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'ValueChanged'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
PHP_METHOD(php_wxDataViewModelNotifier, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModelNotifier::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewModelNotifier_php();

				((wxDataViewModelNotifier_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewModelNotifier);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewModelNotifier_php*) _this)->evnArray);
		
		array_init(((wxDataViewModelNotifier_php*) _this)->evnArray);
		
		((wxDataViewModelNotifier_php*) _this)->phpObj = getThis();
		
		((wxDataViewModelNotifier_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewModelNotifier_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewRenderer_php* object = static_cast<wxDataViewRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewRenderer, EnableEllipsize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::EnableEllipsize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::EnableEllipsize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&mode0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::EnableEllipsize()\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					((wxDataViewBitmapRenderer_php*)_this)->EnableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					((wxDataViewChoiceRenderer_php*)_this)->EnableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					((wxDataViewCustomRenderer_php*)_this)->EnableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					((wxDataViewSpinRenderer_php*)_this)->EnableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					((wxDataViewDateRenderer_php*)_this)->EnableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					((wxDataViewIconTextRenderer_php*)_this)->EnableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					((wxDataViewProgressRenderer_php*)_this)->EnableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					((wxDataViewTextRenderer_php*)_this)->EnableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					((wxDataViewToggleRenderer_php*)_this)->EnableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					((wxDataViewRenderer_php*)_this)->EnableEllipsize();
				}


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::EnableEllipsize((wxEllipsizeMode) mode0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					((wxDataViewBitmapRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					((wxDataViewChoiceRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					((wxDataViewCustomRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					((wxDataViewSpinRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					((wxDataViewDateRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					((wxDataViewIconTextRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					((wxDataViewProgressRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					((wxDataViewTextRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					((wxDataViewToggleRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					((wxDataViewRenderer_php*)_this)->EnableEllipsize((wxEllipsizeMode) mode0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewRenderer, DisableEllipsize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::DisableEllipsize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::DisableEllipsize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::DisableEllipsize()\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					((wxDataViewBitmapRenderer_php*)_this)->DisableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					((wxDataViewChoiceRenderer_php*)_this)->DisableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					((wxDataViewCustomRenderer_php*)_this)->DisableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					((wxDataViewSpinRenderer_php*)_this)->DisableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					((wxDataViewDateRenderer_php*)_this)->DisableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					((wxDataViewIconTextRenderer_php*)_this)->DisableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					((wxDataViewProgressRenderer_php*)_this)->DisableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					((wxDataViewTextRenderer_php*)_this)->DisableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					((wxDataViewToggleRenderer_php*)_this)->DisableEllipsize();
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					((wxDataViewRenderer_php*)_this)->DisableEllipsize();
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewRenderer, GetAlignment)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetAlignment\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::GetAlignment\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewRenderer::GetAlignment())\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewBitmapRenderer_php*)_this)->GetAlignment());
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewChoiceRenderer_php*)_this)->GetAlignment());
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewCustomRenderer_php*)_this)->GetAlignment());
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewSpinRenderer_php*)_this)->GetAlignment());
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewDateRenderer_php*)_this)->GetAlignment());
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewIconTextRenderer_php*)_this)->GetAlignment());
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewProgressRenderer_php*)_this)->GetAlignment());
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewTextRenderer_php*)_this)->GetAlignment());
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewToggleRenderer_php*)_this)->GetAlignment());
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewRenderer_php*)_this)->GetAlignment());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewRenderer, GetEllipsizeMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetEllipsizeMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::GetEllipsizeMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewRenderer::GetEllipsizeMode())\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewBitmapRenderer_php*)_this)->GetEllipsizeMode());
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewChoiceRenderer_php*)_this)->GetEllipsizeMode());
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewCustomRenderer_php*)_this)->GetEllipsizeMode());
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewSpinRenderer_php*)_this)->GetEllipsizeMode());
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewDateRenderer_php*)_this)->GetEllipsizeMode());
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewIconTextRenderer_php*)_this)->GetEllipsizeMode());
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewProgressRenderer_php*)_this)->GetEllipsizeMode());
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewTextRenderer_php*)_this)->GetEllipsizeMode());
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewToggleRenderer_php*)_this)->GetEllipsizeMode());
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewRenderer_php*)_this)->GetEllipsizeMode());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewRenderer, GetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::GetMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewRenderer::GetMode())\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewBitmapRenderer_php*)_this)->GetMode());
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewChoiceRenderer_php*)_this)->GetMode());
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewCustomRenderer_php*)_this)->GetMode());
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewSpinRenderer_php*)_this)->GetMode());
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewDateRenderer_php*)_this)->GetMode());
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewIconTextRenderer_php*)_this)->GetMode());
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewProgressRenderer_php*)_this)->GetMode());
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewTextRenderer_php*)_this)->GetMode());
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewToggleRenderer_php*)_this)->GetMode());
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					ZVAL_LONG(return_value, ((wxDataViewRenderer_php*)_this)->GetMode());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewRenderer, GetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::GetOwner\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::GetOwner() to return object pointer\n\n");
				#endif
				wxDataViewColumn_php* value_to_return0;
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewBitmapRenderer_php*)_this)->GetOwner();

				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewChoiceRenderer_php*)_this)->GetOwner();

				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewCustomRenderer_php*)_this)->GetOwner();

				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewSpinRenderer_php*)_this)->GetOwner();

				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewDateRenderer_php*)_this)->GetOwner();

				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewIconTextRenderer_php*)_this)->GetOwner();

				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewProgressRenderer_php*)_this)->GetOwner();

				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewTextRenderer_php*)_this)->GetOwner();

				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewToggleRenderer_php*)_this)->GetOwner();

				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewRenderer_php*)_this)->GetOwner();

				}
				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDataViewColumn_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDataViewColumn));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
bool wxDataViewRenderer_php::GetValue(wxVariant& value)const
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewRenderer::GetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetValue", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&value, le_wxVariant));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'GetValue'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
PHP_METHOD(php_wxDataViewRenderer, GetVariantType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetVariantType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::GetVariantType\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewRenderer::GetVariantType().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					value_to_return0 = ((wxDataViewBitmapRenderer_php*)_this)->GetVariantType();
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					value_to_return0 = ((wxDataViewChoiceRenderer_php*)_this)->GetVariantType();
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					value_to_return0 = ((wxDataViewCustomRenderer_php*)_this)->GetVariantType();
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					value_to_return0 = ((wxDataViewSpinRenderer_php*)_this)->GetVariantType();
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					value_to_return0 = ((wxDataViewDateRenderer_php*)_this)->GetVariantType();
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					value_to_return0 = ((wxDataViewIconTextRenderer_php*)_this)->GetVariantType();
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					value_to_return0 = ((wxDataViewProgressRenderer_php*)_this)->GetVariantType();
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					value_to_return0 = ((wxDataViewTextRenderer_php*)_this)->GetVariantType();
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					value_to_return0 = ((wxDataViewToggleRenderer_php*)_this)->GetVariantType();
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					value_to_return0 = ((wxDataViewRenderer_php*)_this)->GetVariantType();
				}
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewRenderer, SetAlignment)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::SetAlignment\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::SetAlignment\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&align0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::SetAlignment((int) align0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					((wxDataViewBitmapRenderer_php*)_this)->SetAlignment((int) align0);
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					((wxDataViewChoiceRenderer_php*)_this)->SetAlignment((int) align0);
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					((wxDataViewCustomRenderer_php*)_this)->SetAlignment((int) align0);
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					((wxDataViewSpinRenderer_php*)_this)->SetAlignment((int) align0);
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					((wxDataViewDateRenderer_php*)_this)->SetAlignment((int) align0);
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					((wxDataViewIconTextRenderer_php*)_this)->SetAlignment((int) align0);
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					((wxDataViewProgressRenderer_php*)_this)->SetAlignment((int) align0);
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					((wxDataViewTextRenderer_php*)_this)->SetAlignment((int) align0);
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					((wxDataViewToggleRenderer_php*)_this)->SetAlignment((int) align0);
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					((wxDataViewRenderer_php*)_this)->SetAlignment((int) align0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewRenderer, SetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::SetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::SetOwner\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* owner0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&owner0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &owner0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(owner0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(owner0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(owner0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::SetOwner((wxDataViewColumn*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					((wxDataViewBitmapRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					((wxDataViewChoiceRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					((wxDataViewCustomRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					((wxDataViewSpinRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					((wxDataViewDateRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					((wxDataViewIconTextRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					((wxDataViewProgressRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					((wxDataViewTextRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					((wxDataViewToggleRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					((wxDataViewRenderer_php*)_this)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}

				references->AddReference(owner0);

				return;
				break;
			}
		}
	}

		
}
bool wxDataViewRenderer_php::SetValue(const wxVariant& value)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewRenderer::SetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "SetValue", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&value, le_wxVariant));
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 1, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'SetValue'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
PHP_METHOD(php_wxDataViewRenderer, Validate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::Validate\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewRenderer::Validate\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewRenderer){
				references = &((wxDataViewRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewBitmapRenderer) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewChoiceRenderer) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewCustomRenderer) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewDateRenderer) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewIconTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewProgressRenderer) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewTextRenderer) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewToggleRenderer) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* value0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&value0, php_wxVariant_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0, php_wxVariant_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(value0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(value0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewRenderer::Validate(*(wxVariant*) object_pointer0_0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewBitmapRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewBitmapRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewChoiceRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewChoiceRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewDateRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewDateRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewIconTextRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIconTextRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewProgressRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewProgressRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewTextRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTextRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewToggleRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewToggleRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(parent_rsrc_type == le_wxDataViewRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewRenderer_php*)_this)->Validate(*(wxVariant*) object_pointer0_0));
				}

				references->AddReference(value0);

				return;
				break;
			}
		}
	}

		
}
void php_wxDataViewTextRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewTextRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewTextRenderer_php* object = static_cast<wxDataViewTextRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewTextRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewTextRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTextRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif
		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewTextRenderer_php();

				((wxDataViewTextRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif
				_this = new wxDataViewTextRenderer_php(wxString(varianttype0, wxConvUTF8));

				((wxDataViewTextRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif
				_this = new wxDataViewTextRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				((wxDataViewTextRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif
				_this = new wxDataViewTextRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				((wxDataViewTextRenderer_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewTextRenderer);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewTextRenderer_php*) _this)->evnArray);
		
		array_init(((wxDataViewTextRenderer_php*) _this)->evnArray);
		
		((wxDataViewTextRenderer_php*) _this)->phpObj = getThis();
		
		((wxDataViewTextRenderer_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewTextRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewIconTextRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewIconTextRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewIconTextRenderer_php* object = static_cast<wxDataViewIconTextRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewIconTextRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewIconTextRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconTextRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif
		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewIconTextRenderer_php();

				((wxDataViewIconTextRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif
				_this = new wxDataViewIconTextRenderer_php(wxString(varianttype0, wxConvUTF8));

				((wxDataViewIconTextRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif
				_this = new wxDataViewIconTextRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				((wxDataViewIconTextRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif
				_this = new wxDataViewIconTextRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				((wxDataViewIconTextRenderer_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewIconTextRenderer);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewIconTextRenderer_php*) _this)->evnArray);
		
		array_init(((wxDataViewIconTextRenderer_php*) _this)->evnArray);
		
		((wxDataViewIconTextRenderer_php*) _this)->phpObj = getThis();
		
		((wxDataViewIconTextRenderer_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewIconTextRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewProgressRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewProgressRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewProgressRenderer_php* object = static_cast<wxDataViewProgressRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewProgressRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewProgressRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewProgressRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* label0;
	long label_len0;
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ssll' (&label0, &label_len0, &varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif
		char parse_parameters_string[] = "|ssll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &label0, &label_len0, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewProgressRenderer_php();

				((wxDataViewProgressRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(label0, wxConvUTF8))\n");
				#endif
				_this = new wxDataViewProgressRenderer_php(wxString(label0, wxConvUTF8));

				((wxDataViewProgressRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8))\n");
				#endif
				_this = new wxDataViewProgressRenderer_php(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8));

				((wxDataViewProgressRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif
				_this = new wxDataViewProgressRenderer_php(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				((wxDataViewProgressRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif
				_this = new wxDataViewProgressRenderer_php(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				((wxDataViewProgressRenderer_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewProgressRenderer);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewProgressRenderer_php*) _this)->evnArray);
		
		array_init(((wxDataViewProgressRenderer_php*) _this)->evnArray);
		
		((wxDataViewProgressRenderer_php*) _this)->phpObj = getThis();
		
		((wxDataViewProgressRenderer_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewProgressRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewSpinRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewSpinRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewSpinRenderer_php* object = static_cast<wxDataViewSpinRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewSpinRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewSpinRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewSpinRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long min0;
	long max0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll|ll' (&min0, &max0, &mode0, &align0)\n");
		#endif
		char parse_parameters_string[] = "ll|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &min0, &max0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) min0, (int) max0)\n");
				#endif
				_this = new wxDataViewSpinRenderer_php((int) min0, (int) max0);

				((wxDataViewSpinRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) min0, (int) max0, (wxDataViewCellMode) mode0)\n");
				#endif
				_this = new wxDataViewSpinRenderer_php((int) min0, (int) max0, (wxDataViewCellMode) mode0);

				((wxDataViewSpinRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) min0, (int) max0, (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif
				_this = new wxDataViewSpinRenderer_php((int) min0, (int) max0, (wxDataViewCellMode) mode0, (int) align0);

				((wxDataViewSpinRenderer_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewSpinRenderer);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewSpinRenderer_php*) _this)->evnArray);
		
		array_init(((wxDataViewSpinRenderer_php*) _this)->evnArray);
		
		((wxDataViewSpinRenderer_php*) _this)->phpObj = getThis();
		
		((wxDataViewSpinRenderer_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewSpinRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewToggleRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewToggleRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewToggleRenderer_php* object = static_cast<wxDataViewToggleRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewToggleRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewToggleRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewToggleRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif
		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewToggleRenderer_php();

				((wxDataViewToggleRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif
				_this = new wxDataViewToggleRenderer_php(wxString(varianttype0, wxConvUTF8));

				((wxDataViewToggleRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif
				_this = new wxDataViewToggleRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				((wxDataViewToggleRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif
				_this = new wxDataViewToggleRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				((wxDataViewToggleRenderer_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewToggleRenderer);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewToggleRenderer_php*) _this)->evnArray);
		
		array_init(((wxDataViewToggleRenderer_php*) _this)->evnArray);
		
		((wxDataViewToggleRenderer_php*) _this)->phpObj = getThis();
		
		((wxDataViewToggleRenderer_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewToggleRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewChoiceRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewChoiceRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewChoiceRenderer_php* object = static_cast<wxDataViewChoiceRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewChoiceRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewChoiceRenderer, GetChoice)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewChoiceRenderer::GetChoice\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewChoiceRenderer::GetChoice\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewChoiceRenderer){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long index0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&index0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &index0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewChoiceRenderer::GetChoice((size_t) index0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = ((wxDataViewChoiceRenderer_php*)_this)->GetChoice((size_t) index0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewChoiceRenderer, GetChoices)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewChoiceRenderer::GetChoices\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewChoiceRenderer::GetChoices\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewChoiceRenderer){
				references = &((wxDataViewChoiceRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewChoiceRenderer::GetChoices() to return strings array\n\n");
				#endif
				wxArrayString value_to_return0;
				value_to_return0 = ((wxDataViewChoiceRenderer_php*)_this)->GetChoices();
				char* temp_string0;
				array_init(return_value);
				for(size_t i=0; i<value_to_return0.GetCount(); i++)
				{
					temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0[i].size()+1));
					strcpy (temp_string0, (const char *) value_to_return0[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string0, 1);
					free(temp_string0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewChoiceRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewChoiceRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* choices0 = 0;
	long mode0;
	long alignment0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'a|ll' (&choices0, &mode0, &alignment0)\n");
		#endif
		char parse_parameters_string[] = "a|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &choices0, &mode0, &alignment0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_0;
		bool strings_continue0_0 = true;

		switch(arguments_received)
		{
			case 1:
			{
				int array_index0_0 = 0;
				zval** temp_array_value0_0 = 0;
				while(strings_continue0_0)
				{
					if(zend_hash_index_find(HASH_OF(choices0), array_index0_0, (void**)&temp_array_value0_0) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_0);
						strings_array0_0.Add(wxString(Z_STRVAL_PP(temp_array_value0_0), wxConvUTF8));
						array_index0_0++;
					}
					else
					{
						strings_continue0_0 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(strings_array0_0)\n");
				#endif
				_this = new wxDataViewChoiceRenderer_php(strings_array0_0);

				((wxDataViewChoiceRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				int array_index0_0 = 0;
				zval** temp_array_value0_0 = 0;
				while(strings_continue0_0)
				{
					if(zend_hash_index_find(HASH_OF(choices0), array_index0_0, (void**)&temp_array_value0_0) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_0);
						strings_array0_0.Add(wxString(Z_STRVAL_PP(temp_array_value0_0), wxConvUTF8));
						array_index0_0++;
					}
					else
					{
						strings_continue0_0 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(strings_array0_0, (wxDataViewCellMode) mode0)\n");
				#endif
				_this = new wxDataViewChoiceRenderer_php(strings_array0_0, (wxDataViewCellMode) mode0);

				((wxDataViewChoiceRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				int array_index0_0 = 0;
				zval** temp_array_value0_0 = 0;
				while(strings_continue0_0)
				{
					if(zend_hash_index_find(HASH_OF(choices0), array_index0_0, (void**)&temp_array_value0_0) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_0);
						strings_array0_0.Add(wxString(Z_STRVAL_PP(temp_array_value0_0), wxConvUTF8));
						array_index0_0++;
					}
					else
					{
						strings_continue0_0 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(strings_array0_0, (wxDataViewCellMode) mode0, (int) alignment0)\n");
				#endif
				_this = new wxDataViewChoiceRenderer_php(strings_array0_0, (wxDataViewCellMode) mode0, (int) alignment0);

				((wxDataViewChoiceRenderer_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewChoiceRenderer);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewChoiceRenderer_php*) _this)->evnArray);
		
		array_init(((wxDataViewChoiceRenderer_php*) _this)->evnArray);
		
		((wxDataViewChoiceRenderer_php*) _this)->phpObj = getThis();
		
		((wxDataViewChoiceRenderer_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewChoiceRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewDateRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewDateRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewDateRenderer_php* object = static_cast<wxDataViewDateRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewDateRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewDateRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewDateRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif
		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewDateRenderer_php();

				((wxDataViewDateRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif
				_this = new wxDataViewDateRenderer_php(wxString(varianttype0, wxConvUTF8));

				((wxDataViewDateRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif
				_this = new wxDataViewDateRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				((wxDataViewDateRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif
				_this = new wxDataViewDateRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				((wxDataViewDateRenderer_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewDateRenderer);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewDateRenderer_php*) _this)->evnArray);
		
		array_init(((wxDataViewDateRenderer_php*) _this)->evnArray);
		
		((wxDataViewDateRenderer_php*) _this)->phpObj = getThis();
		
		((wxDataViewDateRenderer_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewDateRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewCustomRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewCustomRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewCustomRenderer_php* object = static_cast<wxDataViewCustomRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewCustomRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewCustomRenderer, ActivateCell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::ActivateCell\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewCustomRenderer::ActivateCell\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewCustomRenderer){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* cell0 = 0;
	void* object_pointer0_0 = 0;
	zval* model0 = 0;
	void* object_pointer0_1 = 0;
	zval* item0 = 0;
	void* object_pointer0_2 = 0;
	long col0;
	zval* mouseEvent0 = 0;
	void* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OzOlz' (&cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0, &mouseEvent0)\n");
		#endif
		char parse_parameters_string[] = "OzOlz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0, &mouseEvent0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cell0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cell0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(model0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(model0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxDataViewListModel && rsrc_type != le_wxDataViewIndexListModel && rsrc_type != le_wxDataViewListStore && rsrc_type != le_wxDataViewVirtualListModel && rsrc_type != le_wxDataViewTreeStore))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(model0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(mouseEvent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(mouseEvent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(mouseEvent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::ActivateCell(*(wxRect*) object_pointer0_0, (wxDataViewModel*) object_pointer0_1, *(wxDataViewItem*) object_pointer0_2, (unsigned int) col0, (const wxMouseEvent*) object_pointer0_4))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)_this)->ActivateCell(*(wxRect*) object_pointer0_0, (wxDataViewModel*) object_pointer0_1, *(wxDataViewItem*) object_pointer0_2, (unsigned int) col0, (const wxMouseEvent*) object_pointer0_4));
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)_this)->ActivateCell(*(wxRect*) object_pointer0_0, (wxDataViewModel*) object_pointer0_1, *(wxDataViewItem*) object_pointer0_2, (unsigned int) col0, (const wxMouseEvent*) object_pointer0_4));
				}

				references->AddReference(cell0);
				references->AddReference(model0);
				references->AddReference(item0);
				references->AddReference(mouseEvent0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewCustomRenderer, CreateEditorCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::CreateEditorCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewCustomRenderer::CreateEditorCtrl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewCustomRenderer){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	zval* labelRect0 = 0;
	void* object_pointer0_1 = 0;
	zval* value0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zOO' (&parent0, &labelRect0, php_wxRect_entry, &value0, php_wxVariant_entry)\n");
		#endif
		char parse_parameters_string[] = "zOO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &labelRect0, php_wxRect_entry, &value0, php_wxVariant_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(labelRect0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(labelRect0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(labelRect0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(value0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(value0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewCustomRenderer::CreateEditorCtrl((wxWindow*) object_pointer0_0, *(wxRect*) object_pointer0_1, *(wxVariant*) object_pointer0_2) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return3;
				if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					value_to_return3 = (wxWindow_php*) ((wxDataViewSpinRenderer_php*)_this)->CreateEditorCtrl((wxWindow*) object_pointer0_0, *(wxRect*) object_pointer0_1, *(wxVariant*) object_pointer0_2);

				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					value_to_return3 = (wxWindow_php*) ((wxDataViewCustomRenderer_php*)_this)->CreateEditorCtrl((wxWindow*) object_pointer0_0, *(wxRect*) object_pointer0_1, *(wxVariant*) object_pointer0_2);

				}
				if(value_to_return3 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return3->references.IsUserInitialized()){
					if(value_to_return3->phpObj != NULL){
						*return_value = *value_to_return3->phpObj;
						zval_add_ref(&value_to_return3->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return3, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return3 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}

				references->AddReference(parent0);
				references->AddReference(value0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewCustomRenderer, GetAttr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::GetAttr\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewCustomRenderer::GetAttr\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewCustomRenderer){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewCustomRenderer::GetAttr() to return object reference\n\n");
				#endif
				wxDataViewItemAttr_php* value_to_return0;
				if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					value_to_return0 = (wxDataViewItemAttr_php*) &((wxDataViewSpinRenderer_php*)_this)->GetAttr();

				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					value_to_return0 = (wxDataViewItemAttr_php*) &((wxDataViewCustomRenderer_php*)_this)->GetAttr();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDataViewItemAttr_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDataViewItemAttr));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
wxSize wxDataViewCustomRenderer_php::GetSize()const
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewCustomRenderer::GetSize\n");
	php_printf("===========================================\n");
	#endif
	
	zval* arguments[1];
	arguments[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetSize", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 0, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'GetSize'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		if(Z_TYPE_P(return_value) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(return_value), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
		{
			id_to_find = Z_RESVAL_P(*tmp);
			return_object = zend_list_find(id_to_find, &rsrc_type);
		}
		return *(wxSize*) return_object;
	

}
PHP_METHOD(php_wxDataViewCustomRenderer, GetValueFromEditorCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::GetValueFromEditorCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewCustomRenderer::GetValueFromEditorCtrl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewCustomRenderer){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* editor0 = 0;
	void* object_pointer0_0 = 0;
	zval* value0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO' (&editor0, &value0, php_wxVariant_entry)\n");
		#endif
		char parse_parameters_string[] = "zO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &editor0, &value0, php_wxVariant_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(editor0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(editor0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(editor0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(value0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(value0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::GetValueFromEditorCtrl((wxWindow*) object_pointer0_0, *(wxVariant*) object_pointer0_1))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)_this)->GetValueFromEditorCtrl((wxWindow*) object_pointer0_0, *(wxVariant*) object_pointer0_1));
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)_this)->GetValueFromEditorCtrl((wxWindow*) object_pointer0_0, *(wxVariant*) object_pointer0_1));
				}

				references->AddReference(editor0);
				references->AddReference(value0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewCustomRenderer, HasEditorCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::HasEditorCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewCustomRenderer::HasEditorCtrl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewCustomRenderer){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::HasEditorCtrl())\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)_this)->HasEditorCtrl());
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)_this)->HasEditorCtrl());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewCustomRenderer, LeftClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::LeftClick\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewCustomRenderer::LeftClick\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewCustomRenderer){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	void* object_pointer0_0 = 0;
	zval* cell0 = 0;
	void* object_pointer0_1 = 0;
	zval* model0 = 0;
	void* object_pointer0_2 = 0;
	zval* item0 = 0;
	void* object_pointer0_3 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOzOl' (&cursor0, php_wxPoint_entry, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0)\n");
		#endif
		char parse_parameters_string[] = "OOzOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0, php_wxPoint_entry, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cursor0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(cell0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cell0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(model0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(model0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 || (rsrc_type != le_wxDataViewListModel && rsrc_type != le_wxDataViewIndexListModel && rsrc_type != le_wxDataViewListStore && rsrc_type != le_wxDataViewVirtualListModel && rsrc_type != le_wxDataViewTreeStore))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(model0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::LeftClick(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)_this)->LeftClick(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)_this)->LeftClick(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0));
				}

				references->AddReference(cursor0);
				references->AddReference(cell0);
				references->AddReference(model0);
				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
bool wxDataViewCustomRenderer_php::Render(wxRect cell, wxDC* dc, int state)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewCustomRenderer::Render\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "Render", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxRect_entry);
	add_property_resource(arguments[0], _wxResource, zend_list_insert((void*)&cell, le_wxRect));
	object_init_ex(arguments[1], php_wxDC_entry);
	add_property_resource(arguments[1], _wxResource, zend_list_insert((void*)dc, le_wxDC));
	ZVAL_LONG(arguments[2], state);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 3, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'Render'!", "Error");
	}
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	

}
PHP_METHOD(php_wxDataViewCustomRenderer, RenderText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::RenderText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewCustomRenderer::RenderText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewCustomRenderer){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	long xoffset0;
	zval* cell0 = 0;
	void* object_pointer0_2 = 0;
	zval* dc0 = 0;
	void* object_pointer0_3 = 0;
	long state0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'slOzl' (&text0, &text_len0, &xoffset0, &cell0, php_wxRect_entry, &dc0, &state0)\n");
		#endif
		char parse_parameters_string[] = "slOzl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &xoffset0, &cell0, php_wxRect_entry, &dc0, &state0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(cell0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cell0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(dc0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewCustomRenderer::RenderText(wxString(text0, wxConvUTF8), (int) xoffset0, *(wxRect*) object_pointer0_2, (wxDC*) object_pointer0_3, (int) state0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					((wxDataViewSpinRenderer_php*)_this)->RenderText(wxString(text0, wxConvUTF8), (int) xoffset0, *(wxRect*) object_pointer0_2, (wxDC*) object_pointer0_3, (int) state0);
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					((wxDataViewCustomRenderer_php*)_this)->RenderText(wxString(text0, wxConvUTF8), (int) xoffset0, *(wxRect*) object_pointer0_2, (wxDC*) object_pointer0_3, (int) state0);
				}

				references->AddReference(dc0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewCustomRenderer, StartDrag)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::StartDrag\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewCustomRenderer::StartDrag\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewCustomRenderer){
				references = &((wxDataViewCustomRenderer_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDataViewSpinRenderer) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	void* object_pointer0_0 = 0;
	zval* cell0 = 0;
	void* object_pointer0_1 = 0;
	zval* model0 = 0;
	void* object_pointer0_2 = 0;
	zval* item0 = 0;
	void* object_pointer0_3 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOzOl' (&cursor0, php_wxPoint_entry, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0)\n");
		#endif
		char parse_parameters_string[] = "OOzOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0, php_wxPoint_entry, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cursor0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(cell0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cell0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(model0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(model0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 || (rsrc_type != le_wxDataViewListModel && rsrc_type != le_wxDataViewIndexListModel && rsrc_type != le_wxDataViewListStore && rsrc_type != le_wxDataViewVirtualListModel && rsrc_type != le_wxDataViewTreeStore))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(model0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::StartDrag(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxDataViewSpinRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)_this)->StartDrag(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0));
				}
				else if(parent_rsrc_type == le_wxDataViewCustomRenderer)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)_this)->StartDrag(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0));
				}

				references->AddReference(cursor0);
				references->AddReference(cell0);
				references->AddReference(model0);
				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
void php_wxDataViewBitmapRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewBitmapRenderer_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewBitmapRenderer_php* object = static_cast<wxDataViewBitmapRenderer_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewBitmapRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewBitmapRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewBitmapRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif
		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewBitmapRenderer_php();

				((wxDataViewBitmapRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif
				_this = new wxDataViewBitmapRenderer_php(wxString(varianttype0, wxConvUTF8));

				((wxDataViewBitmapRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif
				_this = new wxDataViewBitmapRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				((wxDataViewBitmapRenderer_php*) _this)->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif
				_this = new wxDataViewBitmapRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				((wxDataViewBitmapRenderer_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewBitmapRenderer);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewBitmapRenderer_php*) _this)->evnArray);
		
		array_init(((wxDataViewBitmapRenderer_php*) _this)->evnArray);
		
		((wxDataViewBitmapRenderer_php*) _this)->phpObj = getThis();
		
		((wxDataViewBitmapRenderer_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewBitmapRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewColumn_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewColumn_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewColumn_php* object = static_cast<wxDataViewColumn_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewColumn done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewColumn, GetModelColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewColumn::GetModelColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewColumn::GetModelColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewColumn){
				references = &((wxDataViewColumn_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewColumn::GetModelColumn())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxDataViewColumn_php*)_this)->GetModelColumn());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewColumn, GetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewColumn::GetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewColumn::GetOwner\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewColumn){
				references = &((wxDataViewColumn_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewColumn::GetOwner() to return object pointer\n\n");
				#endif
				wxDataViewCtrl_php* value_to_return0;
				value_to_return0 = (wxDataViewCtrl_php*) ((wxDataViewColumn_php*)_this)->GetOwner();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDataViewCtrl_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDataViewCtrl));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewColumn, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewColumn::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* title0;
	long title_len0;
	zval* renderer0 = 0;
	void* object_pointer0_1 = 0;
	long model_column0;
	long width0;
	long align0;
	long flags0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* bitmap1 = 0;
	void* object_pointer1_0 = 0;
	zval* renderer1 = 0;
	void* object_pointer1_1 = 0;
	long model_column1;
	long width1;
	long align1;
	long flags1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'szl|lll' (&title0, &title_len0, &renderer0, &model_column0, &width0, &align0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "szl|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &title0, &title_len0, &renderer0, &model_column0, &width0, &align0, &flags0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(renderer0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(renderer0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(renderer0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ozl|lll' (&bitmap1, php_wxBitmap_entry, &renderer1, &model_column1, &width1, &align1, &flags1)\n");
		#endif
		char parse_parameters_string[] = "Ozl|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bitmap1, php_wxBitmap_entry, &renderer1, &model_column1, &width1, &align1, &flags1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bitmap1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bitmap1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bitmap1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(renderer1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(renderer1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 || (rsrc_type != le_wxDataViewBitmapRenderer && rsrc_type != le_wxDataViewChoiceRenderer && rsrc_type != le_wxDataViewCustomRenderer && rsrc_type != le_wxDataViewSpinRenderer && rsrc_type != le_wxDataViewDateRenderer && rsrc_type != le_wxDataViewIconTextRenderer && rsrc_type != le_wxDataViewProgressRenderer && rsrc_type != le_wxDataViewTextRenderer && rsrc_type != le_wxDataViewToggleRenderer))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(renderer1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0)\n");
				#endif
				_this = new wxDataViewColumn_php(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0);

				((wxDataViewColumn_php*) _this)->references.Initialize();
				((wxDataViewColumn_php*) _this)->references.AddReference(renderer0);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0)\n");
				#endif
				_this = new wxDataViewColumn_php(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0);

				((wxDataViewColumn_php*) _this)->references.Initialize();
				((wxDataViewColumn_php*) _this)->references.AddReference(renderer0);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0, (wxAlignment) align0)\n");
				#endif
				_this = new wxDataViewColumn_php(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0, (wxAlignment) align0);

				((wxDataViewColumn_php*) _this)->references.Initialize();
				((wxDataViewColumn_php*) _this)->references.AddReference(renderer0);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0, (wxAlignment) align0, (int) flags0)\n");
				#endif
				_this = new wxDataViewColumn_php(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0, (wxAlignment) align0, (int) flags0);

				((wxDataViewColumn_php*) _this)->references.Initialize();
				((wxDataViewColumn_php*) _this)->references.AddReference(renderer0);
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1)\n");
				#endif
				_this = new wxDataViewColumn_php(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1);

				((wxDataViewColumn_php*) _this)->references.Initialize();
				((wxDataViewColumn_php*) _this)->references.AddReference(bitmap1);
				((wxDataViewColumn_php*) _this)->references.AddReference(renderer1);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1)\n");
				#endif
				_this = new wxDataViewColumn_php(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1);

				((wxDataViewColumn_php*) _this)->references.Initialize();
				((wxDataViewColumn_php*) _this)->references.AddReference(bitmap1);
				((wxDataViewColumn_php*) _this)->references.AddReference(renderer1);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1, (wxAlignment) align1)\n");
				#endif
				_this = new wxDataViewColumn_php(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1, (wxAlignment) align1);

				((wxDataViewColumn_php*) _this)->references.Initialize();
				((wxDataViewColumn_php*) _this)->references.AddReference(bitmap1);
				((wxDataViewColumn_php*) _this)->references.AddReference(renderer1);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1, (wxAlignment) align1, (int) flags1)\n");
				#endif
				_this = new wxDataViewColumn_php(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1, (wxAlignment) align1, (int) flags1);

				((wxDataViewColumn_php*) _this)->references.Initialize();
				((wxDataViewColumn_php*) _this)->references.AddReference(bitmap1);
				((wxDataViewColumn_php*) _this)->references.AddReference(renderer1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewColumn);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewColumn_php*) _this)->evnArray);
		
		array_init(((wxDataViewColumn_php*) _this)->evnArray);
		
		((wxDataViewColumn_php*) _this)->phpObj = getThis();
		
		((wxDataViewColumn_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewColumn_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxDataViewColumn, GetRenderer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewColumn::GetRenderer\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewColumn::GetRenderer\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewColumn){
				references = &((wxDataViewColumn_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewColumn::GetRenderer() to return object pointer\n\n");
				#endif
				wxDataViewRenderer_php* value_to_return0;
				value_to_return0 = (wxDataViewRenderer_php*) ((wxDataViewColumn_php*)_this)->GetRenderer();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDataViewRenderer_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxDataViewRenderer));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
void php_wxDataViewListStore_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewListStore_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewListStore_php* object = static_cast<wxDataViewListStore_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewListStore done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewListStore, AppendColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::AppendColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListStore::AppendColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListStore){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&varianttype0, &varianttype_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::AppendColumn(wxString(varianttype0, wxConvUTF8))\n\n");
				#endif
				((wxDataViewListStore_php*)_this)->AppendColumn(wxString(varianttype0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListStore, DeleteAllItems)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::DeleteAllItems\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListStore::DeleteAllItems\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListStore){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::DeleteAllItems()\n\n");
				#endif
				((wxDataViewListStore_php*)_this)->DeleteAllItems();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListStore, DeleteItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::DeleteItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListStore::DeleteItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListStore){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::DeleteItem((unsigned) pos0)\n\n");
				#endif
				((wxDataViewListStore_php*)_this)->DeleteItem((unsigned) pos0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListStore, GetColumnCount)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::GetColumnCount\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListStore::GetColumnCount\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListStore){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewListStore::GetColumnCount())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxDataViewListStore_php*)_this)->GetColumnCount());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListStore, GetColumnType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::GetColumnType\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListStore::GetColumnType\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListStore){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&col0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &col0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewListStore::GetColumnType((unsigned int) col0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = ((wxDataViewListStore_php*)_this)->GetColumnType((unsigned int) col0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListStore, GetValueByRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::GetValueByRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListStore::GetValueByRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListStore){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* value0 = 0;
	void* object_pointer0_0 = 0;
	long row0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Oll' (&value0, php_wxVariant_entry, &row0, &col0)\n");
		#endif
		char parse_parameters_string[] = "Oll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0, php_wxVariant_entry, &row0, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(value0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(value0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::GetValueByRow(*(wxVariant*) object_pointer0_0, (unsigned int) row0, (unsigned int) col0)\n\n");
				#endif
				((wxDataViewListStore_php*)_this)->GetValueByRow(*(wxVariant*) object_pointer0_0, (unsigned int) row0, (unsigned int) col0);

				references->AddReference(value0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListStore, InsertColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::InsertColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListStore::InsertColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListStore){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long pos0;
	char* varianttype0;
	long varianttype_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ls' (&pos0, &varianttype0, &varianttype_len0)\n");
		#endif
		char parse_parameters_string[] = "ls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, &varianttype0, &varianttype_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::InsertColumn((unsigned int) pos0, wxString(varianttype0, wxConvUTF8))\n\n");
				#endif
				((wxDataViewListStore_php*)_this)->InsertColumn((unsigned int) pos0, wxString(varianttype0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListStore, PrependColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::PrependColumn\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListStore::PrependColumn\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListStore){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&varianttype0, &varianttype_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::PrependColumn(wxString(varianttype0, wxConvUTF8))\n\n");
				#endif
				((wxDataViewListStore_php*)_this)->PrependColumn(wxString(varianttype0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListStore, SetValueByRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::SetValueByRow\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewListStore::SetValueByRow\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewListStore){
				references = &((wxDataViewListStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* value0 = 0;
	void* object_pointer0_0 = 0;
	long row0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Oll' (&value0, php_wxVariant_entry, &row0, &col0)\n");
		#endif
		char parse_parameters_string[] = "Oll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0, php_wxVariant_entry, &row0, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(value0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(value0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewListStore::SetValueByRow(*(wxVariant*) object_pointer0_0, (unsigned int) row0, (unsigned int) col0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)_this)->SetValueByRow(*(wxVariant*) object_pointer0_0, (unsigned int) row0, (unsigned int) col0));

				references->AddReference(value0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewListStore, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewListStore_php();

				((wxDataViewListStore_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewListStore);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewListStore_php*) _this)->evnArray);
		
		array_init(((wxDataViewListStore_php*) _this)->evnArray);
		
		((wxDataViewListStore_php*) _this)->phpObj = getThis();
		
		((wxDataViewListStore_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewListStore_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewTreeStore_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewTreeStore_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewTreeStore_php* object = static_cast<wxDataViewTreeStore_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewTreeStore done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewTreeStore, AppendContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::AppendContainer\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::AppendContainer\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	void* object_pointer0_2 = 0;
	zval* expanded0 = 0;
	void* object_pointer0_3 = 0;
	zval* data0 = 0;
	void* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Os|OOz' (&parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0)\n");
		#endif
		char parse_parameters_string[] = "Os|OOz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(expanded0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(expanded0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(expanded0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(data0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(data0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 || (rsrc_type != le_wxTreeItemData))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)_this)->AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)_this)->AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)_this)->AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);
				references->AddReference(expanded0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return5;
				value_to_return5 = ((wxDataViewTreeStore_php*)_this)->AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return5, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);
				references->AddReference(expanded0);
				references->AddReference(data0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, AppendItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::AppendItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::AppendItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	void* object_pointer0_2 = 0;
	zval* data0 = 0;
	void* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Os|Oz' (&parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0)\n");
		#endif
		char parse_parameters_string[] = "Os|Oz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(data0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(data0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxTreeItemData))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)_this)->AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)_this)->AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, (wxClientData*) object_pointer0_3) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)_this)->AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, (wxClientData*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);
				references->AddReference(data0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, DeleteAllItems)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::DeleteAllItems\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::DeleteAllItems\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::DeleteAllItems()\n\n");
				#endif
				((wxDataViewTreeStore_php*)_this)->DeleteAllItems();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, DeleteChildren)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::DeleteChildren\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::DeleteChildren\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::DeleteChildren(*(wxDataViewItem*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewTreeStore_php*)_this)->DeleteChildren(*(wxDataViewItem*) object_pointer0_0);

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, DeleteItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::DeleteItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::DeleteItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::DeleteItem(*(wxDataViewItem*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewTreeStore_php*)_this)->DeleteItem(*(wxDataViewItem*) object_pointer0_0);

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, GetChildCount)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetChildCount\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::GetChildCount\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&parent0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewTreeStore::GetChildCount(*(wxDataViewItem*) object_pointer0_0))\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxDataViewTreeStore_php*)_this)->GetChildCount(*(wxDataViewItem*) object_pointer0_0));

				references->AddReference(parent0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, GetItemData)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetItemData\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::GetItemData\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::GetItemData(*(wxDataViewItem*) object_pointer0_0) to return object pointer\n\n");
				#endif
				wxClientData_php* value_to_return1;
				value_to_return1 = (wxClientData_php*) ((wxDataViewTreeStore_php*)_this)->GetItemData(*(wxDataViewItem*) object_pointer0_0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxClientData_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxClientData));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return1 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, GetItemExpandedIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetItemExpandedIcon\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::GetItemExpandedIcon\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::GetItemExpandedIcon(*(wxDataViewItem*) object_pointer0_0) to return object reference\n\n");
				#endif
				wxIcon_php* value_to_return1;
				value_to_return1 = (wxIcon_php*) &((wxDataViewTreeStore_php*)_this)->GetItemExpandedIcon(*(wxDataViewItem*) object_pointer0_0);

				if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxIcon_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxIcon));
				}

				if(value_to_return1 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, GetItemIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetItemIcon\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::GetItemIcon\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::GetItemIcon(*(wxDataViewItem*) object_pointer0_0) to return object reference\n\n");
				#endif
				wxIcon_php* value_to_return1;
				value_to_return1 = (wxIcon_php*) &((wxDataViewTreeStore_php*)_this)->GetItemIcon(*(wxDataViewItem*) object_pointer0_0);

				if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxIcon_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxIcon));
				}

				if(value_to_return1 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, GetItemText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetItemText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::GetItemText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewTreeStore::GetItemText(*(wxDataViewItem*) object_pointer0_0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = ((wxDataViewTreeStore_php*)_this)->GetItemText(*(wxDataViewItem*) object_pointer0_0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);

				references->AddReference(item0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, GetNthChild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetNthChild\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::GetNthChild\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ol' (&parent0, php_wxDataViewItem_entry, &pos0)\n");
		#endif
		char parse_parameters_string[] = "Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &pos0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::GetNthChild(*(wxDataViewItem*) object_pointer0_0, (unsigned int) pos0) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)_this)->GetNthChild(*(wxDataViewItem*) object_pointer0_0, (unsigned int) pos0);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, InsertContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::InsertContainer\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::InsertContainer\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	zval* previous0 = 0;
	void* object_pointer0_1 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	void* object_pointer0_3 = 0;
	zval* expanded0 = 0;
	void* object_pointer0_4 = 0;
	zval* data0 = 0;
	void* object_pointer0_5 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOs|OOz' (&parent0, php_wxDataViewItem_entry, &previous0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0)\n");
		#endif
		char parse_parameters_string[] = "OOs|OOz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &previous0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(previous0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(previous0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(previous0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(expanded0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(expanded0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(expanded0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 6){
				if(Z_TYPE_P(data0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(data0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_5 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_5 || (rsrc_type != le_wxTreeItemData))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)_this)->InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(previous0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)_this)->InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(previous0);
				references->AddReference(icon0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, *(wxIcon*) object_pointer0_4) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return5;
				value_to_return5 = ((wxDataViewTreeStore_php*)_this)->InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, *(wxIcon*) object_pointer0_4);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return5, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(previous0);
				references->AddReference(icon0);
				references->AddReference(expanded0);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, *(wxIcon*) object_pointer0_4, (wxClientData*) object_pointer0_5) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return6;
				value_to_return6 = ((wxDataViewTreeStore_php*)_this)->InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, *(wxIcon*) object_pointer0_4, (wxClientData*) object_pointer0_5);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return6, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(previous0);
				references->AddReference(icon0);
				references->AddReference(expanded0);
				references->AddReference(data0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, InsertItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::InsertItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::InsertItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	zval* previous0 = 0;
	void* object_pointer0_1 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	void* object_pointer0_3 = 0;
	zval* data0 = 0;
	void* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOs|Oz' (&parent0, php_wxDataViewItem_entry, &previous0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0)\n");
		#endif
		char parse_parameters_string[] = "OOs|Oz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &previous0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(previous0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(previous0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(previous0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(data0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(data0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 || (rsrc_type != le_wxTreeItemData))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)_this)->InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(previous0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)_this)->InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(previous0);
				references->AddReference(icon0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return5;
				value_to_return5 = ((wxDataViewTreeStore_php*)_this)->InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return5, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(previous0);
				references->AddReference(icon0);
				references->AddReference(data0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, PrependContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::PrependContainer\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::PrependContainer\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	void* object_pointer0_2 = 0;
	zval* expanded0 = 0;
	void* object_pointer0_3 = 0;
	zval* data0 = 0;
	void* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Os|OOz' (&parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0)\n");
		#endif
		char parse_parameters_string[] = "Os|OOz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(expanded0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(expanded0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(expanded0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(data0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(data0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 || (rsrc_type != le_wxTreeItemData))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)_this)->PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)_this)->PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)_this)->PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);
				references->AddReference(expanded0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return5;
				value_to_return5 = ((wxDataViewTreeStore_php*)_this)->PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return5, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);
				references->AddReference(expanded0);
				references->AddReference(data0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, PrependItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::PrependItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::PrependItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	void* object_pointer0_2 = 0;
	zval* data0 = 0;
	void* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Os|Oz' (&parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0)\n");
		#endif
		char parse_parameters_string[] = "Os|Oz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(data0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(data0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxTreeItemData))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)_this)->PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)_this)->PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, (wxClientData*) object_pointer0_3) to return new object\n\n");
				#endif
				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)_this)->PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, (wxClientData*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDataViewItem));

				references->AddReference(parent0);
				references->AddReference(icon0);
				references->AddReference(data0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, SetItemData)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::SetItemData\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::SetItemData\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	zval* data0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Oz' (&item0, php_wxDataViewItem_entry, &data0)\n");
		#endif
		char parse_parameters_string[] = "Oz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(data0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(data0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxTreeItemData))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::SetItemData(*(wxDataViewItem*) object_pointer0_0, (wxClientData*) object_pointer0_1)\n\n");
				#endif
				((wxDataViewTreeStore_php*)_this)->SetItemData(*(wxDataViewItem*) object_pointer0_0, (wxClientData*) object_pointer0_1);

				references->AddReference(item0);
				references->AddReference(data0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, SetItemExpandedIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::SetItemExpandedIcon\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::SetItemExpandedIcon\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	zval* icon0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&item0, php_wxDataViewItem_entry, &icon0, php_wxIcon_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::SetItemExpandedIcon(*(wxDataViewItem*) object_pointer0_0, *(wxIcon*) object_pointer0_1)\n\n");
				#endif
				((wxDataViewTreeStore_php*)_this)->SetItemExpandedIcon(*(wxDataViewItem*) object_pointer0_0, *(wxIcon*) object_pointer0_1);

				references->AddReference(item0);
				references->AddReference(icon0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, SetItemIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::SetItemIcon\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewTreeStore::SetItemIcon\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewTreeStore){
				references = &((wxDataViewTreeStore_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* item0 = 0;
	void* object_pointer0_0 = 0;
	zval* icon0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&item0, php_wxDataViewItem_entry, &icon0, php_wxIcon_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(item0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::SetItemIcon(*(wxDataViewItem*) object_pointer0_0, *(wxIcon*) object_pointer0_1)\n\n");
				#endif
				((wxDataViewTreeStore_php*)_this)->SetItemIcon(*(wxDataViewItem*) object_pointer0_0, *(wxIcon*) object_pointer0_1);

				references->AddReference(item0);
				references->AddReference(icon0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewTreeStore, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewTreeStore_php();

				((wxDataViewTreeStore_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewTreeStore);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewTreeStore_php*) _this)->evnArray);
		
		array_init(((wxDataViewTreeStore_php*) _this)->evnArray);
		
		((wxDataViewTreeStore_php*) _this)->phpObj = getThis();
		
		((wxDataViewTreeStore_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewTreeStore_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxDataViewIconText_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewIconText_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDataViewIconText_php* object = static_cast<wxDataViewIconText_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewIconText done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDataViewIconText, GetIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::GetIcon\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewIconText::GetIcon\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewIconText){
				references = &((wxDataViewIconText_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewIconText::GetIcon() to return object reference\n\n");
				#endif
				wxIcon_php* value_to_return0;
				value_to_return0 = (wxIcon_php*) &((wxDataViewIconText_php*)_this)->GetIcon();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxIcon_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxIcon));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewIconText, GetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::GetText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewIconText::GetText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewIconText){
				references = &((wxDataViewIconText_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewIconText::GetText().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxDataViewIconText_php*)_this)->GetText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewIconText, SetIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::SetIcon\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewIconText::SetIcon\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewIconText){
				references = &((wxDataViewIconText_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* icon0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&icon0, php_wxIcon_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewIconText::SetIcon(*(wxIcon*) object_pointer0_0)\n\n");
				#endif
				((wxDataViewIconText_php*)_this)->SetIcon(*(wxIcon*) object_pointer0_0);

				references->AddReference(icon0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewIconText, SetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::SetText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDataViewIconText::SetText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDataViewIconText){
				references = &((wxDataViewIconText_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewIconText::SetText(wxString(text0, wxConvUTF8))\n\n");
				#endif
				((wxDataViewIconText_php*)_this)->SetText(wxString(text0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDataViewIconText, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* other1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sO' (&text0, &text_len0, &icon0, php_wxIcon_entry)\n");
		#endif
		char parse_parameters_string[] = "|sO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&other1, php_wxDataViewIconText_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &other1, php_wxDataViewIconText_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(other1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(other1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(other1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxDataViewIconText_php();

				((wxDataViewIconText_php*) _this)->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(text0, wxConvUTF8))\n");
				#endif
				_this = new wxDataViewIconText_php(wxString(text0, wxConvUTF8));

				((wxDataViewIconText_php*) _this)->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_1)\n");
				#endif
				_this = new wxDataViewIconText_php(wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_1);

				((wxDataViewIconText_php*) _this)->references.Initialize();
				((wxDataViewIconText_php*) _this)->references.AddReference(icon0);
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxDataViewIconText*) object_pointer1_0)\n");
				#endif
				_this = new wxDataViewIconText_php(*(wxDataViewIconText*) object_pointer1_0);

				((wxDataViewIconText_php*) _this)->references.Initialize();
				((wxDataViewIconText_php*) _this)->references.AddReference(other1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxDataViewIconText);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxDataViewIconText_php*) _this)->evnArray);
		
		array_init(((wxDataViewIconText_php*) _this)->evnArray);
		
		((wxDataViewIconText_php*) _this)->phpObj = getThis();
		
		((wxDataViewIconText_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxDataViewIconText_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}

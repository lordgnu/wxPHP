<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="overview_log" kind="page">
    <compoundname>overview_log</compoundname>
    <title>wxLog Classes Overview</title>
    <detaileddescription>
<para>Classes: <ref refid="classwx_log" kindref="compound">wxLog</ref>, <ref refid="classwx_log_stderr" kindref="compound">wxLogStderr</ref>, <ref refid="classwx_log_stream" kindref="compound">wxLogStream</ref>, <ref refid="classwx_log_text_ctrl" kindref="compound">wxLogTextCtrl</ref>, <ref refid="classwx_log_window" kindref="compound">wxLogWindow</ref>, <ref refid="classwx_log_gui" kindref="compound">wxLogGui</ref>, <ref refid="classwx_log_null" kindref="compound">wxLogNull</ref>, <ref refid="classwx_log_buffer" kindref="compound">wxLogBuffer</ref>, <ref refid="classwx_log_chain" kindref="compound">wxLogChain</ref>, <ref refid="classwx_log_interposer" kindref="compound">wxLogInterposer</ref>, <ref refid="classwx_log_interposer_temp" kindref="compound">wxLogInterposerTemp</ref>, <ref refid="classwx_stream_to_text_redirector" kindref="compound">wxStreamToTextRedirector</ref>, <ref refid="classwx_log_formatter" kindref="compound">wxLogFormatter</ref></para><para>Table of contents: <itemizedlist>
<listitem><para><ref refid="overview_log_1overview_log_introduction" kindref="member">Introduction</ref> </para></listitem>
<listitem><para><ref refid="overview_log_1overview_log_enable" kindref="member">Log Messages Selection</ref> </para></listitem>
<listitem><para><ref refid="overview_log_1overview_log_targets" kindref="member">Log Targets</ref> </para></listitem>
<listitem><para><ref refid="overview_log_1overview_log_mt" kindref="member">Logging in Multi-Threaded Applications</ref> </para></listitem>
<listitem><para><ref refid="overview_log_1overview_log_customize" kindref="member">Logging Customization</ref> </para></listitem>
<listitem><para><ref refid="overview_log_1overview_log_tracemasks" kindref="member">Using trace masks</ref> <hruler/>
</para></listitem>
</itemizedlist>
</para><sect1 id="overview_log_1overview_log_introduction">
<title>Introduction</title>
<para>This is a general overview of logging classes provided by wxWidgets. The word logging here has a broad sense, including all of the program output, not only non-interactive messages. The logging facilities included in wxWidgets provide the base <ref refid="classwx_log" kindref="compound">wxLog</ref> class which defines the standard interface for a <emphasis>log</emphasis> target as well as several standard implementations of it and a family of functions to use with them.</para><para>First of all, no knowledge of <ref refid="classwx_log" kindref="compound">wxLog</ref> classes is needed to use them. For this, you should only know about <ref refid="group__group__funcmacro__log" kindref="compound">wxLogXXX() functions</ref>. All of them have the same syntax as <emphasis>printf()</emphasis> or <emphasis>vprintf()</emphasis> , i.e. they take the format string as the first argument and respectively a variable number of arguments or a variable argument list pointer. Here are all of them:</para><para><itemizedlist>
<listitem><para><ref refid="group__group__funcmacro__log_1ga4ae39c06cbeaa5461cd1b5c293a31403" kindref="member">wxLogFatalError()</ref> which is like <ref refid="group__group__funcmacro__log_1ga0dd3c633f990f794e76065c9a7af4c87" kindref="member">wxLogError()</ref>, but also terminates the program with the exit code 3 (using <emphasis>abort()</emphasis> standard function). Unlike for all the other logging functions, this function can&apos;t be overridden by a log target. </para></listitem>
<listitem><para><ref refid="group__group__funcmacro__log_1ga0dd3c633f990f794e76065c9a7af4c87" kindref="member">wxLogError()</ref> is the function to use for error messages, i.e. the messages that must be shown to the user. The default processing is to pop up a message box to inform the user about it. </para></listitem>
<listitem><para><ref refid="group__group__funcmacro__log_1ga0c2b19580ef6721508e6d69534b10e90" kindref="member">wxLogWarning()</ref> for warnings. They are also normally shown to the user, but don&apos;t interrupt the program work. </para></listitem>
<listitem><para><ref refid="group__group__funcmacro__log_1ga249358701f3c2d410088ddf7a61d8564" kindref="member">wxLogMessage()</ref> is for all normal, informational messages. They also appear in a message box by default (but it can be changed, see below). </para></listitem>
<listitem><para><ref refid="group__group__funcmacro__log_1gaf57b7e28ab76bacf10b3be044e8bd634" kindref="member">wxLogVerbose()</ref> is for verbose output. Normally, it is suppressed, but might be activated if the user wishes to know more details about the program progress (another, but possibly confusing name for the same function is wxLogInfo). </para></listitem>
<listitem><para><ref refid="group__group__funcmacro__log_1gac241ed1e5d13c7a552f58307c7f16691" kindref="member">wxLogStatus()</ref> is for status messages. They will go into the status bar of the active or specified (as the first argument) <ref refid="classwx_frame" kindref="compound">wxFrame</ref> if it has one. </para></listitem>
<listitem><para><ref refid="group__group__funcmacro__log_1ga28f01715af5aaf37caffdc5bc00fde3f" kindref="member">wxLogSysError()</ref> is mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure. It logs the specified message text as well as the last system error code (<emphasis>errno</emphasis> or Windows&apos; <emphasis>GetLastError()</emphasis> depending on the platform) and the corresponding error message. The second form of this function takes the error code explicitly as the first argument. </para></listitem>
<listitem><para><ref refid="group__group__funcmacro__log_1ga9c530ae20eb423744f90874d2c97d02b" kindref="member">wxLogDebug()</ref> is <bold>the</bold> right function for debug output. It only does anything at all in the debug mode (when the preprocessor symbol <computeroutput>__WXDEBUG__</computeroutput> is defined) and expands to nothing in release mode (otherwise). Note that under Windows, you must either run the program under debugger or use a 3rd party program such as DebugView (<ulink url="http://www.microsoft.com/technet/sysinternals/Miscellaneous/DebugView.mspx">http://www.microsoft.com/technet/sysinternals/Miscellaneous/DebugView.mspx</ulink>) to actually see the debug output. </para></listitem>
<listitem><para><ref refid="group__group__funcmacro__log_1ga947e317db477914c12b13c4534867ec9" kindref="member">wxLogTrace()</ref> as <ref refid="group__group__funcmacro__log_1ga9c530ae20eb423744f90874d2c97d02b" kindref="member">wxLogDebug()</ref> only does something in debug build. The reason for making it a separate function from it is that usually there are a lot of trace messages, so it might make sense to separate them from other debug messages which would be flooded in them. Moreover, the second version of this function takes a trace mask as the first argument which allows to further restrict the amount of messages generated.</para></listitem>
</itemizedlist>
The usage of these functions should be fairly straightforward, however it may be asked why not use the other logging facilities, such as C standard stdio functions or C++ streams. The short answer is that they&apos;re all very good generic mechanisms, but are not really adapted for wxWidgets, while the log classes are. Some of advantages in using wxWidgets log functions are:</para><para><itemizedlist>
<listitem><para><bold>Portability:</bold> It is a common practice to use <emphasis>printf()</emphasis> statements or cout/cerr C++ streams for writing out some (debug or otherwise) information. Although it works just fine under Unix, these messages go strictly nowhere under Windows where the stdout of GUI programs is not assigned to anything. Thus, you might view <ref refid="group__group__funcmacro__log_1ga249358701f3c2d410088ddf7a61d8564" kindref="member">wxLogMessage()</ref> as a simple substitute for <emphasis>printf()</emphasis>. You can also redirect the <emphasis>wxLogXXX</emphasis> calls to <emphasis>cout</emphasis> by just writing: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_log" kindref="compound" tooltip="wxLog class defines the interface for the log targets used by wxWidgets logging functions as explaine...">wxLog</ref>*<sp/>logger<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_log_stream" kindref="compound" tooltip="This class can be used to redirect the log messages to a C++ stream.">wxLogStream</ref>(&amp;cout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_log_1ac7ea85f71c8d3ecd4247f412be410505" kindref="member" tooltip="Sets the specified log target as the active one.">wxLog::SetActiveTarget</ref>(logger);</highlight></codeline>
</programlisting> Finally, there is also a possibility to redirect the output sent to <emphasis>cout</emphasis> to a <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> by using the <ref refid="classwx_stream_to_text_redirector" kindref="compound">wxStreamToTextRedirector</ref> class. </para></listitem>
<listitem><para><bold>Flexibility:</bold> The output of <ref refid="classwx_log" kindref="compound">wxLog</ref> functions can be redirected or suppressed entirely based on their importance, which is either impossible or difficult to do with traditional methods. For example, only error messages, or only error messages and warnings might be logged, filtering out all informational messages. </para></listitem>
<listitem><para><bold>Completeness:</bold> Usually, an error message should be presented to the user when some operation fails. Let&apos;s take a quite simple but common case of a file error: suppose that you&apos;re writing your data file on disk and there is not enough space. The actual error might have been detected inside wxWidgets code (say, in <ref refid="classwx_file_1a0974a92a5c8793629fd9ee0f1735657c" kindref="member">wxFile::Write</ref>), so the calling function doesn&apos;t really know the exact reason of the failure, it only knows that the data file couldn&apos;t be written to the disk. However, as wxWidgets uses <ref refid="group__group__funcmacro__log_1ga0dd3c633f990f794e76065c9a7af4c87" kindref="member">wxLogError()</ref> in this situation, the exact error code (and the corresponding error message) will be given to the user together with &quot;high level&quot; message about data file writing error.</para></listitem>
</itemizedlist>
</para></sect1>
<sect1 id="overview_log_1overview_log_enable">
<title>Log Messages Selection</title>
<para>By default, most log messages are enabled. In particular, this means that errors logged by wxWidgets code itself (e.g. when it fails to perform some operation, for instance <ref refid="classwx_file_1a70f2abe0e310dcf77ea6aeaac60df25b" kindref="member">wxFile::Open()</ref> logs an error when it fails to open a file) will be processed and shown to the user. To disable the logging entirely you can use <ref refid="classwx_log_1a58bbfc0831eb47f0d88c9350d1f6e02d" kindref="member">wxLog::EnableLogging()</ref> method or, more usually, <ref refid="classwx_log_null" kindref="compound">wxLogNull</ref> class which temporarily disables logging and restores it back to the original setting when it is destroyed.</para><para>To limit logging to important messages only, you may use <ref refid="classwx_log_1a4ea68379469ca27f645d5f91c2d42b3b" kindref="member">wxLog::SetLogLevel()</ref> with e.g. wxLOG_Warning value -- this will completely disable all logging messages with the severity less than warnings, so <ref refid="group__group__funcmacro__log_1ga249358701f3c2d410088ddf7a61d8564" kindref="member">wxLogMessage()</ref> output won&apos;t be shown to the user any more.</para><para>Moreover, the log level can be set separately for different log components. Before showing how this can be useful, let us explain what log components are: they are simply arbitrary strings identifying the component, or module, which generated the message. They are hierarchical in the sense that &quot;foo/bar/baz&quot; component is supposed to be a child of &quot;foo&quot;. And all components are children of the unnamed root component.</para><para>By default, all messages logged by wxWidgets originate from &quot;wx&quot; component or one of its subcomponents such as &quot;wx/net/ftp&quot;, while the messages logged by your own code are assigned empty log component. To change this, you need to define <computeroutput>wxLOG_COMPONENT</computeroutput> to a string uniquely identifying each component, e.g. you could give it the value &quot;MyProgram&quot; by default and re-define it as &quot;MyProgram/DB&quot; in the module working with the database and &quot;MyProgram/DB/Trans&quot; in its part managing the transactions. Then you could use <ref refid="classwx_log_1a7ae244e71dff20efd3a37b3718841a39" kindref="member">wxLog::SetComponentLevel()</ref> in the following ways: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>all<sp/>database<sp/>error<sp/>messages,<sp/>everybody<sp/>knows<sp/>databases<sp/>never</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fail<sp/>anyhow</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_log_1a7ae244e71dff20efd3a37b3718841a39" kindref="member" tooltip="Sets the log level for the given component.">wxLog::SetComponentLevel</ref>(</highlight><highlight class="stringliteral">&quot;MyProgram/DB&quot;</highlight><highlight class="normal">,<sp/><ref refid="interface_2wx_2log_8h_1aacf1e0ade132ca66e9414ee658c94887a84fba9c5b2a134eef33710303503bc5b" kindref="member" tooltip="program can&amp;#39;t continue, abort immediately">wxLOG_FatalError</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>enable<sp/>tracing<sp/>for<sp/>the<sp/>transactions<sp/>as<sp/>somehow<sp/>our<sp/>changes<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>committed<sp/>sometimes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_log_1a7ae244e71dff20efd3a37b3718841a39" kindref="member" tooltip="Sets the log level for the given component.">wxLog::SetComponentLevel</ref>(</highlight><highlight class="stringliteral">&quot;MyProgram/DB/Trans&quot;</highlight><highlight class="normal">,<sp/><ref refid="interface_2wx_2log_8h_1aacf1e0ade132ca66e9414ee658c94887a897a7912d3d8eb59e913b1b45af94455" kindref="member" tooltip="trace messages are also only enabled in debug mode">wxLOG_Trace</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>enable<sp/>tracing<sp/>messages<sp/>from<sp/>wxWidgets<sp/>dynamic<sp/>module<sp/>loading</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mechanism</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_log_1a7ae244e71dff20efd3a37b3718841a39" kindref="member" tooltip="Sets the log level for the given component.">wxLog::SetComponentLevel</ref>(</highlight><highlight class="stringliteral">&quot;wx/base/module&quot;</highlight><highlight class="normal">,<sp/><ref refid="interface_2wx_2log_8h_1aacf1e0ade132ca66e9414ee658c94887a897a7912d3d8eb59e913b1b45af94455" kindref="member" tooltip="trace messages are also only enabled in debug mode">wxLOG_Trace</ref>);</highlight></codeline>
</programlisting> Notice that the log level set explicitly for the transactions code overrides the log level of the parent component but that all other database code subcomponents inherit its setting by default and so won&apos;t generate any log messages at all.</para></sect1>
<sect1 id="overview_log_1overview_log_targets">
<title>Log Targets</title>
<para>After having enumerated all the functions which are normally used to log the messages, and why would you want to use them, we now describe how all this works.</para><para>wxWidgets has the notion of a <emphasis>log target</emphasis>: it is just a class deriving from <ref refid="classwx_log" kindref="compound">wxLog</ref>. As such, it implements the virtual functions of the base class which are called when a message is logged. Only one log target is <emphasis>active</emphasis> at any moment, this is the one used by <ref refid="group__group__funcmacro__log" kindref="compound">wxLogXXX() functions</ref>. The normal usage of a log object (i.e. object of a class derived from <ref refid="classwx_log" kindref="compound">wxLog</ref>) is to install it as the active target with a call to <emphasis>SetActiveTarget()</emphasis> and it will be used automatically by all subsequent calls to <ref refid="group__group__funcmacro__log" kindref="compound">wxLogXXX() functions</ref>.</para><para>To create a new log target class you only need to derive it from <ref refid="classwx_log" kindref="compound">wxLog</ref> and override one or several of <ref refid="classwx_log_1aede0ff7812690d487de845b7f3095dfd" kindref="member">wxLog::DoLogRecord()</ref>, <ref refid="classwx_log_1a3fafbd3b87ff2d08dfdd1378d35013bb" kindref="member">wxLog::DoLogTextAtLevel()</ref> and <ref refid="classwx_log_1a18c877e0038afe284757512b866b0aac" kindref="member">wxLog::DoLogText()</ref> in it. The first one is the most flexible and allows you to change the formatting of the messages, dynamically filter and redirect them and so on -- all log messages, except for those generated by <ref refid="group__group__funcmacro__log_1ga4ae39c06cbeaa5461cd1b5c293a31403" kindref="member">wxLogFatalError()</ref>, pass by this function. <ref refid="classwx_log_1a3fafbd3b87ff2d08dfdd1378d35013bb" kindref="member">wxLog::DoLogTextAtLevel()</ref> should be overridden if you simply want to redirect the log messages somewhere else, without changing their formatting. Finally, it is enough to override <ref refid="classwx_log_1a18c877e0038afe284757512b866b0aac" kindref="member">wxLog::DoLogText()</ref> if you only want to redirect the log messages and the destination doesn&apos;t depend on the message log level.</para><para>There are some predefined classes deriving from <ref refid="classwx_log" kindref="compound">wxLog</ref> and which might be helpful to see how you can create a new log target class and, of course, may also be used without any change. There are:</para><para><itemizedlist>
<listitem><para><ref refid="classwx_log_stderr" kindref="compound">wxLogStderr</ref>: This class logs messages to a <computeroutput>FILE *</computeroutput>, using stderr by default as its name suggests. </para></listitem>
<listitem><para><ref refid="classwx_log_stream" kindref="compound">wxLogStream</ref>: This class has the same functionality as <ref refid="classwx_log_stderr" kindref="compound">wxLogStderr</ref>, but uses <emphasis>ostream</emphasis> and cerr instead of <computeroutput>FILE *</computeroutput> and stderr. </para></listitem>
<listitem><para><ref refid="classwx_log_gui" kindref="compound">wxLogGui</ref>: This is the standard log target for wxWidgets applications (it is used by default if you don&apos;t do anything) and provides the most reasonable handling of all types of messages for given platform. </para></listitem>
<listitem><para><ref refid="classwx_log_window" kindref="compound">wxLogWindow</ref>: This log target provides a &quot;log console&quot; which collects all messages generated by the application and also passes them to the previous active log target. The log window frame has a menu allowing user to clear the log, close it completely or save all messages to file. </para></listitem>
<listitem><para><ref refid="classwx_log_buffer" kindref="compound">wxLogBuffer</ref>: This target collects all the logged messages in an internal buffer allowing to show them later to the user all at once. </para></listitem>
<listitem><para><ref refid="classwx_log_null" kindref="compound">wxLogNull</ref>: The last log class is quite particular: it doesn&apos;t do anything. The objects of this class may be instantiated to (temporarily) suppress output of <emphasis>wxLogXXX()</emphasis> functions. As an example, trying to open a non-existing file will usually provoke an error message, but if for some reasons it is unwanted, just use this construction: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_file" kindref="compound" tooltip="A wxFile performs raw file I/O.">wxFile</ref><sp/>file;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wxFile.Open()<sp/>normally<sp/>complains<sp/>if<sp/>file<sp/>can&apos;t<sp/>be<sp/>opened,<sp/>we<sp/>don&apos;t<sp/>want<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_log_null" kindref="compound" tooltip="This class allows you to temporarily suspend logging.">wxLogNull</ref><sp/>logNo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!file.<ref refid="classwx_file_1a70f2abe0e310dcf77ea6aeaac60df25b" kindref="member" tooltip="Opens the file, returning true if successful.">Open</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>process<sp/>error<sp/>ourselves<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>~wxLogNull<sp/>called,<sp/>old<sp/>log<sp/>sink<sp/>restored</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__log_1ga249358701f3c2d410088ddf7a61d8564" kindref="member" tooltip="For all normal, informational messages.">wxLogMessage</ref>(</highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>ok</highlight></codeline>
</programlisting></para></listitem>
</itemizedlist>
The log targets can also be combined: for example you may wish to redirect the messages somewhere else (for example, to a log file) but also process them as normally. For this the <ref refid="classwx_log_chain" kindref="compound">wxLogChain</ref>, <ref refid="classwx_log_interposer" kindref="compound">wxLogInterposer</ref>, and <ref refid="classwx_log_interposer_temp" kindref="compound">wxLogInterposerTemp</ref> can be used.</para></sect1>
<sect1 id="overview_log_1overview_log_mt">
<title>Logging in Multi-Threaded Applications</title>
<para>Starting with wxWidgets 2.9.1, logging functions can be safely called from any thread. Messages logged from threads other than the main one will be buffered until <ref refid="classwx_log_1a21f8a2a7d83bd17a0e89bbe7dd7e6feb" kindref="member">wxLog::Flush()</ref> is called in the main thread (which usually happens during idle time, i.e. after processing all pending events) and will be really output only then. Notice that the default GUI logger already only output the messages when it is flushed, so by default messages from the other threads will be shown more or less at the same moment as usual. However if you define a custom log target, messages may be logged out of order, e.g. messages from the main thread with later timestamp may appear before messages with earlier timestamp logged from other threads. <ref refid="classwx_log" kindref="compound">wxLog</ref> does however guarantee that messages logged by each thread will appear in order in which they were logged.</para><para>Also notice that <ref refid="classwx_log_1a58bbfc0831eb47f0d88c9350d1f6e02d" kindref="member">wxLog::EnableLogging()</ref> and <ref refid="classwx_log_null" kindref="compound">wxLogNull</ref> class which uses it only affect the current thread, i.e. logging messages may still be generated by the other threads after a call to <computeroutput>EnableLogging(false)</computeroutput>.</para></sect1>
<sect1 id="overview_log_1overview_log_customize">
<title>Logging Customization</title>
<para>To completely change the logging behaviour you may define a custom log target. For example, you could define a class inheriting from <ref refid="classwx_log" kindref="compound">wxLog</ref> which shows all the log messages in some part of your main application window reserved for the message output without interrupting the user work flow with modal message boxes.</para><para>To use your custom log target you may either call <ref refid="classwx_log_1ac7ea85f71c8d3ecd4247f412be410505" kindref="member">wxLog::SetActiveTarget()</ref> with your custom log object or create a wxAppTraits-derived class and override <ref refid="classwx_app_traits_1aae9e62a6b5364fb9a230888a637eb378" kindref="member">wxAppTraits::CreateLogTarget()</ref> virtual method in it and also override <ref refid="classwx_app_console_1ab2811644bfee7a93d0564a09397c4408" kindref="member">wxApp::CreateTraits()</ref> to return an instance of your custom traits object. Notice that in the latter case you should be prepared for logging messages early during the program startup and also during program shutdown so you shouldn&apos;t rely on existence of the main application window, for example. You can however safely assume that GUI is (already/still) available when your log target as used as wxWidgets automatically switches to using <ref refid="classwx_log_stderr" kindref="compound">wxLogStderr</ref> if it isn&apos;t.</para><para>There are several methods which may be overridden in the derived class to customize log messages handling: <ref refid="classwx_log_1aede0ff7812690d487de845b7f3095dfd" kindref="member">wxLog::DoLogRecord()</ref>, <ref refid="classwx_log_1a3fafbd3b87ff2d08dfdd1378d35013bb" kindref="member">wxLog::DoLogTextAtLevel()</ref> and <ref refid="classwx_log_1a18c877e0038afe284757512b866b0aac" kindref="member">wxLog::DoLogText()</ref>.</para><para>The last method is the simplest one: you should override it if you simply want to redirect the log output elsewhere, without taking into account the level of the message. If you do want to handle messages of different levels differently, then you should override <ref refid="classwx_log_1a3fafbd3b87ff2d08dfdd1378d35013bb" kindref="member">wxLog::DoLogTextAtLevel()</ref>.</para><para>Additionally, you can customize the way full log messages are constructed from the components (such as time stamp, source file information, logging thread ID and so on). This task is performed by <ref refid="classwx_log_formatter" kindref="compound">wxLogFormatter</ref> class so you need to derive a custom class from it and override its Format() method to build the log messages in desired way. Notice that if you just need to modify (or suppress) the time stamp display, overriding FormatTime() is enough.</para><para>Finally, if even more control over the output format is needed, then DoLogRecord() can be overridden as it allows to construct custom messages depending on the log level or even do completely different things depending on the message severity (for example, throw away all messages except warnings and errors, show warnings on the screen and forward the error messages to the user&apos;s (or programmer&apos;s) cell phone -- maybe depending on whether the timestamp tells us if it is day or night in the current time zone).</para><para>The <emphasis>dialog</emphasis> sample illustrates this approach by defining a custom log target customizing the dialog used by <ref refid="classwx_log_gui" kindref="compound">wxLogGui</ref> for the single messages.</para></sect1>
<sect1 id="overview_log_1overview_log_tracemasks">
<title>Using trace masks</title>
<para>Notice that the use of log trace masks is hardly necessary any longer in current wxWidgets version as the same effect can be achieved by using different log components for different log statements of any level. Please see <ref refid="overview_log_1overview_log_enable" kindref="member">Log Messages Selection</ref> for more information about the log components.</para><para>The functions below allow some limited customization of <ref refid="classwx_log" kindref="compound">wxLog</ref> behaviour without writing a new log target class (which, aside from being a matter of several minutes, allows you to do anything you want). The verbose messages are the trace messages which are not disabled in the release mode and are generated by <ref refid="group__group__funcmacro__log_1gaf57b7e28ab76bacf10b3be044e8bd634" kindref="member">wxLogVerbose()</ref>. They are not normally shown to the user because they present little interest, but may be activated, for example, in order to help the user find some program problem.</para><para>As for the (real) trace messages, their handling depends on the currently enabled trace masks: if <ref refid="classwx_log_1a4c11ee23ce5264b6c5921a17610cda13" kindref="member">wxLog::AddTraceMask()</ref> was called for the mask of the given message, it will be logged, otherwise nothing happens.</para><para>For example, <programlisting><codeline><highlight class="normal"><ref refid="group__group__funcmacro__log_1ga947e317db477914c12b13c4534867ec9" kindref="member" tooltip="Log a message at wxLOG_Trace log level (see wxLogLevelValues enum).">wxLogTrace</ref>(<sp/>wxTRACE_OleCalls,<sp/></highlight><highlight class="stringliteral">&quot;IFoo::Bar()<sp/>called&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para>will log the message if it was preceded by:</para><para><programlisting><codeline><highlight class="normal"><ref refid="classwx_log_1a4c11ee23ce5264b6c5921a17610cda13" kindref="member" tooltip="Add the mask to the list of allowed masks for wxLogTrace().">wxLog::AddTraceMask</ref>(<sp/>wxTRACE_OleCalls<sp/>);</highlight></codeline>
</programlisting></para><para>The standard trace masks are given in <ref refid="group__group__funcmacro__log_1ga947e317db477914c12b13c4534867ec9" kindref="member">wxLogTrace()</ref> documentation. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

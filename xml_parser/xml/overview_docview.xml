<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="overview_docview" kind="page">
    <compoundname>overview_docview</compoundname>
    <title>Document/View Framework</title>
    <detaileddescription>
<para>Classes: <ref refid="classwx_document" kindref="compound">wxDocument</ref>, <ref refid="classwx_view" kindref="compound">wxView</ref>, <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref>, <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref>, <ref refid="classwx_doc_parent_frame" kindref="compound">wxDocParentFrame</ref>, <ref refid="classwx_doc_child_frame" kindref="compound">wxDocChildFrame</ref>, <ref refid="classwx_doc_m_d_i_parent_frame" kindref="compound">wxDocMDIParentFrame</ref>, <ref refid="classwx_doc_m_d_i_child_frame" kindref="compound">wxDocMDIChildFrame</ref>, <ref refid="classwx_command" kindref="compound">wxCommand</ref>, <ref refid="classwx_command_processor" kindref="compound">wxCommandProcessor</ref></para><para>The document/view framework is found in most application frameworks, because it can dramatically simplify the code required to build many kinds of application.</para><para>The idea is that you can model your application primarily in terms of <emphasis>documents</emphasis> to store data and provide interface-independent operations upon it, and <emphasis>views</emphasis> to visualise and manipulate the data. Documents know how to do input and output given stream objects, and views are responsible for taking input from physical windows and performing the manipulation on the document data.</para><para>If a document&apos;s data changes, all views should be updated to reflect the change. The framework can provide many user-interface elements based on this model.</para><para>Once you have defined your own classes and the relationships between them, the framework takes care of popping up file selectors, opening and closing files, asking the user to save modifications, routing menu commands to appropriate (possibly default) code, even some default print/preview functionality and support for command undo/redo.</para><para>The framework is highly modular, allowing overriding and replacement of functionality and objects to achieve more than the default behaviour.</para><para>These are the overall steps involved in creating an application based on the document/view framework:</para><para><itemizedlist>
<listitem><para>Define your own document and view classes, overriding a minimal set of member functions e.g. for input/output, drawing and initialization. </para></listitem>
<listitem><para>Define any subwindows (such as a scrolled window) that are needed for the view(s). You may need to route some events to views or documents, for example OnPaint needs to be routed to <ref refid="classwx_view_1ab4b046b3cf4280fd35ed6fb711c35a94" kindref="member">wxView::OnDraw</ref>. </para></listitem>
<listitem><para>Decide what style of interface you will use: Microsoft&apos;s MDI (multiple document child frames surrounded by an overall frame), SDI (a separate, unconstrained frame for each document), or single-window (one document open at a time, as in Windows Write). </para></listitem>
<listitem><para>Use the appropriate <ref refid="classwx_doc_parent_frame" kindref="compound">wxDocParentFrame</ref> and <ref refid="classwx_doc_child_frame" kindref="compound">wxDocChildFrame</ref> classes. Construct an instance of <ref refid="classwx_doc_parent_frame" kindref="compound">wxDocParentFrame</ref> in your <ref refid="classwx_app_console_1a99953775a2fd83fa2456e390779afe15" kindref="member">wxApp::OnInit</ref>, and a <ref refid="classwx_doc_child_frame" kindref="compound">wxDocChildFrame</ref> (if not single-window) when you initialize a view. Create menus using standard menu ids (such as wxID_OPEN, wxID_PRINT). </para></listitem>
<listitem><para>Construct a single <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref> instance at the beginning of your <ref refid="classwx_app_console_1a99953775a2fd83fa2456e390779afe15" kindref="member">wxApp::OnInit</ref>, and then as many <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> instances as necessary to define relationships between documents and views. For a simple application, there will be just one <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref>.</para></listitem>
</itemizedlist>
If you wish to implement Undo/Redo, you need to derive your own class(es) from <ref refid="classwx_command" kindref="compound">wxCommand</ref> and use <ref refid="classwx_command_processor_1a5c4a270152e0ca5d57d4e0c0c5e9e34a" kindref="member">wxCommandProcessor::Submit</ref> instead of directly executing code. The framework will take care of calling Undo and Do functions as appropriate, so long as the wxID_UNDO and wxID_REDO menu items are defined in the view menu.</para><para>Here are a few examples of the tailoring you can do to go beyond the default framework behaviour:</para><para><itemizedlist>
<listitem><para>Override <ref refid="classwx_document_1a179c3d09f2e9d421e12728da96f3ce93" kindref="member">wxDocument::OnCreateCommandProcessor</ref> to define a different Do/Undo strategy, or a command history editor. </para></listitem>
<listitem><para>Override <ref refid="classwx_view_1aad69b22cb876fe4a2ea84419c81a8273" kindref="member">wxView::OnCreatePrintout</ref> to create an instance of a derived <ref refid="classwx_printout" kindref="compound">wxPrintout</ref> class, to provide multi-page document facilities. </para></listitem>
<listitem><para>Override <ref refid="classwx_doc_manager_1a453a23981a95bcee042f6e23bd762c7a" kindref="member">wxDocManager::SelectDocumentPath</ref> to provide a different file selector. </para></listitem>
<listitem><para>Limit the maximum number of open documents and the maximum number of undo commands.</para></listitem>
</itemizedlist>
Note that to activate framework functionality, you need to use some or all of the wxWidgets <ref refid="overview_docview_1overview_docview_predefid" kindref="member">wxWidgets predefined command identifiers</ref> in your menus.</para><para><bold>wxPerl Note:</bold> The document/view framework is available in wxPerl. To use it, you will need the following statements in your application code:</para><para><programlisting><codeline><highlight class="normal">use<sp/>Wx::DocView;</highlight></codeline>
<codeline><highlight class="normal">use<sp/>Wx<sp/></highlight><highlight class="stringliteral">&apos;:docview&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/>#<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>constants<sp/>(optional)</highlight></codeline>
</programlisting></para><para><itemizedlist>
<listitem><para><ref refid="overview_docview_1overview_docview_wxdoc" kindref="member">wxDocument overview</ref> </para></listitem>
<listitem><para><ref refid="overview_docview_1overview_docview_wxview" kindref="member">wxView overview</ref> </para></listitem>
<listitem><para><ref refid="overview_docview_1overview_docview_wxdoctemplate" kindref="member">wxDocTemplate overview</ref> </para></listitem>
<listitem><para><ref refid="overview_docview_1overview_docview_wxdocmanager" kindref="member">wxDocManager overview</ref> </para></listitem>
<listitem><para><ref refid="overview_docview_1overview_docview_wxcommand" kindref="member">wxCommand overview</ref> </para></listitem>
<listitem><para><ref refid="overview_docview_1overview_docview_wxcommandproc" kindref="member">wxCommandProcessor overview</ref> </para></listitem>
<listitem><para><ref refid="overview_docview_1overview_docview_filehistory" kindref="member">wxFileHistory overview</ref> </para></listitem>
<listitem><para><ref refid="overview_docview_1overview_docview_predefid" kindref="member">wxWidgets predefined command identifiers</ref></para></listitem>
</itemizedlist>
<hruler/>
</para><sect1 id="overview_docview_1overview_docview_wxdoc">
<title>wxDocument overview</title>
<para>Class: <ref refid="classwx_document" kindref="compound">wxDocument</ref></para><para>The <ref refid="classwx_document" kindref="compound">wxDocument</ref> class can be used to model an application&apos;s file-based data. It is part of the document/view framework supported by wxWidgets, and cooperates with the <ref refid="classwx_view" kindref="compound">wxView</ref>, <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> and <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref> classes. Using this framework can save a lot of routine user-interface programming, since a range of menu commands -- such as open, save, save as -- are supported automatically.</para><para>The programmer just needs to define a minimal set of classes and member functions for the framework to call when necessary. Data, and the means to view and edit the data, are explicitly separated out in this model, and the concept of multiple <emphasis>views</emphasis> onto the same data is supported.</para><para>Note that the document/view model will suit many but not all styles of application. For example, it would be overkill for a simple file conversion utility, where there may be no call for <emphasis>views</emphasis> on <emphasis>documents</emphasis> or the ability to open, edit and save files. But probably the majority of applications are document-based.</para><para>See the example application in <computeroutput>samples/docview</computeroutput>. To use the abstract <ref refid="classwx_document" kindref="compound">wxDocument</ref> class, you need to derive a new class and override at least the member functions SaveObject and LoadObject. SaveObject and LoadObject will be called by the framework when the document needs to be saved or loaded.</para><para>Use the macros DECLARE_DYNAMIC_CLASS and IMPLEMENT_DYNAMIC_CLASS in order to allow the framework to create document objects on demand. When you create a <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> object on application initialization, you should pass CLASSINFO(YourDocumentClass) to the <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> constructor so that it knows how to create an instance of this class.</para><para>If you do not wish to use the wxWidgets method of creating document objects dynamically, you must override <ref refid="classwx_doc_template_1aab182c7d35ba29399cd02c6526f9ce33" kindref="member">wxDocTemplate::CreateDocument</ref> to return an instance of the appropriate class.</para></sect1>
<sect1 id="overview_docview_1overview_docview_wxview">
<title>wxView overview</title>
<para>Class: <ref refid="classwx_view" kindref="compound">wxView</ref></para><para>The <ref refid="classwx_view" kindref="compound">wxView</ref> class can be used to model the viewing and editing component of an application&apos;s file-based data. It is part of the document/view framework supported by wxWidgets, and cooperates with the <ref refid="classwx_document" kindref="compound">wxDocument</ref>, <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> and <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref> classes.</para><para>See the example application in <computeroutput>samples/docview</computeroutput>.</para><para>To use the abstract <ref refid="classwx_view" kindref="compound">wxView</ref> class, you need to derive a new class and override at least the member functions OnCreate, OnDraw, OnUpdate and OnClose. You will probably want to respond to menu commands from the frame containing the view.</para><para>Use the macros DECLARE_DYNAMIC_CLASS and IMPLEMENT_DYNAMIC_CLASS in order to allow the framework to create view objects on demand. When you create a <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> object on application initialization, you should pass CLASSINFO(YourViewClass) to the <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> constructor so that it knows how to create an instance of this class.</para><para>If you do not wish to use the wxWidgets method of creating view objects dynamically, you must override <ref refid="classwx_doc_template_1a9efec24a94085a66c35458520e5efcad" kindref="member">wxDocTemplate::CreateView</ref> to return an instance of the appropriate class.</para></sect1>
<sect1 id="overview_docview_1overview_docview_wxdoctemplate">
<title>wxDocTemplate overview</title>
<para>Class: <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref></para><para>The <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> class is used to model the relationship between a document class and a view class. The application creates a document template object for each document/view pair. The list of document templates managed by the <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref> instance is used to create documents and views. Each document template knows what file filters and default extension are appropriate for a document/view combination, and how to create a document or view.</para><para>For example, you might write a small doodling application that can load and save lists of line segments. If you had two views of the data -- graphical, and a list of the segments -- then you would create one document class DoodleDocument, and two view classes (DoodleGraphicView and DoodleListView). You would also need two document templates, one for the graphical view and another for the list view. You would pass the same document class and default file extension to both document templates, but each would be passed a different view class. When the user clicks on the Open menu item, the file selector is displayed with a list of possible file filters -- one for each <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref>. Selecting the filter selects the <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref>, and when a file is selected, that template will be used for creating a document and view.</para><para>For the case where an application has one document type and one view type, a single document template is constructed, and dialogs will be appropriately simplified.</para><para><ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> is part of the document/view framework supported by wxWidgets, and cooperates with the <ref refid="classwx_view" kindref="compound">wxView</ref>, <ref refid="classwx_document" kindref="compound">wxDocument</ref> and <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref> classes.</para><para>See the example application in <computeroutput>samples/docview</computeroutput>.</para><para>To use the <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> class, you do not need to derive a new class. Just pass relevant information to the constructor including CLASSINFO(YourDocumentClass) and CLASSINFO(YourViewClass) to allow dynamic instance creation.</para><para>If you do not wish to use the wxWidgets method of creating document objects dynamically, you must override <ref refid="classwx_doc_template_1aab182c7d35ba29399cd02c6526f9ce33" kindref="member">wxDocTemplate::CreateDocument</ref> and <ref refid="classwx_doc_template_1a9efec24a94085a66c35458520e5efcad" kindref="member">wxDocTemplate::CreateView</ref> to return instances of the appropriate class.</para><para><simplesect kind="note"><para>The document template has nothing to do with the C++ template construct.</para></simplesect>
</para></sect1>
<sect1 id="overview_docview_1overview_docview_wxdocmanager">
<title>wxDocManager overview</title>
<para>Class: <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref></para><para>The <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref> class is part of the document/view framework supported by wxWidgets, and cooperates with the <ref refid="classwx_view" kindref="compound">wxView</ref>, <ref refid="classwx_document" kindref="compound">wxDocument</ref> and <ref refid="classwx_doc_template" kindref="compound">wxDocTemplate</ref> classes.</para><para>A <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref> instance coordinates documents, views and document templates. It keeps a list of document and template instances, and much functionality is routed through this object, such as providing selection and file dialogs. The application can use this class &apos;as is&apos; or derive a class and override some members to extend or change the functionality.</para><para>Create an instance of this class near the beginning of your application initialization, before any documents, views or templates are manipulated.</para><para>There may be multiple <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref> instances in an application. See the example application in <computeroutput>samples/docview</computeroutput>.</para></sect1>
<sect1 id="overview_docview_1overview_docview_wxcommand">
<title>wxCommand overview</title>
<para>Classes: <ref refid="classwx_command" kindref="compound">wxCommand</ref>, <ref refid="classwx_command_processor" kindref="compound">wxCommandProcessor</ref></para><para><ref refid="classwx_command" kindref="compound">wxCommand</ref> is a base class for modelling an application command, which is an action usually performed by selecting a menu item, pressing a toolbar button or any other means provided by the application to change the data or view.</para><para>Instead of the application functionality being scattered around switch statements and functions in a way that may be hard to read and maintain, the functionality for a command is explicitly represented as an object which can be manipulated by a framework or application.</para><para>When a user interface event occurs, the application <emphasis>submits</emphasis> a command to a <ref refid="classwx_command_processor" kindref="compound">wxCommandProcessor</ref> object to execute and store.</para><para>The wxWidgets document/view framework handles Undo and Redo by use of <ref refid="classwx_command" kindref="compound">wxCommand</ref> and <ref refid="classwx_command_processor" kindref="compound">wxCommandProcessor</ref> objects. You might find further uses for <ref refid="classwx_command" kindref="compound">wxCommand</ref>, such as implementing a macro facility that stores, loads and replays commands.</para><para>An application can derive a new class for every command, or, more likely, use one class parameterized with an integer or string command identifier.</para></sect1>
<sect1 id="overview_docview_1overview_docview_wxcommandproc">
<title>wxCommandProcessor overview</title>
<para>Classes: <ref refid="classwx_command_processor" kindref="compound">wxCommandProcessor</ref>, <ref refid="classwx_command" kindref="compound">wxCommand</ref></para><para><ref refid="classwx_command_processor" kindref="compound">wxCommandProcessor</ref> is a class that maintains a history of <ref refid="classwx_command" kindref="compound">wxCommand</ref> instances, with undo/redo functionality built-in. Derive a new class from this if you want different behaviour.</para></sect1>
<sect1 id="overview_docview_1overview_docview_filehistory">
<title>wxFileHistory overview</title>
<para>Classes: <ref refid="classwx_file_history" kindref="compound">wxFileHistory</ref>, <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref></para><para><ref refid="classwx_file_history" kindref="compound">wxFileHistory</ref> encapsulates functionality to record the last few files visited, and to allow the user to quickly load these files using the list appended to the File menu. Although <ref refid="classwx_file_history" kindref="compound">wxFileHistory</ref> is used by <ref refid="classwx_doc_manager" kindref="compound">wxDocManager</ref>, it can be used independently. You may wish to derive from it to allow different behaviour, such as popping up a scrolling list of files.</para><para>By calling <ref refid="classwx_file_history_1ad73800aba67b30fc9d0dc94f17c4cc09" kindref="member">wxFileHistory::UseMenu()</ref> you can associate a file menu with the file history. The menu will then be used for appending filenames that are added to the history.</para><para>Please notice that currently if the history already contained filenames when UseMenu() is called (e.g. when initializing a second MDI child frame), the menu is not automatically initialized with the existing filenames in the history and so you need to call <ref refid="classwx_file_history_1a8c77c1d51e18be0b54639953745481a6" kindref="member">wxFileHistory::AddFilesToMenu()</ref> after UseMenu() explicitly in order to initialize the menu with the existing list of MRU files (otherwise an assertion failure is raised in debug builds).</para><para>The filenames are appended using menu identifiers in the range <computeroutput>wxID_FILE1</computeroutput> to <computeroutput>wxID_FILE9</computeroutput>.</para><para>In order to respond to a file load command from one of these identifiers, you need to handle them using an event handler, for example:</para><para><programlisting><codeline><highlight class="normal">BEGIN_EVENT_TABLE(<ref refid="classwx_doc_parent_frame" kindref="compound" tooltip="The wxDocParentFrame class provides a default top-level frame for applications using the document/vie...">wxDocParentFrame</ref>,<sp/><ref refid="classwx_frame" kindref="compound" tooltip="A frame is a window whose size and position can (usually) be changed by the user.">wxFrame</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EVT_MENU(<ref refid="defs_8h_1ac66d0a09761e7d86b2ac0b2e0c6a8cbba37f548d1211c664ede962e943baad4e5" kindref="member">wxID_EXIT</ref>,<sp/><ref refid="classwx_doc_parent_frame" kindref="compound" tooltip="The wxDocParentFrame class provides a default top-level frame for applications using the document/vie...">wxDocParentFrame</ref>::OnExit)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EVT_MENU_RANGE(<ref refid="defs_8h_1ac66d0a09761e7d86b2ac0b2e0c6a8cbba2e9387433c38391c65eeee71adbf0e13" kindref="member">wxID_FILE1</ref>,<sp/><ref refid="defs_8h_1ac66d0a09761e7d86b2ac0b2e0c6a8cbba4dc2e1fd2414bf9da8d9af3f23da6f12" kindref="member">wxID_FILE9</ref>,<sp/><ref refid="classwx_doc_parent_frame" kindref="compound" tooltip="The wxDocParentFrame class provides a default top-level frame for applications using the document/vie...">wxDocParentFrame</ref>::OnMRUFile)</highlight></codeline>
<codeline><highlight class="normal">END_EVENT_TABLE()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classwx_doc_parent_frame" kindref="compound" tooltip="The wxDocParentFrame class provides a default top-level frame for applications using the document/vie...">wxDocParentFrame</ref>::OnExit(<ref refid="classwx_command_event" kindref="compound" tooltip="This event class contains information about command events, which originate from a variety of simple ...">wxCommandEvent</ref>&amp;<sp/>WXUNUSED(event))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Close();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>wxDocParentFrame::OnMRUFile(<ref refid="classwx_command_event" kindref="compound" tooltip="This event class contains information about command events, which originate from a variety of simple ...">wxCommandEvent</ref>&amp;<sp/>event)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref><sp/>f(m_docManager-&gt;GetHistoryFile(event.<ref refid="classwx_event_1ac732828ac14cfc289d798a4fea437246" kindref="member" tooltip="Returns the identifier associated with this event, such as a button command id.">GetId</ref>()<sp/>-<sp/><ref refid="defs_8h_1ac66d0a09761e7d86b2ac0b2e0c6a8cbba2e9387433c38391c65eeee71adbf0e13" kindref="member">wxID_FILE1</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f.<ref refid="classwx_string_1ac6ae24a8ccc6e4e671f972948fca437c" kindref="member">empty</ref>())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)m_docManager-CreateDocument(f,<sp/>wxDOC_SILENT);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_docview_1overview_docview_predefid">
<title>wxWidgets predefined command identifiers</title>
<para>To allow communication between the application&apos;s menus and the document/view framework, several command identifiers are predefined for you to use in menus.</para><para><verbatim>
wxID_OPEN (5000)
wxID_CLOSE (5001)
wxID_NEW (5002)
wxID_SAVE (5003)
wxID_SAVEAS (5004)
wxID_REVERT (5005)
wxID_EXIT (5006)
wxID_UNDO (5007)
wxID_REDO (5008)
wxID_HELP (5009)
wxID_PRINT (5010)
wxID_PRINT_SETUP (5011)
wxID_PREVIEW (5012)
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

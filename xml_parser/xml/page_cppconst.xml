<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="page_cppconst" kind="page">
    <compoundname>page_cppconst</compoundname>
    <title>Preprocessor symbols defined by wxWidgets</title>
    <detaileddescription>
<para>These are preprocessor symbols used in the wxWidgets source, grouped by category (and sorted by alphabetical order inside each category).</para><para>All of these macros except for the <computeroutput>wxUSE_XXX</computeroutput> variety is defined if the corresponding condition is true and undefined if it isn&apos;t, so they should be always tested using #ifdef and not #if.</para><para><itemizedlist>
<listitem><para><ref refid="page_cppconst_1page_cppconst_guisystem" kindref="member">GUI system</ref> </para></listitem>
<listitem><para><ref refid="page_cppconst_1page_cppconst_os" kindref="member">Operating systems</ref> </para></listitem>
<listitem><para><ref refid="page_cppconst_1page_cppconst_cpu" kindref="member">Hardware architectures (CPU)</ref> </para></listitem>
<listitem><para><ref refid="page_cppconst_1page_cppconst_hardware" kindref="member">Hardware type</ref> </para></listitem>
<listitem><para><ref refid="page_cppconst_1page_cppconst_compiler" kindref="member">Compilers</ref> </para></listitem>
<listitem><para><ref refid="page_cppconst_1page_cppconst_featuretests" kindref="member">Feature tests</ref> </para></listitem>
<listitem><para><ref refid="page_cppconst_1page_cppconst_msvc_setup_h" kindref="member">Libraries selection for MSVC setup.h</ref> </para></listitem>
<listitem><para><ref refid="page_cppconst_1page_cppconst_miscellaneous" kindref="member">Miscellaneous</ref></para></listitem>
</itemizedlist>
<hruler/>
</para><sect1 id="page_cppconst_1page_cppconst_guisystem">
<title>GUI system</title>
<para><table rows="27" cols="2"><row>
<entry thead="no"><para>__WXBASE__ </para></entry><entry thead="no"><para>Only wxBase, no GUI features (same as <computeroutput>wxUSE_GUI</computeroutput> == 0) </para></entry></row>
<row>
<entry thead="no"><para>__WXCOCOA__ </para></entry><entry thead="no"><para>OS X using wxCocoa Port </para></entry></row>
<row>
<entry thead="no"><para>__WXDFB__ </para></entry><entry thead="no"><para>wxUniversal using DirectFB </para></entry></row>
<row>
<entry thead="no"><para>__WXWINCE__ </para></entry><entry thead="no"><para>Windows CE </para></entry></row>
<row>
<entry thead="no"><para>__WXGTK__ </para></entry><entry thead="no"><para>GTK+ </para></entry></row>
<row>
<entry thead="no"><para>__WXGTK12__ </para></entry><entry thead="no"><para>GTK+ 1.2 or higher </para></entry></row>
<row>
<entry thead="no"><para>__WXGTK20__ </para></entry><entry thead="no"><para>GTK+ 2.0 or higher </para></entry></row>
<row>
<entry thead="no"><para>__WXGTK24__ </para></entry><entry thead="no"><para>GTK+ 2.4 or higher </para></entry></row>
<row>
<entry thead="no"><para>__WXGTK26__ </para></entry><entry thead="no"><para>GTK+ 2.6 or higher </para></entry></row>
<row>
<entry thead="no"><para>__WXGTK210__ </para></entry><entry thead="no"><para>GTK+ 2.10 or higher </para></entry></row>
<row>
<entry thead="no"><para>__WXMAC__ </para></entry><entry thead="no"><para>old define for Mac OS X </para></entry></row>
<row>
<entry thead="no"><para>__WXMOTIF__ </para></entry><entry thead="no"><para>Motif </para></entry></row>
<row>
<entry thead="no"><para>__WXMOTIF20__ </para></entry><entry thead="no"><para>Motif 2.0 or higher </para></entry></row>
<row>
<entry thead="no"><para>__WXMSW__ </para></entry><entry thead="no"><para>GUI using <ulink url="http://en.wikipedia.org/wiki/Windows_User">Windows Controls</ulink> </para></entry></row>
<row>
<entry thead="no"><para>__WXOSX__ </para></entry><entry thead="no"><para>any OS X </para></entry></row>
<row>
<entry thead="no"><para>__WXOSX_IPHONE__ </para></entry><entry thead="no"><para>OS X iPhone </para></entry></row>
<row>
<entry thead="no"><para>__WXOSX_CARBON__ </para></entry><entry thead="no"><para>Mac OS X using Carbon </para></entry></row>
<row>
<entry thead="no"><para>__WXOSX_COCOA__ </para></entry><entry thead="no"><para>Mac OS X using Cocoa </para></entry></row>
<row>
<entry thead="no"><para>__WXOSX_MAC__ </para></entry><entry thead="no"><para>Mac OS X (Carbon or Cocoa) </para></entry></row>
<row>
<entry thead="no"><para>__WXOSX_OR_COCOA__ </para></entry><entry thead="no"><para>Any Mac OS X port (wxOSX-Carbon, wxOSX-Cocoa or wxCocoa) </para></entry></row>
<row>
<entry thead="no"><para>__WXPM__ </para></entry><entry thead="no"><para>OS/2 native Presentation Manager </para></entry></row>
<row>
<entry thead="no"><para>__WXSTUBS__ </para></entry><entry thead="no"><para>Stubbed version (&apos;template&apos; wxWin implementation) </para></entry></row>
<row>
<entry thead="no"><para>__WXXT__ </para></entry><entry thead="no"><para>Xt; mutually exclusive with WX_MOTIF, not implemented in wxWidgets 2.x </para></entry></row>
<row>
<entry thead="no"><para>__WXX11__ </para></entry><entry thead="no"><para>wxX11 (__WXUNIVERSAL__ will be also defined) </para></entry></row>
<row>
<entry thead="no"><para>__WXWINE__ </para></entry><entry thead="no"><para>WINE (i.e. WIN32 on Unix) </para></entry></row>
<row>
<entry thead="no"><para>__WXUNIVERSAL__ </para></entry><entry thead="no"><para>wxUniversal port, always defined in addition to one of the symbols above so this should be tested first. </para></entry></row>
<row>
<entry thead="no"><para>__X__ </para></entry><entry thead="no"><para>any X11-based GUI toolkit except GTK+ </para></entry></row>
</table>
</para><para>There are two wxWidgets ports to Mac OS X. One of them, wxOSX is the successor of the venerable wxMac, it currently exists in three versions: Carbon and Cocoa for the desktop and a very early iPhone port. And there is the Cocoa port named wxCocoa which has not been updated very actively since beginning 2008. To summarize:</para><para><itemizedlist>
<listitem><para>If you want to test for wxOSX on the desktop, use <computeroutput>__WXOSX_MAC__</computeroutput>. </para></listitem>
<listitem><para>If you want to test for wxOSX on the iPhone, use <computeroutput>__WXOSX_IPHONE__</computeroutput>. </para></listitem>
<listitem><para>If you want to test for any GUI Mac port under OS X, use <computeroutput>__WXOSX_OR_COCOA__</computeroutput>. </para></listitem>
<listitem><para>If you want to test for any port under Mac OS X, including, for example, wxGTK and also wxBase, use <computeroutput>__DARWIN__</computeroutput> (see below).</para></listitem>
</itemizedlist>
The convention is to use the <computeroutput>__WX</computeroutput> prefix for these symbols, although this has not always been followed.</para></sect1>
<sect1 id="page_cppconst_1page_cppconst_os">
<title>Operating systems</title>
<para><table rows="29" cols="2"><row>
<entry thead="no"><para>__APPLE__ </para></entry><entry thead="no"><para>any Mac OS version </para></entry></row>
<row>
<entry thead="no"><para>__AIX__ </para></entry><entry thead="no"><para>AIX </para></entry></row>
<row>
<entry thead="no"><para>__BSD__ </para></entry><entry thead="no"><para>Any *BSD system </para></entry></row>
<row>
<entry thead="no"><para>__CYGWIN__ </para></entry><entry thead="no"><para>Cygwin: Unix on Win32 </para></entry></row>
<row>
<entry thead="no"><para>__DARWIN__ </para></entry><entry thead="no"><para>Mac OS X (with BSD C library) </para></entry></row>
<row>
<entry thead="no"><para>__DATA_GENERAL__ </para></entry><entry thead="no"><para>DG-UX </para></entry></row>
<row>
<entry thead="no"><para>__FREEBSD__ </para></entry><entry thead="no"><para>FreeBSD </para></entry></row>
<row>
<entry thead="no"><para>__HPUX__ </para></entry><entry thead="no"><para>HP-UX (Unix) </para></entry></row>
<row>
<entry thead="no"><para>__GNU__ </para></entry><entry thead="no"><para>GNU Hurd </para></entry></row>
<row>
<entry thead="no"><para>__LINUX__ </para></entry><entry thead="no"><para>Linux </para></entry></row>
<row>
<entry thead="no"><para>__MACH__ </para></entry><entry thead="no"><para>Mach-O Architecture (Mac OS X only builds) </para></entry></row>
<row>
<entry thead="no"><para>__OSF__ </para></entry><entry thead="no"><para>OSF/1 </para></entry></row>
<row>
<entry thead="no"><para>__QNX__ </para></entry><entry thead="no"><para>QNX Neutrino RTOS </para></entry></row>
<row>
<entry thead="no"><para>__SGI__ </para></entry><entry thead="no"><para>IRIX </para></entry></row>
<row>
<entry thead="no"><para>__SOLARIS__ </para></entry><entry thead="no"><para>Solaris </para></entry></row>
<row>
<entry thead="no"><para>__SUN__ </para></entry><entry thead="no"><para>Any Sun </para></entry></row>
<row>
<entry thead="no"><para>__SUNOS__ </para></entry><entry thead="no"><para>Sun OS </para></entry></row>
<row>
<entry thead="no"><para>__SVR4__ </para></entry><entry thead="no"><para>SystemV R4 </para></entry></row>
<row>
<entry thead="no"><para>__SYSV__ </para></entry><entry thead="no"><para>SystemV generic </para></entry></row>
<row>
<entry thead="no"><para>__ULTRIX__ </para></entry><entry thead="no"><para>Ultrix </para></entry></row>
<row>
<entry thead="no"><para>__UNIX__ </para></entry><entry thead="no"><para>any Unix </para></entry></row>
<row>
<entry thead="no"><para>__UNIX_LIKE__ </para></entry><entry thead="no"><para>Unix, BeOS or VMS </para></entry></row>
<row>
<entry thead="no"><para>__VMS__ </para></entry><entry thead="no"><para>VMS </para></entry></row>
<row>
<entry thead="no"><para>__WINDOWS__ </para></entry><entry thead="no"><para>Any Windows platform, using any port (see also <computeroutput>__WXMSW__</computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>__WIN16__ </para></entry><entry thead="no"><para>Win16 API (not supported since wxWidgets 2.6) </para></entry></row>
<row>
<entry thead="no"><para>__WIN32__ </para></entry><entry thead="no"><para>Win32 API </para></entry></row>
<row>
<entry thead="no"><para>__WIN64__ </para></entry><entry thead="no"><para>Win64 (mostly same as Win32 but data type sizes are different) </para></entry></row>
<row>
<entry thead="no"><para>__WINE__ </para></entry><entry thead="no"><para>Wine </para></entry></row>
<row>
<entry thead="no"><para>_WIN32_WCE </para></entry><entry thead="no"><para>Windows CE version </para></entry></row>
</table>
</para></sect1>
<sect1 id="page_cppconst_1page_cppconst_cpu">
<title>Hardware architectures (CPU)</title>
<para>Note that not all of these symbols are always defined, it depends on the compiler used.</para><para><table rows="4" cols="2"><row>
<entry thead="no"><para>__ALPHA__ </para></entry><entry thead="no"><para>DEC Alpha architecture </para></entry></row>
<row>
<entry thead="no"><para>__INTEL__ </para></entry><entry thead="no"><para>Intel i386 or compatible </para></entry></row>
<row>
<entry thead="no"><para>__IA64__ </para></entry><entry thead="no"><para>Intel 64 bit architecture </para></entry></row>
<row>
<entry thead="no"><para>__POWERPC__ </para></entry><entry thead="no"><para>Motorola Power PC </para></entry></row>
</table>
</para></sect1>
<sect1 id="page_cppconst_1page_cppconst_hardware">
<title>Hardware type</title>
<para><table rows="7" cols="2"><row>
<entry thead="no"><para>__SMARTPHONE__ </para></entry><entry thead="no"><para>Generic mobile devices with phone buttons and a small display </para></entry></row>
<row>
<entry thead="no"><para>__PDA__ </para></entry><entry thead="no"><para>Personal digital assistant, usually with touch screen </para></entry></row>
<row>
<entry thead="no"><para>__HANDHELD__ </para></entry><entry thead="no"><para>Small but powerful computer, usually with a keyboard </para></entry></row>
<row>
<entry thead="no"><para>__POCKETPC__ </para></entry><entry thead="no"><para>Microsoft-powered PocketPC devices with touch-screen </para></entry></row>
<row>
<entry thead="no"><para>__WINCE_STANDARDSDK__ </para></entry><entry thead="no"><para>Microsoft-powered Windows CE devices, for generic Windows CE applications </para></entry></row>
<row>
<entry thead="no"><para>__WINCE_NET__ </para></entry><entry thead="no"><para>Microsoft-powered Windows CE .NET devices (_WIN32_WCE is 400 or greater) </para></entry></row>
<row>
<entry thead="no"><para>WIN32_PLATFORM_WFSP </para></entry><entry thead="no"><para>Microsoft-powered smartphone </para></entry></row>
</table>
</para></sect1>
<sect1 id="page_cppconst_1page_cppconst_compiler">
<title>Compilers</title>
<para><table rows="13" cols="2"><row>
<entry thead="no"><para>__BORLANDC__ </para></entry><entry thead="no"><para>Borland C++. The value of the macro corresponds to the compiler version: 500 is 5.0. </para></entry></row>
<row>
<entry thead="no"><para>__DJGPP__ </para></entry><entry thead="no"><para>DJGPP </para></entry></row>
<row>
<entry thead="no"><para>__DIGITALMARS__ </para></entry><entry thead="no"><para>Digital Mars </para></entry></row>
<row>
<entry thead="no"><para>__EVC4__ </para></entry><entry thead="no"><para>Embedded Visual C++ 4 (can be only used for building wxWinCE) </para></entry></row>
<row>
<entry thead="no"><para>__GNUG__ </para></entry><entry thead="no"><para>Gnu C++ on any platform, see also wxCHECK_GCC_VERSION </para></entry></row>
<row>
<entry thead="no"><para>__GNUWIN32__ </para></entry><entry thead="no"><para>Gnu-Win32 compiler, see also wxCHECK_W32API_VERSION </para></entry></row>
<row>
<entry thead="no"><para>__MINGW32__ </para></entry><entry thead="no"><para>MinGW </para></entry></row>
<row>
<entry thead="no"><para>__SUNCC__ </para></entry><entry thead="no"><para>Sun CC, see also wxCHECK_SUNCC_VERSION </para></entry></row>
<row>
<entry thead="no"><para>__SYMANTECC__ </para></entry><entry thead="no"><para>Symantec C++ </para></entry></row>
<row>
<entry thead="no"><para>__VISAGECPP__ </para></entry><entry thead="no"><para>IBM Visual Age (OS/2) </para></entry></row>
<row>
<entry thead="no"><para>__VISUALC__ </para></entry><entry thead="no"><para>Microsoft Visual C++, see also <ref refid="group__group__funcmacro__version_1ga5a01a6b9009ee0ef3b90d520b1a0f5c1" kindref="member">wxCHECK_VISUALC_VERSION</ref>. The value of this macro corresponds to the compiler version: <computeroutput>1020</computeroutput> for <computeroutput>4.2</computeroutput> (the first supported version), <computeroutput>1100</computeroutput> for <computeroutput>5.0</computeroutput>, <computeroutput>1200</computeroutput> for <computeroutput>6.0</computeroutput> and so on. For convenience, the symbols __VISUALCn__ are also defined for each major compiler version from 5 to 11, i.e. you can use tests such #ifdef __VISUALC7__ to test for compiler version being precisely 7. </para></entry></row>
<row>
<entry thead="no"><para>__XLC__ </para></entry><entry thead="no"><para>AIX compiler </para></entry></row>
<row>
<entry thead="no"><para>__WATCOMC__ </para></entry><entry thead="no"><para>Watcom C++. The value of this macro corresponds to the compiler version, <computeroutput>1100</computeroutput> is <computeroutput>11.0</computeroutput> and <computeroutput>1200</computeroutput> is OpenWatcom. </para></entry></row>
</table>
</para></sect1>
<sect1 id="page_cppconst_1page_cppconst_featuretests">
<title>Feature tests</title>
<para>Some library features may not be always available even if they were selected by the user. To make it possible to check if this is the case, the library predefines the symbols in the form <computeroutput>wxHAS_FEATURE</computeroutput>. Unlike <computeroutput>wxUSE_FEATURE</computeroutput> symbols which are defined by the library user (directly in <computeroutput>setup.h</computeroutput> or by running configure script) and which must be always defined as either 0 or 1, the <computeroutput>wxHAS</computeroutput> symbols are only defined if the corresponding feature is available and not defined at all otherwise.</para><para>Currently the following symbols exist:</para><para><table rows="15" cols="2"><row>
<entry thead="no"><para>wxHAS_3STATE_CHECKBOX </para></entry><entry thead="no"><para>Defined if <ref refid="classwx_check_box" kindref="compound">wxCheckBox</ref> supports wxCHK_3STATE flag, i.e. is capable of showing three states and not only the usual two. Currently defined for almost all ports. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_ATOMIC_OPS </para></entry><entry thead="no"><para>Defined if <ref refid="group__group__funcmacro__atomic_1ga35470b5fc125b443e73b7967100752d4" kindref="member">wxAtomicInc()</ref> and <ref refid="group__group__funcmacro__atomic_1ga396a0a6c5b705d46862564f5b16897b2" kindref="member">wxAtomicDec()</ref> functions have an efficient (CPU-specific) implementation. Notice that the functions themselves are always available but can be prohibitively slow to use when implemented in a generic way, using a critical section. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_BITMAPTOGGLEBUTTON </para></entry><entry thead="no"><para>Defined in <computeroutput><ref refid="tglbtn_8h" kindref="compound">wx/tglbtn.h</ref></computeroutput> if <ref refid="classwx_bitmap_toggle_button" kindref="compound">wxBitmapToggleButton</ref> class is available in addition to <ref refid="classwx_toggle_button" kindref="compound">wxToggleButton</ref>. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_CONFIG_TEMPLATE_RW </para></entry><entry thead="no"><para>Defined if the currently used compiler supports template Read() and Write() methods in wxConfig. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_LARGE_FILES </para></entry><entry thead="no"><para>Defined if <ref refid="classwx_file" kindref="compound">wxFile</ref> supports files more than 4GB in size (notice that you must include <computeroutput><ref refid="filefn_8h" kindref="compound">wx/filefn.h</ref></computeroutput> before testing for this symbol). </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_LARGE_FFILES </para></entry><entry thead="no"><para>Defined if <ref refid="classwx_f_file" kindref="compound">wxFFile</ref> supports files more than 4GB in size (notice that you must include <computeroutput><ref refid="filefn_8h" kindref="compound">wx/filefn.h</ref></computeroutput> before testing for this symbol). </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG </para></entry><entry thead="no"><para>Defined if compiler supports a 64 bit integer type (available as <computeroutput>wxLongLong_t</computeroutput>) and this type is different from long. Notice that, provided wxUSE_LONGLONG is not turned off, some 64 bit type is always available to wxWidgets programs and this symbol only indicates a presence of such primitive type. It is useful to decide whether some function should be overloaded for both <computeroutput>long</computeroutput> and <computeroutput>long long</computeroutput> types. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_MULTIPLE_FILEDLG_FILTERS </para></entry><entry thead="no"><para>Defined if <ref refid="classwx_file_dialog" kindref="compound">wxFileDialog</ref> supports multiple (&apos;|&apos;-separated) filters. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_IMAGES_IN_RESOURCES </para></entry><entry thead="no"><para>Defined if <ulink url="http://en.wikipedia.org/wiki/Resource_(Windows)">Windows resource files</ulink> or OS/2 resource files are available on the current platform. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_POWER_EVENTS </para></entry><entry thead="no"><para>Defined if <ref refid="classwx_power_event" kindref="compound">wxPowerEvent</ref> are ever generated on the current platform. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_RADIO_MENU_ITEMS </para></entry><entry thead="no"><para>Defined if the current port supports radio menu items (see <ref refid="classwx_menu_1a3ec8da997f0969d6df4f2394af6a9580" kindref="member">wxMenu::AppendRadioItem</ref>). </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_RAW_BITMAP </para></entry><entry thead="no"><para>Defined if direct access to bitmap data using the classes in <computeroutput><ref refid="rawbmp_8h" kindref="compound">wx/rawbmp.h</ref></computeroutput> is supported. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_RAW_KEY_CODES </para></entry><entry thead="no"><para>Defined if raw key codes (see <ref refid="classwx_key_event_1a6fddcd170d05b0852a7eb2a0cb730795" kindref="member">wxKeyEvent::GetRawKeyCode</ref> are supported. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_REGEX_ADVANCED </para></entry><entry thead="no"><para>Defined if advanced syntax is available in <ref refid="classwx_reg_ex" kindref="compound">wxRegEx</ref>. </para></entry></row>
<row>
<entry thead="no"><para>wxHAS_TASK_BAR_ICON </para></entry><entry thead="no"><para>Defined if <ref refid="classwx_task_bar_icon" kindref="compound">wxTaskBarIcon</ref> is available on the current platform. </para></entry></row>
</table>
</para></sect1>
<sect1 id="page_cppconst_1page_cppconst_msvc_setup_h">
<title>Libraries selection for MSVC setup.h</title>
<para>Microsoft Visual C++ users may use the special <computeroutput>wx/setup.h</computeroutput> file for this compiler in <computeroutput>include/msvc</computeroutput> subdirectory. This file implicitly links in all the wxWidgets libraries using MSVC-specific pragmas which usually is much more convenient than manually specifying the libraries list in all of the project configurations. However sometimes linking with all the libraries is not desirable, for example because some of them were not built and this is where the symbols in this section can be helpful: defining them allows to not link with the corresponding library. The following symbols are honoured:<itemizedlist>
<listitem><para>wxNO_ADV_LIB</para></listitem><listitem><para>wxNO_AUI_LIB</para></listitem><listitem><para>wxNO_HTML_LIB</para></listitem><listitem><para>wxNO_MEDIA_LIB</para></listitem><listitem><para>wxNO_NET_LIB</para></listitem><listitem><para>wxNO_PROPGRID_LIB</para></listitem><listitem><para>wxNO_QA_LIB</para></listitem><listitem><para>wxNO_RICHTEXT_LIB</para></listitem><listitem><para>wxNO_WEBVIEW_LIB</para></listitem><listitem><para>wxNO_XML_LIB</para></listitem><listitem><para>wxNO_REGEX_LIB</para></listitem><listitem><para>wxNO_EXPAT_LIB</para></listitem><listitem><para>wxNO_JPEG_LIB</para></listitem><listitem><para>wxNO_PNG_LIB</para></listitem><listitem><para>wxNO_TIFF_LIB</para></listitem><listitem><para>wxNO_ZLIB_LIB</para></listitem></itemizedlist>
</para><para>Notice that the base library is always included and the core is always included for the GUI applications (i.e. those which don&apos;t define <computeroutput>wxUSE_GUI</computeroutput> as 0).</para></sect1>
<sect1 id="page_cppconst_1page_cppconst_miscellaneous">
<title>Miscellaneous</title>
<para><table rows="14" cols="2"><row>
<entry thead="no"><para>__WXWINDOWS__ </para></entry><entry thead="no"><para>always defined in wxWidgets applications, see also wxCHECK_VERSION </para></entry></row>
<row>
<entry thead="no"><para>wxDEBUG_LEVEL </para></entry><entry thead="no"><para>defined as 1 by default, may be pre-defined as 0 before including wxWidgets headers to disable generation of any code at all for the assertion macros, see <ref refid="overview_debugging" kindref="compound">Debugging</ref> </para></entry></row>
<row>
<entry thead="no"><para>__WXDEBUG__ </para></entry><entry thead="no"><para>defined if wxDEBUG_LEVEL is 1 or more, undefined otherwise </para></entry></row>
<row>
<entry thead="no"><para>wxUSE_XXX </para></entry><entry thead="no"><para>if defined as 1, feature XXX is active, see the <ref refid="page_wxusedef" kindref="compound">wxUSE preprocessor symbols defined by wxWidgets</ref> (the symbols of this form are always defined, use #if and not #ifdef to test for them) </para></entry></row>
<row>
<entry thead="no"><para>WX_PRECOMP </para></entry><entry thead="no"><para>is defined if precompiled headers (PCH) are in use. In this case, <computeroutput>wx/wxprec.h</computeroutput> includes <computeroutput>wx/wx.h</computeroutput> which, in turn, includes a number of wxWidgets headers thus making it unnecessary to include them explicitly. However if this is not defined, you do need to include them and so the usual idiom which allows to support both cases is to first include <computeroutput>wx/wxprec.h</computeroutput>  and then, inside #ifndef WX_PRECOMP, individual headers you need.} </para></entry></row>
<row>
<entry thead="no"><para>_UNICODE and UNICODE </para></entry><entry thead="no"><para>both are defined if wxUSE_UNICODE is set to <computeroutput>1</computeroutput>  </para></entry></row>
<row>
<entry thead="no"><para>wxUSE_GUI </para></entry><entry thead="no"><para>this particular feature test macro is defined to 1 when compiling or using the library with the GUI features activated, if it is defined as <computeroutput>0</computeroutput>, only wxBase is available. </para></entry></row>
<row>
<entry thead="no"><para>wxUSE_BASE </para></entry><entry thead="no"><para>only used by wxWidgets internally (defined as 1 when building wxBase code, either as a standalone library or as part of the monolithic wxWidgets library, defined as 0 when building GUI library only) </para></entry></row>
<row>
<entry thead="no"><para>wxNO_RTTI </para></entry><entry thead="no"><para>is defined if the compiler RTTI support has been switched off </para></entry></row>
<row>
<entry thead="no"><para>wxNO_EXCEPTIONS </para></entry><entry thead="no"><para>is defined if the compiler support for C++ exceptions has been switched off </para></entry></row>
<row>
<entry thead="no"><para>wxNO_THREADS </para></entry><entry thead="no"><para>if this macro is defined, the compilation options don&apos;t include compiler flags needed for multithreaded code generation. This implies that wxUSE_THREADS is 0 and also that other (non-wx-based) threading packages cannot be used neither. </para></entry></row>
<row>
<entry thead="no"><para>WXMAKINGDLL_XXX </para></entry><entry thead="no"><para>used internally and defined when building the library <computeroutput>XXX</computeroutput> as a DLL; when a monolithic wxWidgets build is used only a single <computeroutput>WXMAKINGDLL</computeroutput> symbol is defined </para></entry></row>
<row>
<entry thead="no"><para>WXUSINGDLL </para></entry><entry thead="no"><para>defined when compiling code which uses wxWidgets as a DLL/shared library </para></entry></row>
<row>
<entry thead="no"><para>WXBUILDING </para></entry><entry thead="no"><para>defined when building wxWidgets itself, whether as a static or shared library </para></entry></row>
</table>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

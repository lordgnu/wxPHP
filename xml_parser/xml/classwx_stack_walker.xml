<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_stack_walker" kind="class" prot="public">
    <compoundname>wxStackWalker</compoundname>
    <includes local="no">wx/stackwalk.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_stack_walker_1ab4d72a86c8635c0b0dd7e956999d63fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxStackWalker::wxStackWalker</definition>
        <argsstring>(const char *argv0=NULL)</argsstring>
        <name>wxStackWalker</name>
        <param>
          <type>const char *</type>
          <declname>argv0</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Constructor does nothing, use <ref refid="classwx_stack_walker_1a0ffc3da14b164f25629484d654fd658e" kindref="member">Walk()</ref> to walk the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/stackwalk.h" line="55"/>
      </memberdef>
      <memberdef kind="function" id="classwx_stack_walker_1ad8e0dd864e72e8916c6c7fa03edfff6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxStackWalker::~wxStackWalker</definition>
        <argsstring>()</argsstring>
        <name>~wxStackWalker</name>
        <briefdescription>
<para>Destructor does nothing neither but should be virtual as this class is used as a base one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/stackwalk.h" line="61"/>
      </memberdef>
      <memberdef kind="function" id="classwx_stack_walker_1a0ffc3da14b164f25629484d654fd658e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStackWalker::Walk</definition>
        <argsstring>(size_t skip=1, size_t maxDepth=wxSTACKWALKER_MAX_DEPTH)</argsstring>
        <name>Walk</name>
        <param>
          <type>size_t</type>
          <declname>skip</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxDepth</declname>
          <defval>wxSTACKWALKER_MAX_DEPTH</defval>
        </param>
        <briefdescription>
<para>Enumerate stack frames from the current location, skipping the initial number of them (this can be useful when <ref refid="classwx_stack_walker_1a0ffc3da14b164f25629484d654fd658e" kindref="member">Walk()</ref> is called from some known location and you don&apos;t want to see the first few frames anyhow; also notice that <ref refid="classwx_stack_walker_1a0ffc3da14b164f25629484d654fd658e" kindref="member">Walk()</ref> frame itself is not included if skip = 1). </para>        </briefdescription>
        <detaileddescription>
<para>Up to <emphasis>maxDepth</emphasis> frames are walked from the innermost to the outermost one. It defaults to <ref refid="stackwalk_8h_1a3e64ee90baa6b1d271281ea5112e89cb" kindref="member">wxSTACKWALKER_MAX_DEPTH</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/stackwalk.h" line="72"/>
      </memberdef>
      <memberdef kind="function" id="classwx_stack_walker_1ab0070ec65cf71e26cbd9479b558d8769" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxStackWalker::WalkFromException</definition>
        <argsstring>(size_t maxDepth=wxSTACKWALKER_MAX_DEPTH)</argsstring>
        <name>WalkFromException</name>
        <param>
          <type>size_t</type>
          <declname>maxDepth</declname>
          <defval>wxSTACKWALKER_MAX_DEPTH</defval>
        </param>
        <briefdescription>
<para>Enumerate stack frames from the location of uncaught exception. </para>        </briefdescription>
        <detaileddescription>
<para>This method can only be called from <ref refid="classwx_app_console_1a927931aafbb7aec4debdfc02ee6f6f9d" kindref="member">wxApp::OnFatalException()</ref>.</para><para>Up to <emphasis>maxDepth</emphasis> frames are walked from the innermost to the outermost one. It defaults to <ref refid="stackwalk_8h_1a3e64ee90baa6b1d271281ea5112e89cb" kindref="member">wxSTACKWALKER_MAX_DEPTH</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/stackwalk.h" line="81"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classwx_stack_walker_1a3ba4c8fec5ecc40e9981fe9d21267e11" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void wxStackWalker::OnStackFrame</definition>
        <argsstring>(const wxStackFrame &amp;frame)=0</argsstring>
        <name>OnStackFrame</name>
        <param>
          <type>const <ref refid="classwx_stack_frame" kindref="compound">wxStackFrame</ref> &amp;</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
<para>This function must be overrided to process the given frame. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/stackwalk.h" line="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_stack_walker" kindref="compound">wxStackWalker</ref> allows an application to enumerate, or walk, the stack frames (the function callstack). </para>    </briefdescription>
    <detaileddescription>
<para>It is mostly useful in only two situations: inside <ref refid="classwx_app_console_1a927931aafbb7aec4debdfc02ee6f6f9d" kindref="member">wxApp::OnFatalException</ref> function to programmatically get the location of the crash and, in debug builds, in <ref refid="classwx_app_console_1a5f91d78bbfe3c9ef28e8e3c8fdf29989" kindref="member">wxApp::OnAssertFailure</ref> to report the caller of the failed assert.</para><para><ref refid="classwx_stack_walker" kindref="compound">wxStackWalker</ref> works by repeatedly calling the <ref refid="classwx_stack_walker_1a3ba4c8fec5ecc40e9981fe9d21267e11" kindref="member">wxStackWalker::OnStackFrame</ref> method for each frame in the stack, so to use it you must derive your own class from it and override this method.</para><para>This class will not return anything except raw stack frame addresses if the debug information is not available. Under Win32 this means that the PDB file matching the program being executed should be present. Note that if you use Microsoft Visual C++ compiler, you can create PDB files even for the programs built in release mode and it doesn&apos;t affect the program size (at least if you don&apos;t forget to add <computeroutput>/opt</computeroutput>:ref option which is suppressed by using <computeroutput>/debug</computeroutput> linker option by default but should be always enabled for release builds). Under Unix, you need to compile your program with debugging information (usually using <computeroutput>-g</computeroutput> compiler and linker options) to get the file and line numbers information, however function names should be available even without it. Of course, all this is only true if you build using a recent enough version of GNU libc which provides the <computeroutput>backtrace()</computeroutput> function needed to walk the stack.</para><para>See <ref refid="overview_debugging" kindref="compound">Debugging</ref> for how to make it available.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__debugging" kindref="compound">Debugging</ref></para><para><simplesect kind="see"><para><ref refid="classwx_stack_frame" kindref="compound">wxStackFrame</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/stackwalk.h" line="50" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/stackwalk.h" bodystart="49" bodyend="88"/>
    <listofallmembers>
      <member refid="classwx_stack_walker_1a3ba4c8fec5ecc40e9981fe9d21267e11" prot="protected" virt="pure-virtual"><scope>wxStackWalker</scope><name>OnStackFrame</name></member>
      <member refid="classwx_stack_walker_1a0ffc3da14b164f25629484d654fd658e" prot="public" virt="virtual"><scope>wxStackWalker</scope><name>Walk</name></member>
      <member refid="classwx_stack_walker_1ab0070ec65cf71e26cbd9479b558d8769" prot="public" virt="virtual"><scope>wxStackWalker</scope><name>WalkFromException</name></member>
      <member refid="classwx_stack_walker_1ab4d72a86c8635c0b0dd7e956999d63fa" prot="public" virt="non-virtual"><scope>wxStackWalker</scope><name>wxStackWalker</name></member>
      <member refid="classwx_stack_walker_1ad8e0dd864e72e8916c6c7fa03edfff6c" prot="public" virt="virtual"><scope>wxStackWalker</scope><name>~wxStackWalker</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

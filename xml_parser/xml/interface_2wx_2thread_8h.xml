<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="interface_2wx_2thread_8h" kind="file">
    <compoundname>thread.h</compoundname>
    <innerclass refid="classwx_condition" prot="public">wxCondition</innerclass>
    <innerclass refid="classwx_critical_section_locker" prot="public">wxCriticalSectionLocker</innerclass>
    <innerclass refid="classwx_thread_helper" prot="public">wxThreadHelper</innerclass>
    <innerclass refid="classwx_critical_section" prot="public">wxCriticalSection</innerclass>
    <innerclass refid="classwx_thread" prot="public">wxThread</innerclass>
    <innerclass refid="classwx_semaphore" prot="public">wxSemaphore</innerclass>
    <innerclass refid="classwx_mutex_locker" prot="public">wxMutexLocker</innerclass>
    <innerclass refid="classwx_mutex" prot="public">wxMutex</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__funcmacro__thread_1ga79ee915c6353e705958843a57a5148e2" prot="public" static="no">
        <name>wxCRIT_SECT_DECLARE</name>
        <param><defname>cs</defname></param>
        <briefdescription>
<para>This macro declares a (static) critical section object named <emphasis>cs</emphasis> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1679" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1gaa9f05a4361ea095939f90512ee52a831" prot="public" static="no">
        <name>wxCRIT_SECT_DECLARE_MEMBER</name>
        <param><defname>cs</defname></param>
        <briefdescription>
<para>This macro declares a critical section object named <emphasis>cs</emphasis> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>As it doesn&apos;t include the <computeroutput>static</computeroutput> keyword (unlike <ref refid="group__group__funcmacro__thread_1ga79ee915c6353e705958843a57a5148e2" kindref="member">wxCRIT_SECT_DECLARE()</ref>), it can be used to declare a class or struct member which explains its name.</para><para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1689" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1gae589848294c2cf63ad6895c4344755fe" prot="public" static="no">
        <name>wxCRIT_SECT_LOCKER</name>
        <param><defname>name</defname></param>
        <param><defname>cs</defname></param>
        <briefdescription>
<para>This macro creates a <ref refid="classwx_critical_section_locker" kindref="compound">wxCriticalSectionLocker</ref> named <emphasis>name</emphasis> and associated with the critical section <emphasis>cs</emphasis> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1698" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1ga3b0ab821a03aeecc1a7ddfcecb581355" prot="public" static="no">
        <name>wxCRITICAL_SECTION</name>
        <param><defname>name</defname></param>
        <briefdescription>
<para>This macro combines <ref refid="group__group__funcmacro__thread_1ga79ee915c6353e705958843a57a5148e2" kindref="member">wxCRIT_SECT_DECLARE()</ref> and <ref refid="group__group__funcmacro__thread_1gae589848294c2cf63ad6895c4344755fe" kindref="member">wxCRIT_SECT_LOCKER()</ref>: it creates a static critical section object and also the lock object associated with it. </para>        </briefdescription>
        <detaileddescription>
<para>Because of this, it can be only used inside a function, not at global scope. For example:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IncCount()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__thread_1ga3b0ab821a03aeecc1a7ddfcecb581355" kindref="member" tooltip="This macro combines wxCRIT_SECT_DECLARE() and wxCRIT_SECT_LOCKER(): it creates a static critical sect...">wxCRITICAL_SECTION</ref>(counter);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>++s_counter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Note that this example assumes that the function is called the first time from the main thread so that the critical section object is initialized correctly by the time other threads start calling it, if this is not the case this approach can <bold>not</bold> be used and the critical section must be made a global instead.</para><para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1725" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1gab5a243025a42da8c351a2df8519f4208" prot="public" static="no">
        <name>wxLEAVE_CRIT_SECT</name>
        <param><defname>critical_section</defname></param>
        <briefdescription>
<para>This macro is equivalent to <ref refid="classwx_critical_section_1a9710ab7240b29a653fd9233c12aadba6" kindref="member">critical_section.Leave()</ref> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1734" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1ga53ce988bc3201b82b77d4779610be608" prot="public" static="no">
        <name>wxENTER_CRIT_SECT</name>
        <param><defname>critical_section</defname></param>
        <briefdescription>
<para>This macro is equivalent to <ref refid="classwx_critical_section_1afa80c7cb306d72884ebcc4e60ea61d39" kindref="member">critical_section.Enter()</ref> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1743" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1743" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="interface_2wx_2thread_8h_1af963862ae0e1bd5cafe4039dccbbd81e" prot="public" static="no">
        <name>wxCondError</name>
        <enumvalue id="interface_2wx_2thread_8h_1af963862ae0e1bd5cafe4039dccbbd81ea3f408e6093bb067917fb31ad567ad8e5" prot="public">
          <name>wxCOND_NO_ERROR</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1af963862ae0e1bd5cafe4039dccbbd81eaea029037c17a09cb31bd9a7914987db3" prot="public">
          <name>wxCOND_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1af963862ae0e1bd5cafe4039dccbbd81eab9eb7c934aa2bd6ebeb45e05ecf05a8f" prot="public">
          <name>wxCOND_TIMEOUT</name>
          <briefdescription>
<para>WaitTimeout() has timed out. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1af963862ae0e1bd5cafe4039dccbbd81ea33583de6fedbf35e4f81f33eda2555d8" prot="public">
          <name>wxCOND_MISC_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>See <ref refid="classwx_condition" kindref="compound">wxCondition</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="12" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="11" bodyend="17"/>
      </memberdef>
      <memberdef kind="enum" id="interface_2wx_2thread_8h_1ad32912ed5726dfd2d4c24bdafbedac2e" prot="public" static="no">
        <name>wxCriticalSectionType</name>
        <enumvalue id="interface_2wx_2thread_8h_1ad32912ed5726dfd2d4c24bdafbedac2eaedf8cd97bb2d9cf66c6fa04c83ef15ce" prot="public">
          <name>wxCRITSEC_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1ad32912ed5726dfd2d4c24bdafbedac2eac1788bb105b9c670c4a47d733e88f103" prot="public">
          <name>wxCRITSEC_NON_RECURSIVE</name>
          <briefdescription>
<para>Recursive critical section under both Windows and Unix. </para>          </briefdescription>
          <detaileddescription>
<para>Non-recursive critical section under Unix, recursive under Windows </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible critical section types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="526" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="525" bodyend="532"/>
      </memberdef>
      <memberdef kind="enum" id="interface_2wx_2thread_8h_1a180bd0d42ba227657c3ad00194371a87" prot="public" static="no">
        <name>wxThreadWait</name>
        <enumvalue id="interface_2wx_2thread_8h_1a180bd0d42ba227657c3ad00194371a87a47788167d370686ccade7904df7296f0" prot="public">
          <name>wxTHREAD_WAIT_BLOCK</name>
          <briefdescription>
<para>No events are processed while waiting. </para>          </briefdescription>
          <detaileddescription>
<para>This is the default under all platforms except for wxMSW. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a180bd0d42ba227657c3ad00194371a87ae64c413df2e8695de8ac0fd0c49917a5" prot="public">
          <name>wxTHREAD_WAIT_YIELD</name>
          <briefdescription>
<para>Yield for event dispatching while waiting. </para>          </briefdescription>
          <detaileddescription>
<para>This flag is dangerous as it exposes the program using it to unexpected reentrancies in the same way as calling <ref refid="group__group__funcmacro__appinitterm_1gac386c89a04e364afc07edce6d848c27a" kindref="member">wxYield()</ref> function does so you are strongly advised to avoid its use and not wait for the thread termination from the main (GUI) thread at all to avoid making your application unresponsive.</para><para>Also notice that this flag is not portable as it is only implemented in wxMSW and simply ignored under the other platforms. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a180bd0d42ba227657c3ad00194371a87abe226048f86a69474267b33bb293ebe9" prot="public">
          <name>wxTHREAD_WAIT_DEFAULT</name>
          <initializer> wxTHREAD_WAIT_YIELD</initializer>
          <briefdescription>
<para>Default wait mode for <ref refid="classwx_thread_1a62ee778033013d3a4754b71b8cf2902e" kindref="member">wxThread::Wait()</ref> and <ref refid="classwx_thread_1a66796042bf5f3eb33a0ad3db85f686d4" kindref="member">wxThread::Delete()</ref>. </para>          </briefdescription>
          <detaileddescription>
<para>For compatibility reasons, the default wait mode is currently wxTHREAD_WAIT_YIELD if WXWIN_COMPATIBILITY_2_8 is defined (and it is by default). However, as mentioned above, you&apos;re strongly encouraged to not use wxTHREAD_WAIT_YIELD and pass wxTHREAD_WAIT_BLOCK to <ref refid="classwx_thread" kindref="compound">wxThread</ref> method explicitly. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The possible thread wait types. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="608" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="607" bodyend="640"/>
      </memberdef>
      <memberdef kind="enum" id="interface_2wx_2thread_8h_1a0dc9a167e8d084946512da99b37b5fd0" prot="public" static="no">
        <name>wxThreadKind</name>
        <enumvalue id="interface_2wx_2thread_8h_1a0dc9a167e8d084946512da99b37b5fd0acd9af5dbbc12a95684ab6e7be16e30c9" prot="public">
          <name>wxTHREAD_DETACHED</name>
          <briefdescription>
<para>Detached thread. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a0dc9a167e8d084946512da99b37b5fd0ab5246cc8dc6eeb20bc69e4790e7b00a4" prot="public">
          <name>wxTHREAD_JOINABLE</name>
          <briefdescription>
<para>Joinable thread. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The possible thread kinds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="646" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="645" bodyend="652"/>
      </memberdef>
      <memberdef kind="enum" id="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2" prot="public" static="no">
        <name>wxThreadError</name>
        <enumvalue id="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2ad1525fe128b4989cb43a7e8112ac1b13" prot="public">
          <name>wxTHREAD_NO_ERROR</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>No error. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2a9bffae8a62f6b5dc66fb72a9c5d97309" prot="public">
          <name>wxTHREAD_NO_RESOURCE</name>
          <briefdescription>
<para>No resource left to create a new thread. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2a01cebf182c90eeb82ae42c5ce4ca85f9" prot="public">
          <name>wxTHREAD_RUNNING</name>
          <briefdescription>
<para>The thread is already running. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2a1f44f7bccdc4ab76ee425005ceb0a4a7" prot="public">
          <name>wxTHREAD_NOT_RUNNING</name>
          <briefdescription>
<para>The thread isn&apos;t running. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2a0722dd2980200207b2937ab837001954" prot="public">
          <name>wxTHREAD_KILLED</name>
          <briefdescription>
<para>Thread we waited for had to be killed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2ad96179e392dc7925b7de2e53759b6b57" prot="public">
          <name>wxTHREAD_MISC_ERROR</name>
          <briefdescription>
<para>Some other error. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The possible thread errors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="658" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="657" bodyend="676"/>
      </memberdef>
      <memberdef kind="enum" id="interface_2wx_2thread_8h_1a96a58e29e8dbf2b5bdeb775cba46556e" prot="public" static="no">
        <name>@34</name>
        <enumvalue id="interface_2wx_2thread_8h_1a96a58e29e8dbf2b5bdeb775cba46556eaea44fc3114b0a70adba408c33f0fbdb8" prot="public">
          <name>WXTHREAD_MIN_PRIORITY</name>
          <initializer> 0u</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a96a58e29e8dbf2b5bdeb775cba46556ea28fc72e65a5bec39136189f51654b835" prot="public">
          <name>WXTHREAD_DEFAULT_PRIORITY</name>
          <initializer> 50u</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a96a58e29e8dbf2b5bdeb775cba46556ead28b90e80e00f10dc6ec1bc335bd567d" prot="public">
          <name>WXTHREAD_MAX_PRIORITY</name>
          <initializer> 100u</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines the interval of priority. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="682" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="681" bodyend="686"/>
      </memberdef>
      <memberdef kind="enum" id="interface_2wx_2thread_8h_1a47100c8fbaa57b192696bec84197398e" prot="public" static="no">
        <name>wxSemaError</name>
        <enumvalue id="interface_2wx_2thread_8h_1a47100c8fbaa57b192696bec84197398ead14799006dcfc6454f98320ccb053af8" prot="public">
          <name>wxSEMA_NO_ERROR</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a47100c8fbaa57b192696bec84197398eafa84de21aa52384b9f23f3aedbdfe140" prot="public">
          <name>wxSEMA_INVALID</name>
          <briefdescription>
<para>semaphore hasn&apos;t been initialized successfully </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a47100c8fbaa57b192696bec84197398ea5dec886c9fc53e0d757f2364dd555c40" prot="public">
          <name>wxSEMA_BUSY</name>
          <briefdescription>
<para>returned by TryWait() if Wait() would block </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a47100c8fbaa57b192696bec84197398ea4b65f253d3e2f8f949e64eb907a88253" prot="public">
          <name>wxSEMA_TIMEOUT</name>
          <briefdescription>
<para>returned by WaitTimeout() </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a47100c8fbaa57b192696bec84197398ea2c8c6c86f38e796c6f701fbcdbee6f02" prot="public">
          <name>wxSEMA_OVERFLOW</name>
          <briefdescription>
<para>Post() would increase counter past the max. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a47100c8fbaa57b192696bec84197398ea12d9fdd5fa2606095ac84e4349669286" prot="public">
          <name>wxSEMA_MISC_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>See <ref refid="classwx_semaphore" kindref="compound">wxSemaphore</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1374" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1373" bodyend="1381"/>
      </memberdef>
      <memberdef kind="enum" id="interface_2wx_2thread_8h_1a20ab09ca102b0bef60c0f8eb9aad3ff3" prot="public" static="no">
        <name>wxMutexType</name>
        <enumvalue id="interface_2wx_2thread_8h_1a20ab09ca102b0bef60c0f8eb9aad3ff3a7ca355fef99b37a12554e4fd425b072b" prot="public">
          <name>wxMUTEX_DEFAULT</name>
          <briefdescription>
<para>Normal non-recursive mutex: try to always use this one. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1a20ab09ca102b0bef60c0f8eb9aad3ff3af22f0c410dafde4907e24840f4f2fa05" prot="public">
          <name>wxMUTEX_RECURSIVE</name>
          <briefdescription>
<para>Recursive mutex: don&apos;t use these ones with <ref refid="classwx_condition" kindref="compound">wxCondition</ref>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The possible <ref refid="classwx_mutex" kindref="compound">wxMutex</ref> kinds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1512" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1511" bodyend="1518"/>
      </memberdef>
      <memberdef kind="enum" id="interface_2wx_2thread_8h_1ac8c1ee75d2a2da3be8eabc629f71c1a7" prot="public" static="no">
        <name>wxMutexError</name>
        <enumvalue id="interface_2wx_2thread_8h_1ac8c1ee75d2a2da3be8eabc629f71c1a7add263dd920d0da6a4ffd0fa248728468" prot="public">
          <name>wxMUTEX_NO_ERROR</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>The operation completed successfully. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1ac8c1ee75d2a2da3be8eabc629f71c1a7a80a36caa48aaa89ddbceaf22449b3922" prot="public">
          <name>wxMUTEX_INVALID</name>
          <briefdescription>
<para>The mutex hasn&apos;t been initialized. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1ac8c1ee75d2a2da3be8eabc629f71c1a7ad907bd2150662ffff39461497a618ac1" prot="public">
          <name>wxMUTEX_DEAD_LOCK</name>
          <briefdescription>
<para>The mutex is already locked by the calling thread. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1ac8c1ee75d2a2da3be8eabc629f71c1a7a6c0cbbfadaa82ae13f807926ce6a3428" prot="public">
          <name>wxMUTEX_BUSY</name>
          <briefdescription>
<para>The mutex is already locked by another thread. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1ac8c1ee75d2a2da3be8eabc629f71c1a7ac82cd09ac1371016950889746334181f" prot="public">
          <name>wxMUTEX_UNLOCKED</name>
          <briefdescription>
<para>An attempt to unlock a mutex which is not locked. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1ac8c1ee75d2a2da3be8eabc629f71c1a7a3f66d47b6c28bf87d29671408ade2c47" prot="public">
          <name>wxMUTEX_TIMEOUT</name>
          <briefdescription>
<para><ref refid="classwx_mutex_1a1e22609b14aefe8a248b2e48bca51415" kindref="member">wxMutex::LockTimeout()</ref> has timed out. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interface_2wx_2thread_8h_1ac8c1ee75d2a2da3be8eabc629f71c1a7a8962e295ee5fd5f2db1dc140574d4f5d" prot="public">
          <name>wxMUTEX_MISC_ERROR</name>
          <briefdescription>
<para>Any other error. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The possible <ref refid="classwx_mutex" kindref="compound">wxMutex</ref> errors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1525" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1524" bodyend="1546"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__funcmacro__thread_1ga11517a2eeeb6367d9e0d705fa29dd97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxIsMainThread</definition>
        <argsstring>()</argsstring>
        <name>wxIsMainThread</name>
        <briefdescription>
<para>Returns true if this thread is the main one. </para>        </briefdescription>
        <detaileddescription>
<para>Always returns true if <computeroutput>wxUSE_THREADS</computeroutput> is 0.</para><para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1751"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__thread_1ga6671c1599fd4ccf6a7c7bb90b2304709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxMutexGuiEnter</definition>
        <argsstring>()</argsstring>
        <name>wxMutexGuiEnter</name>
        <briefdescription>
<para>This function must be called when any thread other than the main GUI thread wants to get access to the GUI library. </para>        </briefdescription>
        <detaileddescription>
<para>This function will block the execution of the calling thread until the main thread (or any other thread holding the main GUI lock) leaves the GUI library and no other thread will enter the GUI library until the calling thread calls <ref refid="group__group__funcmacro__thread_1gaddfdb2956953480a379d998ea7ced5b5" kindref="member">wxMutexGuiLeave()</ref>.</para><para>Typically, these functions are used like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyThread::Foo(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>doing<sp/>any<sp/>GUI<sp/>calls<sp/>we<sp/>must<sp/>ensure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>thread<sp/>is<sp/>the<sp/>only<sp/>one<sp/>doing<sp/>it!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__thread_1ga6671c1599fd4ccf6a7c7bb90b2304709" kindref="member" tooltip="This function must be called when any thread other than the main GUI thread wants to get access to th...">wxMutexGuiEnter</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>GUI<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my_window-&gt;DrawSomething();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__thread_1gaddfdb2956953480a379d998ea7ced5b5" kindref="member" tooltip="This function is only defined on platforms which support preemptive threads.">wxMutexGuiLeave</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>This function is only defined on platforms which support preemptive threads and only works under some ports (wxMSW currently).</para><para><simplesect kind="note"><para>Under GTK, no creation of top-level windows is allowed in any thread but the main one.</para></simplesect>
Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1787"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__thread_1gaddfdb2956953480a379d998ea7ced5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxMutexGuiLeave</definition>
        <argsstring>()</argsstring>
        <name>wxMutexGuiLeave</name>
        <briefdescription>
<para>This function is only defined on platforms which support preemptive threads. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__group__funcmacro__thread_1ga6671c1599fd4ccf6a7c7bb90b2304709" kindref="member">wxMutexGuiEnter()</ref></para></simplesect>
Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1797"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h"/>
  </compounddef>
</doxygen>

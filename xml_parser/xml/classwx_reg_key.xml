<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_reg_key" kind="class" prot="public">
    <compoundname>wxRegKey</compoundname>
    <includes local="no">wx/msw/registry.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classwx_reg_key_1a10e685bc8b2e08cde20cb56f9623182d" prot="public" static="no">
        <name>AccessMode</name>
        <enumvalue id="classwx_reg_key_1a10e685bc8b2e08cde20cb56f9623182da883aac4bfd536335487f496e3541408a" prot="public">
          <name>Read</name>
          <briefdescription>
<para>Read-only. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a10e685bc8b2e08cde20cb56f9623182da7edf59adb9ff7ead05ecd96192487a21" prot="public">
          <name>Write</name>
          <briefdescription>
<para>Read and Write. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Access modes for <ref refid="classwx_reg_key" kindref="compound">wxRegKey</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="100" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5b" prot="public" static="no">
        <name>StdKey</name>
        <enumvalue id="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5bacfa4deaac8001a569ccab4457ddf8a85" prot="public">
          <name>HKCR</name>
          <briefdescription>
<para>HKEY_CLASSES_ROOT. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5bad23779422ec95850dfcdc4e38de9de6a" prot="public">
          <name>HKCU</name>
          <briefdescription>
<para>HKEY_CURRENT_USER. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5ba992c16a969ad045c3fd146853d31ffe0" prot="public">
          <name>HKLM</name>
          <briefdescription>
<para>HKEY_LOCAL_MACHINE. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5ba8861998c3c30be02578320b1b885df76" prot="public">
          <name>HKUSR</name>
          <briefdescription>
<para>HKEY_USERS. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5baca3b3b4b6e2b20de9d9e576f34ae315d" prot="public">
          <name>HKPD</name>
          <briefdescription>
<para>HKEY_PERFORMANCE_DATA (Windows NT and 2K only) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5ba1742b9de7b1e5c3265f27256f99ca525" prot="public">
          <name>HKCC</name>
          <briefdescription>
<para>HKEY_CURRENT_CONFIG. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5bab3ed4c9e7c3ed7446a7eaf013a14081f" prot="public">
          <name>HKDD</name>
          <briefdescription>
<para>HKEY_DYN_DATA (Windows 95 and 98 only) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5ba15897558d95fa9b9beab75ea88612cbe" prot="public">
          <name>HKMAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The standard registry key enumerator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="109" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" bodystart="108" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448ae" prot="public" static="no">
        <name>ValueType</name>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea49efeb70b7042259a6aef6086131dafb" prot="public">
          <name>Type_None</name>
          <briefdescription>
<para>No value type. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea71e34e7ea0dd2326613f48db8d086c16" prot="public">
          <name>Type_String</name>
          <briefdescription>
<para>Unicode null-terminated string. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeacc5cd22316a3273670261ed85bf9d72e" prot="public">
          <name>Type_Expand_String</name>
          <briefdescription>
<para>Unicode null-terminated string (with environment variable references) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea74fb86bd34628fe6c23cfaa7b547b79a" prot="public">
          <name>Type_Binary</name>
          <briefdescription>
<para>Free form binary. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeacb0782c3f7b99336f78371753970cf6f" prot="public">
          <name>Type_Dword</name>
          <briefdescription>
<para>32-bit number </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeab87e643f6dbb322dc67364f2d25e8d51" prot="public">
          <name>Type_Dword_little_endian</name>
          <briefdescription>
<para>32-bit number (same as Type_Dword) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeae27492abe54a132c0899fc2110758207" prot="public">
          <name>Type_Dword_big_endian</name>
          <briefdescription>
<para>32-bit number </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeacc7e8383cc247869748a32caa8955f6c" prot="public">
          <name>Type_Link</name>
          <briefdescription>
<para>Symbolic Link (Unicode) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea5c2c7552289566cf5fa2f23b9c619cff" prot="public">
          <name>Type_Multi_String</name>
          <briefdescription>
<para>Multiple Unicode strings. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea89ec527597463d6dddeaff9297a2ea0e" prot="public">
          <name>Type_Resource_list</name>
          <briefdescription>
<para>Resource list in the resource map. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeab2319e2d3f1021f2bb44b2c7cb9ed505" prot="public">
          <name>Type_Full_resource_descriptor</name>
          <briefdescription>
<para>Resource list in the hardware description. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea47a10b01b23342d005164295bb4a8935" prot="public">
          <name>Type_Resource_requirements_list</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The value type enumerator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="124" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" bodystart="123" bodyend="138"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25" prot="public" static="no">
        <name>WOW64ViewMode</name>
        <enumvalue id="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25aded20ed01113e4ccd990802823511178" prot="public">
          <name>WOW64ViewMode_Default</name>
          <briefdescription>
<para>Uses 32-bit registry for 32-bit applications and 64-bit registry for 64-bit ones. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25aabb54e8155d12871b7734db6104b074b" prot="public">
          <name>WOW64ViewMode_32</name>
          <briefdescription>
<para>Can be used in 64-bit apps to access the 32-bit registry, has no effect (i.e. </para>          </briefdescription>
          <detaileddescription>
<para>treated as default) in 32-bit apps. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25a78af7537171e9a63e6a44ad7b4498734" prot="public">
          <name>WOW64ViewMode_64</name>
          <briefdescription>
<para>Can be used in 32-bit apps to access the 64-bit registry, has no effect (i.e. </para>          </briefdescription>
          <detaileddescription>
<para>treated as default) in 64-bit apps. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Used to determine how the registry will be viewed, either as 32-bit or 64-bit. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="147" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" bodystart="146" bodyend="165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_reg_key_1a6c11944bbac62dd88825e77832fe0540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxRegKey::wxRegKey</definition>
        <argsstring>(WOW64ViewMode viewMode=WOW64ViewMode_Default)</argsstring>
        <name>wxRegKey</name>
        <param>
          <type><ref refid="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25" kindref="member">WOW64ViewMode</ref></type>
          <declname>viewMode</declname>
          <defval>WOW64ViewMode_Default</defval>
        </param>
        <briefdescription>
<para>Default constructor, initializes to <computeroutput>HKEY_CLASSES_ROOT</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>viewMode</emphasis> parameter is new since wxWidgets 2.9.2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="75"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a19174e100d25186fbe7ef1c6cabd5f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxRegKey::wxRegKey</definition>
        <argsstring>(const wxString &amp;strKey, WOW64ViewMode viewMode=WOW64ViewMode_Default)</argsstring>
        <name>wxRegKey</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <param>
          <type><ref refid="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25" kindref="member">WOW64ViewMode</ref></type>
          <declname>viewMode</declname>
          <defval>WOW64ViewMode_Default</defval>
        </param>
        <briefdescription>
<para>The constructor to set the full name of the key. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>viewMode</emphasis> parameter is new since wxWidgets 2.9.2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="82"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1aa55e66f45518852805625ff7e8536e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxRegKey::wxRegKey</definition>
        <argsstring>(StdKey keyParent, const wxString &amp;strKey, WOW64ViewMode viewMode=WOW64ViewMode_Default)</argsstring>
        <name>wxRegKey</name>
        <param>
          <type><ref refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5b" kindref="member">StdKey</ref></type>
          <declname>keyParent</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <param>
          <type><ref refid="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25" kindref="member">WOW64ViewMode</ref></type>
          <declname>viewMode</declname>
          <defval>WOW64ViewMode_Default</defval>
        </param>
        <briefdescription>
<para>The constructor to set the full name of the key using one of the standard keys, that is, HKCR, HKCU, HKLM, HKUSR, HKPD, HKCC or HKDD. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>viewMode</emphasis> parameter is new since wxWidgets 2.9.2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="89"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1ae0d1d90d6d998bd62fafb6a8d5931647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxRegKey::wxRegKey</definition>
        <argsstring>(const wxRegKey &amp;keyParent, const wxString &amp;strKey)</argsstring>
        <name>wxRegKey</name>
        <param>
          <type>const <ref refid="classwx_reg_key" kindref="compound">wxRegKey</ref> &amp;</type>
          <declname>keyParent</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <briefdescription>
<para>The constructor to set the full name of the key under a previously created parent. </para>        </briefdescription>
        <detaileddescription>
<para>The registry view is inherited from the parent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="94"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a312d2f0b1a2c7f5c0255ad3c31bb024d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxRegKey::Close</definition>
        <argsstring>()</argsstring>
        <name>Close</name>
        <briefdescription>
<para>Closes the key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="170"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1adf91359cd740646a987c28de6fed1f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::Copy</definition>
        <argsstring>(const wxString &amp;szNewName)</argsstring>
        <name>Copy</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szNewName</declname>
        </param>
        <briefdescription>
<para>Copy the entire contents of the key recursively to another location using the name. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="176"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a6214549194a56e78c64894d72b369044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::Copy</definition>
        <argsstring>(wxRegKey &amp;keyDst)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classwx_reg_key" kindref="compound">wxRegKey</ref> &amp;</type>
          <declname>keyDst</declname>
        </param>
        <briefdescription>
<para>Copy the entire contents of the key recursively to another location using the key. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="181"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a3d49c254202ddd95c09b62a1085e785b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::CopyValue</definition>
        <argsstring>(const wxString &amp;szValue, wxRegKey &amp;keyDst, const wxString &amp;szNewName=wxEmptyString)</argsstring>
        <name>CopyValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <param>
          <type><ref refid="classwx_reg_key" kindref="compound">wxRegKey</ref> &amp;</type>
          <declname>keyDst</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szNewName</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <briefdescription>
<para>Copy the value to another key, possibly changing its name. </para>        </briefdescription>
        <detaileddescription>
<para>By default it will remain the same. Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="188"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1afb4737a6c170dcb8531ec62d858f5e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::Create</definition>
        <argsstring>(bool bOkIfExists=true)</argsstring>
        <name>Create</name>
        <param>
          <type>bool</type>
          <declname>bOkIfExists</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Creates the key. </para>        </briefdescription>
        <detaileddescription>
<para>Will fail if the key already exists and <emphasis>bOkIfExists</emphasis> is false. Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="193"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1aa6a7cac55a2265c0c30ed2cd64d378ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxRegKey::DeleteKey</definition>
        <argsstring>(const wxString &amp;szKey)</argsstring>
        <name>DeleteKey</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szKey</declname>
        </param>
        <briefdescription>
<para>Deletes the subkey with all its subkeys and values recursively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="198"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a50441e0f6e031b2745d25de9a0aac520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxRegKey::DeleteSelf</definition>
        <argsstring>()</argsstring>
        <name>DeleteSelf</name>
        <briefdescription>
<para>Deletes this key and all its subkeys and values recursively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="203"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1ab6f2ecf7e1a8a65e93eb16379ff88e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxRegKey::DeleteValue</definition>
        <argsstring>(const wxString &amp;szKey)</argsstring>
        <name>DeleteValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szKey</declname>
        </param>
        <briefdescription>
<para>Deletes the named value or use an empty string argument to remove the default value of the key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="209"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a0906e47c998da3bb435bdaef650d2872" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::Exists</definition>
        <argsstring>() const </argsstring>
        <name>Exists</name>
        <briefdescription>
<para>Returns true if the key exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="214"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1aadbb20792adf347cef9dd5ca331bad63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::Export</definition>
        <argsstring>(const wxString &amp;filename) const </argsstring>
        <name>Export</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Write the contents of this key and all its subkeys to the given file. </para>        </briefdescription>
        <detaileddescription>
<para>(The file will not be overwritten; it&apos;s an error if it already exists.) Note that we export the key in REGEDIT4 format, not RegSaveKey() binary format nor the newer REGEDIT5. Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="222"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a2b77e7f711e4d76e1898073e3b9c8df1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::Export</definition>
        <argsstring>(wxOutputStream &amp;ostr) const </argsstring>
        <name>Export</name>
        <param>
          <type><ref refid="classwx_output_stream" kindref="compound">wxOutputStream</ref> &amp;</type>
          <declname>ostr</declname>
        </param>
        <briefdescription>
<para>Write the contents of this key and all its subkeys to the opened stream. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="227"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a2fd4a5275642fa4ab5b6abf2a4d913b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::GetFirstKey</definition>
        <argsstring>(wxString &amp;strKeyName, long &amp;lIndex)</argsstring>
        <name>GetFirstKey</name>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strKeyName</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>lIndex</declname>
        </param>
        <briefdescription>
<para>Gets the first key. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="232"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a630083f901d76e90762eafb466503f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::GetFirstValue</definition>
        <argsstring>(wxString &amp;strValueName, long &amp;lIndex)</argsstring>
        <name>GetFirstValue</name>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strValueName</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>lIndex</declname>
        </param>
        <briefdescription>
<para>Gets the first value of this key. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="237"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1ac1ac5f10a317eb671e86e71211999492" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::GetKeyInfo</definition>
        <argsstring>(size_t *pnSubKeys, size_t *pnMaxKeyLen, size_t *pnValues, size_t *pnMaxValueLen) const </argsstring>
        <name>GetKeyInfo</name>
        <param>
          <type>size_t *</type>
          <declname>pnSubKeys</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pnMaxKeyLen</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pnValues</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pnMaxValueLen</declname>
        </param>
        <briefdescription>
<para>Gets information about the key. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pnSubKeys</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of subkeys. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pnMaxKeyLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum length of the subkey name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pnValues</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pnMaxValueLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum length of a value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="252"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1afd4495f50319e49b64e8883d70eb38af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxRegKey::GetName</definition>
        <argsstring>(bool bShortPrefix=true) const </argsstring>
        <name>GetName</name>
        <param>
          <type>bool</type>
          <declname>bShortPrefix</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Gets the name of the registry key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="257"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a3a30ff77a2a47e38d637660bfc3a4435" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25" kindref="member">WOW64ViewMode</ref></type>
        <definition>WOW64ViewMode wxRegKey::GetView</definition>
        <argsstring>() const </argsstring>
        <name>GetView</name>
        <briefdescription>
<para>Retrieves the registry view used by this key. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.2</para></simplesect>
<simplesect kind="return"><para>The registry view given at the object&apos;s construction. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="266" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a09c4e4adcfaa4fb351655ffe9fea84eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::GetNextKey</definition>
        <argsstring>(wxString &amp;strKeyName, long &amp;lIndex) const </argsstring>
        <name>GetNextKey</name>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strKeyName</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>lIndex</declname>
        </param>
        <briefdescription>
<para>Gets the next key. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="271"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a2472b182be142a4380faa42c9b13fdbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::GetNextValue</definition>
        <argsstring>(wxString &amp;strValueName, long &amp;lIndex) const </argsstring>
        <name>GetNextValue</name>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strValueName</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>lIndex</declname>
        </param>
        <briefdescription>
<para>Gets the next key value for this key. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="276"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a806826a8afab140dfcb0b8ca9a46b869" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448ae" kindref="member">ValueType</ref></type>
        <definition>ValueType wxRegKey::GetValueType</definition>
        <argsstring>(const wxString &amp;szValue) const </argsstring>
        <name>GetValueType</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <briefdescription>
<para>Gets the value type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="281"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1ae9ee885dd29cb661023eb2e2f1bdc071" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::HasSubKey</definition>
        <argsstring>(const wxString &amp;szKey) const </argsstring>
        <name>HasSubKey</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szKey</declname>
        </param>
        <briefdescription>
<para>Returns true if given subkey exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="286"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a113d48a6b154a10005e8fc66aee68e5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::HasSubkeys</definition>
        <argsstring>() const </argsstring>
        <name>HasSubkeys</name>
        <briefdescription>
<para>Returns true if any subkeys exist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="291"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a40a961cfd8d4f6e89e8f287a9e415546" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::HasValue</definition>
        <argsstring>(const wxString &amp;szValue) const </argsstring>
        <name>HasValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <briefdescription>
<para>Returns true if the value exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="296"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1ac64f86ae0be0d3a171adbb39c0bed4c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::HasValues</definition>
        <argsstring>() const </argsstring>
        <name>HasValues</name>
        <briefdescription>
<para>Returns true if any values exist. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="301"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a27ce237e89b919c716de3bef7b33d511" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::IsEmpty</definition>
        <argsstring>() const </argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns true if this key is empty, nothing under this key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="306"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1aa7e2acc6bb64794dd3b8404999575be5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::IsNumericValue</definition>
        <argsstring>(const wxString &amp;szValue) const </argsstring>
        <name>IsNumericValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <briefdescription>
<para>Returns true if the value contains a number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="311"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1ae444b007cb2bc68e993ec1461596e01c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::IsOpened</definition>
        <argsstring>() const </argsstring>
        <name>IsOpened</name>
        <briefdescription>
<para>Returns true if the key is opened. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="316"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a40c5e3c3e24c12063824200882fff4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::Open</definition>
        <argsstring>(AccessMode mode=Write)</argsstring>
        <name>Open</name>
        <param>
          <type><ref refid="classwx_reg_key_1a10e685bc8b2e08cde20cb56f9623182d" kindref="member">AccessMode</ref></type>
          <declname>mode</declname>
          <defval>Write</defval>
        </param>
        <briefdescription>
<para>Explicitly opens the key. </para>        </briefdescription>
        <detaileddescription>
<para>This method also allows the key to be opened in read-only mode by passing <ref refid="classwx_reg_key_1a10e685bc8b2e08cde20cb56f9623182da883aac4bfd536335487f496e3541408a" kindref="member">wxRegKey::Read</ref> instead of default <ref refid="classwx_reg_key_1a10e685bc8b2e08cde20cb56f9623182da7edf59adb9ff7ead05ecd96192487a21" kindref="member">wxRegKey::Write</ref> parameter. Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="323"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a805f399e3a9ea5e6b835cbbb767cd009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_reg_key" kindref="compound">wxRegKey</ref> &amp;</type>
        <definition>wxRegKey&amp; wxRegKey::operator=</definition>
        <argsstring>(const wxString &amp;strValue)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strValue</declname>
        </param>
        <briefdescription>
<para>Assignment operator to set the default value of the key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="328"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a498487f0546354587875fbd7cfb47ec4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxRegKey::QueryDefaultValue</definition>
        <argsstring>() const </argsstring>
        <name>QueryDefaultValue</name>
        <briefdescription>
<para>Return the default value of the key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="333"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a789d3546decb64839fdee5e5df6aff8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::QueryRawValue</definition>
        <argsstring>(const wxString &amp;szValue, wxString &amp;strValue) const </argsstring>
        <name>QueryRawValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strValue</declname>
        </param>
        <briefdescription>
<para>Retrieves the raw string value. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. An empty <emphasis>szValue</emphasis> queries the default/unnamed key value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="339"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1ac99a8d456b47f96675d860547ae164b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::QueryValue</definition>
        <argsstring>(const wxString &amp;szValue, wxString &amp;strValue, bool raw) const </argsstring>
        <name>QueryValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strValue</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Retrieves the raw or expanded string value. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. An empty <emphasis>szValue</emphasis> queries the default/unnamed key value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="345"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a1e3e238d81f3ed0e58ddae42d0603a63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::QueryValue</definition>
        <argsstring>(const wxString &amp;szValue, long *plValue) const </argsstring>
        <name>QueryValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>plValue</declname>
        </param>
        <briefdescription>
<para>Retrieves the numeric value. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. An empty <emphasis>szValue</emphasis> queries the default/unnamed key value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="351"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1acd7c953cb0c78cee2330a7c5ecb9d5fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::QueryValue</definition>
        <argsstring>(const wxString &amp;szValue, wxMemoryBuffer &amp;buf) const </argsstring>
        <name>QueryValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <param>
          <type><ref refid="classwx_memory_buffer" kindref="compound">wxMemoryBuffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Retrieves the binary structure. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. An empty <emphasis>szValue</emphasis> queries the default/unnamed key value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="357"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a38e51ebf1385c9033ebd3a7bea6d6986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::Rename</definition>
        <argsstring>(const wxString &amp;szNewName)</argsstring>
        <name>Rename</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szNewName</declname>
        </param>
        <briefdescription>
<para>Renames the key. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="362"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a1c90a9935936ef22bb07da98ad6f63d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::RenameValue</definition>
        <argsstring>(const wxString &amp;szValueOld, const wxString &amp;szValueNew)</argsstring>
        <name>RenameValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValueOld</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValueNew</declname>
        </param>
        <briefdescription>
<para>Renames a value. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="368"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a3da9da0a4d05099e401c8a6dbe00d2f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxRegKey::ReserveMemoryForName</definition>
        <argsstring>(size_t bytes)</argsstring>
        <name>ReserveMemoryForName</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Preallocate some memory for the name. </para>        </briefdescription>
        <detaileddescription>
<para>For <ref refid="classwx_reg_config" kindref="compound">wxRegConfig</ref> usage only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="373"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1ae23e53cadf2f45b28edf682fb80c084a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxRegKey::SetHkey</definition>
        <argsstring>(WXHKEY hKey)</argsstring>
        <name>SetHkey</name>
        <param>
          <type>WXHKEY</type>
          <declname>hKey</declname>
        </param>
        <briefdescription>
<para>Set or change the HKEY handle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="378"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a72d31e5f221d4f095d665a4f5c8d7365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxRegKey::SetName</definition>
        <argsstring>(const wxString &amp;strKey)</argsstring>
        <name>SetName</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <briefdescription>
<para>Set the full key name. </para>        </briefdescription>
        <detaileddescription>
<para>The name is absolute. It should start with HKEY_xxx. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="384"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a7353a628be350a23662286d9499e4ba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxRegKey::SetName</definition>
        <argsstring>(StdKey keyParent, const wxString &amp;strKey)</argsstring>
        <name>SetName</name>
        <param>
          <type><ref refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5b" kindref="member">StdKey</ref></type>
          <declname>keyParent</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <briefdescription>
<para>Set the name relative to the parent key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="388"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a8271d8e1e600c7e228e5beef22363aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxRegKey::SetName</definition>
        <argsstring>(const wxRegKey &amp;keyParent, const wxString &amp;strKey)</argsstring>
        <name>SetName</name>
        <param>
          <type>const <ref refid="classwx_reg_key" kindref="compound">wxRegKey</ref> &amp;</type>
          <declname>keyParent</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strKey</declname>
        </param>
        <briefdescription>
<para>Set the name relative to the parent key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="392"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1ad0372a04a86fc1a6a8c511e26ce0f8be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::SetValue</definition>
        <argsstring>(const wxString &amp;szValue, long lValue)</argsstring>
        <name>SetValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <param>
          <type>long</type>
          <declname>lValue</declname>
        </param>
        <briefdescription>
<para>Sets the given <emphasis>szValue</emphasis> which must be numeric. </para>        </briefdescription>
        <detaileddescription>
<para>If the value doesn&apos;t exist, it is created. Returns true if successful. An empty <emphasis>szValue</emphasis> sets the default/unnamed key value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="399"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a12bfa3628e634e739f1b97906a2db665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::SetValue</definition>
        <argsstring>(const wxString &amp;szValue, const wxString &amp;strValue)</argsstring>
        <name>SetValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>strValue</declname>
        </param>
        <briefdescription>
<para>Sets the given <emphasis>szValue</emphasis> which must be string. </para>        </briefdescription>
        <detaileddescription>
<para>If the value doesn&apos;t exist, it is created. Returns true if successful. An empty <emphasis>szValue</emphasis> sets the default/unnamed key value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="405"/>
      </memberdef>
      <memberdef kind="function" id="classwx_reg_key_1a2f7b85a0eb027682d69fcbd860eac54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRegKey::SetValue</definition>
        <argsstring>(const wxString &amp;szValue, const wxMemoryBuffer &amp;buf)</argsstring>
        <name>SetValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>szValue</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_memory_buffer" kindref="compound">wxMemoryBuffer</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Sets the given <emphasis>szValue</emphasis> which must be binary. </para>        </briefdescription>
        <detaileddescription>
<para>If the value doesn&apos;t exist, it is created. Returns true if successful. An empty <emphasis>szValue</emphasis> sets the default/unnamed key value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="411"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_reg_key" kindref="compound">wxRegKey</ref> is a class representing the Windows registry (it is only available under Windows). </para>    </briefdescription>
    <detaileddescription>
<para>One can create, query and delete registry keys using this class.</para><para>The Windows registry is easy to understand. There are five registry keys, namely:</para><para><itemizedlist>
<listitem><para><computeroutput>HKEY_CLASSES_ROOT</computeroutput> (HKCR) </para></listitem>
<listitem><para><computeroutput>HKEY_CURRENT_USER</computeroutput> (HKCU) </para></listitem>
<listitem><para><computeroutput>HKEY_LOCAL_MACHINE</computeroutput> (HKLM) </para></listitem>
<listitem><para><computeroutput>HKEY_CURRENT_CONFIG</computeroutput> (HKCC) </para></listitem>
<listitem><para><computeroutput>HKEY_USERS</computeroutput> (HKU)</para></listitem>
</itemizedlist>
After creating a key, it can hold a value. The values can be:</para><para><itemizedlist>
<listitem><para>String Value </para></listitem>
<listitem><para>Binary Value </para></listitem>
<listitem><para>DWORD Value </para></listitem>
<listitem><para>Multi String Value </para></listitem>
<listitem><para>Expandable String Value</para></listitem>
</itemizedlist>
Availability:<nonbreakablespace/><nonbreakablespace/>only available for the <ref refid="page_port_1page_port_wxmsw" kindref="member">wxMSW</ref> port.  <onlyfor>wxmsw</onlyfor> </para><para><bold>Example:</bold> </para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>assume<sp/>that<sp/>the<sp/>key<sp/>already<sp/>exists,<sp/>use<sp/>HasSubKey()<sp/>to<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>key<sp/>existence<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_reg_key" kindref="compound" tooltip="wxRegKey is a class representing the Windows registry (it is only available under Windows)...">wxRegKey</ref><sp/>key(<ref refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5ba992c16a969ad045c3fd146853d31ffe0" kindref="member" tooltip="HKEY_LOCAL_MACHINE.">wxRegKey::HKLM</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Software\\MyKey&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>value<sp/>&quot;MyValue&quot;<sp/>and<sp/>set<sp/>it<sp/>to<sp/>12.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key.SetValue(</highlight><highlight class="stringliteral">&quot;MyValue&quot;</highlight><highlight class="normal">,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>value<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key.QueryValue(</highlight><highlight class="stringliteral">&quot;MyValue&quot;</highlight><highlight class="normal">,<sp/>&amp;value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__dialog_1ga193c64ed4802e379799cdb42de252647" kindref="member" tooltip="Show a general purpose message dialog.">wxMessageBox</ref>(<ref refid="classwx_string_1addd9ccfa3ae2b7ab2d66bcbf034d0be0" kindref="member" tooltip="This static function returns the string containing the result of calling Printf() with the passed par...">wxString::Format</ref>(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>value),<sp/></highlight><highlight class="stringliteral">&quot;Registry<sp/>Value&quot;</highlight><highlight class="normal">,<sp/><ref refid="defs_8h_1a9c40266b61a27f0124a69a699753889a" kindref="member">wxOK</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>subkeys<sp/>and<sp/>enumerate<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>subkeys;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key.GetKeyInfo(&amp;subkeys,<sp/>NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref><sp/>key_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key.GetFirstKey(key_name,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>subkeys;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__dialog_1ga193c64ed4802e379799cdb42de252647" kindref="member" tooltip="Show a general purpose message dialog.">wxMessageBox</ref>(key_name,<sp/></highlight><highlight class="stringliteral">&quot;Subkey<sp/>Name&quot;</highlight><highlight class="normal">,<sp/><ref refid="defs_8h_1a9c40266b61a27f0124a69a699753889a" kindref="member">wxOK</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key.GetNextKey(key_name,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__cfg" kindref="compound">Application and System configuration</ref> </para>    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" line="68" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/msw/registry.h" bodystart="67" bodyend="412"/>
    <listofallmembers>
      <member refid="classwx_reg_key_1a10e685bc8b2e08cde20cb56f9623182d" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>AccessMode</name></member>
      <member refid="classwx_reg_key_1a312d2f0b1a2c7f5c0255ad3c31bb024d" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Close</name></member>
      <member refid="classwx_reg_key_1adf91359cd740646a987c28de6fed1f4d" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Copy</name></member>
      <member refid="classwx_reg_key_1a6214549194a56e78c64894d72b369044" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Copy</name></member>
      <member refid="classwx_reg_key_1a3d49c254202ddd95c09b62a1085e785b" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>CopyValue</name></member>
      <member refid="classwx_reg_key_1afb4737a6c170dcb8531ec62d858f5e66" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Create</name></member>
      <member refid="classwx_reg_key_1aa6a7cac55a2265c0c30ed2cd64d378ad" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>DeleteKey</name></member>
      <member refid="classwx_reg_key_1a50441e0f6e031b2745d25de9a0aac520" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>DeleteSelf</name></member>
      <member refid="classwx_reg_key_1ab6f2ecf7e1a8a65e93eb16379ff88e29" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>DeleteValue</name></member>
      <member refid="classwx_reg_key_1a0906e47c998da3bb435bdaef650d2872" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Exists</name></member>
      <member refid="classwx_reg_key_1aadbb20792adf347cef9dd5ca331bad63" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Export</name></member>
      <member refid="classwx_reg_key_1a2b77e7f711e4d76e1898073e3b9c8df1" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Export</name></member>
      <member refid="classwx_reg_key_1a2fd4a5275642fa4ab5b6abf2a4d913b7" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>GetFirstKey</name></member>
      <member refid="classwx_reg_key_1a630083f901d76e90762eafb466503f37" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>GetFirstValue</name></member>
      <member refid="classwx_reg_key_1ac1ac5f10a317eb671e86e71211999492" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>GetKeyInfo</name></member>
      <member refid="classwx_reg_key_1afd4495f50319e49b64e8883d70eb38af" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>GetName</name></member>
      <member refid="classwx_reg_key_1a09c4e4adcfaa4fb351655ffe9fea84eb" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>GetNextKey</name></member>
      <member refid="classwx_reg_key_1a2472b182be142a4380faa42c9b13fdbb" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>GetNextValue</name></member>
      <member refid="classwx_reg_key_1a806826a8afab140dfcb0b8ca9a46b869" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>GetValueType</name></member>
      <member refid="classwx_reg_key_1a3a30ff77a2a47e38d637660bfc3a4435" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>GetView</name></member>
      <member refid="classwx_reg_key_1ae9ee885dd29cb661023eb2e2f1bdc071" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HasSubKey</name></member>
      <member refid="classwx_reg_key_1a113d48a6b154a10005e8fc66aee68e5d" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HasSubkeys</name></member>
      <member refid="classwx_reg_key_1a40a961cfd8d4f6e89e8f287a9e415546" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HasValue</name></member>
      <member refid="classwx_reg_key_1ac64f86ae0be0d3a171adbb39c0bed4c3" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HasValues</name></member>
      <member refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5ba1742b9de7b1e5c3265f27256f99ca525" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HKCC</name></member>
      <member refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5bacfa4deaac8001a569ccab4457ddf8a85" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HKCR</name></member>
      <member refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5bad23779422ec95850dfcdc4e38de9de6a" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HKCU</name></member>
      <member refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5bab3ed4c9e7c3ed7446a7eaf013a14081f" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HKDD</name></member>
      <member refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5ba992c16a969ad045c3fd146853d31ffe0" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HKLM</name></member>
      <member refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5ba15897558d95fa9b9beab75ea88612cbe" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HKMAX</name></member>
      <member refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5baca3b3b4b6e2b20de9d9e576f34ae315d" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HKPD</name></member>
      <member refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5ba8861998c3c30be02578320b1b885df76" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>HKUSR</name></member>
      <member refid="classwx_reg_key_1a27ce237e89b919c716de3bef7b33d511" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>IsEmpty</name></member>
      <member refid="classwx_reg_key_1aa7e2acc6bb64794dd3b8404999575be5" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>IsNumericValue</name></member>
      <member refid="classwx_reg_key_1ae444b007cb2bc68e993ec1461596e01c" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>IsOpened</name></member>
      <member refid="classwx_reg_key_1a40c5e3c3e24c12063824200882fff4e8" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Open</name></member>
      <member refid="classwx_reg_key_1a805f399e3a9ea5e6b835cbbb767cd009" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>operator=</name></member>
      <member refid="classwx_reg_key_1a498487f0546354587875fbd7cfb47ec4" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>QueryDefaultValue</name></member>
      <member refid="classwx_reg_key_1a789d3546decb64839fdee5e5df6aff8b" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>QueryRawValue</name></member>
      <member refid="classwx_reg_key_1ac99a8d456b47f96675d860547ae164b4" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>QueryValue</name></member>
      <member refid="classwx_reg_key_1a1e3e238d81f3ed0e58ddae42d0603a63" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>QueryValue</name></member>
      <member refid="classwx_reg_key_1acd7c953cb0c78cee2330a7c5ecb9d5fc" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>QueryValue</name></member>
      <member refid="classwx_reg_key_1a10e685bc8b2e08cde20cb56f9623182da883aac4bfd536335487f496e3541408a" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Read</name></member>
      <member refid="classwx_reg_key_1a38e51ebf1385c9033ebd3a7bea6d6986" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Rename</name></member>
      <member refid="classwx_reg_key_1a1c90a9935936ef22bb07da98ad6f63d1" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>RenameValue</name></member>
      <member refid="classwx_reg_key_1a3da9da0a4d05099e401c8a6dbe00d2f6" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>ReserveMemoryForName</name></member>
      <member refid="classwx_reg_key_1ae23e53cadf2f45b28edf682fb80c084a" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>SetHkey</name></member>
      <member refid="classwx_reg_key_1a72d31e5f221d4f095d665a4f5c8d7365" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>SetName</name></member>
      <member refid="classwx_reg_key_1a7353a628be350a23662286d9499e4ba7" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>SetName</name></member>
      <member refid="classwx_reg_key_1a8271d8e1e600c7e228e5beef22363aff" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>SetName</name></member>
      <member refid="classwx_reg_key_1ad0372a04a86fc1a6a8c511e26ce0f8be" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>SetValue</name></member>
      <member refid="classwx_reg_key_1a12bfa3628e634e739f1b97906a2db665" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>SetValue</name></member>
      <member refid="classwx_reg_key_1a2f7b85a0eb027682d69fcbd860eac54b" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>SetValue</name></member>
      <member refid="classwx_reg_key_1a1dcc4de4d1cc4370399e8813cb6abd5b" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>StdKey</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea74fb86bd34628fe6c23cfaa7b547b79a" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Binary</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeacb0782c3f7b99336f78371753970cf6f" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Dword</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeae27492abe54a132c0899fc2110758207" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Dword_big_endian</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeab87e643f6dbb322dc67364f2d25e8d51" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Dword_little_endian</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeacc5cd22316a3273670261ed85bf9d72e" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Expand_String</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeab2319e2d3f1021f2bb44b2c7cb9ed505" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Full_resource_descriptor</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aeacc7e8383cc247869748a32caa8955f6c" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Link</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea5c2c7552289566cf5fa2f23b9c619cff" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Multi_String</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea49efeb70b7042259a6aef6086131dafb" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_None</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea89ec527597463d6dddeaff9297a2ea0e" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Resource_list</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea47a10b01b23342d005164295bb4a8935" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_Resource_requirements_list</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448aea71e34e7ea0dd2326613f48db8d086c16" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Type_String</name></member>
      <member refid="classwx_reg_key_1a50c331bab4eb972c283eeaf59fc448ae" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>ValueType</name></member>
      <member refid="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>WOW64ViewMode</name></member>
      <member refid="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25aabb54e8155d12871b7734db6104b074b" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>WOW64ViewMode_32</name></member>
      <member refid="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25a78af7537171e9a63e6a44ad7b4498734" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>WOW64ViewMode_64</name></member>
      <member refid="classwx_reg_key_1a89e5048d817178768bd50e7b53663b25aded20ed01113e4ccd990802823511178" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>WOW64ViewMode_Default</name></member>
      <member refid="classwx_reg_key_1a10e685bc8b2e08cde20cb56f9623182da7edf59adb9ff7ead05ecd96192487a21" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>Write</name></member>
      <member refid="classwx_reg_key_1a6c11944bbac62dd88825e77832fe0540" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>wxRegKey</name></member>
      <member refid="classwx_reg_key_1a19174e100d25186fbe7ef1c6cabd5f97" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>wxRegKey</name></member>
      <member refid="classwx_reg_key_1aa55e66f45518852805625ff7e8536e93" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>wxRegKey</name></member>
      <member refid="classwx_reg_key_1ae0d1d90d6d998bd62fafb6a8d5931647" prot="public" virt="non-virtual"><scope>wxRegKey</scope><name>wxRegKey</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

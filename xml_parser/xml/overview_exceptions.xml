<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="overview_exceptions" kind="page">
    <compoundname>overview_exceptions</compoundname>
    <title>C++ Exceptions</title>
    <detaileddescription>
<para><itemizedlist>
<listitem><para><ref refid="overview_exceptions_1overview_exceptions_introduction" kindref="member">Introduction</ref> </para></listitem>
<listitem><para><ref refid="overview_exceptions_1overview_exceptions_strategies" kindref="member">Strategies for exceptions handling</ref> </para></listitem>
<listitem><para><ref refid="overview_exceptions_1overview_exceptions_tech" kindref="member">Technicalities</ref></para></listitem>
</itemizedlist>
<hruler/>
</para><sect1 id="overview_exceptions_1overview_exceptions_introduction">
<title>Introduction</title>
<para>wxWidgets had been started long before the exceptions were introduced in C++ so it is not very surprising that it is not built around using them as some more modern C++ libraries are. For instance, the library doesn&apos;t throw exceptions to signal about the errors. Moreover, up to (and including) the version 2.4 of wxWidgets, even using the exceptions in the user code was dangerous because the library code wasn&apos;t exception-safe and so an exception propagating through it could result in memory and/or resource leaks, and also not very convenient.</para><para>However the recent wxWidgets versions are exception-friendly. This means that while the library still doesn&apos;t use the exceptions by itself, it should be now safe to use the exceptions in the user code and the library tries to help you with this.</para></sect1>
<sect1 id="overview_exceptions_1overview_exceptions_strategies">
<title>Strategies for exceptions handling</title>
<para>There are several choice for using the exceptions in wxWidgets programs. First of all, you may not use them at all. As stated above, the library doesn&apos;t throw any exceptions by itself and so you don&apos;t have to worry about exceptions at all unless your own code throws them. This is, of course, the simplest solution but may be not the best one to deal with all possible errors.</para><para>The next simplest strategy is to only use exceptions inside non-GUI code, i.e. never let unhandled exceptions escape the event handler in which it happened. In this case using exceptions in wxWidgets programs is not different from using them in any other C++ program.</para><para>Things get more interesting if you decide to let (at least some) exceptions escape from the event handler in which they occurred. Such exceptions will be caught by wxWidgets and the special <ref refid="classwx_app_console_1aca806b41cf74fd6166e4fb2e2708e9bf" kindref="member">wxApp::OnExceptionInMainLoop()</ref> method will be called from the <computeroutput>catch</computeroutput> clause. This allows you to decide in a single place what to do about such exceptions: you may want to handle the exception somehow or terminate the program. In this sense, OnExceptionInMainLoop() is equivalent to putting a <computeroutput>try/catch</computeroutput> block around the entire <computeroutput>main()</computeroutput> function body in the traditional console programs. However notice that, as its name indicates, this method won&apos;t help you with the exceptions thrown before the main loop is started or after it is over, so you may still want to have <computeroutput>try/catch</computeroutput> in your overridden <ref refid="classwx_app_console_1a99953775a2fd83fa2456e390779afe15" kindref="member">wxApp::OnInit()</ref> and <ref refid="classwx_app_console_1a5ee60051c92b0b2933258799626a0485" kindref="member">wxApp::OnExit()</ref> methods too, otherwise <ref refid="classwx_app_console_1a8c241ae1aa045da4470664813b7ec960" kindref="member">wxApp::OnUnhandledException()</ref> will be called.</para><para>Finally, notice that even if you decide to not let any exceptions escape in this way, this still may happen unexpectedly in a program using exceptions as a result of a bug. So consider always overriding OnExceptionInMainLoop() in your wxApp-derived class if you use exceptions in your program, whether you expect it to be called or not. In the latter case you may simple re-throw the exception and let it bubble up to OnUnhandledException() as well.</para><para>To summarize, when you use exceptions in your code, you may handle them in the following places, in order of priority:<orderedlist>
<listitem><para>In a <computeroutput>try/catch</computeroutput> block inside an event handler.</para></listitem><listitem><para>In <ref refid="classwx_app_console_1aca806b41cf74fd6166e4fb2e2708e9bf" kindref="member">wxApp::OnExceptionInMainLoop()</ref>.</para></listitem><listitem><para>In <ref refid="classwx_app_console_1a8c241ae1aa045da4470664813b7ec960" kindref="member">wxApp::OnUnhandledException()</ref>.</para></listitem></orderedlist>
</para><para>In the first two cases you may decide whether you want to handle the exception and continue execution or to exit the program. In the last one the program is about to exit already so you can just try to save any unsaved data and notify the user about the problem (while being careful not to throw any more exceptions as otherwise <computeroutput>std::terminate()</computeroutput> will be called).</para></sect1>
<sect1 id="overview_exceptions_1overview_exceptions_tech">
<title>Technicalities</title>
<para>To use any kind of exception support in the library you need to build it with <computeroutput>wxUSE_EXCEPTIONS</computeroutput> set to 1. It is turned on by default but you may wish to check <computeroutput>include/wx/msw/setup.h</computeroutput> file under Windows or run <computeroutput>configure</computeroutput> with explicit <computeroutput>--enable-exceptions</computeroutput> argument under Unix.</para><para>On the other hand, if you do not plan to use exceptions, setting this flag to 0 or using <computeroutput>--disable-exceptions</computeroutput> could result in a leaner and slightly faster library.</para><para>As for any other library feature, there is a sample (<computeroutput>except</computeroutput>) showing how to use it. Please look at its sources for further information. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

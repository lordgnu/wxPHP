<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_condition" kind="class" prot="public">
    <compoundname>wxCondition</compoundname>
    <includes local="no">wx/thread.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_condition_1a0c73d224b294846ef9358cfaa36b573e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxCondition::wxCondition</definition>
        <argsstring>(wxMutex &amp;mutex)</argsstring>
        <name>wxCondition</name>
        <param>
          <type><ref refid="classwx_mutex" kindref="compound">wxMutex</ref> &amp;</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Default and only constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>mutex</emphasis> must be locked by the caller before calling <ref refid="classwx_condition_1ad42af860d727aad40cf366eaab9da48d" kindref="member">Wait()</ref> function. Use <ref refid="classwx_condition_1ae1ccee596e1b527821f2d084d2f4b5e4" kindref="member">IsOk()</ref> to check if the object was successfully initialized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="116"/>
      </memberdef>
      <memberdef kind="function" id="classwx_condition_1a78c0da35a4bc0a611039b105ff839ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxCondition::~wxCondition</definition>
        <argsstring>()</argsstring>
        <name>~wxCondition</name>
        <briefdescription>
<para>Destroys the <ref refid="classwx_condition" kindref="compound">wxCondition</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>The destructor is not virtual so this class should not be used polymorphically. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="123"/>
      </memberdef>
      <memberdef kind="function" id="classwx_condition_1af8ed8df7255aba60dcecba0bbe102fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_2wx_2thread_8h_1af963862ae0e1bd5cafe4039dccbbd81e" kindref="member">wxCondError</ref></type>
        <definition>wxCondError wxCondition::Broadcast</definition>
        <argsstring>()</argsstring>
        <name>Broadcast</name>
        <briefdescription>
<para>Broadcasts to all waiting threads, waking all of them up. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this method may be called whether the mutex associated with this condition is locked or not.</para><para><simplesect kind="see"><para><ref refid="classwx_condition_1a9fa920a093abdadb19f40db82fbaedd4" kindref="member">Signal()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="133"/>
      </memberdef>
      <memberdef kind="function" id="classwx_condition_1ae1ccee596e1b527821f2d084d2f4b5e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxCondition::IsOk</definition>
        <argsstring>() const </argsstring>
        <name>IsOk</name>
        <briefdescription>
<para>Returns true if the object had been initialized successfully, false if an error occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="139"/>
      </memberdef>
      <memberdef kind="function" id="classwx_condition_1a9fa920a093abdadb19f40db82fbaedd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_2wx_2thread_8h_1af963862ae0e1bd5cafe4039dccbbd81e" kindref="member">wxCondError</ref></type>
        <definition>wxCondError wxCondition::Signal</definition>
        <argsstring>()</argsstring>
        <name>Signal</name>
        <briefdescription>
<para>Signals the object waking up at most one thread. </para>        </briefdescription>
        <detaileddescription>
<para>If several threads are waiting on the same condition, the exact thread which is woken up is undefined. If no threads are waiting, the signal is lost and the condition would have to be signalled again to wake up any thread which may start waiting on it later.</para><para>Note that this method may be called whether the mutex associated with this condition is locked or not.</para><para><simplesect kind="see"><para><ref refid="classwx_condition_1af8ed8df7255aba60dcecba0bbe102fd4" kindref="member">Broadcast()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="154"/>
      </memberdef>
      <memberdef kind="function" id="classwx_condition_1ad42af860d727aad40cf366eaab9da48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_2wx_2thread_8h_1af963862ae0e1bd5cafe4039dccbbd81e" kindref="member">wxCondError</ref></type>
        <definition>wxCondError wxCondition::Wait</definition>
        <argsstring>()</argsstring>
        <name>Wait</name>
        <briefdescription>
<para>Waits until the condition is signalled. </para>        </briefdescription>
        <detaileddescription>
<para>This method atomically releases the lock on the mutex associated with this condition (this is why it must be locked prior to calling <ref refid="classwx_condition_1ad42af860d727aad40cf366eaab9da48d" kindref="member">Wait()</ref>) and puts the thread to sleep until <ref refid="classwx_condition_1a9fa920a093abdadb19f40db82fbaedd4" kindref="member">Signal()</ref> or <ref refid="classwx_condition_1af8ed8df7255aba60dcecba0bbe102fd4" kindref="member">Broadcast()</ref> is called. It then locks the mutex again and returns.</para><para>Note that even if <ref refid="classwx_condition_1a9fa920a093abdadb19f40db82fbaedd4" kindref="member">Signal()</ref> had been called before <ref refid="classwx_condition_1ad42af860d727aad40cf366eaab9da48d" kindref="member">Wait()</ref> without waking up any thread, the thread would still wait for another one and so it is important to ensure that the condition will be signalled after <ref refid="classwx_condition_1ad42af860d727aad40cf366eaab9da48d" kindref="member">Wait()</ref> or the thread may sleep forever.</para><para><simplesect kind="return"><para>Returns wxCOND_NO_ERROR on success, another value if an error occurred.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_condition_1a368e40158c732759fad60d46d292bd2d" kindref="member">WaitTimeout()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="173"/>
      </memberdef>
      <memberdef kind="function" id="classwx_condition_1a368e40158c732759fad60d46d292bd2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_2wx_2thread_8h_1af963862ae0e1bd5cafe4039dccbbd81e" kindref="member">wxCondError</ref></type>
        <definition>wxCondError wxCondition::WaitTimeout</definition>
        <argsstring>(unsigned long milliseconds)</argsstring>
        <name>WaitTimeout</name>
        <param>
          <type>unsigned long</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
<para>Waits until the condition is signalled or the timeout has elapsed. </para>        </briefdescription>
        <detaileddescription>
<para>This method is identical to <ref refid="classwx_condition_1ad42af860d727aad40cf366eaab9da48d" kindref="member">Wait()</ref> except that it returns, with the return code of <computeroutput>wxCOND_TIMEOUT</computeroutput> as soon as the given timeout expires.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns wxCOND_NO_ERROR if the condition was signalled, wxCOND_TIMEOUT if the timeout elapsed before this happened or another error code from wxCondError enum. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="188"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_condition" kindref="compound">wxCondition</ref> variables correspond to pthread conditions or to Win32 event objects. </para>    </briefdescription>
    <detaileddescription>
<para>They may be used in a multithreaded application to wait until the given condition becomes true which happens when the condition becomes signaled.</para><para>For example, if a worker thread is doing some long task and another thread has to wait until it is finished, the latter thread will wait on the condition object and the worker thread will signal it on exit (this example is not perfect because in this particular case it would be much better to just <ref refid="classwx_thread_1a62ee778033013d3a4754b71b8cf2902e" kindref="member">wxThread::Wait</ref> for the worker thread, but if there are several worker threads it already makes much more sense).</para><para>Note that a call to <ref refid="classwx_condition_1a9fa920a093abdadb19f40db82fbaedd4" kindref="member">wxCondition::Signal</ref> may happen before the other thread calls <ref refid="classwx_condition_1ad42af860d727aad40cf366eaab9da48d" kindref="member">wxCondition::Wait</ref> and, just as with the pthread conditions, the signal is then lost and so if you want to be sure that you don&apos;t miss it you must keep the mutex associated with the condition initially locked and lock it again before calling <ref refid="classwx_condition_1a9fa920a093abdadb19f40db82fbaedd4" kindref="member">wxCondition::Signal</ref>. Of course, this means that this call is going to block until <ref refid="classwx_condition_1ad42af860d727aad40cf366eaab9da48d" kindref="member">wxCondition::Wait</ref> is called by another thread.</para><sect1 id="classwx_condition_1condition_example">
<title>Example</title>
<para>This example shows how a main thread may launch a worker thread which starts running and then waits until the main thread signals it to continue:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MySignallingThread<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classwx_thread" kindref="compound" tooltip="A thread is basically a path of execution through a program.">wxThread</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MySignallingThread(<ref refid="classwx_mutex" kindref="compound" tooltip="A mutex object is a synchronization object whose state is set to signaled when it is not owned by any...">wxMutex</ref><sp/>*mutex,<sp/><ref refid="classwx_condition" kindref="compound" tooltip="wxCondition variables correspond to pthread conditions or to Win32 event objects.">wxCondition</ref><sp/>*condition)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mutex<sp/>=<sp/>mutex;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_condition<sp/>=<sp/>condition;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ExitCode<sp/>Entry()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>our<sp/>job<sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tell<sp/>the<sp/>other(s)<sp/>thread(s)<sp/>that<sp/>we&apos;re<sp/>about<sp/>to<sp/>terminate:<sp/>we<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lock<sp/>the<sp/>mutex<sp/>first<sp/>or<sp/>we<sp/>might<sp/>signal<sp/>the<sp/>condition<sp/>before<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>waiting<sp/>threads<sp/>start<sp/>waiting<sp/>on<sp/>it!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_mutex_locker" kindref="compound" tooltip="This is a small helper class to be used with wxMutex objects.">wxMutexLocker</ref><sp/>lock(*m_mutex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_condition-&gt;Broadcast();<sp/></highlight><highlight class="comment">//<sp/>same<sp/>as<sp/>Signal()<sp/>here<sp/>--<sp/>one<sp/>waiter<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_condition" kindref="compound" tooltip="wxCondition variables correspond to pthread conditions or to Win32 event objects.">wxCondition</ref><sp/>*m_condition;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_mutex" kindref="compound" tooltip="A mutex object is a synchronization object whose state is set to signaled when it is not owned by any...">wxMutex</ref><sp/>*m_mutex;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_mutex" kindref="compound" tooltip="A mutex object is a synchronization object whose state is set to signaled when it is not owned by any...">wxMutex</ref><sp/>mutex;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_condition" kindref="compound" tooltip="wxCondition variables correspond to pthread conditions or to Win32 event objects.">wxCondition</ref><sp/>condition(mutex);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>mutex<sp/>should<sp/>be<sp/>initially<sp/>locked</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex.<ref refid="classwx_mutex_1a5291e0e421262f420051390421ba0d09" kindref="member" tooltip="Locks the mutex object.">Lock</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>and<sp/>run<sp/>the<sp/>thread<sp/>but<sp/>notice<sp/>that<sp/>it<sp/>won&apos;t<sp/>be<sp/>able<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exit<sp/>(and<sp/>signal<sp/>its<sp/>exit)<sp/>before<sp/>we<sp/>unlock<sp/>the<sp/>mutex<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MySignallingThread<sp/>*thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MySignallingThread(&amp;mutex,<sp/>&amp;condition);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;Run();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>the<sp/>thread<sp/>termination:<sp/>Wait()<sp/>atomically<sp/>unlocks<sp/>the<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>allows<sp/>the<sp/>thread<sp/>to<sp/>continue<sp/>and<sp/>starts<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition.Wait();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>can<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Of course, here it would be much better to simply use a joinable thread and call <ref refid="classwx_thread_1a62ee778033013d3a4754b71b8cf2902e" kindref="member">wxThread::Wait</ref> on it, but this example does illustrate the importance of properly locking the mutex when using <ref refid="classwx_condition" kindref="compound">wxCondition</ref>.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__threading" kindref="compound">Threading</ref></para><para><simplesect kind="see"><para><ref refid="classwx_thread" kindref="compound">wxThread</ref>, <ref refid="classwx_mutex" kindref="compound">wxMutex</ref> </para></simplesect>
</para></sect1>
    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="109" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="108" bodyend="189"/>
    <listofallmembers>
      <member refid="classwx_condition_1af8ed8df7255aba60dcecba0bbe102fd4" prot="public" virt="non-virtual"><scope>wxCondition</scope><name>Broadcast</name></member>
      <member refid="classwx_condition_1ae1ccee596e1b527821f2d084d2f4b5e4" prot="public" virt="non-virtual"><scope>wxCondition</scope><name>IsOk</name></member>
      <member refid="classwx_condition_1a9fa920a093abdadb19f40db82fbaedd4" prot="public" virt="non-virtual"><scope>wxCondition</scope><name>Signal</name></member>
      <member refid="classwx_condition_1ad42af860d727aad40cf366eaab9da48d" prot="public" virt="non-virtual"><scope>wxCondition</scope><name>Wait</name></member>
      <member refid="classwx_condition_1a368e40158c732759fad60d46d292bd2d" prot="public" virt="non-virtual"><scope>wxCondition</scope><name>WaitTimeout</name></member>
      <member refid="classwx_condition_1a0c73d224b294846ef9358cfaa36b573e" prot="public" virt="non-virtual"><scope>wxCondition</scope><name>wxCondition</name></member>
      <member refid="classwx_condition_1a78c0da35a4bc0a611039b105ff839ea1" prot="public" virt="non-virtual"><scope>wxCondition</scope><name>~wxCondition</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_date_time" kind="class" prot="public">
    <compoundname>wxDateTime</compoundname>
    <includes local="no">wx/datetime.h</includes>
    <innerclass refid="classwx_date_time_1_1_time_zone" prot="public">wxDateTime::TimeZone</innerclass>
    <innerclass refid="structwx_date_time_1_1_tm" prot="public">wxDateTime::Tm</innerclass>
      <sectiondef kind="user-defined">
      <header>Constructors, Assignment Operators and Setters</header>
      <description><para>Constructors and various <ref refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" kindref="member">Set()</ref> methods are collected here.</para><para>If you construct a date object from separate values for day, month and year, you should use <ref refid="classwx_date_time_1aaff0bd60809b4d03839ddd4c6eb9e84d" kindref="member">IsValid()</ref> method to check that the values were correct as constructors cannot return an error code. </para></description>
      <memberdef kind="function" id="classwx_date_time_1a4cc372429453a21632d64f34f635d853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDateTime::wxDateTime</definition>
        <argsstring>()</argsstring>
        <name>wxDateTime</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Use one of the <ref refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" kindref="member">Set()</ref> functions to initialize the object later. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="434"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aca2bc3b942d920e01e496841bd759001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDateTime::wxDateTime</definition>
        <argsstring>(const wxDateTime &amp;date)</argsstring>
        <name>wxDateTime</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="439"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1af389cfd683905c7bd26d78ed2830f8d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDateTime::wxDateTime</definition>
        <argsstring>(time_t timet)</argsstring>
        <name>wxDateTime</name>
        <param>
          <type>time_t</type>
          <declname>timet</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" kindref="member">Set()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="444"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1af060ddc94177492d3cedf60f9e17224a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDateTime::wxDateTime</definition>
        <argsstring>(const struct tm &amp;tm)</argsstring>
        <name>wxDateTime</name>
        <param>
          <type>const struct tm &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" kindref="member">Set()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="448"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aa2c38922eafec2a94fb5ee9221c0f6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDateTime::wxDateTime</definition>
        <argsstring>(double jdn)</argsstring>
        <name>wxDateTime</name>
        <param>
          <type>double</type>
          <declname>jdn</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" kindref="member">Set()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="452"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a929b59bfd0b445d2bd2e5e2b58767c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDateTime::wxDateTime</definition>
        <argsstring>(wxDateTime_t hour, wxDateTime_t minute=0, wxDateTime_t second=0, wxDateTime_t millisec=0)</argsstring>
        <name>wxDateTime</name>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>hour</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>minute</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>second</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>millisec</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" kindref="member">Set()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="457"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a8e4a6d1104d1882514679514e3dbc642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDateTime::wxDateTime</definition>
        <argsstring>(wxDateTime_t day, Month month, int year=Inv_Year, wxDateTime_t hour=0, wxDateTime_t minute=0, wxDateTime_t second=0, wxDateTime_t millisec=0)</argsstring>
        <name>wxDateTime</name>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>day</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
        </param>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>hour</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>minute</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>second</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>millisec</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" kindref="member">Set()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="464"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a7d16ccd02f0c98f0667f57376da89da7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDateTime::wxDateTime</definition>
        <argsstring>(const struct _SYSTEMTIME &amp;st)</argsstring>
        <name>wxDateTime</name>
        <param>
          <type>const struct _SYSTEMTIME &amp;</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Same as SetFromMSWSysTime. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>st</parametername>
</parameternamelist>
<parameterdescription>
<para>Input, Windows SYSTEMTIME reference </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.0 </para></simplesect>
<simplesect kind="remark"><para>MSW only Availability:<nonbreakablespace/><nonbreakablespace/>only available for the <ref refid="page_port_1page_port_wxmsw" kindref="member">wxMSW</ref> port.  <onlyfor>wxmsw</onlyfor>  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="475"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a1975ca9c72d4fb89050566849776d3b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::ResetTime</definition>
        <argsstring>()</argsstring>
        <name>ResetTime</name>
        <briefdescription>
<para>Reset time to midnight (00:00:00) without changing the date. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="481"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::Set</definition>
        <argsstring>(time_t timet)</argsstring>
        <name>Set</name>
        <param>
          <type>time_t</type>
          <declname>timet</declname>
        </param>
        <briefdescription>
<para>Constructs the object from <emphasis>timet</emphasis> value holding the number of seconds since Jan 1, 1970. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="487"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ae38d80eca7dcbfcd0984708e957c343f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::Set</definition>
        <argsstring>(const struct tm &amp;tm)</argsstring>
        <name>Set</name>
        <param>
          <type>const struct tm &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Sets the date and time from the broken down representation in the standard <emphasis>tm</emphasis> structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="492"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1afe75b8090e51a7b4e1aacccc55fd10bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::Set</definition>
        <argsstring>(const Tm &amp;tm)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="structwx_date_time_1_1_tm" kindref="compound">Tm</ref> &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Sets the date and time from the broken down representation in the <emphasis><ref refid="structwx_date_time_1_1_tm" kindref="compound">wxDateTime::Tm</ref></emphasis> structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="498"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1acfaba2a9f0241f74aff4641304f0a8fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::Set</definition>
        <argsstring>(double jdn)</argsstring>
        <name>Set</name>
        <param>
          <type>double</type>
          <declname>jdn</declname>
        </param>
        <briefdescription>
<para>Sets the date from the so-called Julian Day Number. </para>        </briefdescription>
        <detaileddescription>
<para>By definition, the Julian Day Number, usually abbreviated as JDN, of a particular instant is the fractional number of days since 12 hours Universal Coordinated Time (Greenwich mean noon) on January 1 of the year -4712 in the Julian proleptic calendar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="508"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a0b73caf2a363e429725244483ebc0d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::Set</definition>
        <argsstring>(wxDateTime_t hour, wxDateTime_t minute=0, wxDateTime_t second=0, wxDateTime_t millisec=0)</argsstring>
        <name>Set</name>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>hour</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>minute</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>second</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>millisec</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the date to be equal to <ref refid="classwx_date_time_1af730202238b9acd5a5df2977fa40c569" kindref="member">Today()</ref> and the time from supplied parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="514"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a6f7ee89e55144c61ac19a6543e67db6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::Set</definition>
        <argsstring>(wxDateTime_t day, Month month, int year=Inv_Year, wxDateTime_t hour=0, wxDateTime_t minute=0, wxDateTime_t second=0, wxDateTime_t millisec=0)</argsstring>
        <name>Set</name>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>day</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
        </param>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>hour</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>minute</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>second</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>millisec</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the date and time from the parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="521"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a153d3687333e318574299ad191f340bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetDay</definition>
        <argsstring>(unsigned short day)</argsstring>
        <name>SetDay</name>
        <param>
          <type>unsigned short</type>
          <declname>day</declname>
        </param>
        <briefdescription>
<para>Sets the day without changing other date components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="526"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1acdba3b71eec0870b14417d3010311a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetFromDOS</definition>
        <argsstring>(unsigned long ddt)</argsstring>
        <name>SetFromDOS</name>
        <param>
          <type>unsigned long</type>
          <declname>ddt</declname>
        </param>
        <briefdescription>
<para>Sets the date from the date and time in DOS format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="531"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a00a6e0dd915c7239dc0ea6192a1908c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetHour</definition>
        <argsstring>(unsigned short hour)</argsstring>
        <name>SetHour</name>
        <param>
          <type>unsigned short</type>
          <declname>hour</declname>
        </param>
        <briefdescription>
<para>Sets the hour without changing other date components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="536"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ab227fbf523dca7ea1aefdc0a806d4622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetMillisecond</definition>
        <argsstring>(unsigned short millisecond)</argsstring>
        <name>SetMillisecond</name>
        <param>
          <type>unsigned short</type>
          <declname>millisecond</declname>
        </param>
        <briefdescription>
<para>Sets the millisecond without changing other date components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="541"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ae028d28c81960d95b9d433ea02775cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetMinute</definition>
        <argsstring>(unsigned short minute)</argsstring>
        <name>SetMinute</name>
        <param>
          <type>unsigned short</type>
          <declname>minute</declname>
        </param>
        <briefdescription>
<para>Sets the minute without changing other date components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="546"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a480fc77f9dc8491eb71b75be65befc57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetMonth</definition>
        <argsstring>(Month month)</argsstring>
        <name>SetMonth</name>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
        </param>
        <briefdescription>
<para>Sets the month without changing other date components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="551"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aff2fd9f698a48bd18946b3d950adda65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetSecond</definition>
        <argsstring>(unsigned short second)</argsstring>
        <name>SetSecond</name>
        <param>
          <type>unsigned short</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Sets the second without changing other date components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="556"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ab033c8036318532cb55943847a9abb66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetToCurrent</definition>
        <argsstring>()</argsstring>
        <name>SetToCurrent</name>
        <briefdescription>
<para>Sets the date and time of to the current values. </para>        </briefdescription>
        <detaileddescription>
<para>Same as assigning the result of <ref refid="classwx_date_time_1a6e6c37a0414bb4831e2cc03b37f498a2" kindref="member">Now()</ref> to this object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="562"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ac68d4faee34360eac3ba52c5def5ac09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetYear</definition>
        <argsstring>(int year)</argsstring>
        <name>SetYear</name>
        <param>
          <type>int</type>
          <declname>year</declname>
        </param>
        <briefdescription>
<para>Sets the year without changing other date components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="567"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a437af2acfdf63d47f09e43269e4c3f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::operator=</definition>
        <argsstring>(time_t timet)</argsstring>
        <name>operator=</name>
        <param>
          <type>time_t</type>
          <declname>timet</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" kindref="member">Set()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="572"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a4040ef007d8fc9273b0e6bf489d4d975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::operator=</definition>
        <argsstring>(const struct tm &amp;tm)</argsstring>
        <name>operator=</name>
        <param>
          <type>const struct tm &amp;</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" kindref="member">Set()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="576"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors</header>
      <description><para>Here are the trivial accessors.</para><para>Other functions, which might have to perform some more complicated calculations to find the answer are under the &quot;Date Arithmetics&quot; section. </para></description>
      <memberdef kind="function" id="classwx_date_time_1a66aebd04f50f468049f17e8159e69a6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long wxDateTime::GetAsDOS</definition>
        <argsstring>() const </argsstring>
        <name>GetAsDOS</name>
        <briefdescription>
<para>Returns the date and time in DOS format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="594"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a48d529a2bb8434ce9419dbaa87a7e06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetFromMSWSysTime</definition>
        <argsstring>(const struct _SYSTEMTIME &amp;st)</argsstring>
        <name>SetFromMSWSysTime</name>
        <param>
          <type>const struct _SYSTEMTIME &amp;</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Initialize using the Windows SYSTEMTIME structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>st</parametername>
</parameternamelist>
<parameterdescription>
<para>Input, Windows SYSTEMTIME reference </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.0 </para></simplesect>
<simplesect kind="remark"><para>MSW only Availability:<nonbreakablespace/><nonbreakablespace/>only available for the <ref refid="page_port_1page_port_wxmsw" kindref="member">wxMSW</ref> port.  <onlyfor>wxmsw</onlyfor>  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="604"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ae40a8c0a37d06ac476d856827e5176d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDateTime::GetAsMSWSysTime</definition>
        <argsstring>(struct _SYSTEMTIME *st) const </argsstring>
        <name>GetAsMSWSysTime</name>
        <param>
          <type>struct _SYSTEMTIME *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Returns the date and time in the Windows SYSTEMTIME format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>st</parametername>
</parameternamelist>
<parameterdescription>
<para>Output, pointer to Windows SYSTEMTIME </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.0 </para></simplesect>
<simplesect kind="remark"><para>MSW only Availability:<nonbreakablespace/><nonbreakablespace/>only available for the <ref refid="page_port_1page_port_wxmsw" kindref="member">wxMSW</ref> port.  <onlyfor>wxmsw</onlyfor>  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="614"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1acc8f531061b26803b921e20e19faaea1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxDateTime::GetCentury</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetCentury</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the century of this date. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="619"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a3b341c8cb0e343d3b7f9db929c7b4830" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::GetDateOnly</definition>
        <argsstring>() const </argsstring>
        <name>GetDateOnly</name>
        <briefdescription>
<para>Returns the object having the same date component as this one but time of 00:00:00. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.8.2</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_date_time_1a1975ca9c72d4fb89050566849776d3b2" kindref="member">ResetTime()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="629"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a6ce5fca7b6e7cc7a230e4595d52fb8ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short wxDateTime::GetDay</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetDay</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the day in the given timezone (local one by default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="634"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a0242e2ec46f3345576bce53354cf5e6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short wxDateTime::GetDayOfYear</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetDayOfYear</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the day of the year (in 1-366 range) in the given timezone (local one by default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="640"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a0c07232d5f21ba2ede2a4751f3531c1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short wxDateTime::GetHour</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetHour</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the hour in the given timezone (local one by default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="645"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a9ae6607047e0e0971e1f6e02fbaf12d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short wxDateTime::GetMillisecond</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetMillisecond</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the milliseconds in the given timezone (local one by default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="650"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ad78c55f442700463a58e3f57054c61e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short wxDateTime::GetMinute</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetMinute</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the minute in the given timezone (local one by default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="655"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a7e1316e87a89b31a2b72958201105061" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
        <definition>Month wxDateTime::GetMonth</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetMonth</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the month in the given timezone (local one by default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="660"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1adf71fea598bd0baeb6b0e1f56eba093b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short wxDateTime::GetSecond</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetSecond</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the seconds in the given timezone (local one by default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="665"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a6be02e8f615380ff701c5f9cedc9fb84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>time_t</type>
        <definition>time_t wxDateTime::GetTicks</definition>
        <argsstring>() const </argsstring>
        <name>GetTicks</name>
        <briefdescription>
<para>Returns the number of seconds since Jan 1, 1970. </para>        </briefdescription>
        <detaileddescription>
<para>An assert failure will occur if the date is not in the range covered by <computeroutput>time_t</computeroutput> type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="671"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a5eb3d08cd32226a5aefa87a65dffe759" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwx_date_time_1_1_tm" kindref="compound">Tm</ref></type>
        <definition>Tm wxDateTime::GetTm</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetTm</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns broken down representation of the date and time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="676"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ada293c954c5b0345846bb69de3938da2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
        <definition>WeekDay wxDateTime::GetWeekDay</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetWeekDay</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the week day in the given timezone (local one by default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="681"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ac2e541595f16d6f48db34b489a5d1ce9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
        <definition>wxDateTime_t wxDateTime::GetWeekOfMonth</definition>
        <argsstring>(WeekFlags flags=Monday_First, const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetWeekOfMonth</name>
        <param>
          <type><ref refid="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4" kindref="member">WeekFlags</ref></type>
          <declname>flags</declname>
          <defval>Monday_First</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the ordinal number of the week in the month (in 1-5 range). </para>        </briefdescription>
        <detaileddescription>
<para>As <ref refid="classwx_date_time_1aeb92e6f6fdd172850a759fda324c87fb" kindref="member">GetWeekOfYear()</ref>, this function supports both conventions for the week start. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="690"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aeb92e6f6fdd172850a759fda324c87fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
        <definition>wxDateTime_t wxDateTime::GetWeekOfYear</definition>
        <argsstring>(WeekFlags flags=Monday_First, const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetWeekOfYear</name>
        <param>
          <type><ref refid="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4" kindref="member">WeekFlags</ref></type>
          <declname>flags</declname>
          <defval>Monday_First</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the number of the week of the year this date is in. </para>        </briefdescription>
        <detaileddescription>
<para>The first week of the year is, according to international standards, the one containing Jan 4 or, equivalently, the first week which has Thursday in this year. Both of these definitions are the same as saying that the first week of the year must contain more than half of its days in this year. Accordingly, the week number will always be in 1-53 range (52 for non-leap years).</para><para>The function depends on the week start convention specified by the <emphasis>flags</emphasis> argument but its results for <computeroutput>Sunday_First</computeroutput> are not well-defined as the ISO definition quoted above applies to the weeks starting on Monday only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="706"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a27fe507f5ba549091f1f7d523e424be9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxDateTime::GetYear</definition>
        <argsstring>(const TimeZone &amp;tz=Local) const </argsstring>
        <name>GetYear</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>Returns the year in the given timezone (local one by default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="711"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aa87b3990a0d925f9d0221411aa8c9375" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsGregorianDate</definition>
        <argsstring>(GregorianAdoption country=Gr_Standard) const </argsstring>
        <name>IsGregorianDate</name>
        <param>
          <type><ref refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317" kindref="member">GregorianAdoption</ref></type>
          <declname>country</declname>
          <defval>Gr_Standard</defval>
        </param>
        <briefdescription>
<para>Returns true if the given date is later than the date of adoption of the Gregorian calendar in the given country (and hence the Gregorian calendar calculations make sense for it). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="718"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aaff0bd60809b4d03839ddd4c6eb9e84d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsValid</definition>
        <argsstring>() const </argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Returns true if the object represents a valid time moment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="723"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a24f030fd10755b6a0e30fb7cdc9933bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsWorkDay</definition>
        <argsstring>(Country country=Country_Default) const </argsstring>
        <name>IsWorkDay</name>
        <param>
          <type><ref refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" kindref="member">Country</ref></type>
          <declname>country</declname>
          <defval>Country_Default</defval>
        </param>
        <briefdescription>
<para>Returns true is this day is not a holiday in the given country. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="728"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Date Comparison</header>
      <description><para>There are several functions to allow date comparison.</para><para>To supplement them, a few global operators, etc taking <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> are defined. </para></description>
      <memberdef kind="function" id="classwx_date_time_1a73fc9631cab5db9cc602bb5ec6c1f505" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsEarlierThan</definition>
        <argsstring>(const wxDateTime &amp;datetime) const </argsstring>
        <name>IsEarlierThan</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>datetime</declname>
        </param>
        <briefdescription>
<para>Returns true if this date precedes the given one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="745"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a0a00396a0e837d2577547363a50467ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsEqualTo</definition>
        <argsstring>(const wxDateTime &amp;datetime) const </argsstring>
        <name>IsEqualTo</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>datetime</declname>
        </param>
        <briefdescription>
<para>Returns true if the two dates are strictly identical. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="750"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a984b284c05ac8f37c5ad335cd6ad1c52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsEqualUpTo</definition>
        <argsstring>(const wxDateTime &amp;dt, const wxTimeSpan &amp;ts) const </argsstring>
        <name>IsEqualUpTo</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref> &amp;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>Returns true if the date is equal to another one up to the given time interval, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>if the absolute difference between the two dates is less than this interval. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="757"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a9e0c48caeb682ef668b4d7940d663937" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsLaterThan</definition>
        <argsstring>(const wxDateTime &amp;datetime) const </argsstring>
        <name>IsLaterThan</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>datetime</declname>
        </param>
        <briefdescription>
<para>Returns true if this date is later than the given one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="762"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a237d373eb71aff639e44e5ff46ddf2f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsSameDate</definition>
        <argsstring>(const wxDateTime &amp;dt) const </argsstring>
        <name>IsSameDate</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Returns true if the date is the same without comparing the time parts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="767"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a5627246bfbd060f01f027ae1d53a7f24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsSameTime</definition>
        <argsstring>(const wxDateTime &amp;dt) const </argsstring>
        <name>IsSameTime</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Returns true if the time is the same (although dates may differ). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="772"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ad1edfb9a46c2dcd963200beff1648dc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsStrictlyBetween</definition>
        <argsstring>(const wxDateTime &amp;t1, const wxDateTime &amp;t2) const </argsstring>
        <name>IsStrictlyBetween</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>Returns true if this date lies strictly between the two given dates. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_date_time_1a8985ab251703e34d0b288a22581ba9d8" kindref="member">IsBetween()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="780"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a8985ab251703e34d0b288a22581ba9d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::IsBetween</definition>
        <argsstring>(const wxDateTime &amp;t1, const wxDateTime &amp;t2) const </argsstring>
        <name>IsBetween</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>Returns true if <ref refid="classwx_date_time_1ad1edfb9a46c2dcd963200beff1648dc2" kindref="member">IsStrictlyBetween()</ref> is true or if the date is equal to one of the limit values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_date_time_1ad1edfb9a46c2dcd963200beff1648dc2" kindref="member">IsStrictlyBetween()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="788"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Date Arithmetics</header>
      <description><para>These functions carry out <ref refid="overview_datetime_1overview_datetime_arithmetics" kindref="member">arithmetics</ref> on the <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> objects.</para><para>As explained in the overview, either <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref> or <ref refid="classwx_date_span" kindref="compound">wxDateSpan</ref> may be added to <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref>, hence all functions are overloaded to accept both arguments.</para><para>Also, both <ref refid="classwx_date_time_1a53c8d4e51a784a64b374124a60921f27" kindref="member">Add()</ref> and <ref refid="classwx_date_time_1a99bfe3957c206d71cd4d980b10b400a1" kindref="member">Subtract()</ref> have both const and non-const version. The first one returns a new object which represents the sum/difference of the original one with the argument while the second form modifies the object to which it is applied. The operators &quot;-=&quot; and &quot;+=&quot; are defined to be equivalent to the second forms of these functions. </para></description>
      <memberdef kind="function" id="classwx_date_time_1a53c8d4e51a784a64b374124a60921f27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::Add</definition>
        <argsstring>(const wxDateSpan &amp;diff) const </argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classwx_date_span" kindref="compound">wxDateSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Adds the given date span to this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="814"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a9ed88ad5bc505a961d4a86083e3b2cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::Add</definition>
        <argsstring>(const wxDateSpan &amp;diff)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classwx_date_span" kindref="compound">wxDateSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Adds the given date span to this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="818"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a8cb13e8a953a8061fba8c718929beaa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::Add</definition>
        <argsstring>(const wxTimeSpan &amp;diff) const </argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Adds the given time span to this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="822"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a36c3dfb82a3fdf9c0e4c8cc944508d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::Add</definition>
        <argsstring>(const wxTimeSpan &amp;diff)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Adds the given time span to this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="826"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a99bfe3957c206d71cd4d980b10b400a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::Subtract</definition>
        <argsstring>(const wxTimeSpan &amp;diff) const </argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Subtracts the given time span from this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="831"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a9bb9c12d2fa47e67b6f9975f5cb8d750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::Subtract</definition>
        <argsstring>(const wxTimeSpan &amp;diff)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Subtracts the given time span from this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="835"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1afb1be3e9505496ec939897ec892fe694" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::Subtract</definition>
        <argsstring>(const wxDateSpan &amp;diff) const </argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classwx_date_span" kindref="compound">wxDateSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Subtracts the given date span from this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="839"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ad2975130454759c7b198e14de10d2655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::Subtract</definition>
        <argsstring>(const wxDateSpan &amp;diff)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classwx_date_span" kindref="compound">wxDateSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Subtracts the given date span from this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="843"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a0c983954508addf59aa40c75eac4beea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref></type>
        <definition>wxTimeSpan wxDateTime::Subtract</definition>
        <argsstring>(const wxDateTime &amp;dt) const </argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Subtracts another date from this one and returns the difference between them as a <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="848"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ac1a77fc607ee36a16fba7078d25fe44d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::operator+=</definition>
        <argsstring>(const wxDateSpan &amp;diff)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classwx_date_span" kindref="compound">wxDateSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Adds the given date span to this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="853"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a146dd110466fb8ba714e98a853b83019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::operator-=</definition>
        <argsstring>(const wxDateSpan &amp;diff)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classwx_date_span" kindref="compound">wxDateSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Subtracts the given date span from this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="857"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ae3f78fde5174f576fca00eb21654544f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::operator+=</definition>
        <argsstring>(const wxTimeSpan &amp;diff)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Adds the given time span to this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="861"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a45d8ef84a5fcda547a9a15226ee68347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::operator-=</definition>
        <argsstring>(const wxTimeSpan &amp;diff)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref> &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Subtracts the given time span from this object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="865"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Date Formatting and Parsing</header>
      <description><para>See <ref refid="classwx_date_time_1datetime_formatting" kindref="member">Date Formatting and Parsing</ref> </para></description>
      <memberdef kind="function" id="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxDateTime::Format</definition>
        <argsstring>(const wxString &amp;format=wxDefaultDateTimeFormat, const TimeZone &amp;tz=Local) const </argsstring>
        <name>Format</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>format</declname>
          <defval>wxDefaultDateTimeFormat</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
          <defval>Local</defval>
        </param>
        <briefdescription>
<para>This function does the same as the standard ANSI C <computeroutput>strftime(3)</computeroutput> function (<ulink url="http://www.cplusplus.com/reference/clibrary/ctime/strftime.html">http://www.cplusplus.com/reference/clibrary/ctime/strftime.html</ulink>). </para>        </briefdescription>
        <detaileddescription>
<para>Please see its description for the meaning of <emphasis>format</emphasis> parameter.</para><para>It also accepts a few wxWidgets-specific extensions: you can optionally specify the width of the field to follow using <computeroutput>printf(3)-like</computeroutput> syntax and the format specification <computeroutput>&quot;%l&quot;</computeroutput> can be used to get the number of milliseconds.</para><para><simplesect kind="see"><para><ref refid="classwx_date_time_1a5d01d56c310d505a093f1a7f25086a1b" kindref="member">ParseFormat()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="891"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ab9886b69761a87ccf77f0ffee7c7f12e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxDateTime::FormatDate</definition>
        <argsstring>() const </argsstring>
        <name>FormatDate</name>
        <briefdescription>
<para>Identical to calling <ref refid="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" kindref="member">Format()</ref> with <computeroutput>&quot;%x&quot;</computeroutput> argument (which means &quot;preferred date representation for the current locale&quot;). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="897"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a8d99cfc519de33d2fcf16360a13212f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxDateTime::FormatISOCombined</definition>
        <argsstring>(char sep= &apos;T&apos;) const </argsstring>
        <name>FormatISOCombined</name>
        <param>
          <type>char</type>
          <declname>sep</declname>
          <defval>&apos;T&apos;</defval>
        </param>
        <briefdescription>
<para>Returns the combined date-time representation in the ISO 8601 format <computeroutput>&quot;YYYY-MM-DDTHH:MM:SS&quot;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>sep</emphasis> parameter default value produces the result exactly corresponding to the ISO standard, but it can also be useful to use a space as separator if a more human-readable combined date-time representation is needed.</para><para><simplesect kind="see"><para><ref refid="classwx_date_time_1a7dc79585261a999dbd43152186e52299" kindref="member">FormatISODate()</ref>, <ref refid="classwx_date_time_1a0f677ffcbc651c733249af36af6bbb3b" kindref="member">FormatISOTime()</ref>, <ref refid="classwx_date_time_1a35240c6a928bc9c763a5d26bd8f3072b" kindref="member">ParseISOCombined()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="908"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a7dc79585261a999dbd43152186e52299" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxDateTime::FormatISODate</definition>
        <argsstring>() const </argsstring>
        <name>FormatISODate</name>
        <briefdescription>
<para>This function returns the date representation in the ISO 8601 format <computeroutput>&quot;YYYY-MM-DD&quot;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="914"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a0f677ffcbc651c733249af36af6bbb3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxDateTime::FormatISOTime</definition>
        <argsstring>() const </argsstring>
        <name>FormatISOTime</name>
        <briefdescription>
<para>This function returns the time representation in the ISO 8601 format <computeroutput>&quot;HH:MM:SS&quot;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="920"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a4d3145af33faf443ac9d9fdfc4256c1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxDateTime::FormatTime</definition>
        <argsstring>() const </argsstring>
        <name>FormatTime</name>
        <briefdescription>
<para>Identical to calling <ref refid="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" kindref="member">Format()</ref> with <computeroutput>&quot;%X&quot;</computeroutput> argument (which means &quot;preferred time representation for the current locale&quot;). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="926"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1acdcb88e25b38099994af45b11391c962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseDate</definition>
        <argsstring>(const wxString &amp;date, wxString::const_iterator *end)</argsstring>
        <name>ParseDate</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>wxString::const_iterator *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>This function is like <ref refid="classwx_date_time_1a332a41f998bc3be6c0a9a81449112485" kindref="member">ParseDateTime()</ref>, but it only allows the date to be specified. </para>        </briefdescription>
        <detaileddescription>
<para>It is thus less flexible then <ref refid="classwx_date_time_1a332a41f998bc3be6c0a9a81449112485" kindref="member">ParseDateTime()</ref>, but also has less chances to misinterpret the user input.</para><para>See <ref refid="classwx_date_time_1a5d01d56c310d505a093f1a7f25086a1b" kindref="member">ParseFormat()</ref> for the description of function parameters and return value.</para><para><simplesect kind="see"><para><ref refid="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" kindref="member">Format()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="940"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a332a41f998bc3be6c0a9a81449112485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseDateTime</definition>
        <argsstring>(const wxString &amp;datetime, wxString::const_iterator *end)</argsstring>
        <name>ParseDateTime</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>datetime</declname>
        </param>
        <param>
          <type>wxString::const_iterator *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Parses the string <emphasis>datetime</emphasis> containing the date and time in free format. </para>        </briefdescription>
        <detaileddescription>
<para>This function tries as hard as it can to interpret the given string as date and time. Unlike <ref refid="classwx_date_time_1ab0f2485c52d0d3cf0196aaf0062d2f83" kindref="member">ParseRfc822Date()</ref>, it will accept anything that may be accepted and will only reject strings which cannot be parsed in any way at all. Notice that the function will fail if either date or time part is present but not both, use <ref refid="classwx_date_time_1acdcb88e25b38099994af45b11391c962" kindref="member">ParseDate()</ref> or <ref refid="classwx_date_time_1ac903b3227620e1b88019e76b807327e8" kindref="member">ParseTime()</ref> to parse strings containing just the date or time component.</para><para>See <ref refid="classwx_date_time_1a5d01d56c310d505a093f1a7f25086a1b" kindref="member">ParseFormat()</ref> for the description of function parameters and return value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="956"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a5d01d56c310d505a093f1a7f25086a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseFormat</definition>
        <argsstring>(const wxString &amp;date, const wxString &amp;format, const wxDateTime &amp;dateDef, wxString::const_iterator *end)</argsstring>
        <name>ParseFormat</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
          <declname>dateDef</declname>
        </param>
        <param>
          <type>wxString::const_iterator *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>This function parses the string <emphasis>date</emphasis> according to the given <emphasis>format</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The system <computeroutput>strptime(3)</computeroutput> function is used whenever available, but even if it is not, this function is still implemented, although support for locale-dependent format specifiers such as <computeroutput>&quot;%c&quot;</computeroutput>, <computeroutput>&quot;%x&quot;</computeroutput> or <computeroutput>&quot;%X&quot;</computeroutput> may not be perfect and GNU extensions such as <computeroutput>&quot;%z&quot;</computeroutput> and <computeroutput>&quot;%Z&quot;</computeroutput> are not implemented. This function does handle the month and weekday names in the current locale on all platforms, however.</para><para>Please see the description of the ANSI C function <computeroutput>strftime(3)</computeroutput> for the syntax of the format string.</para><para>The <emphasis>dateDef</emphasis> parameter is used to fill in the fields which could not be determined from the format string. For example, if the format is <computeroutput>&quot;%d&quot;</computeroutput> (the day of the month), the month and the year are taken from <emphasis>dateDef</emphasis>. If it is not specified, <ref refid="classwx_date_time_1af730202238b9acd5a5df2977fa40c569" kindref="member">Today()</ref> is used as the default date.</para><para>Example of using this function: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_date_time" kindref="compound" tooltip="wxDateTime class represents an absolute moment in time.">wxDateTime</ref><sp/>dt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxString::const_iterator<sp/>end;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!dt.<ref refid="classwx_date_time_1a5d01d56c310d505a093f1a7f25086a1b" kindref="member" tooltip="This function parses the string date according to the given format.">ParseFormat</ref>(str,<sp/></highlight><highlight class="stringliteral">&quot;%Y-%m-%d&quot;</highlight><highlight class="normal">,<sp/>&amp;end)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>parsing<sp/>failed<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>end<sp/>==<sp/>str.<ref refid="classwx_string_1a6a0f235fff88df5e6b16b5f0e1e719cc" kindref="member">end</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>entire<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>parsed<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>(end,<sp/>str.<ref refid="classwx_string_1a6a0f235fff88df5e6b16b5f0e1e719cc" kindref="member">end</ref>())<sp/>left<sp/>over<sp/>...</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>date</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>strptime()-like format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dateDef</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to fill in the date components not specified in the <emphasis>date</emphasis> string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Will be filled with the iterator pointing to the location where the parsing stopped if the function returns true. If the entire string was consumed, it is set to <computeroutput>date.end()</computeroutput>. Notice that this argument must be non-NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if at least part of the string was parsed successfully, false otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" kindref="member">Format()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1011"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aa2137ab606576e3f5baf50d98ff47d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseFormat</definition>
        <argsstring>(const wxString &amp;date, const wxString &amp;format, wxString::const_iterator *end)</argsstring>
        <name>ParseFormat</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>wxString::const_iterator *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1018"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a9430da2d38573e4043cf1217c0da1916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseFormat</definition>
        <argsstring>(const wxString &amp;date, wxString::const_iterator *end)</argsstring>
        <name>ParseFormat</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>wxString::const_iterator *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1023"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a35240c6a928bc9c763a5d26bd8f3072b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseISOCombined</definition>
        <argsstring>(const wxString &amp;date, char sep= &apos;T&apos;)</argsstring>
        <name>ParseISOCombined</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>char</type>
          <declname>sep</declname>
          <defval>&apos;T&apos;</defval>
        </param>
        <briefdescription>
<para>This function parses the string containing the date and time in ISO 8601 combined format <computeroutput>&quot;YYYY-MM-DDTHH:MM:SS&quot;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The separator between the date and time parts must be equal to <emphasis>sep</emphasis> for the function to succeed.</para><para><simplesect kind="return"><para>true if the entire string was parsed successfully, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1034"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a416e9e5e7395dd11a059cd116da7e6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseISODate</definition>
        <argsstring>(const wxString &amp;date)</argsstring>
        <name>ParseISODate</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
<para>This function parses the date in ISO 8601 format <computeroutput>&quot;YYYY-MM-DD&quot;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the entire string was parsed successfully, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1042"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1adc4c1fb178f73958b151eabd36625f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseISOTime</definition>
        <argsstring>(const wxString &amp;date)</argsstring>
        <name>ParseISOTime</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
<para>This function parses the time in ISO 8601 format <computeroutput>&quot;HH:MM:SS&quot;</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the entire string was parsed successfully, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1050"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ab0f2485c52d0d3cf0196aaf0062d2f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseRfc822Date</definition>
        <argsstring>(const wxString &amp;date, wxString::const_iterator *end)</argsstring>
        <name>ParseRfc822Date</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>wxString::const_iterator *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Parses the string <emphasis>date</emphasis> looking for a date formatted according to the RFC 822 in it. </para>        </briefdescription>
        <detaileddescription>
<para>The exact description of this format may, of course, be found in the RFC (section 5), but, briefly, this is the format used in the headers of Internet email messages and one of the most common strings expressing date in this format may be something like <computeroutput>&quot;Sat, 18 Dec 1999 00:48:30 +0100&quot;</computeroutput>.</para><para>Returns NULL if the conversion failed, otherwise return the pointer to the character immediately following the part of the string which could be parsed. If the entire string contains only the date in RFC 822 format, the returned pointer will be pointing to a <computeroutput>NUL</computeroutput> character.</para><para>This function is intentionally strict, it will return an error for any string which is not RFC 822 compliant. If you need to parse date formatted in more free ways, you should use <ref refid="classwx_date_time_1a332a41f998bc3be6c0a9a81449112485" kindref="member">ParseDateTime()</ref> or <ref refid="classwx_date_time_1acdcb88e25b38099994af45b11391c962" kindref="member">ParseDate()</ref> instead.</para><para>See <ref refid="classwx_date_time_1a5d01d56c310d505a093f1a7f25086a1b" kindref="member">ParseFormat()</ref> for the description of function parameters and return value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1073"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ac903b3227620e1b88019e76b807327e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::ParseTime</definition>
        <argsstring>(const wxString &amp;time, wxString::const_iterator *end)</argsstring>
        <name>ParseTime</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type>wxString::const_iterator *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>This functions is like <ref refid="classwx_date_time_1a332a41f998bc3be6c0a9a81449112485" kindref="member">ParseDateTime()</ref>, but only allows the time to be specified in the input string. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_date_time_1a5d01d56c310d505a093f1a7f25086a1b" kindref="member">ParseFormat()</ref> for the description of function parameters and return value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1082"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Calendar Calculations</header>
      <description><para>The functions in this section perform the basic calendar calculations, mostly related to the week days.</para><para>They allow to find the given week day in the week with given number (either in the month or in the year) and so on.</para><para>None of the functions in this section modify the time part of the <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref>, they only work with the date part of it. </para></description>
      <memberdef kind="function" id="classwx_date_time_1a87f1ede94cfcda2a8b2db7322432f2f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::GetLastMonthDay</definition>
        <argsstring>(Month month=Inv_Month, int year=Inv_Year) const </argsstring>
        <name>GetLastMonthDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
          <defval>Inv_Month</defval>
        </param>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <briefdescription>
<para>Returns the copy of this object to which <ref refid="classwx_date_time_1a6d6bc203c75e55188c03d60d88600494" kindref="member">SetToLastMonthDay()</ref> was applied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1106"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a931022efed3491d720ebc9767acb9051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::GetLastWeekDay</definition>
        <argsstring>(WeekDay weekday, Month month=Inv_Month, int year=Inv_Year)</argsstring>
        <name>GetLastWeekDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
          <defval>Inv_Month</defval>
        </param>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <briefdescription>
<para>Returns the copy of this object to which <ref refid="classwx_date_time_1a55182141a6235de19c0bae356994e6f0" kindref="member">SetToLastWeekDay()</ref> was applied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1113"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a948507060e1ca798a5c2ee10ddadd7f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::GetNextWeekDay</definition>
        <argsstring>(WeekDay weekday) const </argsstring>
        <name>GetNextWeekDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <briefdescription>
<para>Returns the copy of this object to which <ref refid="classwx_date_time_1ab239f44b4d46001c5887f8a3680fa5c0" kindref="member">SetToNextWeekDay()</ref> was applied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1119"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a5a982f1f5674f694e4ae1df980fb1af6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::GetPrevWeekDay</definition>
        <argsstring>(WeekDay weekday) const </argsstring>
        <name>GetPrevWeekDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <briefdescription>
<para>Returns the copy of this object to which <ref refid="classwx_date_time_1a798feefecc3c77cc64ba3e585b5ac704" kindref="member">SetToPrevWeekDay()</ref> was applied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1125"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a313aab54e44a9de99b6f0d0eef528aa7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::GetWeekDay</definition>
        <argsstring>(WeekDay weekday, int n=1, Month month=Inv_Month, int year=Inv_Year) const </argsstring>
        <name>GetWeekDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
          <defval>Inv_Month</defval>
        </param>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <briefdescription>
<para>Returns the copy of this object to which <ref refid="classwx_date_time_1a4687372ebe55a6aded83de6a639cde95" kindref="member">SetToWeekDay()</ref> was applied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1131"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a2b3deaf8d044cb517c2fabc7a0a4e561" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::GetWeekDayInSameWeek</definition>
        <argsstring>(WeekDay weekday, WeekFlags flags=Monday_First) const </argsstring>
        <name>GetWeekDayInSameWeek</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4" kindref="member">WeekFlags</ref></type>
          <declname>flags</declname>
          <defval>Monday_First</defval>
        </param>
        <briefdescription>
<para>Returns the copy of this object to which <ref refid="classwx_date_time_1a927cf1043514729227f07d244b208142" kindref="member">SetToWeekDayInSameWeek()</ref> was applied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1138"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ad96b754422ee7db5adcace39b4f2395e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::GetYearDay</definition>
        <argsstring>(wxDateTime_t yday) const </argsstring>
        <name>GetYearDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>yday</declname>
        </param>
        <briefdescription>
<para>Returns the copy of this object to which <ref refid="classwx_date_time_1a857b73aa9271782744cd524bea373f3c" kindref="member">SetToYearDay()</ref> was applied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1143"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a6d6bc203c75e55188c03d60d88600494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetToLastMonthDay</definition>
        <argsstring>(Month month=Inv_Month, int year=Inv_Year)</argsstring>
        <name>SetToLastMonthDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
          <defval>Inv_Month</defval>
        </param>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <briefdescription>
<para>Sets the date to the last day in the specified month (the current one by default). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The reference to the modified object itself. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1151"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a55182141a6235de19c0bae356994e6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::SetToLastWeekDay</definition>
        <argsstring>(WeekDay weekday, Month month=Inv_Month, int year=Inv_Year)</argsstring>
        <name>SetToLastWeekDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
          <defval>Inv_Month</defval>
        </param>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <briefdescription>
<para>The effect of calling this function is the same as of calling <computeroutput>SetToWeekDay</computeroutput>(-1, weekday, month, year). </para>        </briefdescription>
        <detaileddescription>
<para>The date will be set to the last <emphasis>weekday</emphasis> in the given month and year (the current ones by default). Always returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1160"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ab239f44b4d46001c5887f8a3680fa5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetToNextWeekDay</definition>
        <argsstring>(WeekDay weekday)</argsstring>
        <name>SetToNextWeekDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <briefdescription>
<para>Sets the date so that it will be the first <emphasis>weekday</emphasis> following the current date. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The reference to the modified object itself. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1168"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a798feefecc3c77cc64ba3e585b5ac704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetToPrevWeekDay</definition>
        <argsstring>(WeekDay weekday)</argsstring>
        <name>SetToPrevWeekDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <briefdescription>
<para>Sets the date so that it will be the last <emphasis>weekday</emphasis> before the current date. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The reference to the modified object itself. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1176"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a4687372ebe55a6aded83de6a639cde95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDateTime::SetToWeekDay</definition>
        <argsstring>(WeekDay weekday, int n=1, Month month=Inv_Month, int year=Inv_Year)</argsstring>
        <name>SetToWeekDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
          <defval>Inv_Month</defval>
        </param>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <briefdescription>
<para>Sets the date to the <emphasis>n-th</emphasis> <emphasis>weekday</emphasis> in the given month of the given year (the current month and year are used by default). </para>        </briefdescription>
        <detaileddescription>
<para>The parameter <emphasis>n</emphasis> may be either positive (counting from the beginning of the month) or negative (counting from the end of it).</para><para>For example, SetToWeekDay(2, wxDateTime::Wed) will set the date to the second Wednesday in the current month and SetToWeekDay(-1, <ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457aecc652810e8944beafed362de118d631" kindref="member">wxDateTime::Sun</ref>) will set the date to the last Sunday in the current month.</para><para><simplesect kind="return"><para>true if the date was modified successfully, false otherwise meaning that the specified date doesn&apos;t exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1193"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a927cf1043514729227f07d244b208142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetToWeekDayInSameWeek</definition>
        <argsstring>(WeekDay weekday, WeekFlags flags=Monday_First)</argsstring>
        <name>SetToWeekDayInSameWeek</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4" kindref="member">WeekFlags</ref></type>
          <declname>flags</declname>
          <defval>Monday_First</defval>
        </param>
        <briefdescription>
<para>Adjusts the date so that it will still lie in the same week as before, but its week day will be the given one. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The reference to the modified object itself. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1202"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a857b73aa9271782744cd524bea373f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::SetToYearDay</definition>
        <argsstring>(wxDateTime_t yday)</argsstring>
        <name>SetToYearDay</name>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>yday</declname>
        </param>
        <briefdescription>
<para>Sets the date to the day number <emphasis>yday</emphasis> in the same year (i.e., unlike the other functions, this one does not use the current year). </para>        </briefdescription>
        <detaileddescription>
<para>The day number should be in the range 1-366 for the leap years and 1-365 for the other ones.</para><para><simplesect kind="return"><para>The reference to the modified object itself. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1212"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Astronomical/Historical Functions</header>
      <description><para>Some degree of support for the date units used in astronomy and/or history is provided.</para><para>You can construct a <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> object from a JDN and you may also get its JDN, MJD or Rata Die number from it.</para><para>Related functions in other groups: <ref refid="classwx_date_time_1aa2c38922eafec2a94fb5ee9221c0f6b9" kindref="member">wxDateTime(double)</ref>, <ref refid="classwx_date_time_1acfaba2a9f0241f74aff4641304f0a8fb" kindref="member">Set(double)</ref> </para></description>
      <memberdef kind="function" id="classwx_date_time_1a0bde25a418d8a7fd3e6e6a4c3941e20f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxDateTime::GetJDN</definition>
        <argsstring>() const </argsstring>
        <name>GetJDN</name>
        <briefdescription>
<para>Synonym for <ref refid="classwx_date_time_1af99c22cc0d4d7deaffbc3b998403b7d1" kindref="member">GetJulianDayNumber()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1232"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1af99c22cc0d4d7deaffbc3b998403b7d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxDateTime::GetJulianDayNumber</definition>
        <argsstring>() const </argsstring>
        <name>GetJulianDayNumber</name>
        <briefdescription>
<para>Returns the JDN corresponding to this date. </para>        </briefdescription>
        <detaileddescription>
<para>Beware of rounding errors!</para><para><simplesect kind="see"><para><ref refid="classwx_date_time_1aec513fdaa56ec1f13ca9d1e3e48a485d" kindref="member">GetModifiedJulianDayNumber()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1239"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a28e2d20d224aedadad683a93d88c5c4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxDateTime::GetMJD</definition>
        <argsstring>() const </argsstring>
        <name>GetMJD</name>
        <briefdescription>
<para>Synonym for <ref refid="classwx_date_time_1aec513fdaa56ec1f13ca9d1e3e48a485d" kindref="member">GetModifiedJulianDayNumber()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1244"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aec513fdaa56ec1f13ca9d1e3e48a485d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxDateTime::GetModifiedJulianDayNumber</definition>
        <argsstring>() const </argsstring>
        <name>GetModifiedJulianDayNumber</name>
        <briefdescription>
<para>Returns the <emphasis>&quot;Modified Julian Day Number&quot;</emphasis> (MJD) which is, by definition, is equal to JDN - 2400000.5. </para>        </briefdescription>
        <detaileddescription>
<para>The MJDs are simpler to work with as the integral MJDs correspond to midnights of the dates in the Gregorian calendar and not the noons like JDN. The MJD 0 represents Nov 17, 1858. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1253"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ab81c9b7069ad4eb91bafdc144a2baea6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxDateTime::GetRataDie</definition>
        <argsstring>() const </argsstring>
        <name>GetRataDie</name>
        <briefdescription>
<para>Return the <emphasis>Rata</emphasis> Die number of this date. </para>        </briefdescription>
        <detaileddescription>
<para>By definition, the Rata Die number is a date specified as the number of days relative to a base date of December 31 of the year 0. Thus January 1 of the year 1 is Rata Die day 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1262"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Time Zone and DST Support</header>
      <description><para>Please see the <ref refid="overview_datetime_1overview_datetime_timezones" kindref="member">time zone overview</ref> for more information about time zones.</para><para>Normally, these functions should be rarely used.</para><para>Related functions in other groups: <ref refid="classwx_date_time_1a968bb73469fdccd2903c671b435735d7" kindref="member">GetBeginDST()</ref>, <ref refid="classwx_date_time_1a8c811978a0390f54ffa6012931ecb1af" kindref="member">GetEndDST()</ref> </para></description>
      <memberdef kind="function" id="classwx_date_time_1a947daf50d898d95d063777c2cef27feb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::FromTimezone</definition>
        <argsstring>(const TimeZone &amp;tz, bool noDST=false) const </argsstring>
        <name>FromTimezone</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>noDST</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Transform the date from the given time zone to the local one. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>noDST</emphasis> is true, no DST adjustments will be made.</para><para><simplesect kind="return"><para>The date in the local time zone. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1285"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a5478f06e2449d299c60ad98be6ca34a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxDateTime::IsDST</definition>
        <argsstring>(Country country=Country_Default) const </argsstring>
        <name>IsDST</name>
        <param>
          <type><ref refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" kindref="member">Country</ref></type>
          <declname>country</declname>
          <defval>Country_Default</defval>
        </param>
        <briefdescription>
<para>Returns true if the DST is applied for this date in the given country. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_date_time_1a968bb73469fdccd2903c671b435735d7" kindref="member">GetBeginDST()</ref>, <ref refid="classwx_date_time_1a8c811978a0390f54ffa6012931ecb1af" kindref="member">GetEndDST()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1292"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a83cff1eb8079f9eef5c386a5701d8803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::MakeFromTimezone</definition>
        <argsstring>(const TimeZone &amp;tz, bool noDST=false)</argsstring>
        <name>MakeFromTimezone</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>noDST</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_date_time_1a947daf50d898d95d063777c2cef27feb" kindref="member">FromTimezone()</ref> but modifies the object in place. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1297"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ad6ce9eb1fb237eda8013695ebd531af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::MakeTimezone</definition>
        <argsstring>(const TimeZone &amp;tz, bool noDST=false)</argsstring>
        <name>MakeTimezone</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>noDST</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Modifies the object in place to represent the date in another time zone. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>noDST</emphasis> is true, no DST adjustments will be made. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1303"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aa7e62cebf49c1c6b765e70ec19caedc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> &amp;</type>
        <definition>wxDateTime&amp; wxDateTime::MakeUTC</definition>
        <argsstring>(bool noDST=false)</argsstring>
        <name>MakeUTC</name>
        <param>
          <type>bool</type>
          <declname>noDST</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is the same as calling <ref refid="classwx_date_time_1ad6ce9eb1fb237eda8013695ebd531af1" kindref="member">MakeTimezone()</ref> with the argument <computeroutput>GMT0</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1308"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a254dff0f6fb8861216941dcc3d4fdc15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::ToTimezone</definition>
        <argsstring>(const TimeZone &amp;tz, bool noDST=false) const </argsstring>
        <name>ToTimezone</name>
        <param>
          <type>const <ref refid="classwx_date_time_1_1_time_zone" kindref="compound">TimeZone</ref> &amp;</type>
          <declname>tz</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>noDST</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Transform the date to the given time zone. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>noDST</emphasis> is true, no DST adjustments will be made.</para><para><simplesect kind="return"><para>The date in the new time zone. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1316"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a4bddd303b09cc47c7251b01ca49dc04c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>wxDateTime wxDateTime::ToUTC</definition>
        <argsstring>(bool noDST=false) const </argsstring>
        <name>ToUTC</name>
        <param>
          <type>bool</type>
          <declname>noDST</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is the same as calling <ref refid="classwx_date_time_1a254dff0f6fb8861216941dcc3d4fdc15" kindref="member">ToTimezone()</ref> with the argument <computeroutput>GMT0</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1321"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bb" prot="public" static="no">
        <name>TZ</name>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba44955e1d9b9cb1259580226af61d33d8" prot="public">
          <name>Local</name>
          <briefdescription>
<para>the time in the current time zone </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba87b4b5dd24a2f226d58845a617c9053d" prot="public">
          <name>GMT_12</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba557c461adc9d42d4616918de09322374" prot="public">
          <name>GMT_11</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba0b1be6322c3d8fd8a69f92becd90ef92" prot="public">
          <name>GMT_10</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba92f26e662b9b6fe85e9129b01792405c" prot="public">
          <name>GMT_9</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba399a20c6a1a04a0104db4dffe3e97c58" prot="public">
          <name>GMT_8</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba7663c300529ca4254900540cecb0b0ce" prot="public">
          <name>GMT_7</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba827233a73b3dcb35764873db1e25bfc6" prot="public">
          <name>GMT_6</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba9934f36511c6ed34de0a94d5d553a07b" prot="public">
          <name>GMT_5</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba2af42038185283cfb9c2e32ae658510e" prot="public">
          <name>GMT_4</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba1adb33fc9a930f9f0b9f8a009eb93e2b" prot="public">
          <name>GMT_3</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbac62a008b6600cbb068a7d887e839d6a9" prot="public">
          <name>GMT_2</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbaff8e187024b6a0331ed17cc9cf54afc9" prot="public">
          <name>GMT_1</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba2120dec8c0b1cd718dac28c2d31febe1" prot="public">
          <name>GMT0</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba53cced34a141bad15c02769461b0f4ce" prot="public">
          <name>GMT1</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba9e7b73170b341b26a3945980376ad0eb" prot="public">
          <name>GMT2</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba5b1f37e6ee84cf7ef93e9d98012a4829" prot="public">
          <name>GMT3</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba90bc724fa31f2917b7126417132975d5" prot="public">
          <name>GMT4</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba4a9d4c0b24aa6223b89c0b998e7a7d72" prot="public">
          <name>GMT5</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba9d2a38d213d85f81de337e8f0eb14b3e" prot="public">
          <name>GMT6</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba05a789a91aa72ac3077951a6c61a66aa" prot="public">
          <name>GMT7</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbacb72b7396d5f75461f2cee0de06999d2" prot="public">
          <name>GMT8</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbacf5ea594d20d5df0bebb1f148d648206" prot="public">
          <name>GMT9</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbab562c8c00f2773622b9d540bdc381366" prot="public">
          <name>GMT10</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbaf0545ec1a575e8e6f0acb97722b591c4" prot="public">
          <name>GMT11</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbae8ea01bdd4301a68cbdbc749701a5d79" prot="public">
          <name>GMT12</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbaa8b779df126c68b0137a0e9be836ff5d" prot="public">
          <name>GMT13</name>
          <briefdescription>
<para>zones from GMT (= Greenwich Mean Time): they&apos;re guaranteed to be consequent numbers, so writing something like `GMT0 + offset&apos; is safe if abs(offset) &lt;= 12 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbad1bb3e8d84a7cd92efabe75a088862ef" prot="public">
          <name>WET</name>
          <initializer> GMT0</initializer>
          <briefdescription>
<para>Western Europe Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbad85e6d8f2aaa3f603c2bfc58d84edb7a" prot="public">
          <name>WEST</name>
          <initializer> GMT1</initializer>
          <briefdescription>
<para>Western Europe Summer Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba768e71f1f3c63c6cf64dd9c9a0f20b0b" prot="public">
          <name>CET</name>
          <initializer> GMT1</initializer>
          <briefdescription>
<para>Central Europe Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbae628c26f3f2a2f404c38f3d8c4d878d5" prot="public">
          <name>CEST</name>
          <initializer> GMT2</initializer>
          <briefdescription>
<para>Central Europe Summer Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba8f0093ca02fad238db726c3ed8ec4c19" prot="public">
          <name>EET</name>
          <initializer> GMT2</initializer>
          <briefdescription>
<para>Eastern Europe Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba467f28d0dea96f56ae233215d720c9b3" prot="public">
          <name>EEST</name>
          <initializer> GMT3</initializer>
          <briefdescription>
<para>Eastern Europe Summer Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbafc28b9d52780f1a55d8a4a4f2075674d" prot="public">
          <name>MSK</name>
          <initializer> GMT3</initializer>
          <briefdescription>
<para>Moscow Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba30e029fadbdec932db6db3b7f9eb461e" prot="public">
          <name>MSD</name>
          <initializer> GMT4</initializer>
          <briefdescription>
<para>Moscow Summer Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba930fed7e2cfbc9d6ad9698d74aec7a3f" prot="public">
          <name>AST</name>
          <initializer> GMT_4</initializer>
          <briefdescription>
<para>Atlantic Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba70b32b6b2daef8c065fe3f7e81ac155f" prot="public">
          <name>ADT</name>
          <initializer> GMT_3</initializer>
          <briefdescription>
<para>Atlantic Daylight Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba20a03ab3f22b9c12c6a12f55f69af885" prot="public">
          <name>EST</name>
          <initializer> GMT_5</initializer>
          <briefdescription>
<para>Eastern Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba268100e90a290659a27f1daa2ffef118" prot="public">
          <name>EDT</name>
          <initializer> GMT_4</initializer>
          <briefdescription>
<para>Eastern Daylight Saving Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba5d3264d3bb4106df8a0f68b306f363bf" prot="public">
          <name>CST</name>
          <initializer> GMT_6</initializer>
          <briefdescription>
<para>Central Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbad526ab66e38a7141bdd9a82098684303" prot="public">
          <name>CDT</name>
          <initializer> GMT_5</initializer>
          <briefdescription>
<para>Central Daylight Saving Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba56d4091091fe350486bd2bafde5469a0" prot="public">
          <name>MST</name>
          <initializer> GMT_7</initializer>
          <briefdescription>
<para>Mountain Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba7f09567fdbe8c0f2d9ca6b2b5ab3b92a" prot="public">
          <name>MDT</name>
          <initializer> GMT_6</initializer>
          <briefdescription>
<para>Mountain Daylight Saving Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba9ef77e9f8a8423f55ddaf3c65f6f4de5" prot="public">
          <name>PST</name>
          <initializer> GMT_8</initializer>
          <briefdescription>
<para>Pacific Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba63f8efe7f2da52ba952daa48a2df8ad8" prot="public">
          <name>PDT</name>
          <initializer> GMT_7</initializer>
          <briefdescription>
<para>Pacific Daylight Saving Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba19b49f77ce14e8456f6ba311d5323c51" prot="public">
          <name>HST</name>
          <initializer> GMT_10</initializer>
          <briefdescription>
<para>Hawaiian Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbae0007943414383bc2d6d50b56080ffee" prot="public">
          <name>AKST</name>
          <initializer> GMT_9</initializer>
          <briefdescription>
<para>Alaska Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba3ccd7ea3db468da45836d2a2c66e9069" prot="public">
          <name>AKDT</name>
          <initializer> GMT_8</initializer>
          <briefdescription>
<para>Alaska Daylight Saving Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbab1b9c891ddf8d11322b9a6260131514a" prot="public">
          <name>A_WST</name>
          <initializer> GMT8</initializer>
          <briefdescription>
<para>Western Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba10a8880abe7d55c0e28c41badf1a3857" prot="public">
          <name>A_CST</name>
          <initializer> GMT13 + 1</initializer>
          <briefdescription>
<para>Central Standard Time (+9.5) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba30efbb5a9aaf55f7ae3d0b06eafb9ee4" prot="public">
          <name>A_EST</name>
          <initializer> GMT10</initializer>
          <briefdescription>
<para>Eastern Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba09b72a5bdfbec3d2e22153ee0ae585c2" prot="public">
          <name>A_ESST</name>
          <initializer> GMT11</initializer>
          <briefdescription>
<para>Eastern Summer Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbab65d681d65687315d5e8f5160e2d375d" prot="public">
          <name>NZST</name>
          <initializer> GMT12</initializer>
          <briefdescription>
<para>Standard Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba50981f4a9aa23c5765bbf82a31353d9c" prot="public">
          <name>NZDT</name>
          <initializer> GMT13</initializer>
          <briefdescription>
<para>Daylight Saving Time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba7c42813bc6ce147bb073c5783cbce8bb" prot="public">
          <name>UTC</name>
          <initializer> GMT0</initializer>
          <briefdescription>
<para>Universal Coordinated Time = the new and politically correct name for GMT. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Time zone symbolic names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="94" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="93" bodyend="154"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70c" prot="public" static="no">
        <name>Calendar</name>
        <enumvalue id="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70ca4b609caf0c9d7b04a88a0aa2dbd5dd91" prot="public">
          <name>Gregorian</name>
          <briefdescription>
<para>calendar currently in use in Western countries </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70cad5691423a7e252a4d910bca3d0cec255" prot="public">
          <name>Julian</name>
          <briefdescription>
<para>calendar in use since -45 until the 1582 (or later) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Several functions accept an extra parameter specifying the calendar to use (although most of them only support now the Gregorian calendar). </para>        </briefdescription>
        <detaileddescription>
<para>This parameters is one of the following values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="162" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317" prot="public" static="no">
        <name>GregorianAdoption</name>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a05b4d00b4f3b2cf9f94653731d077df7" prot="public">
          <name>Gr_Unknown</name>
          <briefdescription>
<para>no data for this country or it&apos;s too uncertain to use </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317adb5a0d088fe066053e4ee22aa18ec6e7" prot="public">
          <name>Gr_Standard</name>
          <briefdescription>
<para>on the day 0 of Gregorian calendar: 15 Oct 1582 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af01a3afc4efc21f6ffb06248c7f61aff" prot="public">
          <name>Gr_Alaska</name>
          <briefdescription>
<para>Oct 1867 when Alaska became part of the USA. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a0de48e9efd9a07f1811664b5a409a326" prot="public">
          <name>Gr_Albania</name>
          <briefdescription>
<para>Dec 1912. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a64a9932ab1688145c3f1bb42523c0856" prot="public">
          <name>Gr_Austria</name>
          <initializer> Gr_Unknown</initializer>
          <briefdescription>
<para>Different regions on different dates. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317aba0700d67949baf1bf200a59617715bc" prot="public">
          <name>Gr_Austria_Brixen</name>
          <briefdescription>
<para>5 Oct 1583 -&gt; 16 Oct 1583 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317acb5120488c117ba78ba36ab10581ab77" prot="public">
          <name>Gr_Austria_Salzburg</name>
          <initializer> Gr_Austria_Brixen</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ac8a237f0ca20df155aee6a630eee7d56" prot="public">
          <name>Gr_Austria_Tyrol</name>
          <initializer> Gr_Austria_Brixen</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a2fdd4296b61409ba6137c54c24de1184" prot="public">
          <name>Gr_Austria_Carinthia</name>
          <briefdescription>
<para>14 Dec 1583 -&gt; 25 Dec 1583 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8feaf713e78adfaac7c388dfe3769fe7" prot="public">
          <name>Gr_Austria_Styria</name>
          <initializer> Gr_Austria_Carinthia</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a3dd2bfdf9a317cd64ee1d872bdb71bf3" prot="public">
          <name>Gr_Belgium</name>
          <briefdescription>
<para>Then part of the Netherlands. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a6eb3599f7df7795299e1329987635b26" prot="public">
          <name>Gr_Bulgaria</name>
          <initializer> Gr_Unknown</initializer>
          <briefdescription>
<para>Unknown precisely (from 1915 to 1920) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a81153a3b91db33cf97dd922e559d4803" prot="public">
          <name>Gr_Bulgaria_1</name>
          <briefdescription>
<para>18 Mar 1916 -&gt; 1 Apr 1916 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a313aaf6e63984bbd01acba1136e4ceb8" prot="public">
          <name>Gr_Bulgaria_2</name>
          <briefdescription>
<para>31 Mar 1916 -&gt; 14 Apr 1916 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317aac0677659007a2d70bd4ab4c5b77ef42" prot="public">
          <name>Gr_Bulgaria_3</name>
          <briefdescription>
<para>3 Sep 1920 -&gt; 17 Sep 1920 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a3e6076008e6e276d91bc712617c016c3" prot="public">
          <name>Gr_Canada</name>
          <initializer> Gr_Unknown</initializer>
          <briefdescription>
<para>Different regions followed the changes in. </para>          </briefdescription>
          <detaileddescription>
<para>Great Britain or France </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a3f3ab769bcda13a477dc7c04cf088f2b" prot="public">
          <name>Gr_China</name>
          <initializer> Gr_Unknown</initializer>
          <briefdescription>
<para>Different authorities say: </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a86de67f7311b714d7bc03b925b16d2f6" prot="public">
          <name>Gr_China_1</name>
          <briefdescription>
<para>18 Dec 1911 -&gt; 1 Jan 1912 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af575d0129f4299c0fe82b5eee235a15d" prot="public">
          <name>Gr_China_2</name>
          <briefdescription>
<para>18 Dec 1928 -&gt; 1 Jan 1929 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ad2ff56a64e8f363be4cc86261172b433" prot="public">
          <name>Gr_Czechoslovakia</name>
          <briefdescription>
<para>(Bohemia and Moravia) 6 Jan 1584 -&gt; 17 Jan 1584 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af751fc7cd10bca979be1c7957f6cadf4" prot="public">
          <name>Gr_Denmark</name>
          <briefdescription>
<para>(including Norway) 18 Feb 1700 -&gt; 1 Mar 1700 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a5c23c8d399e00d541929677dad05f5de" prot="public">
          <name>Gr_Egypt</name>
          <briefdescription>
<para>1875 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a774d8cb0ccfd097e13f99e57afbeafae" prot="public">
          <name>Gr_Estonia</name>
          <briefdescription>
<para>1918 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a27c2f2620b16c4546e1c5caaa1379343" prot="public">
          <name>Gr_Finland</name>
          <briefdescription>
<para>Then part of Sweden. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a4c2bceeb7a061d44c062b9e450a9dd90" prot="public">
          <name>Gr_France</name>
          <briefdescription>
<para>9 Dec 1582 -&gt; 20 Dec 1582 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a37dea54fc1b91b33d2d4d0fa10f4c046" prot="public">
          <name>Gr_France_Alsace</name>
          <briefdescription>
<para>4 Feb 1682 -&gt; 16 Feb 1682 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8cafd9b0774b18975382394e8fa632d0" prot="public">
          <name>Gr_France_Lorraine</name>
          <briefdescription>
<para>16 Feb 1760 -&gt; 28 Feb 1760 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a68d64c61ff73ddc11cad0fe383b66822" prot="public">
          <name>Gr_France_Strasbourg</name>
          <briefdescription>
<para>February 1682. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a6b7847b0d144f3aecd16fa042d4fdec3" prot="public">
          <name>Gr_Germany</name>
          <initializer> Gr_Unknown</initializer>
          <briefdescription>
<para>Different states on different dates: </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a779d56125e0580bb10d4ea4a7464fe0e" prot="public">
          <name>Gr_Germany_Catholic</name>
          <briefdescription>
<para>1583-1585 (we take 1584) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317aaf52d049dacff4fd5a5a6b306e96a06b" prot="public">
          <name>Gr_Germany_Prussia</name>
          <briefdescription>
<para>22 Aug 1610 -&gt; 2 Sep 1610 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317adfc5edfa459249ff2814902cca2b6954" prot="public">
          <name>Gr_Germany_Protestant</name>
          <briefdescription>
<para>18 Feb 1700 -&gt; 1 Mar 1700 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a25b99348c611ed84a19af72e26b013e1" prot="public">
          <name>Gr_GreatBritain</name>
          <briefdescription>
<para>2 Sep 1752 -&gt; 14 Sep 1752 (use &apos;cal(1)&apos;) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ac485fa851a1ee173c80210f616484707" prot="public">
          <name>Gr_Greece</name>
          <briefdescription>
<para>9 Mar 1924 -&gt; 23 Mar 1924 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8007a580c9e884bae5b87328cb7cb54f" prot="public">
          <name>Gr_Hungary</name>
          <briefdescription>
<para>21 Oct 1587 -&gt; 1 Nov 1587 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a95c6df7082e39814d5e8d7846d392def" prot="public">
          <name>Gr_Ireland</name>
          <initializer> Gr_GreatBritain</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a91cc915cb7147c36759bcdcb4d99f660" prot="public">
          <name>Gr_Italy</name>
          <initializer> Gr_Standard</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af4791fa36354961c11364deb54fb2b05" prot="public">
          <name>Gr_Japan</name>
          <initializer> Gr_Unknown</initializer>
          <briefdescription>
<para>Different authorities say: </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ad7edcc3093b70a9bed5cda45581e34d3" prot="public">
          <name>Gr_Japan_1</name>
          <briefdescription>
<para>19 Dec 1872 -&gt; 1 Jan 1873 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ab4bce89cacb65d137454820528fada52" prot="public">
          <name>Gr_Japan_2</name>
          <briefdescription>
<para>19 Dec 1892 -&gt; 1 Jan 1893 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317aa1f74230daa188563e80ce208e920eed" prot="public">
          <name>Gr_Japan_3</name>
          <briefdescription>
<para>18 Dec 1918 -&gt; 1 Jan 1919 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8752ca8b7ff2660cebe50f9f948d93ba" prot="public">
          <name>Gr_Latvia</name>
          <briefdescription>
<para>1915-1918 (we take 1915) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a89a1723eaea222c54c6553c069934723" prot="public">
          <name>Gr_Lithuania</name>
          <briefdescription>
<para>1915 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a94f984187ab5803769ec84acaf0aca9e" prot="public">
          <name>Gr_Luxemburg</name>
          <briefdescription>
<para>14 Dec 1582 -&gt; 25 Dec 1582 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a16945c6424a4e585e9c017c8a382f751" prot="public">
          <name>Gr_Netherlands</name>
          <initializer> Gr_Belgium</initializer>
          <briefdescription>
<para>(including Belgium) 1 Jan 1583 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8cae778930077458b2ab1bbfc890ca55" prot="public">
          <name>Gr_Netherlands_Groningen</name>
          <briefdescription>
<para>Special case of Groningen. </para>          </briefdescription>
          <detaileddescription>
<para>The Gregorian calendar was introduced twice in Groningen, first time 28 Feb 1583 was followed by 11 Mar 1583, then it has gone back to Julian in the summer of 1584 and then 13 Dec 1700 was followed by 12 Jan 1701 -- which is the date we take into account here. 13 Dec 1700 -&gt; 12 Jan 1701 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ad4103aa6ef56cc10f724100838f983e7" prot="public">
          <name>Gr_Netherlands_Gelderland</name>
          <briefdescription>
<para>30 Jun 1700 -&gt; 12 Jul 1700 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a674b465bb0122dc3db3276c4e1f7850f" prot="public">
          <name>Gr_Netherlands_Utrecht</name>
          <briefdescription>
<para>(and Overijssel) 30 Nov 1700-&gt;12 Dec 1700 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a440e29ec7706a83a326ffc84f8249de5" prot="public">
          <name>Gr_Netherlands_Friesland</name>
          <briefdescription>
<para>(and Drenthe) 31 Dec 1700 -&gt; 12 Jan 1701 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ae7bc2c790ffcdd7a91bd24577e55c99d" prot="public">
          <name>Gr_Norway</name>
          <initializer> Gr_Denmark</initializer>
          <briefdescription>
<para>Then part of Denmark. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a5f336f64ab1e62f8657442b2b0d836f5" prot="public">
          <name>Gr_Poland</name>
          <initializer> Gr_Standard</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a44078e070f2694410690eef540fd2fcc" prot="public">
          <name>Gr_Portugal</name>
          <initializer> Gr_Standard</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ad8b4b8c05ff8f1bcdb37eb0a1327c4af" prot="public">
          <name>Gr_Romania</name>
          <briefdescription>
<para>31 Mar 1919 -&gt; 14 Apr 1919 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a39494148c6a009e1a82043c311ec52c5" prot="public">
          <name>Gr_Russia</name>
          <briefdescription>
<para>31 Jan 1918 -&gt; 14 Feb 1918 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a29bb208ac771f94590dd70d451b91d0a" prot="public">
          <name>Gr_Scotland</name>
          <initializer> Gr_GreatBritain</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317abf97390c78ce699eb5601374ab6146f8" prot="public">
          <name>Gr_Spain</name>
          <initializer> Gr_Standard</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af067437c5bed57ecda188870bab9771c" prot="public">
          <name>Gr_Sweden</name>
          <initializer> Gr_Finland</initializer>
          <briefdescription>
<para>Special case of Sweden. </para>          </briefdescription>
          <detaileddescription>
<para>Sweden has a curious history. Sweden decided to make a gradual change from the Julian to the Gregorian calendar. By dropping every leap year from 1700 through 1740 the eleven superfluous days would be omitted and from 1 Mar 1740 they would be in sync with the Gregorian calendar. (But in the meantime they would be in sync with nobody!)</para><para>So 1700 (which should have been a leap year in the Julian calendar) was not a leap year in Sweden. However, by mistake 1704 and 1708 became leap years. This left Sweden out of synchronisation with both the Julian and the Gregorian world, so they decided to go back to the Julian calendar. In order to do this, they inserted an extra day in 1712, making that year a double leap year! So in 1712, February had 30 days in Sweden.</para><para>Later, in 1753, Sweden changed to the Gregorian calendar by dropping 11 days like everyone else and this is what we use here. 17 Feb 1753 -&gt; 1 Mar 1753 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a86da3df019977a63e36f1018159c5dc0" prot="public">
          <name>Gr_Switzerland</name>
          <initializer> Gr_Unknown</initializer>
          <briefdescription>
<para>Different cantons used different dates. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ab3aaeab436356942212a7046564cfdef" prot="public">
          <name>Gr_Switzerland_Catholic</name>
          <briefdescription>
<para>1583, 1584 or 1597 (we take 1584) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a201a3b062edfd3e5b2d10ccb5ff531aa" prot="public">
          <name>Gr_Switzerland_Protestant</name>
          <briefdescription>
<para>31 Dec 1700 -&gt; 12 Jan 1701 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a6a775db8ee6cfbe1330f41339a74db41" prot="public">
          <name>Gr_Turkey</name>
          <briefdescription>
<para>1 Jan 1927 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af08da678c431fbed68b12de09c1df008" prot="public">
          <name>Gr_USA</name>
          <initializer> Gr_GreatBritain</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a884f46d9c1fea51f02941bbbc7168c1f" prot="public">
          <name>Gr_Wales</name>
          <initializer> Gr_GreatBritain</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ae2163df9c406989dec5f6ca0749be866" prot="public">
          <name>Gr_Yugoslavia</name>
          <briefdescription>
<para>1919 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Values corresponding to different dates of adoption of the Gregorian calendar. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_date_time_1aa87b3990a0d925f9d0221411aa8c9375" kindref="member">IsGregorianDate</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="174" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="173" bodyend="287"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" prot="public" static="no">
        <name>Country</name>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a5cbf87e9f28cd4beba788133300cf7c5" prot="public">
          <name>Country_Unknown</name>
          <briefdescription>
<para>no special information for this country </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a69d895ddc37befe32a13d5497c9f8e73" prot="public">
          <name>Country_Default</name>
          <briefdescription>
<para>set the default country with <ref refid="classwx_date_time_1a5ad5b532c62dd26784bb51366a27ca8d" kindref="member">SetCountry()</ref> method or use the default country with any other </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a1d35fe658dea7b60aaa6f28cde913edf" prot="public">
          <name>Country_WesternEurope_Start</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a78947f08ad10bb3a9c910c7dc86bf26b" prot="public">
          <name>Country_EEC</name>
          <initializer> Country_WesternEurope_Start</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a9910b3f8af50b8b1d863c04a648cc37c" prot="public">
          <name>France</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126ad2ede5cdb83afee5880b1056f544fece" prot="public">
          <name>Germany</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126ac01fceffd3df9ab202cc5eb74222467d" prot="public">
          <name>UK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126ac30477024e48c71e9c8294ec848d5ed9" prot="public">
          <name>Country_WesternEurope_End</name>
          <initializer> UK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a49f7126bc437d2c05cd5f8ff63c268e4" prot="public">
          <name>Russia</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126ad0e27ed2327558c6b86b924f37238979" prot="public">
          <name>USA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Date calculations often depend on the country and <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> allows to set the country whose conventions should be used using <ref refid="classwx_date_time_1a5ad5b532c62dd26784bb51366a27ca8d" kindref="member">SetCountry()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It takes one of the following values as parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="295" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="294" bodyend="310"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" prot="public" static="no">
        <name>Month</name>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a53cc4760da18147518a448ba0da7a85d" prot="public">
          <name>Jan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a6b7a64ef7274382828d3bc1f8836453b" prot="public">
          <name>Feb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117af83cf0954521af250e7ecab93d115050" prot="public">
          <name>Mar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a1ac72d9221b60bf38c2a0d8ef08c7871" prot="public">
          <name>Apr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a71835f9fa0eb5c48da47452c93bf5e6b" prot="public">
          <name>May</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a16a1fa0ab2bc344d3841909728be3f96" prot="public">
          <name>Jun</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a495d4f30dde1a1adbff6653b12c384d5" prot="public">
          <name>Jul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a7d7b04f514f525794fcbcf715022968a" prot="public">
          <name>Aug</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a7028d6990bff742f5f92387f91438884" prot="public">
          <name>Sep</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a553f38557712cd32124ffe521573f2cb" prot="public">
          <name>Oct</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a013eb4a34e3323d234babe378d011706" prot="public">
          <name>Nov</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117ac3f2d56832e6af3d54685a6ab81072eb" prot="public">
          <name>Dec</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117ad2d17a16763803c0aa4977feb7725831" prot="public">
          <name>Inv_Month</name>
          <briefdescription>
<para>Invalid month value. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>symbolic names for the months </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="314" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="313" bodyend="319"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" prot="public" static="no">
        <name>WeekDay</name>
        <enumvalue id="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457aecc652810e8944beafed362de118d631" prot="public">
          <name>Sun</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457ac165afc62596e609922e423ba262fe56" prot="public">
          <name>Mon</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457ae1277871c9d23518b6137b9d9b005138" prot="public">
          <name>Tue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a3edaead476323f6fa7d6dea1e8b193b3" prot="public">
          <name>Wed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457aefdce3348770a8e30443bd559cd272e9" prot="public">
          <name>Thu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a5de545a0b8d10a527499d25a2308c687" prot="public">
          <name>Fri</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a1fb68aa3f50f920bc1b1d835f1e0eb73" prot="public">
          <name>Sat</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a7bf2467543ea4311ceede8d992829f2c" prot="public">
          <name>Inv_WeekDay</name>
          <briefdescription>
<para>Invalid week day value. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>symbolic names for the weekdays </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="323" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="322" bodyend="328"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_date_time_1a4f9ba1f993835bc0096f8811f92f5d79" prot="public" static="no">
        <name>Year</name>
        <enumvalue id="classwx_date_time_1a4f9ba1f993835bc0096f8811f92f5d79a4d483b3a43f07dd5b19d866036c20071" prot="public">
          <name>Inv_Year</name>
          <initializer> SHRT_MIN</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>invalid value for the year </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="332" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7" prot="public" static="no">
        <name>NameFlags</name>
        <enumvalue id="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7a55a9b6bb37099a66708970996b4e2e89" prot="public">
          <name>Name_Full</name>
          <initializer> 0x01</initializer>
          <briefdescription>
<para>return full name </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7afde586e7e109fd5725b2e7c69f604b69" prot="public">
          <name>Name_Abbr</name>
          <initializer> 0x02</initializer>
          <briefdescription>
<para>return abbreviated name </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags to be used with <ref refid="classwx_date_time_1a85afc6bab234a485e7939e7fec941d76" kindref="member">GetMonthName()</ref> and <ref refid="classwx_date_time_1a766fa258f8e30e406489df23de54e29f" kindref="member">GetWeekDayName()</ref> functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="340" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="339" bodyend="343"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4" prot="public" static="no">
        <name>WeekFlags</name>
        <enumvalue id="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4a7cf7c63a175ce5bf63e9396655e32a22" prot="public">
          <name>Default_First</name>
          <briefdescription>
<para>Sunday_First for US, Monday_First for the rest. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4a9916ad335e139f471d635cd04a7468d9" prot="public">
          <name>Monday_First</name>
          <briefdescription>
<para>week starts with a Monday </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4a06956cc8c60835143abeccda7c183471" prot="public">
          <name>Sunday_First</name>
          <briefdescription>
<para>week starts with a Sunday </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Different parts of the world use different conventions for the week start. </para>        </briefdescription>
        <detaileddescription>
<para>In some countries, the week starts on Sunday, while in others -- on Monday. The ISO standard doesn&apos;t address this issue, so we support both conventions in the functions whose result depends on it (<ref refid="classwx_date_time_1aeb92e6f6fdd172850a759fda324c87fb" kindref="member">GetWeekOfYear()</ref> and <ref refid="classwx_date_time_1ac2e541595f16d6f48db34b489a5d1ce9" kindref="member">GetWeekOfMonth()</ref>).</para><para>The desired behaviour may be specified by giving one of the following constants as argument to these functions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="356" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="355" bodyend="360"/>
      </memberdef>
      <memberdef kind="typedef" id="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short wxDateTime::wxDateTime_t</definition>
        <argsstring></argsstring>
        <name>wxDateTime_t</name>
        <briefdescription>
<para>A small unsigned integer type for storing things like minutes, seconds &amp;c. </para>        </briefdescription>
        <detaileddescription>
<para>It should be at least short (i.e. not char) to contain the number of milliseconds - it may also be &apos;int&apos; because there is no size penalty associated with it in our code, we don&apos;t store any data in this format. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="87" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_date_time_1a52e2fe22ededf8aaf3922a3e8136ddb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int wxDateTime::ConvertYearToBC</definition>
        <argsstring>(int year)</argsstring>
        <name>ConvertYearToBC</name>
        <param>
          <type>int</type>
          <declname>year</declname>
        </param>
        <briefdescription>
<para>Converts the year in absolute notation (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>a number which can be negative, positive or zero) to the year in BC/AD notation. For the positive years, nothing is done, but the year 0 is year 1 BC and so for other years there is a difference of 1.</para><para>This function should be used like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_date_time" kindref="compound" tooltip="wxDateTime class represents an absolute moment in time.">wxDateTime</ref><sp/>dt(...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>dt.<ref refid="classwx_date_time_1a27fe507f5ba549091f1f7d523e424be9" kindref="member" tooltip="Returns the year in the given timezone (local one by default).">GetYear</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;The<sp/>year<sp/>is<sp/>%d%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="classwx_date_time_1a52e2fe22ededf8aaf3922a3e8136ddb0" kindref="member" tooltip="Converts the year in absolute notation (i.e.">wxDateTime::ConvertYearToBC</ref>(y),<sp/>y<sp/>&gt;<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;AD&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;BC&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1343"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a9ef535b0db4eeb117858a5b31ac00ae5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxDateTime::GetAmPmStrings</definition>
        <argsstring>(wxString *am, wxString *pm)</argsstring>
        <name>GetAmPmStrings</name>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>am</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>pm</declname>
        </param>
        <briefdescription>
<para>Returns the translations of the strings <computeroutput>AM</computeroutput> and <computeroutput>PM</computeroutput> used for time formatting for the current locale. </para>        </briefdescription>
        <detaileddescription>
<para>Either of the pointers may be NULL if the corresponding value is not needed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1350"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a968bb73469fdccd2903c671b435735d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>static wxDateTime wxDateTime::GetBeginDST</definition>
        <argsstring>(int year=Inv_Year, Country country=Country_Default)</argsstring>
        <name>GetBeginDST</name>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" kindref="member">Country</ref></type>
          <declname>country</declname>
          <defval>Country_Default</defval>
        </param>
        <briefdescription>
<para>Get the beginning of DST for the given country in the given year (current one by default). </para>        </briefdescription>
        <detaileddescription>
<para>This function suffers from limitations described in the <ref refid="overview_datetime_1overview_datetime_dst" kindref="member">DST overview</ref>.</para><para><simplesect kind="see"><para><ref refid="classwx_date_time_1a8c811978a0390f54ffa6012931ecb1af" kindref="member">GetEndDST()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1360"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a8c811978a0390f54ffa6012931ecb1af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>static wxDateTime wxDateTime::GetEndDST</definition>
        <argsstring>(int year=Inv_Year, Country country=Country_Default)</argsstring>
        <name>GetEndDST</name>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" kindref="member">Country</ref></type>
          <declname>country</declname>
          <defval>Country_Default</defval>
        </param>
        <briefdescription>
<para>Returns the end of DST for the given country in the given year (current one by default). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_date_time_1a968bb73469fdccd2903c671b435735d7" kindref="member">GetBeginDST()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1369"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aa7da8657207e8872291e757bc6065b61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int wxDateTime::GetCentury</definition>
        <argsstring>(int year)</argsstring>
        <name>GetCentury</name>
        <param>
          <type>int</type>
          <declname>year</declname>
        </param>
        <briefdescription>
<para>Get the current century, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>first two digits of the year, in given calendar (only Gregorian is currently supported). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1375"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a92fb00b090bd665f4ba13d70738ecd4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" kindref="member">Country</ref></type>
        <definition>static Country wxDateTime::GetCountry</definition>
        <argsstring>()</argsstring>
        <name>GetCountry</name>
        <briefdescription>
<para>Returns the current default country. </para>        </briefdescription>
        <detaileddescription>
<para>The default country is used for DST calculations, for example.</para><para><simplesect kind="see"><para><ref refid="classwx_date_time_1a5ad5b532c62dd26784bb51366a27ca8d" kindref="member">SetCountry()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1383"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a729d7baff7dba54605946ea946597b71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
        <definition>static Month wxDateTime::GetCurrentMonth</definition>
        <argsstring>(Calendar cal=Gregorian)</argsstring>
        <name>GetCurrentMonth</name>
        <param>
          <type><ref refid="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70c" kindref="member">Calendar</ref></type>
          <declname>cal</declname>
          <defval>Gregorian</defval>
        </param>
        <briefdescription>
<para>Get the current month in given calendar (only Gregorian is currently supported). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1389"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a7f7702c3a3bd20f15efd8ae819c76041" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int wxDateTime::GetCurrentYear</definition>
        <argsstring>(Calendar cal=Gregorian)</argsstring>
        <name>GetCurrentYear</name>
        <param>
          <type><ref refid="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70c" kindref="member">Calendar</ref></type>
          <declname>cal</declname>
          <defval>Gregorian</defval>
        </param>
        <briefdescription>
<para>Get the current year in given calendar (only Gregorian is currently supported). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1395"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a836d364cdde8a69553613b457491e435" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxDateTime::GetEnglishMonthName</definition>
        <argsstring>(Month month, NameFlags flags=Name_Full)</argsstring>
        <name>GetEnglishMonthName</name>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7" kindref="member">NameFlags</ref></type>
          <declname>flags</declname>
          <defval>Name_Full</defval>
        </param>
        <briefdescription>
<para>Return the standard English name of the given month. </para>        </briefdescription>
        <detaileddescription>
<para>This function always returns &quot;January&quot; or &quot;Jan&quot; for January, use <ref refid="classwx_date_time_1a85afc6bab234a485e7939e7fec941d76" kindref="member">GetMonthName()</ref> to retrieve the name of the month in the users current locale.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>month</parametername>
</parameternamelist>
<parameterdescription>
<para>One of <ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a53cc4760da18147518a448ba0da7a85d" kindref="member">wxDateTime::Jan</ref>, ..., <ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117ac3f2d56832e6af3d54685a6ab81072eb" kindref="member">wxDateTime::Dec</ref> values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Either Name_Full (default) or Name_Abbr.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_date_time_1ad9543420706df2f207dfcfbd3449b111" kindref="member">GetEnglishWeekDayName()</ref></para></simplesect>
<simplesect kind="since"><para>2.9.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1414"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ad9543420706df2f207dfcfbd3449b111" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxDateTime::GetEnglishWeekDayName</definition>
        <argsstring>(WeekDay weekday, NameFlags flags=Name_Full)</argsstring>
        <name>GetEnglishWeekDayName</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7" kindref="member">NameFlags</ref></type>
          <declname>flags</declname>
          <defval>Name_Full</defval>
        </param>
        <briefdescription>
<para>Return the standard English name of the given week day. </para>        </briefdescription>
        <detaileddescription>
<para>This function always returns &quot;Monday&quot; or &quot;Mon&quot; for Monday, use <ref refid="classwx_date_time_1a766fa258f8e30e406489df23de54e29f" kindref="member">GetWeekDayName()</ref> to retrieve the name of the month in the users current locale.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weekday</parametername>
</parameternamelist>
<parameterdescription>
<para>One of <ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457aecc652810e8944beafed362de118d631" kindref="member">wxDateTime::Sun</ref>, ..., <ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a1fb68aa3f50f920bc1b1d835f1e0eb73" kindref="member">wxDateTime::Sat</ref> values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Either Name_Full (default) or Name_Abbr.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_date_time_1a836d364cdde8a69553613b457491e435" kindref="member">GetEnglishMonthName()</ref></para></simplesect>
<simplesect kind="since"><para>2.9.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1433"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a85afc6bab234a485e7939e7fec941d76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxDateTime::GetMonthName</definition>
        <argsstring>(Month month, NameFlags flags=Name_Full)</argsstring>
        <name>GetMonthName</name>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7" kindref="member">NameFlags</ref></type>
          <declname>flags</declname>
          <defval>Name_Full</defval>
        </param>
        <briefdescription>
<para>Gets the full (default) or abbreviated name of the given month. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the name in the current locale, use <ref refid="classwx_date_time_1a836d364cdde8a69553613b457491e435" kindref="member">GetEnglishMonthName()</ref> to get the untranslated name if necessary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>month</parametername>
</parameternamelist>
<parameterdescription>
<para>One of <ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a53cc4760da18147518a448ba0da7a85d" kindref="member">wxDateTime::Jan</ref>, ..., <ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117ac3f2d56832e6af3d54685a6ab81072eb" kindref="member">wxDateTime::Dec</ref> values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Either Name_Full (default) or Name_Abbr.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_date_time_1a766fa258f8e30e406489df23de54e29f" kindref="member">GetWeekDayName()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1448"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1aafc0ca017777f402d3f60a53d5e1a70f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
        <definition>static wxDateTime_t wxDateTime::GetNumberOfDays</definition>
        <argsstring>(int year, Calendar cal=Gregorian)</argsstring>
        <name>GetNumberOfDays</name>
        <param>
          <type>int</type>
          <declname>year</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70c" kindref="member">Calendar</ref></type>
          <declname>cal</declname>
          <defval>Gregorian</defval>
        </param>
        <briefdescription>
<para>Returns the number of days in the given year. </para>        </briefdescription>
        <detaileddescription>
<para>The only supported value for <emphasis>cal</emphasis> currently is <computeroutput>Gregorian</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1454"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a1eba7b64affea1f43dda1cb9baf01c96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
        <definition>static wxDateTime_t wxDateTime::GetNumberOfDays</definition>
        <argsstring>(Month month, int year=Inv_Year, Calendar cal=Gregorian)</argsstring>
        <name>GetNumberOfDays</name>
        <param>
          <type><ref refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" kindref="member">Month</ref></type>
          <declname>month</declname>
        </param>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70c" kindref="member">Calendar</ref></type>
          <declname>cal</declname>
          <defval>Gregorian</defval>
        </param>
        <briefdescription>
<para>Returns the number of days in the given month of the given year. </para>        </briefdescription>
        <detaileddescription>
<para>The only supported value for <emphasis>cal</emphasis> currently is <computeroutput>Gregorian</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1461"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a972ecfc13254561b3620719f673d1053" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>time_t</type>
        <definition>static time_t wxDateTime::GetTimeNow</definition>
        <argsstring>()</argsstring>
        <name>GetTimeNow</name>
        <briefdescription>
<para>Returns the current time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1466"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a52e8e2420a4ecfaeb0920c20af6f974a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>tm *</type>
        <definition>static tm* wxDateTime::GetTmNow</definition>
        <argsstring>(struct tm *tm)</argsstring>
        <name>GetTmNow</name>
        <param>
          <type>struct tm *</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
<para>Returns the current time broken down using the buffer whose address is passed to the function with <emphasis>tm</emphasis> to store the result. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1472"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1afc3dc3d2e1da6990b3bf4f8b552d0367" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>tm *</type>
        <definition>static tm* wxDateTime::GetTmNow</definition>
        <argsstring>()</argsstring>
        <name>GetTmNow</name>
        <briefdescription>
<para>Returns the current time broken down. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this function returns a pointer to a static buffer that&apos;s reused by calls to this function and certain C library functions (e.g. localtime). If there is any chance your code might be used in a multi-threaded application, you really should use <ref refid="classwx_date_time_1a52e8e2420a4ecfaeb0920c20af6f974a" kindref="member">GetTmNow(struct tm *)</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1481"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a766fa258f8e30e406489df23de54e29f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxDateTime::GetWeekDayName</definition>
        <argsstring>(WeekDay weekday, NameFlags flags=Name_Full)</argsstring>
        <name>GetWeekDayName</name>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7" kindref="member">NameFlags</ref></type>
          <declname>flags</declname>
          <defval>Name_Full</defval>
        </param>
        <briefdescription>
<para>Gets the full (default) or abbreviated name of the given week day. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the name in the current locale, use <ref refid="classwx_date_time_1ad9543420706df2f207dfcfbd3449b111" kindref="member">GetEnglishWeekDayName()</ref> to get the untranslated name if necessary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weekday</parametername>
</parameternamelist>
<parameterdescription>
<para>One of <ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457aecc652810e8944beafed362de118d631" kindref="member">wxDateTime::Sun</ref>, ..., <ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a1fb68aa3f50f920bc1b1d835f1e0eb73" kindref="member">wxDateTime::Sat</ref> values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Either Name_Full (default) or Name_Abbr.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_date_time_1a85afc6bab234a485e7939e7fec941d76" kindref="member">GetMonthName()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1497"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a52f2fcf206a4a78b3f3d36891263b4c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool wxDateTime::IsDSTApplicable</definition>
        <argsstring>(int year=Inv_Year, Country country=Country_Default)</argsstring>
        <name>IsDSTApplicable</name>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" kindref="member">Country</ref></type>
          <declname>country</declname>
          <defval>Country_Default</defval>
        </param>
        <briefdescription>
<para>Returns true if DST was used in the given year (the current one by default) in the given country. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1504"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a55f8149cfda08356431d6c36ef9c02dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool wxDateTime::IsLeapYear</definition>
        <argsstring>(int year=Inv_Year, Calendar cal=Gregorian)</argsstring>
        <name>IsLeapYear</name>
        <param>
          <type>int</type>
          <declname>year</declname>
          <defval>Inv_Year</defval>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70c" kindref="member">Calendar</ref></type>
          <declname>cal</declname>
          <defval>Gregorian</defval>
        </param>
        <briefdescription>
<para>Returns true if the <emphasis>year</emphasis> is a leap one in the specified calendar. </para>        </briefdescription>
        <detaileddescription>
<para>This functions supports Gregorian and Julian calendars. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1510"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a93292d73b18e4858735c13e754224dcb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool wxDateTime::IsWestEuropeanCountry</definition>
        <argsstring>(Country country=Country_Default)</argsstring>
        <name>IsWestEuropeanCountry</name>
        <param>
          <type><ref refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" kindref="member">Country</ref></type>
          <declname>country</declname>
          <defval>Country_Default</defval>
        </param>
        <briefdescription>
<para>This function returns true if the specified (or default) country is one of Western European ones. </para>        </briefdescription>
        <detaileddescription>
<para>It is used internally by <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> to determine the DST convention and date and time formatting rules. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1517"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a6e6c37a0414bb4831e2cc03b37f498a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>static wxDateTime wxDateTime::Now</definition>
        <argsstring>()</argsstring>
        <name>Now</name>
        <briefdescription>
<para>Returns the object corresponding to the current time. </para>        </briefdescription>
        <detaileddescription>
<para>Example:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_date_time" kindref="compound" tooltip="wxDateTime class represents an absolute moment in time.">wxDateTime</ref><sp/>now<sp/>=<sp/><ref refid="classwx_date_time_1a6e6c37a0414bb4831e2cc03b37f498a2" kindref="member" tooltip="Returns the object corresponding to the current time.">wxDateTime::Now</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Current<sp/>time<sp/>in<sp/>Paris:\t%s\n&quot;</highlight><highlight class="normal">,<sp/>now.<ref refid="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" kindref="member" tooltip="This function does the same as the standard ANSI C strftime(3) function (http://www.cplusplus.com/reference/clibrary/ctime/strftime.html).">Format</ref>(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/><ref refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba768e71f1f3c63c6cf64dd9c9a0f20b0b" kindref="member" tooltip="Central Europe Time.">wxDateTime::CET</ref>).<ref refid="classwx_string_1a6418ec90c6d4ffe0b05702be1b35df4f" kindref="member" tooltip="Returns a lightweight intermediate class which is in turn implicitly convertible to both const char* ...">c_str</ref>());</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>This function is accurate up to seconds. <ref refid="classwx_date_time_1a0db1c9bac7b2d27d589cad2a38d1438c" kindref="member">UNow()</ref> can be used if better precision is required.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_date_time_1af730202238b9acd5a5df2977fa40c569" kindref="member">Today()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1534"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a5ad5b532c62dd26784bb51366a27ca8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxDateTime::SetCountry</definition>
        <argsstring>(Country country)</argsstring>
        <name>SetCountry</name>
        <param>
          <type><ref refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" kindref="member">Country</ref></type>
          <declname>country</declname>
        </param>
        <briefdescription>
<para>Sets the country to use by default. </para>        </briefdescription>
        <detaileddescription>
<para>This setting influences the DST calculations, date formatting and other things.</para><para><simplesect kind="see"><para><ref refid="classwx_date_time_1a92fb00b090bd665f4ba13d70738ecd4a" kindref="member">GetCountry()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1542"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1ab91c82e85621326436f2931660434719" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>static wxDateTime wxDateTime::SetToWeekOfYear</definition>
        <argsstring>(int year, wxDateTime_t numWeek, WeekDay weekday=Mon)</argsstring>
        <name>SetToWeekOfYear</name>
        <param>
          <type>int</type>
          <declname>year</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" kindref="member">wxDateTime_t</ref></type>
          <declname>numWeek</declname>
        </param>
        <param>
          <type><ref refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" kindref="member">WeekDay</ref></type>
          <declname>weekday</declname>
          <defval>Mon</defval>
        </param>
        <briefdescription>
<para>Set the date to the given <emphasis>weekday</emphasis> in the week number <emphasis>numWeek</emphasis> of the given <emphasis>year</emphasis> . </para>        </briefdescription>
        <detaileddescription>
<para>The number should be in range 1-53.</para><para>Note that the returned date may be in a different year than the one passed to this function because both the week 1 and week 52 or 53 (for leap years) contain days from different years. See <ref refid="classwx_date_time_1aeb92e6f6fdd172850a759fda324c87fb" kindref="member">GetWeekOfYear()</ref> for the explanation of how the year weeks are counted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1554"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1af730202238b9acd5a5df2977fa40c569" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>static wxDateTime wxDateTime::Today</definition>
        <argsstring>()</argsstring>
        <name>Today</name>
        <briefdescription>
<para>Returns the object corresponding to the midnight of the current day (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>the same as <ref refid="classwx_date_time_1a6e6c37a0414bb4831e2cc03b37f498a2" kindref="member">Now()</ref>, but the time part is set to 0).</para><para><simplesect kind="see"><para><ref refid="classwx_date_time_1a6e6c37a0414bb4831e2cc03b37f498a2" kindref="member">Now()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1562"/>
      </memberdef>
      <memberdef kind="function" id="classwx_date_time_1a0db1c9bac7b2d27d589cad2a38d1438c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref></type>
        <definition>static wxDateTime wxDateTime::UNow</definition>
        <argsstring>()</argsstring>
        <name>UNow</name>
        <briefdescription>
<para>Returns the object corresponding to the current UTC time including the milliseconds. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that unlike <ref refid="classwx_date_time_1a6e6c37a0414bb4831e2cc03b37f498a2" kindref="member">Now()</ref>, this method creates a <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> object corresponding to UTC, not local, time.</para><para><simplesect kind="see"><para><ref refid="classwx_date_time_1a6e6c37a0414bb4831e2cc03b37f498a2" kindref="member">Now()</ref>, <ref refid="group__group__funcmacro__time_1ga9e6cb143b3e04cf0459aa3f9763eec82" kindref="member">wxGetUTCTimeMillis()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="1573"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> class represents an absolute moment in time. </para>    </briefdescription>
    <detaileddescription>
<para>The type <computeroutput>wxDateTime_t</computeroutput> is typedefed as <computeroutput>unsigned short</computeroutput> and is used to contain the number of years, hours, minutes, seconds and milliseconds.</para><para>Global constant <ref refid="interface_2wx_2datetime_8h_1ade74a40ef749abadb7c5338e2c9a9321" kindref="member">wxDefaultDateTime</ref> and synonym for it <ref refid="interface_2wx_2datetime_8h_1ad06d2c408599c48fd9bb17804188bf96" kindref="member">wxInvalidDateTime</ref> are defined. This constant will be different from any valid <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> object.</para><sect1 id="classwx_date_time_1datetime_static">
<title>Static Functions</title>
<para>All static functions either set or return the static variables of <ref refid="classwx_date_span" kindref="compound">wxDateSpan</ref> (the country), return the current moment, year, month or number of days in it, or do some general calendar-related actions.</para><para>Please note that although several function accept an extra Calendar parameter, it is currently ignored as only the Gregorian calendar is supported. Future versions will support other calendars.</para></sect1>
<sect1 id="classwx_date_time_1datetime_formatting">
<title>Date Formatting and Parsing</title>
<para>The date formatting and parsing functions convert <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> objects to and from text. The conversions to text are mostly trivial: you can either do it using the default date and time representations for the current locale (<ref refid="classwx_date_time_1ab9886b69761a87ccf77f0ffee7c7f12e" kindref="member">FormatDate()</ref> and <ref refid="classwx_date_time_1a4d3145af33faf443ac9d9fdfc4256c1e" kindref="member">FormatTime()</ref>), using the international standard representation defined by ISO 8601 (<ref refid="classwx_date_time_1a7dc79585261a999dbd43152186e52299" kindref="member">FormatISODate()</ref>, <ref refid="classwx_date_time_1a0f677ffcbc651c733249af36af6bbb3b" kindref="member">FormatISOTime()</ref> and <ref refid="classwx_date_time_1a8d99cfc519de33d2fcf16360a13212f0" kindref="member">FormatISOCombined()</ref>) or by specifying any format at all and using <ref refid="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" kindref="member">Format()</ref> directly.</para><para>The conversions from text are more interesting, as there are much more possibilities to care about. The simplest cases can be taken care of with <ref refid="classwx_date_time_1a5d01d56c310d505a093f1a7f25086a1b" kindref="member">ParseFormat()</ref> which can parse any date in the given (rigid) format. <ref refid="classwx_date_time_1ab0f2485c52d0d3cf0196aaf0062d2f83" kindref="member">ParseRfc822Date()</ref> is another function for parsing dates in predefined format -- the one of RFC 822 which (still...) defines the format of email messages on the Internet. This format cannot be described with <computeroutput>strptime(3)-like</computeroutput> format strings used by <ref refid="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" kindref="member">Format()</ref>, hence the need for a separate function.</para><para>But the most interesting functions are <ref refid="classwx_date_time_1ac903b3227620e1b88019e76b807327e8" kindref="member">ParseTime()</ref>, <ref refid="classwx_date_time_1acdcb88e25b38099994af45b11391c962" kindref="member">ParseDate()</ref> and <ref refid="classwx_date_time_1a332a41f998bc3be6c0a9a81449112485" kindref="member">ParseDateTime()</ref>. They try to parse the date and time (or only one of them) in &apos;free&apos; format, i.e. allow them to be specified in any of possible ways. These functions will usually be used to parse the (interactive) user input which is not bound to be in any predefined format. As an example, <ref refid="classwx_date_time_1acdcb88e25b38099994af45b11391c962" kindref="member">ParseDate()</ref> can parse the strings such as &quot;tomorrow&quot;, &quot;March first&quot; and even &quot;next Sunday&quot;.</para><para>Finally notice that each of the parsing functions is available in several overloads: if the input string is a narrow (<computeroutput>char</computeroutput> *) string, then a narrow pointer is returned. If the input string is a wide string, a wide char pointer is returned. Finally, if the input parameter is a <ref refid="classwx_string" kindref="compound">wxString</ref>, a narrow char pointer is also returned for backwards compatibility but there is also an additional argument of wxString::const_iterator type in which, if it is not NULL, an iterator pointing to the end of the scanned string part is returned.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__data" kindref="compound">Data Structures</ref></para><para>Predefined objects/pointers:<itemizedlist>
<listitem><para><ref refid="interface_2wx_2datetime_8h_1ade74a40ef749abadb7c5338e2c9a9321" kindref="member">wxDefaultDateTime</ref></para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="overview_datetime" kindref="compound">Date and Time</ref>, <ref refid="classwx_time_span" kindref="compound">wxTimeSpan</ref>, <ref refid="classwx_date_span" kindref="compound">wxDateSpan</ref>, <ref refid="classwx_calendar_ctrl" kindref="compound">wxCalendarCtrl</ref> </para></simplesect>
</para></sect1>
    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" line="78" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/datetime.h" bodystart="77" bodyend="1574"/>
    <listofallmembers>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba10a8880abe7d55c0e28c41badf1a3857" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>A_CST</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba09b72a5bdfbec3d2e22153ee0ae585c2" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>A_ESST</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba30efbb5a9aaf55f7ae3d0b06eafb9ee4" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>A_EST</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbab1b9c891ddf8d11322b9a6260131514a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>A_WST</name></member>
      <member refid="classwx_date_time_1a53c8d4e51a784a64b374124a60921f27" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Add</name></member>
      <member refid="classwx_date_time_1a9ed88ad5bc505a961d4a86083e3b2cb2" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Add</name></member>
      <member refid="classwx_date_time_1a8cb13e8a953a8061fba8c718929beaa3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Add</name></member>
      <member refid="classwx_date_time_1a36c3dfb82a3fdf9c0e4c8cc944508d0d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Add</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba70b32b6b2daef8c065fe3f7e81ac155f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ADT</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba3ccd7ea3db468da45836d2a2c66e9069" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>AKDT</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbae0007943414383bc2d6d50b56080ffee" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>AKST</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a1ac72d9221b60bf38c2a0d8ef08c7871" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Apr</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba930fed7e2cfbc9d6ad9698d74aec7a3f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>AST</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a7d7b04f514f525794fcbcf715022968a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Aug</name></member>
      <member refid="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70c" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Calendar</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbad526ab66e38a7141bdd9a82098684303" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>CDT</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbae628c26f3f2a2f404c38f3d8c4d878d5" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>CEST</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba768e71f1f3c63c6cf64dd9c9a0f20b0b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>CET</name></member>
      <member refid="classwx_date_time_1a52e2fe22ededf8aaf3922a3e8136ddb0" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ConvertYearToBC</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Country</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a69d895ddc37befe32a13d5497c9f8e73" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Country_Default</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a78947f08ad10bb3a9c910c7dc86bf26b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Country_EEC</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a5cbf87e9f28cd4beba788133300cf7c5" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Country_Unknown</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126ac30477024e48c71e9c8294ec848d5ed9" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Country_WesternEurope_End</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a1d35fe658dea7b60aaa6f28cde913edf" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Country_WesternEurope_Start</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba5d3264d3bb4106df8a0f68b306f363bf" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>CST</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117ac3f2d56832e6af3d54685a6ab81072eb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Dec</name></member>
      <member refid="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4a7cf7c63a175ce5bf63e9396655e32a22" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Default_First</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba268100e90a290659a27f1daa2ffef118" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>EDT</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba467f28d0dea96f56ae233215d720c9b3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>EEST</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba8f0093ca02fad238db726c3ed8ec4c19" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>EET</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba20a03ab3f22b9c12c6a12f55f69af885" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>EST</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a6b7a64ef7274382828d3bc1f8836453b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Feb</name></member>
      <member refid="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Format</name></member>
      <member refid="classwx_date_time_1ab9886b69761a87ccf77f0ffee7c7f12e" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>FormatDate</name></member>
      <member refid="classwx_date_time_1a8d99cfc519de33d2fcf16360a13212f0" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>FormatISOCombined</name></member>
      <member refid="classwx_date_time_1a7dc79585261a999dbd43152186e52299" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>FormatISODate</name></member>
      <member refid="classwx_date_time_1a0f677ffcbc651c733249af36af6bbb3b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>FormatISOTime</name></member>
      <member refid="classwx_date_time_1a4d3145af33faf443ac9d9fdfc4256c1e" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>FormatTime</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a9910b3f8af50b8b1d863c04a648cc37c" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>France</name></member>
      <member refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a5de545a0b8d10a527499d25a2308c687" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Fri</name></member>
      <member refid="classwx_date_time_1a947daf50d898d95d063777c2cef27feb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>FromTimezone</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126ad2ede5cdb83afee5880b1056f544fece" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Germany</name></member>
      <member refid="classwx_date_time_1a9ef535b0db4eeb117858a5b31ac00ae5" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetAmPmStrings</name></member>
      <member refid="classwx_date_time_1a66aebd04f50f468049f17e8159e69a6a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetAsDOS</name></member>
      <member refid="classwx_date_time_1ae40a8c0a37d06ac476d856827e5176d8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetAsMSWSysTime</name></member>
      <member refid="classwx_date_time_1a968bb73469fdccd2903c671b435735d7" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetBeginDST</name></member>
      <member refid="classwx_date_time_1acc8f531061b26803b921e20e19faaea1" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetCentury</name></member>
      <member refid="classwx_date_time_1aa7da8657207e8872291e757bc6065b61" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetCentury</name></member>
      <member refid="classwx_date_time_1a92fb00b090bd665f4ba13d70738ecd4a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetCountry</name></member>
      <member refid="classwx_date_time_1a729d7baff7dba54605946ea946597b71" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetCurrentMonth</name></member>
      <member refid="classwx_date_time_1a7f7702c3a3bd20f15efd8ae819c76041" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetCurrentYear</name></member>
      <member refid="classwx_date_time_1a3b341c8cb0e343d3b7f9db929c7b4830" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetDateOnly</name></member>
      <member refid="classwx_date_time_1a6ce5fca7b6e7cc7a230e4595d52fb8ed" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetDay</name></member>
      <member refid="classwx_date_time_1a0242e2ec46f3345576bce53354cf5e6a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetDayOfYear</name></member>
      <member refid="classwx_date_time_1a8c811978a0390f54ffa6012931ecb1af" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetEndDST</name></member>
      <member refid="classwx_date_time_1a836d364cdde8a69553613b457491e435" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetEnglishMonthName</name></member>
      <member refid="classwx_date_time_1ad9543420706df2f207dfcfbd3449b111" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetEnglishWeekDayName</name></member>
      <member refid="classwx_date_time_1a0c07232d5f21ba2ede2a4751f3531c1a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetHour</name></member>
      <member refid="classwx_date_time_1a0bde25a418d8a7fd3e6e6a4c3941e20f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetJDN</name></member>
      <member refid="classwx_date_time_1af99c22cc0d4d7deaffbc3b998403b7d1" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetJulianDayNumber</name></member>
      <member refid="classwx_date_time_1a87f1ede94cfcda2a8b2db7322432f2f2" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetLastMonthDay</name></member>
      <member refid="classwx_date_time_1a931022efed3491d720ebc9767acb9051" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetLastWeekDay</name></member>
      <member refid="classwx_date_time_1a9ae6607047e0e0971e1f6e02fbaf12d4" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetMillisecond</name></member>
      <member refid="classwx_date_time_1ad78c55f442700463a58e3f57054c61e8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetMinute</name></member>
      <member refid="classwx_date_time_1a28e2d20d224aedadad683a93d88c5c4e" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetMJD</name></member>
      <member refid="classwx_date_time_1aec513fdaa56ec1f13ca9d1e3e48a485d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetModifiedJulianDayNumber</name></member>
      <member refid="classwx_date_time_1a7e1316e87a89b31a2b72958201105061" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetMonth</name></member>
      <member refid="classwx_date_time_1a85afc6bab234a485e7939e7fec941d76" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetMonthName</name></member>
      <member refid="classwx_date_time_1a948507060e1ca798a5c2ee10ddadd7f0" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetNextWeekDay</name></member>
      <member refid="classwx_date_time_1aafc0ca017777f402d3f60a53d5e1a70f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetNumberOfDays</name></member>
      <member refid="classwx_date_time_1a1eba7b64affea1f43dda1cb9baf01c96" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetNumberOfDays</name></member>
      <member refid="classwx_date_time_1a5a982f1f5674f694e4ae1df980fb1af6" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetPrevWeekDay</name></member>
      <member refid="classwx_date_time_1ab81c9b7069ad4eb91bafdc144a2baea6" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetRataDie</name></member>
      <member refid="classwx_date_time_1adf71fea598bd0baeb6b0e1f56eba093b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetSecond</name></member>
      <member refid="classwx_date_time_1a6be02e8f615380ff701c5f9cedc9fb84" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetTicks</name></member>
      <member refid="classwx_date_time_1a972ecfc13254561b3620719f673d1053" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetTimeNow</name></member>
      <member refid="classwx_date_time_1a5eb3d08cd32226a5aefa87a65dffe759" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetTm</name></member>
      <member refid="classwx_date_time_1a52e8e2420a4ecfaeb0920c20af6f974a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetTmNow</name></member>
      <member refid="classwx_date_time_1afc3dc3d2e1da6990b3bf4f8b552d0367" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetTmNow</name></member>
      <member refid="classwx_date_time_1ada293c954c5b0345846bb69de3938da2" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetWeekDay</name></member>
      <member refid="classwx_date_time_1a313aab54e44a9de99b6f0d0eef528aa7" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetWeekDay</name></member>
      <member refid="classwx_date_time_1a2b3deaf8d044cb517c2fabc7a0a4e561" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetWeekDayInSameWeek</name></member>
      <member refid="classwx_date_time_1a766fa258f8e30e406489df23de54e29f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetWeekDayName</name></member>
      <member refid="classwx_date_time_1ac2e541595f16d6f48db34b489a5d1ce9" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetWeekOfMonth</name></member>
      <member refid="classwx_date_time_1aeb92e6f6fdd172850a759fda324c87fb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetWeekOfYear</name></member>
      <member refid="classwx_date_time_1a27fe507f5ba549091f1f7d523e424be9" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetYear</name></member>
      <member refid="classwx_date_time_1ad96b754422ee7db5adcace39b4f2395e" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GetYearDay</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba2120dec8c0b1cd718dac28c2d31febe1" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT0</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba53cced34a141bad15c02769461b0f4ce" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT1</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbab562c8c00f2773622b9d540bdc381366" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT10</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbaf0545ec1a575e8e6f0acb97722b591c4" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT11</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbae8ea01bdd4301a68cbdbc749701a5d79" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT12</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbaa8b779df126c68b0137a0e9be836ff5d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT13</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba9e7b73170b341b26a3945980376ad0eb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT2</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba5b1f37e6ee84cf7ef93e9d98012a4829" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT3</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba90bc724fa31f2917b7126417132975d5" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT4</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba4a9d4c0b24aa6223b89c0b998e7a7d72" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT5</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba9d2a38d213d85f81de337e8f0eb14b3e" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT6</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba05a789a91aa72ac3077951a6c61a66aa" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT7</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbacb72b7396d5f75461f2cee0de06999d2" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT8</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbacf5ea594d20d5df0bebb1f148d648206" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT9</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbaff8e187024b6a0331ed17cc9cf54afc9" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_1</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba0b1be6322c3d8fd8a69f92becd90ef92" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_10</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba557c461adc9d42d4616918de09322374" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_11</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba87b4b5dd24a2f226d58845a617c9053d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_12</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbac62a008b6600cbb068a7d887e839d6a9" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_2</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba1adb33fc9a930f9f0b9f8a009eb93e2b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_3</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba2af42038185283cfb9c2e32ae658510e" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_4</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba9934f36511c6ed34de0a94d5d553a07b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_5</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba827233a73b3dcb35764873db1e25bfc6" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_6</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba7663c300529ca4254900540cecb0b0ce" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_7</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba399a20c6a1a04a0104db4dffe3e97c58" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_8</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba92f26e662b9b6fe85e9129b01792405c" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GMT_9</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af01a3afc4efc21f6ffb06248c7f61aff" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Alaska</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a0de48e9efd9a07f1811664b5a409a326" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Albania</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a64a9932ab1688145c3f1bb42523c0856" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Austria</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317aba0700d67949baf1bf200a59617715bc" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Austria_Brixen</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a2fdd4296b61409ba6137c54c24de1184" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Austria_Carinthia</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317acb5120488c117ba78ba36ab10581ab77" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Austria_Salzburg</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8feaf713e78adfaac7c388dfe3769fe7" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Austria_Styria</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ac8a237f0ca20df155aee6a630eee7d56" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Austria_Tyrol</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a3dd2bfdf9a317cd64ee1d872bdb71bf3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Belgium</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a6eb3599f7df7795299e1329987635b26" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Bulgaria</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a81153a3b91db33cf97dd922e559d4803" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Bulgaria_1</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a313aaf6e63984bbd01acba1136e4ceb8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Bulgaria_2</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317aac0677659007a2d70bd4ab4c5b77ef42" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Bulgaria_3</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a3e6076008e6e276d91bc712617c016c3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Canada</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a3f3ab769bcda13a477dc7c04cf088f2b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_China</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a86de67f7311b714d7bc03b925b16d2f6" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_China_1</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af575d0129f4299c0fe82b5eee235a15d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_China_2</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ad2ff56a64e8f363be4cc86261172b433" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Czechoslovakia</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af751fc7cd10bca979be1c7957f6cadf4" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Denmark</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a5c23c8d399e00d541929677dad05f5de" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Egypt</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a774d8cb0ccfd097e13f99e57afbeafae" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Estonia</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a27c2f2620b16c4546e1c5caaa1379343" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Finland</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a4c2bceeb7a061d44c062b9e450a9dd90" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_France</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a37dea54fc1b91b33d2d4d0fa10f4c046" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_France_Alsace</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8cafd9b0774b18975382394e8fa632d0" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_France_Lorraine</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a68d64c61ff73ddc11cad0fe383b66822" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_France_Strasbourg</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a6b7847b0d144f3aecd16fa042d4fdec3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Germany</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a779d56125e0580bb10d4ea4a7464fe0e" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Germany_Catholic</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317adfc5edfa459249ff2814902cca2b6954" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Germany_Protestant</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317aaf52d049dacff4fd5a5a6b306e96a06b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Germany_Prussia</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a25b99348c611ed84a19af72e26b013e1" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_GreatBritain</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ac485fa851a1ee173c80210f616484707" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Greece</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8007a580c9e884bae5b87328cb7cb54f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Hungary</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a95c6df7082e39814d5e8d7846d392def" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Ireland</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a91cc915cb7147c36759bcdcb4d99f660" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Italy</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af4791fa36354961c11364deb54fb2b05" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Japan</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ad7edcc3093b70a9bed5cda45581e34d3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Japan_1</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ab4bce89cacb65d137454820528fada52" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Japan_2</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317aa1f74230daa188563e80ce208e920eed" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Japan_3</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8752ca8b7ff2660cebe50f9f948d93ba" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Latvia</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a89a1723eaea222c54c6553c069934723" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Lithuania</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a94f984187ab5803769ec84acaf0aca9e" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Luxemburg</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a16945c6424a4e585e9c017c8a382f751" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Netherlands</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a440e29ec7706a83a326ffc84f8249de5" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Netherlands_Friesland</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ad4103aa6ef56cc10f724100838f983e7" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Netherlands_Gelderland</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a8cae778930077458b2ab1bbfc890ca55" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Netherlands_Groningen</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a674b465bb0122dc3db3276c4e1f7850f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Netherlands_Utrecht</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ae7bc2c790ffcdd7a91bd24577e55c99d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Norway</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a5f336f64ab1e62f8657442b2b0d836f5" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Poland</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a44078e070f2694410690eef540fd2fcc" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Portugal</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ad8b4b8c05ff8f1bcdb37eb0a1327c4af" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Romania</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a39494148c6a009e1a82043c311ec52c5" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Russia</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a29bb208ac771f94590dd70d451b91d0a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Scotland</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317abf97390c78ce699eb5601374ab6146f8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Spain</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317adb5a0d088fe066053e4ee22aa18ec6e7" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Standard</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af067437c5bed57ecda188870bab9771c" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Sweden</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a86da3df019977a63e36f1018159c5dc0" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Switzerland</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ab3aaeab436356942212a7046564cfdef" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Switzerland_Catholic</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a201a3b062edfd3e5b2d10ccb5ff531aa" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Switzerland_Protestant</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a6a775db8ee6cfbe1330f41339a74db41" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Turkey</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a05b4d00b4f3b2cf9f94653731d077df7" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Unknown</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317af08da678c431fbed68b12de09c1df008" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_USA</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317a884f46d9c1fea51f02941bbbc7168c1f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Wales</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317ae2163df9c406989dec5f6ca0749be866" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gr_Yugoslavia</name></member>
      <member refid="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70ca4b609caf0c9d7b04a88a0aa2dbd5dd91" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Gregorian</name></member>
      <member refid="classwx_date_time_1a7fe78a6acfef499befaf0f9123257317" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>GregorianAdoption</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba19b49f77ce14e8456f6ba311d5323c51" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>HST</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117ad2d17a16763803c0aa4977feb7725831" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Inv_Month</name></member>
      <member refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a7bf2467543ea4311ceede8d992829f2c" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Inv_WeekDay</name></member>
      <member refid="classwx_date_time_1a4f9ba1f993835bc0096f8811f92f5d79a4d483b3a43f07dd5b19d866036c20071" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Inv_Year</name></member>
      <member refid="classwx_date_time_1a8985ab251703e34d0b288a22581ba9d8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsBetween</name></member>
      <member refid="classwx_date_time_1a5478f06e2449d299c60ad98be6ca34a8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsDST</name></member>
      <member refid="classwx_date_time_1a52f2fcf206a4a78b3f3d36891263b4c9" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsDSTApplicable</name></member>
      <member refid="classwx_date_time_1a73fc9631cab5db9cc602bb5ec6c1f505" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsEarlierThan</name></member>
      <member refid="classwx_date_time_1a0a00396a0e837d2577547363a50467ac" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsEqualTo</name></member>
      <member refid="classwx_date_time_1a984b284c05ac8f37c5ad335cd6ad1c52" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsEqualUpTo</name></member>
      <member refid="classwx_date_time_1aa87b3990a0d925f9d0221411aa8c9375" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsGregorianDate</name></member>
      <member refid="classwx_date_time_1a9e0c48caeb682ef668b4d7940d663937" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsLaterThan</name></member>
      <member refid="classwx_date_time_1a55f8149cfda08356431d6c36ef9c02dc" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsLeapYear</name></member>
      <member refid="classwx_date_time_1a237d373eb71aff639e44e5ff46ddf2f3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsSameDate</name></member>
      <member refid="classwx_date_time_1a5627246bfbd060f01f027ae1d53a7f24" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsSameTime</name></member>
      <member refid="classwx_date_time_1ad1edfb9a46c2dcd963200beff1648dc2" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsStrictlyBetween</name></member>
      <member refid="classwx_date_time_1aaff0bd60809b4d03839ddd4c6eb9e84d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsValid</name></member>
      <member refid="classwx_date_time_1a93292d73b18e4858735c13e754224dcb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsWestEuropeanCountry</name></member>
      <member refid="classwx_date_time_1a24f030fd10755b6a0e30fb7cdc9933bc" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>IsWorkDay</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a53cc4760da18147518a448ba0da7a85d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Jan</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a495d4f30dde1a1adbff6653b12c384d5" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Jul</name></member>
      <member refid="classwx_date_time_1ab2c1717e9dff5256cc01f917a5b7f70cad5691423a7e252a4d910bca3d0cec255" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Julian</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a16a1fa0ab2bc344d3841909728be3f96" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Jun</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba44955e1d9b9cb1259580226af61d33d8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Local</name></member>
      <member refid="classwx_date_time_1a83cff1eb8079f9eef5c386a5701d8803" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>MakeFromTimezone</name></member>
      <member refid="classwx_date_time_1ad6ce9eb1fb237eda8013695ebd531af1" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>MakeTimezone</name></member>
      <member refid="classwx_date_time_1aa7e62cebf49c1c6b765e70ec19caedc0" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>MakeUTC</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117af83cf0954521af250e7ecab93d115050" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Mar</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a71835f9fa0eb5c48da47452c93bf5e6b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>May</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba7f09567fdbe8c0f2d9ca6b2b5ab3b92a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>MDT</name></member>
      <member refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457ac165afc62596e609922e423ba262fe56" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Mon</name></member>
      <member refid="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4a9916ad335e139f471d635cd04a7468d9" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Monday_First</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Month</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba30e029fadbdec932db6db3b7f9eb461e" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>MSD</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbafc28b9d52780f1a55d8a4a4f2075674d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>MSK</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba56d4091091fe350486bd2bafde5469a0" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>MST</name></member>
      <member refid="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7afde586e7e109fd5725b2e7c69f604b69" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Name_Abbr</name></member>
      <member refid="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7a55a9b6bb37099a66708970996b4e2e89" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Name_Full</name></member>
      <member refid="classwx_date_time_1a49326e6533b05df469ac7c5ff2af78b7" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>NameFlags</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a013eb4a34e3323d234babe378d011706" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Nov</name></member>
      <member refid="classwx_date_time_1a6e6c37a0414bb4831e2cc03b37f498a2" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Now</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba50981f4a9aa23c5765bbf82a31353d9c" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>NZDT</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbab65d681d65687315d5e8f5160e2d375d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>NZST</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a553f38557712cd32124ffe521573f2cb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Oct</name></member>
      <member refid="classwx_date_time_1ac1a77fc607ee36a16fba7078d25fe44d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>operator+=</name></member>
      <member refid="classwx_date_time_1ae3f78fde5174f576fca00eb21654544f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>operator+=</name></member>
      <member refid="classwx_date_time_1a146dd110466fb8ba714e98a853b83019" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>operator-=</name></member>
      <member refid="classwx_date_time_1a45d8ef84a5fcda547a9a15226ee68347" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>operator-=</name></member>
      <member refid="classwx_date_time_1a437af2acfdf63d47f09e43269e4c3f76" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>operator=</name></member>
      <member refid="classwx_date_time_1a4040ef007d8fc9273b0e6bf489d4d975" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>operator=</name></member>
      <member refid="classwx_date_time_1acdcb88e25b38099994af45b11391c962" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseDate</name></member>
      <member refid="classwx_date_time_1a332a41f998bc3be6c0a9a81449112485" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseDateTime</name></member>
      <member refid="classwx_date_time_1a5d01d56c310d505a093f1a7f25086a1b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseFormat</name></member>
      <member refid="classwx_date_time_1aa2137ab606576e3f5baf50d98ff47d17" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseFormat</name></member>
      <member refid="classwx_date_time_1a9430da2d38573e4043cf1217c0da1916" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseFormat</name></member>
      <member refid="classwx_date_time_1a35240c6a928bc9c763a5d26bd8f3072b" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseISOCombined</name></member>
      <member refid="classwx_date_time_1a416e9e5e7395dd11a059cd116da7e6a2" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseISODate</name></member>
      <member refid="classwx_date_time_1adc4c1fb178f73958b151eabd36625f59" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseISOTime</name></member>
      <member refid="classwx_date_time_1ab0f2485c52d0d3cf0196aaf0062d2f83" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseRfc822Date</name></member>
      <member refid="classwx_date_time_1ac903b3227620e1b88019e76b807327e8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ParseTime</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba63f8efe7f2da52ba952daa48a2df8ad8" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>PDT</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba9ef77e9f8a8423f55ddaf3c65f6f4de5" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>PST</name></member>
      <member refid="classwx_date_time_1a1975ca9c72d4fb89050566849776d3b2" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ResetTime</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126a49f7126bc437d2c05cd5f8ff63c268e4" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Russia</name></member>
      <member refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a1fb68aa3f50f920bc1b1d835f1e0eb73" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Sat</name></member>
      <member refid="classwx_date_time_1a156e17eb15e3c16a7da36cd810ff9117a7028d6990bff742f5f92387f91438884" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Sep</name></member>
      <member refid="classwx_date_time_1a221052d954c072ce56b796eaa4c075d3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Set</name></member>
      <member refid="classwx_date_time_1ae38d80eca7dcbfcd0984708e957c343f" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Set</name></member>
      <member refid="classwx_date_time_1afe75b8090e51a7b4e1aacccc55fd10bc" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Set</name></member>
      <member refid="classwx_date_time_1acfaba2a9f0241f74aff4641304f0a8fb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Set</name></member>
      <member refid="classwx_date_time_1a0b73caf2a363e429725244483ebc0d08" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Set</name></member>
      <member refid="classwx_date_time_1a6f7ee89e55144c61ac19a6543e67db6a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Set</name></member>
      <member refid="classwx_date_time_1a5ad5b532c62dd26784bb51366a27ca8d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetCountry</name></member>
      <member refid="classwx_date_time_1a153d3687333e318574299ad191f340bb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetDay</name></member>
      <member refid="classwx_date_time_1acdba3b71eec0870b14417d3010311a1a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetFromDOS</name></member>
      <member refid="classwx_date_time_1a48d529a2bb8434ce9419dbaa87a7e06d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetFromMSWSysTime</name></member>
      <member refid="classwx_date_time_1a00a6e0dd915c7239dc0ea6192a1908c1" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetHour</name></member>
      <member refid="classwx_date_time_1ab227fbf523dca7ea1aefdc0a806d4622" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetMillisecond</name></member>
      <member refid="classwx_date_time_1ae028d28c81960d95b9d433ea02775cde" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetMinute</name></member>
      <member refid="classwx_date_time_1a480fc77f9dc8491eb71b75be65befc57" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetMonth</name></member>
      <member refid="classwx_date_time_1aff2fd9f698a48bd18946b3d950adda65" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetSecond</name></member>
      <member refid="classwx_date_time_1ab033c8036318532cb55943847a9abb66" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetToCurrent</name></member>
      <member refid="classwx_date_time_1a6d6bc203c75e55188c03d60d88600494" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetToLastMonthDay</name></member>
      <member refid="classwx_date_time_1a55182141a6235de19c0bae356994e6f0" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetToLastWeekDay</name></member>
      <member refid="classwx_date_time_1ab239f44b4d46001c5887f8a3680fa5c0" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetToNextWeekDay</name></member>
      <member refid="classwx_date_time_1a798feefecc3c77cc64ba3e585b5ac704" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetToPrevWeekDay</name></member>
      <member refid="classwx_date_time_1a4687372ebe55a6aded83de6a639cde95" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetToWeekDay</name></member>
      <member refid="classwx_date_time_1a927cf1043514729227f07d244b208142" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetToWeekDayInSameWeek</name></member>
      <member refid="classwx_date_time_1ab91c82e85621326436f2931660434719" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetToWeekOfYear</name></member>
      <member refid="classwx_date_time_1a857b73aa9271782744cd524bea373f3c" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetToYearDay</name></member>
      <member refid="classwx_date_time_1ac68d4faee34360eac3ba52c5def5ac09" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>SetYear</name></member>
      <member refid="classwx_date_time_1a99bfe3957c206d71cd4d980b10b400a1" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Subtract</name></member>
      <member refid="classwx_date_time_1a9bb9c12d2fa47e67b6f9975f5cb8d750" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Subtract</name></member>
      <member refid="classwx_date_time_1afb1be3e9505496ec939897ec892fe694" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Subtract</name></member>
      <member refid="classwx_date_time_1ad2975130454759c7b198e14de10d2655" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Subtract</name></member>
      <member refid="classwx_date_time_1a0c983954508addf59aa40c75eac4beea" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Subtract</name></member>
      <member refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457aecc652810e8944beafed362de118d631" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Sun</name></member>
      <member refid="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4a06956cc8c60835143abeccda7c183471" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Sunday_First</name></member>
      <member refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457aefdce3348770a8e30443bd559cd272e9" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Thu</name></member>
      <member refid="classwx_date_time_1af730202238b9acd5a5df2977fa40c569" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Today</name></member>
      <member refid="classwx_date_time_1a254dff0f6fb8861216941dcc3d4fdc15" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ToTimezone</name></member>
      <member refid="classwx_date_time_1a4bddd303b09cc47c7251b01ca49dc04c" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>ToUTC</name></member>
      <member refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457ae1277871c9d23518b6137b9d9b005138" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Tue</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>TZ</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126ac01fceffd3df9ab202cc5eb74222467d" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>UK</name></member>
      <member refid="classwx_date_time_1a0db1c9bac7b2d27d589cad2a38d1438c" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>UNow</name></member>
      <member refid="classwx_date_time_1abdd3b3e656f92a4923c3ddf2026ed126ad0e27ed2327558c6b86b924f37238979" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>USA</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bba7c42813bc6ce147bb073c5783cbce8bb" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>UTC</name></member>
      <member refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457a3edaead476323f6fa7d6dea1e8b193b3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Wed</name></member>
      <member refid="classwx_date_time_1a9ce844e5c79b28711f52ae2d9a571457" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>WeekDay</name></member>
      <member refid="classwx_date_time_1a8ab175ce5385f833894d9b89987a90d4" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>WeekFlags</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbad85e6d8f2aaa3f603c2bfc58d84edb7a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>WEST</name></member>
      <member refid="classwx_date_time_1a4db12283a6c06cea4c92528fbb7f88bbad1bb3e8d84a7cd92efabe75a088862ef" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>WET</name></member>
      <member refid="classwx_date_time_1a4cc372429453a21632d64f34f635d853" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>wxDateTime</name></member>
      <member refid="classwx_date_time_1aca2bc3b942d920e01e496841bd759001" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>wxDateTime</name></member>
      <member refid="classwx_date_time_1af389cfd683905c7bd26d78ed2830f8d3" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>wxDateTime</name></member>
      <member refid="classwx_date_time_1af060ddc94177492d3cedf60f9e17224a" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>wxDateTime</name></member>
      <member refid="classwx_date_time_1aa2c38922eafec2a94fb5ee9221c0f6b9" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>wxDateTime</name></member>
      <member refid="classwx_date_time_1a929b59bfd0b445d2bd2e5e2b58767c18" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>wxDateTime</name></member>
      <member refid="classwx_date_time_1a8e4a6d1104d1882514679514e3dbc642" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>wxDateTime</name></member>
      <member refid="classwx_date_time_1a7d16ccd02f0c98f0667f57376da89da7" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>wxDateTime</name></member>
      <member refid="classwx_date_time_1a27df9e32a320a1ca266288d1a436de98" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>wxDateTime_t</name></member>
      <member refid="classwx_date_time_1a4f9ba1f993835bc0096f8811f92f5d79" prot="public" virt="non-virtual"><scope>wxDateTime</scope><name>Year</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

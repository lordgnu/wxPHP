<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_idle_event" kind="class" prot="public">
    <compoundname>wxIdleEvent</compoundname>
    <basecompoundref refid="classwx_event" prot="public" virt="non-virtual">wxEvent</basecompoundref>
    <includes local="no">wx/event.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_idle_event_1a32e646bcae35740990449b6a5387d0e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxIdleEvent::wxIdleEvent</definition>
        <argsstring>()</argsstring>
        <name>wxIdleEvent</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="3500"/>
      </memberdef>
      <memberdef kind="function" id="classwx_idle_event_1a914b7316db91fb71d21c899048666eca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxIdleEvent::MoreRequested</definition>
        <argsstring>() const </argsstring>
        <name>MoreRequested</name>
        <briefdescription>
<para>Returns true if the OnIdle function processing this event requested more processing time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_idle_event_1a6fbe979090c15ba40e6509d9c41f2f78" kindref="member">RequestMore()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="3517"/>
      </memberdef>
      <memberdef kind="function" id="classwx_idle_event_1a6fbe979090c15ba40e6509d9c41f2f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxIdleEvent::RequestMore</definition>
        <argsstring>(bool needMore=true)</argsstring>
        <name>RequestMore</name>
        <param>
          <type>bool</type>
          <declname>needMore</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Tells wxWidgets that more processing is required. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be called by an OnIdle handler for a window or window event handler to indicate that wxApp::OnIdle should forward the OnIdle event once more to the application windows.</para><para>If no window calls this function during OnIdle, then the application will remain in a passive event loop (not calling OnIdle) until a new event is posted to the application by the windowing system.</para><para><simplesect kind="see"><para><ref refid="classwx_idle_event_1a914b7316db91fb71d21c899048666eca" kindref="member">MoreRequested()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="3532"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_idle_event_1a087228d3f36f8ce0ba86f84cec2e3138" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event_8h_1af8b16f71b9b38095fe9f7f6244665a80" kindref="member">wxIdleMode</ref></type>
        <definition>static wxIdleMode wxIdleEvent::GetMode</definition>
        <argsstring>()</argsstring>
        <name>GetMode</name>
        <briefdescription>
<para>Static function returning a value specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_idle_event_1a655610b1a5a1c668efc7d475313af2e3" kindref="member">SetMode()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="3509"/>
      </memberdef>
      <memberdef kind="function" id="classwx_idle_event_1a655610b1a5a1c668efc7d475313af2e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxIdleEvent::SetMode</definition>
        <argsstring>(wxIdleMode mode)</argsstring>
        <name>SetMode</name>
        <param>
          <type><ref refid="event_8h_1af8b16f71b9b38095fe9f7f6244665a80" kindref="member">wxIdleMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Static function for specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Can be one of the <ref refid="event_8h_1af8b16f71b9b38095fe9f7f6244665a80" kindref="member">wxIdleMode</ref> values. The default is wxIDLE_PROCESS_ALL. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="3542"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is used for idle events, which are generated when the system becomes idle. </para>    </briefdescription>
    <detaileddescription>
<para>Note that, unless you do something specifically, the idle events are not sent if the system remains idle once it has become it, e.g. only a single idle event will be generated until something else resulting in more normal events happens and only then is the next idle event sent again.</para><para>If you need to ensure a continuous stream of idle events, you can either use <ref refid="classwx_idle_event_1a6fbe979090c15ba40e6509d9c41f2f78" kindref="member">wxIdleEvent::RequestMore</ref> method in your handler or call <ref refid="group__group__funcmacro__appinitterm_1ga97206743f70b5382f9e2615217604d15" kindref="member">wxWakeUpIdle()</ref> periodically (for example from a timer event handler), but note that both of these approaches (and especially the first one) increase the system load and so should be avoided if possible.</para><para>By default, idle events are sent to all windows, including even the hidden ones because they may be shown if some condition is met from their <computeroutput>wxEVT_IDLE</computeroutput> (or related <computeroutput>wxEVT_UPDATE_UI</computeroutput>) handler. The children of hidden windows do not receive idle events however as they can&apos;t change their state in any way noticeable by the user. Finally, the global <ref refid="classwx_app" kindref="compound">wxApp</ref> object also receives these events, as usual, so it can be used for any global idle time processing.</para><para>If sending idle events to all windows is causing a significant overhead in your application, you can call <ref refid="classwx_idle_event_1a655610b1a5a1c668efc7d475313af2e3" kindref="member">wxIdleEvent::SetMode</ref> with the value wxIDLE_PROCESS_SPECIFIED, and set the wxWS_EX_PROCESS_IDLE extra window style for every window which should receive idle events, all the other ones will not receive them in this case.</para><para><heading level="2">Events using this class</heading>
</para><para>The following event handler macros redirect the events to member function handlers &apos;<bold>func</bold>&apos; with prototypes like: void<nonbreakablespace/>handlerFuncName(<ref refid="classwx_idle_event" kindref="compound">wxIdleEvent</ref>&amp;<nonbreakablespace/>event)Event macros: <itemizedlist>
<listitem><para>EVT_IDLE(func): Process a <computeroutput>wxEVT_IDLE</computeroutput> event. </para></listitem>
</itemizedlist>
<heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__events" kindref="compound">Events</ref></para><para><simplesect kind="see"><para><ref refid="overview_events" kindref="compound">Events and Event Handling</ref>, <ref refid="classwx_update_u_i_event" kindref="compound">wxUpdateUIEvent</ref>, <ref refid="classwx_window_1a6b5654c0c6c6245d592c279521f7099c" kindref="member">wxWindow::OnInternalIdle</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="7422">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="7420">
        <label>wxIdleEvent</label>
        <link refid="classwx_idle_event"/>
        <childnode refid="7421" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7421">
        <label>wxEvent</label>
        <link refid="classwx_event"/>
        <childnode refid="7422" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7425">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="7426" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="7423">
        <label>wxIdleEvent</label>
        <link refid="classwx_idle_event"/>
        <childnode refid="7424" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7424">
        <label>wxEvent</label>
        <link refid="classwx_event"/>
        <childnode refid="7425" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7426">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="3495" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" bodystart="3494" bodyend="3543"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxIdleEvent</scope><name>AllocExclusive</name></member>
      <member refid="classwx_event_1a26878097a702e8d0368da150125d4158" prot="public" virt="pure-virtual"><scope>wxIdleEvent</scope><name>Clone</name></member>
      <member refid="classwx_object_1a1d39f1d3650fe0982c9a1abe7f9fe7b7" prot="protected" virt="virtual"><scope>wxIdleEvent</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a95c6a5e4e1e03ff23c7b9efe4cff0c1a" prot="protected" virt="virtual"><scope>wxIdleEvent</scope><name>CreateRefData</name></member>
      <member refid="classwx_object_1ab3a0c6f723cbaddb47be4e8dd98cc8e2" prot="public" virt="virtual"><scope>wxIdleEvent</scope><name>GetClassInfo</name></member>
      <member refid="classwx_event_1a525e5c576e64090af493cb81db2da59b" prot="public" virt="virtual"><scope>wxIdleEvent</scope><name>GetEventCategory</name></member>
      <member refid="classwx_event_1abdc74e95c8c2f32f2cc2bd84b88985ee" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetEventObject</name></member>
      <member refid="classwx_event_1ac1e62dc3000d4bff0ebbd90a3d290695" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetEventType</name></member>
      <member refid="classwx_event_1ac732828ac14cfc289d798a4fea437246" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetId</name></member>
      <member refid="classwx_idle_event_1a087228d3f36f8ce0ba86f84cec2e3138" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetMode</name></member>
      <member refid="classwx_object_1aabdb4fc957226544a8408167844e4f42" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetRefData</name></member>
      <member refid="classwx_event_1a448d5ef08f617a3ae316235fcf804377" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetSkipped</name></member>
      <member refid="classwx_event_1a8a42d5b35d442052b58c53077ff4ae60" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetTimestamp</name></member>
      <member refid="classwx_event_1ad70c9cfaf0d626c1115b2d42ea047c2d" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>IsCommandEvent</name></member>
      <member refid="classwx_object_1af40d580385cf4f8112fae7713404b01e" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>IsKindOf</name></member>
      <member refid="classwx_object_1a80a1a3fda7b14396a9ddd3d7a46a88bd" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>IsSameAs</name></member>
      <member refid="classwx_event_1ac81911194f1f59e1454c0397b87975d4" prot="protected" virt="non-virtual"><scope>wxIdleEvent</scope><name>m_propagationLevel</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxIdleEvent</scope><name>m_refData</name></member>
      <member refid="classwx_idle_event_1a914b7316db91fb71d21c899048666eca" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>MoreRequested</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>operator new</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>Ref</name></member>
      <member refid="classwx_idle_event_1a6fbe979090c15ba40e6509d9c41f2f78" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>RequestMore</name></member>
      <member refid="classwx_event_1a0acb5c75f6e67b8822ad8ba3c5bdc4fe" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>ResumePropagation</name></member>
      <member refid="classwx_event_1a3460217d04c36393ab868ba453fde13d" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetEventObject</name></member>
      <member refid="classwx_event_1aa29fb7459d64602e09837fea1e516d27" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetEventType</name></member>
      <member refid="classwx_event_1ab9973f687bfa8a60318d8d9bd629d0d4" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetId</name></member>
      <member refid="classwx_idle_event_1a655610b1a5a1c668efc7d475313af2e3" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetMode</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetRefData</name></member>
      <member refid="classwx_event_1ad4380dff3144a986cb960473051a1d8d" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetTimestamp</name></member>
      <member refid="classwx_event_1ad265ef226445cb6b72a2697dd9d3b406" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>ShouldPropagate</name></member>
      <member refid="classwx_event_1a98eb20b76106f9a933c2eb3ee119f66c" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>Skip</name></member>
      <member refid="classwx_event_1a060a7d222404daff4d3cef30cddeaae3" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>StopPropagation</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>UnShare</name></member>
      <member refid="classwx_event_1aaf2a5cf056d006859cea36689ba13d36" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>wxEvent</name></member>
      <member refid="classwx_idle_event_1a32e646bcae35740990449b6a5387d0e8" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>wxIdleEvent</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxIdleEvent</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

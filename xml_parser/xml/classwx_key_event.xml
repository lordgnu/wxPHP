<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_key_event" kind="class" prot="public">
    <compoundname>wxKeyEvent</compoundname>
    <basecompoundref refid="classwx_event" prot="public" virt="non-virtual">wxEvent</basecompoundref>
    <basecompoundref refid="classwx_keyboard_state" prot="public" virt="non-virtual">wxKeyboardState</basecompoundref>
    <includes local="no">wx/event.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_key_event_1a2d2767963161e62139339a8152d7003b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxKeyEvent::GetPosition</definition>
        <argsstring>() const </argsstring>
        <name>GetPosition</name>
        <briefdescription>
<para>Obtains the position (in client coordinates) at which the key was pressed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1448"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1a2b1270ad737d6ceaef527e4bcd4c14be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxKeyEvent::GetPosition</definition>
        <argsstring>(long *x, long *y) const </argsstring>
        <name>GetPosition</name>
        <param>
          <type>long *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Obtains the position (in client coordinates) at which the key was pressed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1449"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_key_event_1a8214333c112432c4c9df114d3bd9122c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxKeyEvent::wxKeyEvent</definition>
        <argsstring>(wxEventType keyEventType=wxEVT_NULL)</argsstring>
        <name>wxKeyEvent</name>
        <param>
          <type><ref refid="group__group__funcmacro__events_1ga6a7fd172612c0d6d9029bfa3aa91aca0" kindref="member">wxEventType</ref></type>
          <declname>keyEventType</declname>
          <defval><ref refid="group__group__funcmacro__events_1ga310bc3f7977ae79ac1198c7a287dbffe" kindref="member">wxEVT_NULL</ref></defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Currently, the only valid event types are <computeroutput>wxEVT_CHAR</computeroutput> and <computeroutput>wxEVT_CHAR_HOOK</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1385"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxKeyEvent::GetKeyCode</definition>
        <argsstring>() const </argsstring>
        <name>GetKeyCode</name>
        <briefdescription>
<para>Returns the key code of the key that generated this event. </para>        </briefdescription>
        <detaileddescription>
<para>ASCII symbols return normal ASCII values, while events from special keys such as &quot;left cursor arrow&quot; (<computeroutput>WXK_LEFT</computeroutput>) return values outside of the ASCII range. See <ref refid="defs_8h_1a41c4609211685cff198618963ec8f77d" kindref="member">wxKeyCode</ref> for a full list of the virtual key codes.</para><para>Note that this method returns a meaningful value only for special non-alphanumeric keys or if the user entered a character that can be represented in current locale&apos;s default charset. Otherwise, e.g. if the user enters a Japanese character in a program not using Japanese locale, this method returns <computeroutput>WXK_NONE</computeroutput> and <ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member">GetUnicodeKey()</ref> should be used to obtain the corresponding Unicode character.</para><para>Using <ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member">GetUnicodeKey()</ref> is in general the right thing to do if you are interested in the characters typed by the user, <ref refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" kindref="member">GetKeyCode()</ref> should be only used for special keys (for which <ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member">GetUnicodeKey()</ref> returns <computeroutput>WXK_NONE</computeroutput>). To handle both kinds of keys you might write: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyHandler::OnChar(<ref refid="classwx_key_event" kindref="compound" tooltip="This event class contains information about key press and release events.">wxKeyEvent</ref>&amp;<sp/>event)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>event.<ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member" tooltip="Returns the Unicode character corresponding to this key event.">GetUnicodeKey</ref>()<sp/>!=<sp/><ref refid="defs_8h_1a41c4609211685cff198618963ec8f77da00fce1afe780769163f307975cfc9b05" kindref="member" tooltip="No key.">WXK_NONE</ref><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>a<sp/>printable<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__log_1ga249358701f3c2d410088ddf7a61d8564" kindref="member" tooltip="For all normal, informational messages.">wxLogMessage</ref>(</highlight><highlight class="stringliteral">&quot;You<sp/>pressed<sp/>&apos;%c&apos;&quot;</highlight><highlight class="normal">,<sp/>event.<ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member" tooltip="Returns the Unicode character corresponding to this key event.">GetUnicodeKey</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>a<sp/>special<sp/>key,<sp/>deal<sp/>with<sp/>all<sp/>the<sp/>known<sp/>ones:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" kindref="member" tooltip="Returns the key code of the key that generated this event.">GetKeyCode</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1a41c4609211685cff198618963ec8f77da02c178f08c2061bd418482a305024bb0" kindref="member">WXK_LEFT</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1a41c4609211685cff198618963ec8f77dab409b1eec0b8c17cdbeacf6597324c55" kindref="member">WXK_RIGHT</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>move<sp/>cursor<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1a41c4609211685cff198618963ec8f77da9017f761f7c0c946c1f3656d5ce509cf" kindref="member">WXK_F1</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>give<sp/>help<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1432"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1adba49d426004d179fa3f6fa0faa0d1ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxKeyEvent::IsKeyInCategory</definition>
        <argsstring>(int category) const </argsstring>
        <name>IsKeyInCategory</name>
        <param>
          <type>int</type>
          <declname>category</declname>
        </param>
        <briefdescription>
<para>Returns true if the key is in the given key category. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitwise combination of named <ref refid="event_8h_1a20f17bd5262af79da603671677288b8d" kindref="member">wxKeyCategoryFlags</ref> constants.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1442"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1a6fddcd170d05b0852a7eb2a0cb730795" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1afdb12e5345c3fae4b537e813df9f02a3" kindref="member">wxUint32</ref></type>
        <definition>wxUint32 wxKeyEvent::GetRawKeyCode</definition>
        <argsstring>() const </argsstring>
        <name>GetRawKeyCode</name>
        <briefdescription>
<para>Returns the raw key code for this event. </para>        </briefdescription>
        <detaileddescription>
<para>The flags are platform-dependent and should only be used if the functionality provided by other <ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref> methods is insufficient.</para><para>Under MSW, the raw key code is the value of <computeroutput>wParam</computeroutput> parameter of the corresponding message.</para><para>Under GTK, the raw key code is the <computeroutput>keyval</computeroutput> field of the corresponding GDK event.</para><para>Under OS X, the raw key code is the <computeroutput>keyCode</computeroutput> field of the corresponding NSEvent.</para><para><simplesect kind="note"><para>Currently the raw key codes are not supported by all ports, use #ifdef wxHAS_RAW_KEY_CODES to determine if this feature is available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1470"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1aeca3d5a0a34cb49725d0daee73e64886" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1afdb12e5345c3fae4b537e813df9f02a3" kindref="member">wxUint32</ref></type>
        <definition>wxUint32 wxKeyEvent::GetRawKeyFlags</definition>
        <argsstring>() const </argsstring>
        <name>GetRawKeyFlags</name>
        <briefdescription>
<para>Returns the low level key flags for this event. </para>        </briefdescription>
        <detaileddescription>
<para>The flags are platform-dependent and should only be used if the functionality provided by other <ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref> methods is insufficient.</para><para>Under MSW, the raw flags are just the value of <computeroutput>lParam</computeroutput> parameter of the corresponding message.</para><para>Under GTK, the raw flags contain the <computeroutput>hardware_keycode</computeroutput> field of the corresponding GDK event.</para><para>Under OS X, the raw flags contain the modifiers state.</para><para><simplesect kind="note"><para>Currently the raw key flags are not supported by all ports, use #ifdef wxHAS_RAW_KEY_CODES to determine if this feature is available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1489"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref></type>
        <definition>wxChar wxKeyEvent::GetUnicodeKey</definition>
        <argsstring>() const </argsstring>
        <name>GetUnicodeKey</name>
        <briefdescription>
<para>Returns the Unicode character corresponding to this key event. </para>        </briefdescription>
        <detaileddescription>
<para>If the key pressed doesn&apos;t have any character value (e.g. a cursor key) this method will return <computeroutput>WXK_NONE</computeroutput>. In this case you should use <ref refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" kindref="member">GetKeyCode()</ref> to retrieve the value of the key.</para><para>This function is only available in Unicode build, i.e. when <computeroutput>wxUSE_UNICODE</computeroutput> is 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1501"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1abbc502a6442468355d8e3e70c72c8aa4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a11f6efc0e8d8d680f3ec8e82aa4f1770" kindref="member">wxCoord</ref></type>
        <definition>wxCoord wxKeyEvent::GetX</definition>
        <argsstring>() const </argsstring>
        <name>GetX</name>
        <briefdescription>
<para>Returns the X position (in client coordinates) of the event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1506"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1aad0a940f9940a01a158079d175728db8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a11f6efc0e8d8d680f3ec8e82aa4f1770" kindref="member">wxCoord</ref></type>
        <definition>wxCoord wxKeyEvent::GetY</definition>
        <argsstring>() const </argsstring>
        <name>GetY</name>
        <briefdescription>
<para>Returns the Y position (in client coordinates) of the event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1511"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1a4a7060ef0054d681cf8685e0467a663e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxKeyEvent::DoAllowNextEvent</definition>
        <argsstring>()</argsstring>
        <name>DoAllowNextEvent</name>
        <briefdescription>
<para>Allow normal key events generation. </para>        </briefdescription>
        <detaileddescription>
<para>Can be called from <computeroutput>wxEVT_CHAR_HOOK</computeroutput> handler to indicate that the generation of normal events should <emphasis>not</emphasis> be suppressed, as it happens by default when this event is handled.</para><para>The intended use of this method is to allow some window object to prevent <computeroutput>wxEVT_CHAR_HOOK</computeroutput> handler in its parent window from running by defining its own handler for this event. Without calling this method, this would result in not generating <computeroutput>wxEVT_KEY_DOWN</computeroutput> nor <computeroutput>wxEVT_CHAR</computeroutput> events at all but by calling it you can ensure that these events would still be generated, even if <computeroutput>wxEVT_CHAR_HOOK</computeroutput> event was handled.</para><para><simplesect kind="since"><para>2.9.3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1529"/>
      </memberdef>
      <memberdef kind="function" id="classwx_key_event_1a0aca7f257410f7313994c69a7321bf11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxKeyEvent::IsNextEventAllowed</definition>
        <argsstring>() const </argsstring>
        <name>IsNextEventAllowed</name>
        <briefdescription>
<para>Returns true if <ref refid="classwx_key_event_1a4a7060ef0054d681cf8685e0467a663e" kindref="member">DoAllowNextEvent()</ref> had been called, false by default. </para>        </briefdescription>
        <detaileddescription>
<para>This method is used by wxWidgets itself to determine whether the normal key events should be generated after <computeroutput>wxEVT_CHAR_HOOK</computeroutput> processing.</para><para><simplesect kind="since"><para>2.9.3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1539"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This event class contains information about key press and release events. </para>    </briefdescription>
    <detaileddescription>
<para>The main information carried by this event is the key being pressed or released. It can be accessed using either <ref refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" kindref="member">GetKeyCode()</ref> function or <ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member">GetUnicodeKey()</ref>. For the printable characters, the latter should be used as it works for any keys, including non-Latin-1 characters that can be entered when using national keyboard layouts. <ref refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" kindref="member">GetKeyCode()</ref> should be used to handle special characters (such as cursor arrows keys or <computeroutput>HOME</computeroutput> or <computeroutput>INS</computeroutput> and so on) which correspond to <ref refid="defs_8h_1a41c4609211685cff198618963ec8f77d" kindref="member">wxKeyCode</ref> enum elements above the <computeroutput>WXK_START</computeroutput> constant. While <ref refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" kindref="member">GetKeyCode()</ref> also returns the character code for Latin-1 keys for compatibility, it doesn&apos;t work for Unicode characters in general and will return <computeroutput>WXK_NONE</computeroutput> for any non-Latin-1 ones. For this reason, it&apos;s recommended to always use <ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member">GetUnicodeKey()</ref> and only fall back to <ref refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" kindref="member">GetKeyCode()</ref> if <ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member">GetUnicodeKey()</ref> returned <computeroutput>WXK_NONE</computeroutput> meaning that the event corresponds to a non-printable special keys.</para><para>While both of these functions can be used with the events of <computeroutput>wxEVT_KEY_DOWN</computeroutput>, <computeroutput>wxEVT_KEY_UP</computeroutput> and <computeroutput>wxEVT_CHAR</computeroutput> types, the values returned by them are different for the first two events and the last one. For the latter, the key returned corresponds to the character that would appear in e.g. a text zone if the user pressed the key in it. As such, its value depends on the current state of the Shift key and, for the letters, on the state of Caps Lock modifier. For example, if <computeroutput>A</computeroutput> key is pressed without Shift being held down, <ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref> of type <computeroutput>wxEVT_CHAR</computeroutput> generated for this key press will return (from either <ref refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" kindref="member">GetKeyCode()</ref> or <ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member">GetUnicodeKey()</ref> as their meanings coincide for ASCII characters) key code of 97 corresponding the ASCII value of <computeroutput>a</computeroutput>. And if the same key is pressed but with Shift being held (or Caps Lock being active), then the key could would be 65, i.e. ASCII value of capital <computeroutput>A</computeroutput>.</para><para>However for the key down and up events the returned key code will instead be <computeroutput>A</computeroutput> independently of the state of the modifier keys i.e. it depends only on physical key being pressed and is not translated to its logical representation using the current keyboard state. Such untranslated key codes are defined as follows:<itemizedlist>
<listitem><para>For the letters they correspond to the <emphasis>upper</emphasis> case value of the letter.</para></listitem><listitem><para>For the other alphanumeric keys (e.g. <computeroutput>7</computeroutput> or <computeroutput>+</computeroutput>), the untranslated key code corresponds to the character produced by the key when it is pressed without Shift. E.g. in standard US keyboard layout the untranslated key code for the key <computeroutput>=/+</computeroutput> in the upper right corner of the keyboard is 61 which is the ASCII value of <computeroutput>=</computeroutput>.</para></listitem><listitem><para>For the rest of the keys (i.e. special non-printable keys) it is the same as the normal key code as no translation is used anyhow.</para></listitem></itemizedlist>
</para><para>Notice that the first rule applies to all Unicode letters, not just the usual Latin-1 ones. However for non-Latin-1 letters only <ref refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" kindref="member">GetUnicodeKey()</ref> can be used to retrieve the key code as <ref refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" kindref="member">GetKeyCode()</ref> just returns <computeroutput>WXK_NONE</computeroutput> in this case.</para><para>To summarize: you should handle <computeroutput>wxEVT_CHAR</computeroutput> if you need the translated key and <computeroutput>wxEVT_KEY_DOWN</computeroutput> if you only need the value of the key itself, independent of the current keyboard state.</para><para><simplesect kind="note"><para>Not all key down events may be generated by the user. As an example, <computeroutput>wxEVT_KEY_DOWN</computeroutput> with <computeroutput>=</computeroutput> key code can be generated using the standard US keyboard layout but not using the German one because the <computeroutput>=</computeroutput> key corresponds to Shift-0 key combination in this layout and the key code for it is <computeroutput>0</computeroutput>, not <computeroutput>=</computeroutput>. Because of this you should avoid requiring your users to type key events that might be impossible to enter on their keyboard.</para></simplesect>
Another difference between key and char events is that another kind of translation is done for the latter ones when the Control key is pressed: char events for ASCII letters in this case carry codes corresponding to the ASCII value of Ctrl-Latter, i.e. 1 for Ctrl-A, 2 for Ctrl-B and so on until 26 for Ctrl-Z. This is convenient for terminal-like applications and can be completely ignored by all the other ones (if you need to handle Ctrl-A it is probably a better idea to use the key event rather than the char one). Notice that currently no translation is done for the presses of <computeroutput></computeroutput>[, <computeroutput>\</computeroutput>, <computeroutput></computeroutput>], <computeroutput>^</computeroutput> and <computeroutput>_</computeroutput> keys which might be mapped to ASCII values from 27 to 31. Since version 2.9.2, the enum values <computeroutput>WXK_CONTROL_A</computeroutput> - <computeroutput>WXK_CONTROL_Z</computeroutput> can be used instead of the non-descriptive constant values 1-26.</para><para>Finally, modifier keys only generate key events but no char events at all. The modifiers keys are <computeroutput>WXK_SHIFT</computeroutput>, <computeroutput>WXK_CONTROL</computeroutput>, <computeroutput>WXK_ALT</computeroutput> and various <computeroutput>WXK_WINDOWS_XXX</computeroutput> from <ref refid="defs_8h_1a41c4609211685cff198618963ec8f77d" kindref="member">wxKeyCode</ref> enum.</para><para>Modifier keys events are special in one additional aspect: usually the keyboard state associated with a key press is well defined, e.g. <ref refid="classwx_keyboard_state_1a63b9ec3a2f30011471a7036853fc38f3" kindref="member">wxKeyboardState::ShiftDown()</ref> returns <computeroutput>true</computeroutput> only if the Shift key was held pressed when the key that generated this event itself was pressed. There is an ambiguity for the key press events for Shift key itself however. By convention, it is considered to be already pressed when it is pressed and already released when it is released. In other words, <computeroutput>wxEVT_KEY_DOWN</computeroutput> event for the Shift key itself will have <computeroutput>wxMOD_SHIFT</computeroutput> in <ref refid="classwx_keyboard_state_1a44b1e849563ebf43e073915a447e4aa5" kindref="member">GetModifiers()</ref> and <ref refid="classwx_keyboard_state_1a63b9ec3a2f30011471a7036853fc38f3" kindref="member">ShiftDown()</ref> will return true while the <computeroutput>wxEVT_KEY_UP</computeroutput> event for Shift itself will not have <computeroutput>wxMOD_SHIFT</computeroutput> in its modifiers and <ref refid="classwx_keyboard_state_1a63b9ec3a2f30011471a7036853fc38f3" kindref="member">ShiftDown()</ref> will return false.</para><para><bold>Tip:</bold> You may discover the key codes and modifiers generated by all the keys on your system interactively by running the <ref refid="page_samples_1page_samples_keyboard" kindref="member">Key Event Sample</ref> wxWidgets sample and pressing some keys in it.</para><para><simplesect kind="note"><para>If a key down (<computeroutput>EVT_KEY_DOWN</computeroutput>) event is caught and the event handler does not call <computeroutput>event.Skip()</computeroutput> then the corresponding char event (<computeroutput>EVT_CHAR</computeroutput>) will not happen. This is by design and enables the programs that handle both types of events to avoid processing the same key twice. As a consequence, if you do not want to suppress the <computeroutput>wxEVT_CHAR</computeroutput> events for the keys you handle, always call <computeroutput>event.Skip()</computeroutput> in your <computeroutput>wxEVT_KEY_DOWN</computeroutput> handler. Not doing may also prevent accelerators defined using this key from working.</para><simplesectsep/><para>If a key is maintained in a pressed state, you will typically get a lot of (automatically generated) key down events but only one key up one at the end when the key is released so it is wrong to assume that there is one up event corresponding to each down one.</para><simplesectsep/><para>For Windows programmers: The key and char events in wxWidgets are similar to but slightly different from Windows <computeroutput>WM_KEYDOWN</computeroutput> and <computeroutput>WM_CHAR</computeroutput> events. In particular, Alt-x combination will generate a char event in wxWidgets (unless it is used as an accelerator) and almost all keys, including ones without ASCII equivalents, generate char events too.</para></simplesect>
<heading level="2">Events using this class</heading>
</para><para>The following event handler macros redirect the events to member function handlers &apos;<bold>func</bold>&apos; with prototypes like: void<nonbreakablespace/>handlerFuncName(<ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref>&amp;<nonbreakablespace/>event)Event macros: <itemizedlist>
<listitem><para>EVT_KEY_DOWN(func): Process a <computeroutput>wxEVT_KEY_DOWN</computeroutput> event (any key has been pressed). If this event is handled and not skipped, <computeroutput>wxEVT_CHAR</computeroutput> will not be generated at all for this key press (but <computeroutput>wxEVT_KEY_UP</computeroutput> will be). </para></listitem>
<listitem><para>EVT_KEY_UP(func): Process a <computeroutput>wxEVT_KEY_UP</computeroutput> event (any key has been released). </para></listitem>
<listitem><para>EVT_CHAR(func): Process a <computeroutput>wxEVT_CHAR</computeroutput> event. </para></listitem>
<listitem><para>EVT_CHAR_HOOK(func): Process a <computeroutput>wxEVT_CHAR_HOOK</computeroutput> event. Unlike all the other key events, this event is propagated upwards the window hierarchy which allows intercepting it in the parent window of the focused window to which it is sent initially (if there is no focused window, this event is sent to the <ref refid="classwx_app" kindref="compound">wxApp</ref> global object). It is also generated before any other key events and so gives the parent window an opportunity to modify the keyboard handling of its children, e.g. it is used internally by wxWidgets in some ports to intercept pressing Esc key in any child of a dialog to close the dialog itself when it&apos;s pressed. By default, if this event is handled, i.e. the handler doesn&apos;t call <ref refid="classwx_event_1a98eb20b76106f9a933c2eb3ee119f66c" kindref="member">wxEvent::Skip()</ref>, neither <computeroutput>wxEVT_KEY_DOWN</computeroutput> nor <computeroutput>wxEVT_CHAR</computeroutput> events will be generated (although <computeroutput>wxEVT_KEY_UP</computeroutput> still will be), i.e. it replaces the normal key events. However by calling the special <ref refid="classwx_key_event_1a4a7060ef0054d681cf8685e0467a663e" kindref="member">DoAllowNextEvent()</ref> method you can handle <computeroutput>wxEVT_CHAR_HOOK</computeroutput> and still allow normal events generation. This is something that is rarely useful but can be required if you need to prevent a parent <computeroutput>wxEVT_CHAR_HOOK</computeroutput> handler from running without suppressing the normal key events. Finally notice that this event is not generated when the mouse is captured as it is considered that the window which has the capture should receive all the keyboard events too without allowing its parent <ref refid="classwx_top_level_window" kindref="compound">wxTopLevelWindow</ref> to interfere with their processing. </para></listitem>
</itemizedlist>
<simplesect kind="see"><para><ref refid="classwx_keyboard_state" kindref="compound">wxKeyboardState</ref></para></simplesect>
<heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__events" kindref="compound">Events</ref> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="7575">
        <label>wxKeyboardState</label>
        <link refid="classwx_keyboard_state"/>
      </node>
      <node id="7572">
        <label>wxKeyEvent</label>
        <link refid="classwx_key_event"/>
        <childnode refid="7573" relation="public-inheritance">
        </childnode>
        <childnode refid="7575" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7574">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="7573">
        <label>wxEvent</label>
        <link refid="classwx_event"/>
        <childnode refid="7574" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7580">
        <label>wxKeyboardState</label>
        <link refid="classwx_keyboard_state"/>
      </node>
      <node id="7576">
        <label>wxKeyEvent</label>
        <link refid="classwx_key_event"/>
        <childnode refid="7577" relation="public-inheritance">
        </childnode>
        <childnode refid="7580" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7578">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="7579" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="7577">
        <label>wxEvent</label>
        <link refid="classwx_event"/>
        <childnode refid="7578" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7579">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" line="1379" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/event.h" bodystart="1377" bodyend="1540"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxKeyEvent</scope><name>AllocExclusive</name></member>
      <member refid="classwx_keyboard_state_1af71012a9fdbd32bbdc391c984ec5a588" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>AltDown</name></member>
      <member refid="classwx_event_1a26878097a702e8d0368da150125d4158" prot="public" virt="pure-virtual"><scope>wxKeyEvent</scope><name>Clone</name></member>
      <member refid="classwx_object_1a1d39f1d3650fe0982c9a1abe7f9fe7b7" prot="protected" virt="virtual"><scope>wxKeyEvent</scope><name>CloneRefData</name></member>
      <member refid="classwx_keyboard_state_1a05240fdaf0b5cc9db5f8207d0b8062de" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>CmdDown</name></member>
      <member refid="classwx_keyboard_state_1ae25436ceab56c88411dac479106b18dd" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>ControlDown</name></member>
      <member refid="classwx_object_1a95c6a5e4e1e03ff23c7b9efe4cff0c1a" prot="protected" virt="virtual"><scope>wxKeyEvent</scope><name>CreateRefData</name></member>
      <member refid="classwx_key_event_1a4a7060ef0054d681cf8685e0467a663e" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>DoAllowNextEvent</name></member>
      <member refid="classwx_object_1ab3a0c6f723cbaddb47be4e8dd98cc8e2" prot="public" virt="virtual"><scope>wxKeyEvent</scope><name>GetClassInfo</name></member>
      <member refid="classwx_event_1a525e5c576e64090af493cb81db2da59b" prot="public" virt="virtual"><scope>wxKeyEvent</scope><name>GetEventCategory</name></member>
      <member refid="classwx_event_1abdc74e95c8c2f32f2cc2bd84b88985ee" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetEventObject</name></member>
      <member refid="classwx_event_1ac1e62dc3000d4bff0ebbd90a3d290695" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetEventType</name></member>
      <member refid="classwx_event_1ac732828ac14cfc289d798a4fea437246" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetId</name></member>
      <member refid="classwx_key_event_1a3dccc5a254770931e5d8066ef47e7fb0" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetKeyCode</name></member>
      <member refid="classwx_keyboard_state_1a44b1e849563ebf43e073915a447e4aa5" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetModifiers</name></member>
      <member refid="classwx_key_event_1a2d2767963161e62139339a8152d7003b" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetPosition</name></member>
      <member refid="classwx_key_event_1a2b1270ad737d6ceaef527e4bcd4c14be" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetPosition</name></member>
      <member refid="classwx_key_event_1a6fddcd170d05b0852a7eb2a0cb730795" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetRawKeyCode</name></member>
      <member refid="classwx_key_event_1aeca3d5a0a34cb49725d0daee73e64886" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetRawKeyFlags</name></member>
      <member refid="classwx_object_1aabdb4fc957226544a8408167844e4f42" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetRefData</name></member>
      <member refid="classwx_event_1a448d5ef08f617a3ae316235fcf804377" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetSkipped</name></member>
      <member refid="classwx_event_1a8a42d5b35d442052b58c53077ff4ae60" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetTimestamp</name></member>
      <member refid="classwx_key_event_1afc21af89018eaef208ad50ffadc6cf6f" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetUnicodeKey</name></member>
      <member refid="classwx_key_event_1abbc502a6442468355d8e3e70c72c8aa4" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetX</name></member>
      <member refid="classwx_key_event_1aad0a940f9940a01a158079d175728db8" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>GetY</name></member>
      <member refid="classwx_keyboard_state_1a85ae7433cada04555d88704066a2f4fb" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>HasModifiers</name></member>
      <member refid="classwx_event_1ad70c9cfaf0d626c1115b2d42ea047c2d" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>IsCommandEvent</name></member>
      <member refid="classwx_key_event_1adba49d426004d179fa3f6fa0faa0d1ca" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>IsKeyInCategory</name></member>
      <member refid="classwx_object_1af40d580385cf4f8112fae7713404b01e" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>IsKindOf</name></member>
      <member refid="classwx_key_event_1a0aca7f257410f7313994c69a7321bf11" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>IsNextEventAllowed</name></member>
      <member refid="classwx_object_1a80a1a3fda7b14396a9ddd3d7a46a88bd" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>IsSameAs</name></member>
      <member refid="classwx_event_1ac81911194f1f59e1454c0397b87975d4" prot="protected" virt="non-virtual"><scope>wxKeyEvent</scope><name>m_propagationLevel</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxKeyEvent</scope><name>m_refData</name></member>
      <member refid="classwx_keyboard_state_1a8875366f7792d7fd5308cc240f5f0c5f" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>MetaDown</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>operator new</name></member>
      <member refid="classwx_keyboard_state_1ab0488a268111109cb6ff0ebd09e91ad1" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>RawControlDown</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>Ref</name></member>
      <member refid="classwx_event_1a0acb5c75f6e67b8822ad8ba3c5bdc4fe" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>ResumePropagation</name></member>
      <member refid="classwx_keyboard_state_1a6ba12f87c2c95364528ab152fa813de0" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetAltDown</name></member>
      <member refid="classwx_keyboard_state_1ac9e9f195b68f79f4aac683bb7eb620dd" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetControlDown</name></member>
      <member refid="classwx_event_1a3460217d04c36393ab868ba453fde13d" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetEventObject</name></member>
      <member refid="classwx_event_1aa29fb7459d64602e09837fea1e516d27" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetEventType</name></member>
      <member refid="classwx_event_1ab9973f687bfa8a60318d8d9bd629d0d4" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetId</name></member>
      <member refid="classwx_keyboard_state_1adb5578cce4dce054cd24c7eb3cd650e7" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetMetaDown</name></member>
      <member refid="classwx_keyboard_state_1a3a200bfbfaa31597f791e5bd57b99db6" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetRawControlDown</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetRefData</name></member>
      <member refid="classwx_keyboard_state_1a5a8f8337c65248310363aedf228303e9" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetShiftDown</name></member>
      <member refid="classwx_event_1ad4380dff3144a986cb960473051a1d8d" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>SetTimestamp</name></member>
      <member refid="classwx_keyboard_state_1a63b9ec3a2f30011471a7036853fc38f3" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>ShiftDown</name></member>
      <member refid="classwx_event_1ad265ef226445cb6b72a2697dd9d3b406" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>ShouldPropagate</name></member>
      <member refid="classwx_event_1a98eb20b76106f9a933c2eb3ee119f66c" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>Skip</name></member>
      <member refid="classwx_event_1a060a7d222404daff4d3cef30cddeaae3" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>StopPropagation</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>UnShare</name></member>
      <member refid="classwx_event_1aaf2a5cf056d006859cea36689ba13d36" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>wxEvent</name></member>
      <member refid="classwx_keyboard_state_1aabf0c85adc4d56ca6364694eb26e55a8" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>wxKeyboardState</name></member>
      <member refid="classwx_key_event_1a8214333c112432c4c9df114d3bd9122c" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>wxKeyEvent</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxKeyEvent</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxKeyEvent</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

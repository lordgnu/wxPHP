<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_window" kind="class" prot="public">
    <compoundname>wxWindow</compoundname>
    <basecompoundref refid="classwx_evt_handler" prot="public" virt="non-virtual">wxEvtHandler</basecompoundref>
    <derivedcompoundref refid="classwx_banner_window" prot="public" virt="non-virtual">wxBannerWindow</derivedcompoundref>
    <derivedcompoundref refid="classwx_control" prot="public" virt="non-virtual">wxControl</derivedcompoundref>
    <derivedcompoundref refid="classwx_g_l_canvas" prot="public" virt="non-virtual">wxGLCanvas</derivedcompoundref>
    <derivedcompoundref refid="classwx_html_help_window" prot="public" virt="non-virtual">wxHtmlHelpWindow</derivedcompoundref>
    <derivedcompoundref refid="classwx_m_d_i_client_window" prot="public" virt="non-virtual">wxMDIClientWindow</derivedcompoundref>
    <derivedcompoundref refid="classwx_menu_bar" prot="public" virt="non-virtual">wxMenuBar</derivedcompoundref>
    <derivedcompoundref refid="classwx_non_owned_window" prot="public" virt="non-virtual">wxNonOwnedWindow</derivedcompoundref>
    <derivedcompoundref refid="classwx_panel" prot="public" virt="non-virtual">wxPanel</derivedcompoundref>
    <derivedcompoundref refid="classwx_p_g_multi_button" prot="public" virt="non-virtual">wxPGMultiButton</derivedcompoundref>
    <derivedcompoundref refid="classwx_sash_window" prot="public" virt="non-virtual">wxSashWindow</derivedcompoundref>
    <derivedcompoundref refid="classwx_splitter_window" prot="public" virt="non-virtual">wxSplitterWindow</derivedcompoundref>
    <derivedcompoundref refid="classwx_tip_window" prot="public" virt="non-virtual">wxTipWindow</derivedcompoundref>
    <derivedcompoundref refid="classwx_tree_list_ctrl" prot="public" virt="non-virtual">wxTreeListCtrl</derivedcompoundref>
    <includes local="no">wx/window.h</includes>
      <sectiondef kind="user-defined">
      <header>Focus functions</header>
      <description><para>See also the static function <ref refid="classwx_window_1a777258379a3eef1b0530f12db6b77cab" kindref="member">FindFocus()</ref>. </para></description>
      <memberdef kind="function" id="classwx_window_1a3afbd49b1ea2f8275e3600dcac102923" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::AcceptsFocus</definition>
        <argsstring>() const </argsstring>
        <name>AcceptsFocus</name>
        <reimplementedby refid="classwx_panel_1ad43482bf961c0a8185624085facd0853">AcceptsFocus</reimplementedby>
        <briefdescription>
<para>This method may be overridden in the derived classes to return false to indicate that this control doesn&apos;t accept input at all (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>behaves like e.g. <ref refid="classwx_static_text" kindref="compound">wxStaticText</ref>) and so doesn&apos;t need focus.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a2370bdd3ab08e7ef3c7555c6aa8301b8" kindref="member">AcceptsFocusFromKeyboard()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="345"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a2370bdd3ab08e7ef3c7555c6aa8301b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::AcceptsFocusFromKeyboard</definition>
        <argsstring>() const </argsstring>
        <name>AcceptsFocusFromKeyboard</name>
        <briefdescription>
<para>This method may be overridden in the derived classes to return false to indicate that while this control can, in principle, have focus if the user clicks it with the mouse, it shouldn&apos;t be included in the TAB traversal chain when using the keyboard. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="353"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ac7ed96693517630f4d2e99265b76d1a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::AcceptsFocusRecursively</definition>
        <argsstring>() const </argsstring>
        <name>AcceptsFocusRecursively</name>
        <briefdescription>
<para>Overridden to indicate whether this window or one of its children accepts focus. </para>        </briefdescription>
        <detaileddescription>
<para>Usually it&apos;s the same as <ref refid="classwx_window_1a3afbd49b1ea2f8275e3600dcac102923" kindref="member">AcceptsFocus()</ref> but is overridden for container windows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="360"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a4e0abff99d64d2a595ee0ab4b415bbd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::HasFocus</definition>
        <argsstring>() const </argsstring>
        <name>HasFocus</name>
        <briefdescription>
<para>Returns true if the window (or in case of composite controls, its main child window) has focus. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a777258379a3eef1b0530f12db6b77cab" kindref="member">FindFocus()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="368"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a2b8b2e99231a0ec1a05f5066f1b7f3d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetCanFocus</definition>
        <argsstring>(bool canFocus)</argsstring>
        <name>SetCanFocus</name>
        <param>
          <type>bool</type>
          <declname>canFocus</declname>
        </param>
        <briefdescription>
<para>This method is only implemented by ports which have support for native TAB traversal (such as GTK+ 2.0). </para>        </briefdescription>
        <detaileddescription>
<para>It is called by wxWidgets&apos; container control code to give the native system a hint when doing TAB traversal. A call to this does not disable or change the effect of programmatically calling <ref refid="classwx_window_1a697f9f8d3ff389790f1c74b59bcb1d75" kindref="member">SetFocus()</ref>.</para><para><simplesect kind="see"><para><ref refid="classwx_focus_event" kindref="compound">wxFocusEvent</ref>, <ref refid="classwx_panel_1a3764294f9ec0393033efc02860daba5b" kindref="member">wxPanel::SetFocus</ref>, <ref refid="classwx_panel_1ae1f608902d585383401423a8e4eefe13" kindref="member">wxPanel::SetFocusIgnoringChildren</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="380"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a697f9f8d3ff389790f1c74b59bcb1d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetFocus</definition>
        <argsstring>()</argsstring>
        <name>SetFocus</name>
        <reimplementedby refid="classwx_panel_1a3764294f9ec0393033efc02860daba5b">SetFocus</reimplementedby>
        <briefdescription>
<para>This sets the window to receive keyboard input. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a4e0abff99d64d2a595ee0ab4b415bbd6" kindref="member">HasFocus()</ref>, <ref refid="classwx_focus_event" kindref="compound">wxFocusEvent</ref>, <ref refid="classwx_panel_1a3764294f9ec0393033efc02860daba5b" kindref="member">wxPanel::SetFocus</ref>, <ref refid="classwx_panel_1ae1f608902d585383401423a8e4eefe13" kindref="member">wxPanel::SetFocusIgnoringChildren</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="388"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a6fa03f82d7917dff482754d0d2e2b1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetFocusFromKbd</definition>
        <argsstring>()</argsstring>
        <name>SetFocusFromKbd</name>
        <briefdescription>
<para>This function is called by wxWidgets keyboard navigation code when the user gives the focus to this window from keyboard (e.g. </para>        </briefdescription>
        <detaileddescription>
<para>using <computeroutput>TAB</computeroutput> key).</para><para>By default this method simply calls <ref refid="classwx_window_1a697f9f8d3ff389790f1c74b59bcb1d75" kindref="member">SetFocus()</ref> but can be overridden to do something in addition to this in the derived classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="397"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Child management functions</header>
      <memberdef kind="function" id="classwx_window_1abf60159278059a5bb397eb8647227bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::AddChild</definition>
        <argsstring>(wxWindow *child)</argsstring>
        <name>AddChild</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Adds a child window. </para>        </briefdescription>
        <detaileddescription>
<para>This is called automatically by window creation functions so should not be required by the application programmer. Notice that this function is mostly internal to wxWidgets and shouldn&apos;t be called by the user code.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>Child window to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="416"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aff47b32c8d42d515ea0bb6a6c2fea917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::DestroyChildren</definition>
        <argsstring>()</argsstring>
        <name>DestroyChildren</name>
        <briefdescription>
<para>Destroys all children of a window. </para>        </briefdescription>
        <detaileddescription>
<para>Called automatically by the destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="421"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a3468ef382c612b5f8e91c7c18d00a69f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxWindow::FindWindow</definition>
        <argsstring>(long id) const </argsstring>
        <name>FindWindow</name>
        <param>
          <type>long</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Find a child of this window, by <emphasis>id</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>May return <emphasis>this</emphasis> if it matches itself. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="427"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab2dad735acc2121b964ee1d51836cffa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxWindow::FindWindow</definition>
        <argsstring>(const wxString &amp;name) const </argsstring>
        <name>FindWindow</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find a child of this window, by name. </para>        </briefdescription>
        <detaileddescription>
<para>May return <emphasis>this</emphasis> if it matches itself. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="433"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad500085ad0511879b5e018706c91a494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxWindowList &amp;</type>
        <definition>wxWindowList&amp; wxWindow::GetChildren</definition>
        <argsstring>()</argsstring>
        <name>GetChildren</name>
        <briefdescription>
<para>Returns a reference to the list of the window&apos;s children. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>wxWindowList</computeroutput> is a type-safe wxList-like class whose elements are of type <computeroutput>wxWindow*</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="439"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a666cfe7cc8eda6fcecfd39c67c50f609" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const wxWindowList &amp;</type>
        <definition>const wxWindowList&amp; wxWindow::GetChildren</definition>
        <argsstring>() const </argsstring>
        <name>GetChildren</name>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="444"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1acee332ed4368d26e8bc3db5767c1240a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::RemoveChild</definition>
        <argsstring>(wxWindow *child)</argsstring>
        <name>RemoveChild</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Removes a child window. </para>        </briefdescription>
        <detaileddescription>
<para>This is called automatically by window deletion functions so should not be required by the application programmer. Notice that this function is mostly internal to wxWidgets and shouldn&apos;t be called by the user code.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>Child window to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="457"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Sibling and parent management functions</header>
      <memberdef kind="function" id="classwx_window_1a55d3155d2d3139a84e8fb19a8900aa76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxWindow::GetGrandParent</definition>
        <argsstring>() const </argsstring>
        <name>GetGrandParent</name>
        <briefdescription>
<para>Returns the grandparent of a window, or NULL if there isn&apos;t one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="470"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a41608736affe2ff115d80d8f69dc832e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxWindow::GetNextSibling</definition>
        <argsstring>() const </argsstring>
        <name>GetNextSibling</name>
        <briefdescription>
<para>Returns the next window after this one among the parent&apos;s children or NULL if this window is the last child. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.8.8</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1aa4cb912eb28be31279fa1b95747c6d02" kindref="member">GetPrevSibling()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="480"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a63871f881941b99b4b94328d1c4cd163" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxWindow::GetParent</definition>
        <argsstring>() const </argsstring>
        <name>GetParent</name>
        <briefdescription>
<para>Returns the parent of the window, or NULL if there is no parent. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="485"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa4cb912eb28be31279fa1b95747c6d02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxWindow::GetPrevSibling</definition>
        <argsstring>() const </argsstring>
        <name>GetPrevSibling</name>
        <briefdescription>
<para>Returns the previous window before this one among the parent&apos;s children or <computeroutput></computeroutput> NULL if this window is the first child. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.8.8</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a41608736affe2ff115d80d8f69dc832e" kindref="member">GetNextSibling()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="495"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a469f0881da248d37691440c9d4cc7200" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::IsDescendant</definition>
        <argsstring>(wxWindowBase *win) const </argsstring>
        <name>IsDescendant</name>
        <param>
          <type>wxWindowBase *</type>
          <declname>win</declname>
        </param>
        <briefdescription>
<para>Check if the specified window is a descendant of this one. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if the window is a descendant (i.e. a child or grand-child or grand-grand-child or ...) of this one.</para><para>Notice that a window can never be a descendant of another one if they are in different top level windows, i.e. a child of a <ref refid="classwx_dialog" kindref="compound">wxDialog</ref> is not considered to be a descendant of dialogs parent <ref refid="classwx_frame" kindref="compound">wxFrame</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>win</parametername>
</parameternamelist>
<parameterdescription>
<para>Any window, possible NULL (false is always returned then).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="511"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7977b749284e65aecfed2ce146799cb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::Reparent</definition>
        <argsstring>(wxWindow *newParent)</argsstring>
        <name>Reparent</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>newParent</declname>
        </param>
        <briefdescription>
<para>Reparents the window, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>the window will be removed from its current parent window (e.g. a non-standard toolbar in a <ref refid="classwx_frame" kindref="compound">wxFrame</ref>) and then re-inserted into another.</para><para>Notice that currently you need to explicitly call <ref refid="classwx_book_ctrl_base_1a3297ad25597b3e993aa2b7a310c5159c" kindref="member">wxNotebook::RemovePage()</ref> before reparenting a notebook page.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newParent</parametername>
</parameternamelist>
<parameterdescription>
<para>New parent. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="524"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Scrolling and scrollbars functions</header>
      <description><para>Note that these methods don&apos;t work with native controls which don&apos;t use wxWidgets scrolling framework (i.e.</para><para>don&apos;t derive from wxScrolledWindow). </para></description>
      <memberdef kind="function" id="classwx_window_1aae29552806a328c6a55ef8f07647f5ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::AlwaysShowScrollbars</definition>
        <argsstring>(bool hflag=true, bool vflag=true)</argsstring>
        <name>AlwaysShowScrollbars</name>
        <param>
          <type>bool</type>
          <declname>hflag</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>vflag</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Call this function to force one or both scrollbars to be always shown, even if the window is big enough to show its entire contents without scrolling. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.0</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hflag</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the horizontal scroll bar should always be visible. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vflag</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the vertical scroll bar should always be visible.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is currently only implemented under Mac/Carbon. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="550"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a3e23d10c17943fd873d0acb472db0caa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxWindow::GetScrollPos</definition>
        <argsstring>(int orientation) const </argsstring>
        <name>GetScrollPos</name>
        <param>
          <type>int</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
<para>Returns the built-in scrollbar position. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1aa842d59529f873683e55cd8392ec46e9" kindref="member">SetScrollbar()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="557"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a067d2a38efbf2f535f717f1027003281" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxWindow::GetScrollRange</definition>
        <argsstring>(int orientation) const </argsstring>
        <name>GetScrollRange</name>
        <param>
          <type>int</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
<para>Returns the built-in scrollbar range. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1aa842d59529f873683e55cd8392ec46e9" kindref="member">SetScrollbar()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="564"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a10d24c60525a1c612cd775fc44dd1953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxWindow::GetScrollThumb</definition>
        <argsstring>(int orientation) const </argsstring>
        <name>GetScrollThumb</name>
        <param>
          <type>int</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
<para>Returns the built-in scrollbar thumb size. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1aa842d59529f873683e55cd8392ec46e9" kindref="member">SetScrollbar()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="571"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a179f9a770f8c835f279923d2cbe5d766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::CanScroll</definition>
        <argsstring>(int orient) const </argsstring>
        <name>CanScroll</name>
        <param>
          <type>int</type>
          <declname>orient</declname>
        </param>
        <briefdescription>
<para>Returns true if this window can have a scroll bar in this orientation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orient</parametername>
</parameternamelist>
<parameterdescription>
<para>Orientation to check, either wxHORIZONTAL or wxVERTICAL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="581"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a950847ecf2d488d83c14a74a3906f668" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::HasScrollbar</definition>
        <argsstring>(int orient) const </argsstring>
        <name>HasScrollbar</name>
        <param>
          <type>int</type>
          <declname>orient</declname>
        </param>
        <briefdescription>
<para>Returns true if this window currently has a scroll bar for this orientation. </para>        </briefdescription>
        <detaileddescription>
<para>This method may return false even when <ref refid="classwx_window_1a179f9a770f8c835f279923d2cbe5d766" kindref="member">CanScroll()</ref> for the same orientation returns true, but if <ref refid="classwx_window_1a179f9a770f8c835f279923d2cbe5d766" kindref="member">CanScroll()</ref> returns false, i.e. scrolling in this direction is not enabled at all, <ref refid="classwx_window_1a950847ecf2d488d83c14a74a3906f668" kindref="member">HasScrollbar()</ref> always returns false as well.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orient</parametername>
</parameternamelist>
<parameterdescription>
<para>Orientation to check, either wxHORIZONTAL or wxVERTICAL. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="595"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aeeef7eaf8c8f1ec1a54e7a68d63923d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::IsScrollbarAlwaysShown</definition>
        <argsstring>(int orient) const </argsstring>
        <name>IsScrollbarAlwaysShown</name>
        <param>
          <type>int</type>
          <declname>orient</declname>
        </param>
        <briefdescription>
<para>Return whether a scrollbar is always shown. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orient</parametername>
</parameternamelist>
<parameterdescription>
<para>Orientation to check, either wxHORIZONTAL or wxVERTICAL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_window_1aae29552806a328c6a55ef8f07647f5ba" kindref="member">AlwaysShowScrollbars()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="605"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa5c5b683bd11a0d9771bd2fcdf643c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::ScrollLines</definition>
        <argsstring>(int lines)</argsstring>
        <name>ScrollLines</name>
        <reimplementedby refid="classwx_ribbon_page_1a6c716e621f9452cbcaedce810974a751">ScrollLines</reimplementedby>
        <reimplementedby refid="classwx_ribbon_gallery_1a1fda9962ce07f5924cd4cc80cdc70d33">ScrollLines</reimplementedby>
        <param>
          <type>int</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scrolls the window by the given number of lines down (if <emphasis>lines</emphasis> is positive) or up. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns true if the window was scrolled, false if it was already on top/bottom and nothing was done.</para></simplesect>
<simplesect kind="remark"><para>This function is currently only implemented under MSW and <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> under wxGTK (it also works for <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> classes under all platforms).</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1adc0ed5e1c4925223cb901ced14b8343d" kindref="member">ScrollPages()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="620"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1adc0ed5e1c4925223cb901ced14b8343d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::ScrollPages</definition>
        <argsstring>(int pages)</argsstring>
        <name>ScrollPages</name>
        <param>
          <type>int</type>
          <declname>pages</declname>
        </param>
        <briefdescription>
<para>Scrolls the window by the given number of pages down (if <emphasis>pages</emphasis> is positive) or up. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns true if the window was scrolled, false if it was already on top/bottom and nothing was done.</para></simplesect>
<simplesect kind="remark"><para>This function is currently only implemented under MSW and wxGTK.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1aa5c5b683bd11a0d9771bd2fcdf643c64" kindref="member">ScrollLines()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="633"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab7be4956ff22da37fff2b8aaa581045c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::ScrollWindow</definition>
        <argsstring>(int dx, int dy, const wxRect *rect=NULL)</argsstring>
        <name>ScrollWindow</name>
        <param>
          <type>int</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_rect" kindref="compound">wxRect</ref> *</type>
          <declname>rect</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Physically scrolls the pixels in the window and move child windows accordingly. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount to scroll horizontally. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount to scroll vertically. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle to scroll, if it is NULL, the whole window is scrolled (this is always the case under wxGTK which doesn&apos;t support this parameter)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Note that you can often use <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> instead of using this function directly. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="651"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1afc0816a174ceee6d36d1995c6824a273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::LineUp</definition>
        <argsstring>()</argsstring>
        <name>LineUp</name>
        <reimplementedby refid="classwx_styled_text_ctrl_1a495f22e16a3471147b1cb925e8ce0ca5">LineUp</reimplementedby>
        <briefdescription>
<para>Same as <ref refid="classwx_window_1aa5c5b683bd11a0d9771bd2fcdf643c64" kindref="member">ScrollLines</ref> (-1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="656"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ade808784f0e64d9985e2f279b5ca8c02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::LineDown</definition>
        <argsstring>()</argsstring>
        <name>LineDown</name>
        <reimplementedby refid="classwx_styled_text_ctrl_1ac9515ecb49c5649c282222e5ca475d19">LineDown</reimplementedby>
        <briefdescription>
<para>Same as <ref refid="classwx_window_1aa5c5b683bd11a0d9771bd2fcdf643c64" kindref="member">ScrollLines</ref> (1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="661"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa7c2bbc480d8863d9f139c01d7abc1b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::PageUp</definition>
        <argsstring>()</argsstring>
        <name>PageUp</name>
        <reimplementedby refid="classwx_styled_text_ctrl_1a51017ad326b639f505d0b2007d6fe0b6">PageUp</reimplementedby>
        <briefdescription>
<para>Same as <ref refid="classwx_window_1adc0ed5e1c4925223cb901ced14b8343d" kindref="member">ScrollPages</ref> (-1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="666"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a61e78cb48ece3e9e989e37b475ac1e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::PageDown</definition>
        <argsstring>()</argsstring>
        <name>PageDown</name>
        <reimplementedby refid="classwx_styled_text_ctrl_1ae42da911681afee75d2782b410a8da6d">PageDown</reimplementedby>
        <briefdescription>
<para>Same as <ref refid="classwx_window_1adc0ed5e1c4925223cb901ced14b8343d" kindref="member">ScrollPages</ref> (1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="671"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1afbf4dc9064cf70cfe6884554b97a27bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetScrollPos</definition>
        <argsstring>(int orientation, int pos, bool refresh=true)</argsstring>
        <name>SetScrollPos</name>
        <param>
          <type>int</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>refresh</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Sets the position of one of the built-in scrollbars. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines the scrollbar whose position is to be set. May be wxHORIZONTAL or wxVERTICAL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position in scroll units. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refresh</parametername>
</parameternamelist>
<parameterdescription>
<para>true to redraw the scrollbar, false otherwise.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function does not directly affect the contents of the window: it is up to the application to take note of scrollbar attributes and redraw contents accordingly.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1aa842d59529f873683e55cd8392ec46e9" kindref="member">SetScrollbar()</ref>, <ref refid="classwx_window_1a3e23d10c17943fd873d0acb472db0caa" kindref="member">GetScrollPos()</ref>, <ref refid="classwx_window_1a10d24c60525a1c612cd775fc44dd1953" kindref="member">GetScrollThumb()</ref>, <ref refid="classwx_scroll_bar" kindref="compound">wxScrollBar</ref>, <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="692"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa842d59529f873683e55cd8392ec46e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetScrollbar</definition>
        <argsstring>(int orientation, int position, int thumbSize, int range, bool refresh=true)</argsstring>
        <name>SetScrollbar</name>
        <reimplementedby refid="classwx_scroll_bar_1ae69c239fd6af4ebcabf46efa9fc5092e">SetScrollbar</reimplementedby>
        <param>
          <type>int</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thumbSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>range</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>refresh</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Sets the scrollbar properties of a built-in scrollbar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines the scrollbar whose page size is to be set. May be wxHORIZONTAL or wxVERTICAL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the scrollbar in scroll units. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thumbSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the thumb, or visible portion of the scrollbar, in scroll units. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum position of the scrollbar. Value of -1 can be used to ask for the scrollbar to be shown but in the disabled state: this can be used to avoid removing the scrollbar even when it is not needed (currently this is only implemented in wxMSW port). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refresh</parametername>
</parameternamelist>
<parameterdescription>
<para>true to redraw the scrollbar, false otherwise.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Let&apos;s say you wish to display 50 lines of text, using the same font. The window is sized so that you can only see 16 lines at a time. You would use: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1aa842d59529f873683e55cd8392ec46e9" kindref="member" tooltip="Sets the scrollbar properties of a built-in scrollbar.">SetScrollbar</ref>(<ref refid="defs_8h_1a1e6994f40bd9cb140e292afb165af971a2134d1cb8cf605532880c118190695b5" kindref="member">wxVERTICAL</ref>,<sp/>0,<sp/>16,<sp/>50);</highlight></codeline>
</programlisting> Note that with the window at this size, the thumb position can never go above 50 minus 16, or 34. You can determine how many lines are currently visible by dividing the current view size by the character height in pixels. When defining your own scrollbar behaviour, you will always need to recalculate the scrollbar settings when the window size changes. You could therefore put your scrollbar calculations and SetScrollbar call into a function named AdjustScrollbars, which can be called initially and also from your <ref refid="classwx_size_event" kindref="compound">wxSizeEvent</ref> handler function.</para></simplesect>
<simplesect kind="see"><para><ref refid="overview_scrolling" kindref="compound">Scrolled Windows</ref>, <ref refid="classwx_scroll_bar" kindref="compound">wxScrollBar</ref>, <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref>, <ref refid="classwx_scroll_win_event" kindref="compound">wxScrollWinEvent</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="733"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Sizing functions</header>
      <description><para>See also the protected functions <ref refid="classwx_window_1a01e7604ab0f0b2b1a8e322a630a4669e" kindref="member">DoGetBestSize()</ref> and <ref refid="classwx_window_1ae6dfe0b0d4a8c666b21ce8df8d96727b" kindref="member">SetInitialBestSize()</ref>. </para></description>
      <memberdef kind="function" id="classwx_window_1a100905524d330cfd9620fd726e378066" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::CacheBestSize</definition>
        <argsstring>(const wxSize &amp;size) const </argsstring>
        <name>CacheBestSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the cached best size value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" kindref="member">GetBestSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="749"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a693fffbbb7ad5f36a5f442703396dafa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::ClientToWindowSize</definition>
        <argsstring>(const wxSize &amp;size) const </argsstring>
        <name>ClientToWindowSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Converts client area size <emphasis>size</emphasis> to corresponding window size. </para>        </briefdescription>
        <detaileddescription>
<para>In other words, the returned value is what would <ref refid="classwx_window_1a124c12cff1e7b6e96a5e1fd3e48dca34" kindref="member">GetSize()</ref> return if this window had client area of given size. Components with wxDefaultCoord value are left unchanged. Note that the conversion is not always exact, it assumes that non-client area doesn&apos;t change and so doesn&apos;t take into account things like menu bar (un)wrapping or (dis)appearance of the scrollbars.</para><para><simplesect kind="since"><para>2.8.8</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1aa456f800c9dde3b2361cad0abf54bc27" kindref="member">WindowToClientSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="765"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa456f800c9dde3b2361cad0abf54bc27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::WindowToClientSize</definition>
        <argsstring>(const wxSize &amp;size) const </argsstring>
        <name>WindowToClientSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Converts window size <emphasis>size</emphasis> to corresponding client area size In other words, the returned value is what would <ref refid="classwx_window_1ae56fc53268b815b58570f66bfc33838f" kindref="member">GetClientSize()</ref> return if this window had given window size. </para>        </briefdescription>
        <detaileddescription>
<para>Components with wxDefaultCoord value are left unchanged.</para><para>Note that the conversion is not always exact, it assumes that non-client area doesn&apos;t change and so doesn&apos;t take into account things like menu bar (un)wrapping or (dis)appearance of the scrollbars.</para><para><simplesect kind="since"><para>2.8.8</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a693fffbbb7ad5f36a5f442703396dafa" kindref="member">ClientToWindowSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="781"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a2bf38a6cbd1f82fb46f274396f482994" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::Fit</definition>
        <argsstring>()</argsstring>
        <name>Fit</name>
        <briefdescription>
<para>Sizes the window so that it fits around its subwindows. </para>        </briefdescription>
        <detaileddescription>
<para>This function won&apos;t do anything if there are no subwindows and will only really work correctly if sizers are used for the subwindows layout.</para><para>Also, if the window has exactly one subwindow it is better (faster and the result is more precise as <ref refid="classwx_window_1a2bf38a6cbd1f82fb46f274396f482994" kindref="member">Fit()</ref> adds some margin to account for fuzziness of its calculations) to call:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;SetClientSize(child-&gt;GetSize());</highlight></codeline>
</programlisting></para><para>instead of calling <ref refid="classwx_window_1a2bf38a6cbd1f82fb46f274396f482994" kindref="member">Fit()</ref>.</para><para><simplesect kind="see"><para><ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="801"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a55aca401aab29d59f7cc53f89ba2e38d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::FitInside</definition>
        <argsstring>()</argsstring>
        <name>FitInside</name>
        <briefdescription>
<para>Similar to <ref refid="classwx_window_1a2bf38a6cbd1f82fb46f274396f482994" kindref="member">Fit()</ref>, but sizes the interior (virtual) size of a window. </para>        </briefdescription>
        <detaileddescription>
<para>Mainly useful with scrolled windows to reset scrollbars after sizing changes that do not trigger a size event, and/or scrolled windows without an interior sizer. This function similarly won&apos;t do anything if there are no subwindows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="811"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxWindow::GetBestSize</definition>
        <argsstring>() const </argsstring>
        <name>GetBestSize</name>
        <reimplementedby refid="classwx_media_ctrl_1a8f03babae1c8e27f4323fe58c663c454">GetBestSize</reimplementedby>
        <briefdescription>
<para>This functions returns the best acceptable minimal size for the window. </para>        </briefdescription>
        <detaileddescription>
<para>For example, for a static control, it will be the minimal size such that the control label is not truncated. For windows containing subwindows (typically <ref refid="classwx_panel" kindref="compound">wxPanel</ref>), the size returned by this function will be the same as the size the window would have had after calling <ref refid="classwx_window_1a2bf38a6cbd1f82fb46f274396f482994" kindref="member">Fit()</ref>.</para><para>Note that when you write your own widget you need to override the <ref refid="classwx_window_1a01e7604ab0f0b2b1a8e322a630a4669e" kindref="member">DoGetBestSize()</ref> function instead of this (non-virtual!) function.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a100905524d330cfd9620fd726e378066" kindref="member">CacheBestSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="826"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae56fc53268b815b58570f66bfc33838f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::GetClientSize</definition>
        <argsstring>(int *width, int *height) const </argsstring>
        <name>GetClientSize</name>
        <param>
          <type>int *</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Returns the size of the window &apos;client area&apos; in pixels. </para>        </briefdescription>
        <detaileddescription>
<para>The client area is the area which may be drawn on by the programmer, excluding title bar, border, scrollbars, etc. Note that if this window is a top-level one and it is currently minimized, the return size is empty (both width and height are 0).</para><para><bold>wxPerl Note:</bold> In wxPerl this method takes no parameters and returns a 2-element list (width, height).</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a124c12cff1e7b6e96a5e1fd3e48dca34" kindref="member">GetSize()</ref>, <ref refid="classwx_window_1a614d32c464296b7d6caabcafc18deb97" kindref="member">GetVirtualSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="843"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1afb9fd4a3b3310b2e11049a5113f749fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxWindow::GetClientSize</definition>
        <argsstring>() const </argsstring>
        <name>GetClientSize</name>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="848"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a1a54fcda8d52986482e030bd54739e9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::GetEffectiveMinSize</definition>
        <argsstring>() const </argsstring>
        <name>GetEffectiveMinSize</name>
        <briefdescription>
<para>Merges the window&apos;s best size into the min size and returns the result. </para>        </briefdescription>
        <detaileddescription>
<para>This is the value used by sizers to determine the appropriate amount of space to allocate for the widget.</para><para>This is the method called by a <ref refid="classwx_sizer" kindref="compound">wxSizer</ref> when it queries the size of a window or control.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" kindref="member">GetBestSize()</ref>, <ref refid="classwx_window_1a1b309ca50ba87e34f968c83b79af1397" kindref="member">SetInitialSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="860"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aef9b71458720452374137cd20be24b97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::GetMaxClientSize</definition>
        <argsstring>() const </argsstring>
        <name>GetMaxClientSize</name>
        <briefdescription>
<para>Returns the maximum size of window&apos;s client area. </para>        </briefdescription>
        <detaileddescription>
<para>This is an indication to the sizer layout mechanism that this is the maximum possible size as well as the upper bound on window&apos;s size settable using <ref refid="classwx_window_1aa59f715217fffa5bcf14cd97f92e7840" kindref="member">SetClientSize()</ref>.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a0a1672e81caf81a95eb5b48383d22065" kindref="member">GetMaxSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="871"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0a1672e81caf81a95eb5b48383d22065" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::GetMaxSize</definition>
        <argsstring>() const </argsstring>
        <name>GetMaxSize</name>
        <briefdescription>
<para>Returns the maximum size of the window. </para>        </briefdescription>
        <detaileddescription>
<para>This is an indication to the sizer layout mechanism that this is the maximum possible size as well as the upper bound on window&apos;s size settable using <ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member">SetSize()</ref>.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1aef9b71458720452374137cd20be24b97" kindref="member">GetMaxClientSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="881"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a8e88d1d38c2bf98a72d86b42cf3e35c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::GetMinClientSize</definition>
        <argsstring>() const </argsstring>
        <name>GetMinClientSize</name>
        <briefdescription>
<para>Returns the minimum size of window&apos;s client area, an indication to the sizer layout mechanism that this is the minimum required size of its client area. </para>        </briefdescription>
        <detaileddescription>
<para>It normally just returns the value set by <ref refid="classwx_window_1a6e35ba44b97e374dfffa460d41d94b31" kindref="member">SetMinClientSize()</ref>, but it can be overridden to do the calculation on demand.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a853c9a8443f996a368569a8fae551f5a" kindref="member">GetMinSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="892"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a853c9a8443f996a368569a8fae551f5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::GetMinSize</definition>
        <argsstring>() const </argsstring>
        <name>GetMinSize</name>
        <briefdescription>
<para>Returns the minimum size of the window, an indication to the sizer layout mechanism that this is the minimum required size. </para>        </briefdescription>
        <detaileddescription>
<para>This method normally just returns the value set by <ref refid="classwx_window_1a3fc066f4d8083319f004ac43811d545d" kindref="member">SetMinSize()</ref>, but it can be overridden to do the calculation on demand.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a8e88d1d38c2bf98a72d86b42cf3e35c0" kindref="member">GetMinClientSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="903"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a9f79aa07a1b82a9a738f6c1d9c17496f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxWindow::GetMinWidth</definition>
        <argsstring>() const </argsstring>
        <name>GetMinWidth</name>
        <briefdescription>
<para>Sets the cached best size value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" kindref="member">GetBestSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="905"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae4dd9a046ff774ea3ef114caeb452681" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxWindow::GetMinHeight</definition>
        <argsstring>() const </argsstring>
        <name>GetMinHeight</name>
        <briefdescription>
<para>Sets the cached best size value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" kindref="member">GetBestSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="906"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a2e953a64c41131b87bdd7c513ced3687" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxWindow::GetMaxWidth</definition>
        <argsstring>() const </argsstring>
        <name>GetMaxWidth</name>
        <briefdescription>
<para>Sets the cached best size value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" kindref="member">GetBestSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="907"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a5cc2082eb5ddb27f97be191bd093709e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxWindow::GetMaxHeight</definition>
        <argsstring>() const </argsstring>
        <name>GetMaxHeight</name>
        <briefdescription>
<para>Sets the cached best size value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" kindref="member">GetBestSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="908"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a124c12cff1e7b6e96a5e1fd3e48dca34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::GetSize</definition>
        <argsstring>(int *width, int *height) const </argsstring>
        <name>GetSize</name>
        <param>
          <type>int *</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Returns the size of the entire window in pixels, including title bar, border, scrollbars, etc. </para>        </briefdescription>
        <detaileddescription>
<para>Note that if this window is a top-level one and it is currently minimized, the returned size is the restored window size, not the size of the window icon.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the window width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the window height.</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method is implemented as GetSizeWH() returning a 2-element list (width, height).</para><para><simplesect kind="see"><para><ref refid="classwx_window_1ae56fc53268b815b58570f66bfc33838f" kindref="member">GetClientSize()</ref>, <ref refid="classwx_window_1a614d32c464296b7d6caabcafc18deb97" kindref="member">GetVirtualSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="929"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a66e144ed8ab9a20e080ae6c69fc7015c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxWindow::GetSize</definition>
        <argsstring>() const </argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>See the GetSize(int*,int*) overload for more info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="934"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a614d32c464296b7d6caabcafc18deb97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxWindow::GetVirtualSize</definition>
        <argsstring>() const </argsstring>
        <name>GetVirtualSize</name>
        <briefdescription>
<para>This gets the virtual size of the window in pixels. </para>        </briefdescription>
        <detaileddescription>
<para>By default it returns the client size of the window, but after a call to <ref refid="classwx_window_1a37f293b7904bc6668b86cccb0aea5669" kindref="member">SetVirtualSize()</ref> it will return the size set with that method.</para><para><simplesect kind="see"><para><ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="943"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a2628c6f1f4aecb790f0c86622ebf4d56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::GetVirtualSize</definition>
        <argsstring>(int *width, int *height) const </argsstring>
        <name>GetVirtualSize</name>
        <param>
          <type>int *</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Like the other <ref refid="classwx_window_1a614d32c464296b7d6caabcafc18deb97" kindref="member">GetVirtualSize()</ref> overload but uses pointers instead. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the window virtual width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the window virtual height. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="953"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0180343fa395e0c8e6de4022684ca5d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::GetBestVirtualSize</definition>
        <argsstring>() const </argsstring>
        <name>GetBestVirtualSize</name>
        <briefdescription>
<para>Return the largest of ClientSize and BestSize (as determined by a sizer, interior children, or other means) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="959"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1afd861e553190e22a76d3d40ee5e8d628" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::GetWindowBorderSize</definition>
        <argsstring>() const </argsstring>
        <name>GetWindowBorderSize</name>
        <briefdescription>
<para>Returns the size of the left/right and top/bottom borders of this window in x and y components of the result respectively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="965"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a9fd5b6520c1b30eb8e82bb5d56bc24c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::InformFirstDirection</definition>
        <argsstring>(int direction, int size, int availableOtherDir)</argsstring>
        <name>InformFirstDirection</name>
        <param>
          <type>int</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>availableOtherDir</declname>
        </param>
        <briefdescription>
<para><ref refid="classwx_sizer" kindref="compound">wxSizer</ref> and friends use this to give a chance to a component to recalc its min size once one of the final size components is known. </para>        </briefdescription>
        <detaileddescription>
<para>Override this function when that is useful (such as for <ref refid="classwx_static_text" kindref="compound">wxStaticText</ref> which can stretch over several lines). Parameter availableOtherDir tells the item how much more space there is available in the opposite direction (-1 if unknown). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="978"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae1b56ca87d8590ee5e576012229a380a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::InvalidateBestSize</definition>
        <argsstring>()</argsstring>
        <name>InvalidateBestSize</name>
        <briefdescription>
<para>Resets the cached best size value so it will be recalculated the next time it is needed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a100905524d330cfd9620fd726e378066" kindref="member">CacheBestSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="986"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab1943463e6661f97e072b43337c6cc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::PostSizeEvent</definition>
        <argsstring>()</argsstring>
        <name>PostSizeEvent</name>
        <briefdescription>
<para>Posts a size event to the window. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same as <ref refid="classwx_window_1a237f739b21937d3e8f1bff5fa82ba4c2" kindref="member">SendSizeEvent()</ref> with <computeroutput>wxSEND_EVENT_POST</computeroutput> argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="993"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa080d8dcda58bcc6ea2abd8bea592e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::PostSizeEventToParent</definition>
        <argsstring>()</argsstring>
        <name>PostSizeEventToParent</name>
        <briefdescription>
<para>Posts a size event to the parent of this window. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same as <ref refid="classwx_window_1af7987987978fd8a93df88b29b19a6388" kindref="member">SendSizeEventToParent()</ref> with <computeroutput>wxSEND_EVENT_POST</computeroutput> argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1001"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a237f739b21937d3e8f1bff5fa82ba4c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SendSizeEvent</definition>
        <argsstring>(int flags=0)</argsstring>
        <name>SendSizeEvent</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>This function sends a dummy <ref refid="classwx_size_event" kindref="compound">size event</ref> to the window allowing it to re-layout its children positions. </para>        </briefdescription>
        <detaileddescription>
<para>It is sometimes useful to call this function after adding or deleting a children after the frame creation or if a child size changes. Note that if the frame is using either sizers or constraints for the children layout, it is enough to call <ref refid="classwx_window_1a1b143c3e72bd0af533b76db4830a6113" kindref="member">wxWindow::Layout()</ref> directly and this function should not be used in this case.</para><para>If <emphasis>flags</emphasis> includes <computeroutput>wxSEND_EVENT_POST</computeroutput> value, this function posts the event, i.e. schedules it for later processing, instead of dispatching it directly. You can also use <ref refid="classwx_window_1ab1943463e6661f97e072b43337c6cc09" kindref="member">PostSizeEvent()</ref> as a more readable equivalent of calling this function with this flag.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>May include <computeroutput>wxSEND_EVENT_POST</computeroutput>. Default value is 0. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1021"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1af7987987978fd8a93df88b29b19a6388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SendSizeEventToParent</definition>
        <argsstring>(int flags=0)</argsstring>
        <name>SendSizeEventToParent</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Safe wrapper for <ref refid="classwx_window_1a63871f881941b99b4b94328d1c4cd163" kindref="member">GetParent()</ref>-&gt;<ref refid="classwx_window_1a237f739b21937d3e8f1bff5fa82ba4c2" kindref="member">SendSizeEvent()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This function simply checks that the window has a valid parent which is not in process of being deleted and calls <ref refid="classwx_window_1a237f739b21937d3e8f1bff5fa82ba4c2" kindref="member">SendSizeEvent()</ref> on it. It is used internally by windows such as toolbars changes to whose state should result in parent re-layout (e.g. when a toolbar is added to the top of the window, all the other windows must be shifted down).</para><para><simplesect kind="see"><para><ref refid="classwx_window_1aa080d8dcda58bcc6ea2abd8bea592e3e" kindref="member">PostSizeEventToParent()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>See description of this parameter in <ref refid="classwx_window_1a237f739b21937d3e8f1bff5fa82ba4c2" kindref="member">SendSizeEvent()</ref> documentation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1037"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa59f715217fffa5bcf14cd97f92e7840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetClientSize</definition>
        <argsstring>(int width, int height)</argsstring>
        <name>SetClientSize</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>This sets the size of the window client area in pixels. </para>        </briefdescription>
        <detaileddescription>
<para>Using this function to size a window tends to be more device-independent than <ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member">SetSize()</ref>, since the application need not worry about what dimensions the border or title bar have when trying to fit the window around panel items, for example.</para><para><simplesect kind="see"><para><ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1049"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab2aadc857ee7f55f47ab9a8669e3beb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetClientSize</definition>
        <argsstring>(const wxSize &amp;size)</argsstring>
        <name>SetClientSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1054"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a582d4d1f60a3f777627773b2da0bb2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetClientSize</definition>
        <argsstring>(const wxRect &amp;rect)</argsstring>
        <name>SetClientSize</name>
        <param>
          <type>const <ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1059"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0ccf78fe06722b500adfb7f36b8ce443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetContainingSizer</definition>
        <argsstring>(wxSizer *sizer)</argsstring>
        <name>SetContainingSizer</name>
        <param>
          <type><ref refid="classwx_sizer" kindref="compound">wxSizer</ref> *</type>
          <declname>sizer</declname>
        </param>
        <briefdescription>
<para>This normally does not need to be called by user code. </para>        </briefdescription>
        <detaileddescription>
<para>It is called when a window is added to a sizer, and is used so the window can remove itself from the sizer when it is destroyed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1066"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a1b309ca50ba87e34f968c83b79af1397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetInitialSize</definition>
        <argsstring>(const wxSize &amp;size=wxDefaultSize)</argsstring>
        <name>SetInitialSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <briefdescription>
<para>A <emphasis>smart</emphasis> SetSize that will fill in default size components with the window&apos;s <emphasis>best</emphasis> size values. </para>        </briefdescription>
        <detaileddescription>
<para>Also sets the window&apos;s minsize to the value passed in for use with sizers. This means that if a full or partial size is passed to this function then the sizers will use that size instead of the results of <ref refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" kindref="member">GetBestSize()</ref> to determine the minimum needs of the window for layout.</para><para>Most controls will use this to set their initial size, and their min size to the passed in value (if any.)</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member">SetSize()</ref>, <ref refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" kindref="member">GetBestSize()</ref>, <ref refid="classwx_window_1a1a54fcda8d52986482e030bd54739e9f" kindref="member">GetEffectiveMinSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1083"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a664e5b2ddd817d9c58788269fe1d8479" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetMaxClientSize</definition>
        <argsstring>(const wxSize &amp;size)</argsstring>
        <name>SetMaxClientSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the maximum client size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size of its client area. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this method is just a shortcut for: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1a38b496214d728a3212afadee5ed51606" kindref="member" tooltip="Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maxim...">SetMaxSize</ref>(<ref refid="classwx_window_1a693fffbbb7ad5f36a5f442703396dafa" kindref="member" tooltip="Converts client area size size to corresponding window size.">ClientToWindowSize</ref>(size));</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="classwx_window_1a38b496214d728a3212afadee5ed51606" kindref="member">SetMaxSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1096"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a38b496214d728a3212afadee5ed51606" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetMaxSize</definition>
        <argsstring>(const wxSize &amp;size)</argsstring>
        <name>SetMaxSize</name>
        <reimplementedby refid="classwx_top_level_window_1afd6d2cccfe0ba0ff91e36f4d16cf3c7b">SetMaxSize</reimplementedby>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a664e5b2ddd817d9c58788269fe1d8479" kindref="member">SetMaxClientSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1104"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a6e35ba44b97e374dfffa460d41d94b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetMinClientSize</definition>
        <argsstring>(const wxSize &amp;size)</argsstring>
        <name>SetMinClientSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the minimum client size of the window, to indicate to the sizer layout mechanism that this is the minimum required size of window&apos;s client area. </para>        </briefdescription>
        <detaileddescription>
<para>You may need to call this if you change the window size after construction and before adding to its parent sizer.</para><para>Note, that just as with <ref refid="classwx_window_1a3fc066f4d8083319f004ac43811d545d" kindref="member">SetMinSize()</ref>, calling this method doesn&apos;t prevent the program from explicitly making the window smaller than the specified size.</para><para>Note that this method is just a shortcut for: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1a3fc066f4d8083319f004ac43811d545d" kindref="member" tooltip="Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minim...">SetMinSize</ref>(<ref refid="classwx_window_1a693fffbbb7ad5f36a5f442703396dafa" kindref="member" tooltip="Converts client area size size to corresponding window size.">ClientToWindowSize</ref>(size));</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="classwx_window_1a3fc066f4d8083319f004ac43811d545d" kindref="member">SetMinSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1125"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a3fc066f4d8083319f004ac43811d545d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetMinSize</definition>
        <argsstring>(const wxSize &amp;size)</argsstring>
        <name>SetMinSize</name>
        <reimplementedby refid="classwx_top_level_window_1ac491313979c027b67526786b06167e6d">SetMinSize</reimplementedby>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minimum required size. </para>        </briefdescription>
        <detaileddescription>
<para>You may need to call this if you change the window size after construction and before adding to its parent sizer.</para><para>Notice that calling this method doesn&apos;t prevent the program from making the window explicitly smaller than the specified size by calling <ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member">SetSize()</ref>, it just ensures that it won&apos;t become smaller than this size during the automatic layout.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a6e35ba44b97e374dfffa460d41d94b31" kindref="member">SetMinClientSize()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1141"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetSize</definition>
        <argsstring>(int x, int y, int width, int height, int sizeFlags=wxSIZE_AUTO)</argsstring>
        <name>SetSize</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sizeFlags</declname>
          <defval>wxSIZE_AUTO</defval>
        </param>
        <briefdescription>
<para>Sets the size of the window in pixels. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Required x position in pixels, or wxDefaultCoord to indicate that the existing value should be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Required y position in pixels, or wxDefaultCoord to indicate that the existing value should be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Required width in pixels, or wxDefaultCoord to indicate that the existing value should be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>Required height position in pixels, or wxDefaultCoord to indicate that the existing value should be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the interpretation of other parameters. It is a bit list of the following:<itemizedlist>
<listitem><para><computeroutput>wxSIZE_AUTO_WIDTH:</computeroutput> a wxDefaultCoord width value is taken to indicate a wxWidgets-supplied default width.</para></listitem><listitem><para><computeroutput>wxSIZE_AUTO_HEIGHT:</computeroutput> a wxDefaultCoord height value is taken to indicate a wxWidgets-supplied default height.</para></listitem><listitem><para><computeroutput>wxSIZE_AUTO:</computeroutput> wxDefaultCoord size values are taken to indicate a wxWidgets-supplied default size.</para></listitem><listitem><para><computeroutput>wxSIZE_USE_EXISTING:</computeroutput> existing dimensions should be used if wxDefaultCoord values are supplied.</para></listitem><listitem><para><computeroutput>wxSIZE_ALLOW_MINUS_ONE:</computeroutput> allow negative dimensions (i.e. value of wxDefaultCoord) to be interpreted as real dimensions, not default values.</para></listitem><listitem><para><computeroutput>wxSIZE_FORCE:</computeroutput> normally, if the position and the size of the window are already the same as the parameters of this function, nothing is done. but with this flag a window resize may be forced even in this case (supported in wx 2.6.2 and later and only implemented for MSW and ignored elsewhere currently).</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This overload sets the position and optionally size, of the window. Parameters may be wxDefaultCoord to indicate either that a default should be supplied by wxWidgets, or that the current value of the dimension should be used.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1ab1cb98c8d25b9e6ff7b706b1446c3df7" kindref="member">Move()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1187"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a8e383bc6d5ca008965922a36c676aea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetSize</definition>
        <argsstring>(const wxRect &amp;rect)</argsstring>
        <name>SetSize</name>
        <param>
          <type>const <ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Sets the size of the window in pixels. </para>        </briefdescription>
        <detaileddescription>
<para>The size is specified using a <ref refid="classwx_rect" kindref="compound">wxRect</ref>, <ref refid="classwx_size" kindref="compound">wxSize</ref> or by a couple of <computeroutput>int</computeroutput> objects.</para><para><simplesect kind="remark"><para>This form must be used with non-default width and height values.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1ab1cb98c8d25b9e6ff7b706b1446c3df7" kindref="member">Move()</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1197"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a030a928cd854de3def97c5720f14695b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetSize</definition>
        <argsstring>(const wxSize &amp;size)</argsstring>
        <name>SetSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1202"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a2ea9b25296d591aea4470c8fd99ff7cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetSize</definition>
        <argsstring>(int width, int height)</argsstring>
        <name>SetSize</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1207"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a307329dc3b10f5584aeb2cbce9293ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetSizeHints</definition>
        <argsstring>(const wxSize &amp;minSize, const wxSize &amp;maxSize=wxDefaultSize, const wxSize &amp;incSize=wxDefaultSize)</argsstring>
        <name>SetSizeHints</name>
        <reimplementedby refid="classwx_top_level_window_1a4ddaae1bebf05a2bc474a192a5b30e42">SetSizeHints</reimplementedby>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>minSize</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>maxSize</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>incSize</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <briefdescription>
<para>Use of this function for windows which are not toplevel windows (such as <ref refid="classwx_dialog" kindref="compound">wxDialog</ref> or <ref refid="classwx_frame" kindref="compound">wxFrame</ref>) is discouraged. </para>        </briefdescription>
        <detaileddescription>
<para>Please use <ref refid="classwx_window_1a3fc066f4d8083319f004ac43811d545d" kindref="member">SetMinSize()</ref> and <ref refid="classwx_window_1a38b496214d728a3212afadee5ed51606" kindref="member">SetMaxSize()</ref> instead.</para><para><simplesect kind="see"><para><ref refid="classwx_top_level_window_1ac01a45e5d82e4e3be22a4841c1217e11" kindref="member">wxTopLevelWindow::SetSizeHints</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1218"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae813c640e1e2bc6014423247050846cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetSizeHints</definition>
        <argsstring>(int minW, int minH, int maxW=-1, int maxH=-1, int incW=-1, int incH=-1)</argsstring>
        <name>SetSizeHints</name>
        <reimplementedby refid="classwx_top_level_window_1ac01a45e5d82e4e3be22a4841c1217e11">SetSizeHints</reimplementedby>
        <param>
          <type>int</type>
          <declname>minW</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minH</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxW</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>maxH</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>incW</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>incH</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Sets the cached best size value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" kindref="member">GetBestSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1221"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a37f293b7904bc6668b86cccb0aea5669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetVirtualSize</definition>
        <argsstring>(int width, int height)</argsstring>
        <name>SetVirtualSize</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Sets the virtual size of the window in pixels. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1228"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a8e95201edebe43b9623bd3bdc555af4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetVirtualSize</definition>
        <argsstring>(const wxSize &amp;size)</argsstring>
        <name>SetVirtualSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1233"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Positioning functions</header>
      <memberdef kind="function" id="classwx_window_1a06c0ecb262995b40083bfb446a6cff99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::Center</definition>
        <argsstring>(int dir=wxBOTH)</argsstring>
        <name>Center</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
          <defval>wxBOTH</defval>
        </param>
        <briefdescription>
<para>A synonym for <ref refid="classwx_window_1a4a1819eeee3f2143cdde4f329ffde787" kindref="member">Centre()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1246"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a2dc4e0a85d33fc55cc9650eaea1da0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::CenterOnParent</definition>
        <argsstring>(int dir=wxBOTH)</argsstring>
        <name>CenterOnParent</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
          <defval>wxBOTH</defval>
        </param>
        <briefdescription>
<para>A synonym for <ref refid="classwx_window_1ab8e9b91b0e2db344fd71259616dfd433" kindref="member">CentreOnParent()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1251"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a4a1819eeee3f2143cdde4f329ffde787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::Centre</definition>
        <argsstring>(int direction=wxBOTH)</argsstring>
        <name>Centre</name>
        <reimplementedby refid="classwx_frame_1a39b18ed552aabaf2a1bc4af7cc924a0f">Centre</reimplementedby>
        <reimplementedby refid="classwx_dialog_1a6af384c4a558965bfee61784f5e0b7fc">Centre</reimplementedby>
        <param>
          <type>int</type>
          <declname>direction</declname>
          <defval>wxBOTH</defval>
        </param>
        <briefdescription>
<para>Centres the window. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the direction for the centring. May be wxHORIZONTAL, wxVERTICAL or wxBOTH. It may also include the wxCENTRE_ON_SCREEN flag if you want to centre the window on the entire screen and not on its parent window.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If the window is a top level one (i.e. doesn&apos;t have a parent), it will be centred relative to the screen anyhow.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a06c0ecb262995b40083bfb446a6cff99" kindref="member">Center()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1267"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab8e9b91b0e2db344fd71259616dfd433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::CentreOnParent</definition>
        <argsstring>(int direction=wxBOTH)</argsstring>
        <name>CentreOnParent</name>
        <param>
          <type>int</type>
          <declname>direction</declname>
          <defval>wxBOTH</defval>
        </param>
        <briefdescription>
<para>Centres the window on its parent. </para>        </briefdescription>
        <detaileddescription>
<para>This is a more readable synonym for <ref refid="classwx_window_1a4a1819eeee3f2143cdde4f329ffde787" kindref="member">Centre()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the direction for the centring. May be wxHORIZONTAL, wxVERTICAL or wxBOTH.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This methods provides for a way to centre top level windows over their parents instead of the entire screen. If there is no parent or if the window is not a top level window, then behaviour is the same as <ref refid="classwx_window_1a4a1819eeee3f2143cdde4f329ffde787" kindref="member">Centre()</ref>.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_top_level_window_1a1d28df1d739af6a3d5d2ec9e43b03c29" kindref="member">wxTopLevelWindow::CentreOnScreen</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1283"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a9f36392b289a1e567e95bee073d6533e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::GetPosition</definition>
        <argsstring>(int *x, int *y) const </argsstring>
        <name>GetPosition</name>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>This gets the position of the window in pixels, relative to the parent window for the child windows or relative to the display origin for the top level windows. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the x position of the window if non-NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the y position of the window if non-NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method is implemented as GetPositionXY() returning a 2-element list (x, y).</para><para><simplesect kind="see"><para><ref refid="classwx_window_1abd39ef50fbc1ef3771f695e7322e8c1d" kindref="member">GetScreenPosition()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1301"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad9a883e20827fa717e92fc2f8bd99d6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxWindow::GetPosition</definition>
        <argsstring>() const </argsstring>
        <name>GetPosition</name>
        <briefdescription>
<para>This gets the position of the window in pixels, relative to the parent window for the child windows or relative to the display origin for the top level windows. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1abd39ef50fbc1ef3771f695e7322e8c1d" kindref="member">GetScreenPosition()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1309"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ac8809904bb379c32c33c79fbe38745eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxWindow::GetRect</definition>
        <argsstring>() const </argsstring>
        <name>GetRect</name>
        <briefdescription>
<para>Returns the position and size of the window as a <ref refid="classwx_rect" kindref="compound">wxRect</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a5c0e45fac07ac4cf29eefa108337a110" kindref="member">GetScreenRect()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1316"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1abd39ef50fbc1ef3771f695e7322e8c1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::GetScreenPosition</definition>
        <argsstring>(int *x, int *y) const </argsstring>
        <name>GetScreenPosition</name>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns the window position in screen coordinates, whether the window is a child window or a top level one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the x position of the window on the screen if non-NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the y position of the window on the screen if non-NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_window_1a9f36392b289a1e567e95bee073d6533e" kindref="member">GetPosition()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1329"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a32074a2c677ebadb1ed6e92ab172656c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxWindow::GetScreenPosition</definition>
        <argsstring>() const </argsstring>
        <name>GetScreenPosition</name>
        <briefdescription>
<para>Returns the window position in screen coordinates, whether the window is a child window or a top level one. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a9f36392b289a1e567e95bee073d6533e" kindref="member">GetPosition()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1337"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a5c0e45fac07ac4cf29eefa108337a110" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxWindow::GetScreenRect</definition>
        <argsstring>() const </argsstring>
        <name>GetScreenRect</name>
        <briefdescription>
<para>Returns the position and size of the window on the screen as a <ref refid="classwx_rect" kindref="compound">wxRect</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1ac8809904bb379c32c33c79fbe38745eb" kindref="member">GetRect()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1344"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a8fd1c0fd88d63dfbf6fefb688b7fd19e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>virtual wxPoint wxWindow::GetClientAreaOrigin</definition>
        <argsstring>() const </argsstring>
        <name>GetClientAreaOrigin</name>
        <reimplementedby refid="classwx_frame_1ab4c447b8c1b139680d3ce4858dcd5db4">GetClientAreaOrigin</reimplementedby>
        <briefdescription>
<para>Get the origin of the client area of the window relative to the window top left corner (the client area may be shifted because of the borders, scrollbars, other decorations...) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1351"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a3928765a8dd3c5c3d6a689179c8005e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxWindow::GetClientRect</definition>
        <argsstring>() const </argsstring>
        <name>GetClientRect</name>
        <briefdescription>
<para>Get the client rectangle in window (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>client) coordinates </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1356"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab1cb98c8d25b9e6ff7b706b1446c3df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::Move</definition>
        <argsstring>(int x, int y, int flags=wxSIZE_USE_EXISTING)</argsstring>
        <name>Move</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>wxSIZE_USE_EXISTING</defval>
        </param>
        <briefdescription>
<para>Moves the window to the given position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Required x position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Required y position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member">SetSize()</ref> for more info about this parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Implementations of SetSize can also implicitly implement the <ref refid="classwx_window_1ab1cb98c8d25b9e6ff7b706b1446c3df7" kindref="member">Move()</ref> function, which is defined in the base <ref refid="classwx_window" kindref="compound">wxWindow</ref> class as the call: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member" tooltip="Sets the size of the window in pixels.">SetSize</ref>(x,<sp/>y,<sp/><ref refid="defs_8h_1ae297119c813ec5d3328ce3f43f9ac6c1" kindref="member" tooltip="A special value meaning &amp;quot;use default coordinate&amp;quot;.">wxDefaultCoord</ref>,<sp/><ref refid="defs_8h_1ae297119c813ec5d3328ce3f43f9ac6c1" kindref="member" tooltip="A special value meaning &amp;quot;use default coordinate&amp;quot;.">wxDefaultCoord</ref>,<sp/><ref refid="defs_8h_1a2f39257d6e2924d14ba28afa42abcde6" kindref="member">wxSIZE_USE_EXISTING</ref>);</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member">SetSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1378"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a22a22c1e23ca05776707e7999d8047fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::Move</definition>
        <argsstring>(const wxPoint &amp;pt, int flags=wxSIZE_USE_EXISTING)</argsstring>
        <name>Move</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>wxSIZE_USE_EXISTING</defval>
        </param>
        <briefdescription>
<para>Moves the window to the given position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classwx_point" kindref="compound">wxPoint</ref> object representing the position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>See <ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member">SetSize()</ref> for more info about this parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Implementations of <ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member">SetSize()</ref> can also implicitly implement the <ref refid="classwx_window_1ab1cb98c8d25b9e6ff7b706b1446c3df7" kindref="member">Move()</ref> function, which is defined in the base <ref refid="classwx_window" kindref="compound">wxWindow</ref> class as the call: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member" tooltip="Sets the size of the window in pixels.">SetSize</ref>(x,<sp/>y,<sp/><ref refid="defs_8h_1ae297119c813ec5d3328ce3f43f9ac6c1" kindref="member" tooltip="A special value meaning &amp;quot;use default coordinate&amp;quot;.">wxDefaultCoord</ref>,<sp/><ref refid="defs_8h_1ae297119c813ec5d3328ce3f43f9ac6c1" kindref="member" tooltip="A special value meaning &amp;quot;use default coordinate&amp;quot;.">wxDefaultCoord</ref>,<sp/><ref refid="defs_8h_1a2f39257d6e2924d14ba28afa42abcde6" kindref="member">wxSIZE_USE_EXISTING</ref>);</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" kindref="member">SetSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1396"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a81f23590239934fa10fded0566a65d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetPosition</definition>
        <argsstring>(const wxPoint &amp;pt)</argsstring>
        <name>SetPosition</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>A synonym for <ref refid="classwx_window_1a4a1819eeee3f2143cdde4f329ffde787" kindref="member">Centre()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1398"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Coordinate conversion functions</header>
      <memberdef kind="function" id="classwx_window_1a29eac611e5f6b47db82bb4dd5450ba3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::ClientToScreen</definition>
        <argsstring>(int *x, int *y) const </argsstring>
        <name>ClientToScreen</name>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Converts to screen coordinates from coordinates relative to this window. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a integer value for the x coordinate. Pass the client coordinate in, and a screen coordinate will be passed out. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a integer value for the y coordinate. Pass the client coordinate in, and a screen coordinate will be passed out.</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method returns a 2-element list instead of modifying its parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1423"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7de852b144210b93b690189e99dbe1df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxWindow::ClientToScreen</definition>
        <argsstring>(const wxPoint &amp;pt) const </argsstring>
        <name>ClientToScreen</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Converts to screen coordinates from coordinates relative to this window. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The client position for the second form of the function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1431"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1acb6787b6c3c314f9e015658a89ad0265" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxWindow::ConvertDialogToPixels</definition>
        <argsstring>(const wxPoint &amp;pt) const </argsstring>
        <name>ConvertDialogToPixels</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Converts a point or size from dialog units to pixels. </para>        </briefdescription>
        <detaileddescription>
<para>For the x dimension, the dialog units are multiplied by the average character width and then divided by 4. For the y dimension, the dialog units are multiplied by the average character height and then divided by 8.</para><para><simplesect kind="remark"><para>Dialog units are used for maintaining a dialog&apos;s proportions even if the font changes. You can also use these functions programmatically. A convenience macro is defined: <programlisting><codeline><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>wxDLG_UNIT(parent,<sp/>pt)<sp/>parent-&gt;ConvertDialogToPixels(pt)</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a449aac6a24f1d14b1a82b58003447dfe" kindref="member">ConvertPixelsToDialog()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1451"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a3daf76b93f648c68224e6ccd8095066b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxWindow::ConvertDialogToPixels</definition>
        <argsstring>(const wxSize &amp;sz) const </argsstring>
        <name>ConvertDialogToPixels</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1456"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a449aac6a24f1d14b1a82b58003447dfe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxWindow::ConvertPixelsToDialog</definition>
        <argsstring>(const wxPoint &amp;pt) const </argsstring>
        <name>ConvertPixelsToDialog</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Converts a point or size from pixels to dialog units. </para>        </briefdescription>
        <detaileddescription>
<para>For the x dimension, the pixels are multiplied by 4 and then divided by the average character width. For the y dimension, the pixels are multiplied by 8 and then divided by the average character height.</para><para><simplesect kind="remark"><para>Dialog units are used for maintaining a dialog&apos;s proportions even if the font changes.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1acb6787b6c3c314f9e015658a89ad0265" kindref="member">ConvertDialogToPixels()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1471"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1afd955ce9d25ec26a115bfb794b1c7d8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxWindow::ConvertPixelsToDialog</definition>
        <argsstring>(const wxSize &amp;sz) const </argsstring>
        <name>ConvertPixelsToDialog</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1476"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a65531bbc52f9508b0e31a9c08c97bd31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::ScreenToClient</definition>
        <argsstring>(int *x, int *y) const </argsstring>
        <name>ScreenToClient</name>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Converts from screen to client window coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores the screen x coordinate and receives the client x coordinate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores the screen x coordinate and receives the client x coordinate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1486"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a59d02b70a9107433836a977c4c0cd7a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxWindow::ScreenToClient</definition>
        <argsstring>(const wxPoint &amp;pt) const </argsstring>
        <name>ScreenToClient</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Converts from screen to client window coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The screen position. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1494"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Drawing-related functions</header>
      <memberdef kind="function" id="classwx_window_1a61e833684ee5c89775e91e88be1a9a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::ClearBackground</definition>
        <argsstring>()</argsstring>
        <name>ClearBackground</name>
        <briefdescription>
<para>Clears the window by filling it with the current background colour. </para>        </briefdescription>
        <detaileddescription>
<para>Does not cause an erase background event to be generated.</para><para>Notice that this uses <ref refid="classwx_client_d_c" kindref="compound">wxClientDC</ref> to draw on the window and the results of doing it while also drawing on <ref refid="classwx_paint_d_c" kindref="compound">wxPaintDC</ref> for this window are undefined. Hence this method shouldn&apos;t be used from EVT_PAINT handlers, just use <ref refid="classwx_d_c_1acf301dfd75b0f31d969ecb9daec21e85" kindref="member">wxDC::Clear()</ref> on the <ref refid="classwx_paint_d_c" kindref="compound">wxPaintDC</ref> you already use there instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1514"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a15c678314cfc1d807196bc298b713ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::Freeze</definition>
        <argsstring>()</argsstring>
        <name>Freeze</name>
        <briefdescription>
<para>Freezes the window or, in other words, prevents any updates from taking place on screen, the window is not redrawn at all. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classwx_window_1a279a532124073261b28131b6afb59a1e" kindref="member">Thaw()</ref> must be called to reenable window redrawing. Calls to these two functions may be nested but to ensure that the window is properly repainted again, you must thaw it exactly as many times as you froze it.</para><para>If the window has any children, they are recursively frozen too.</para><para>This method is useful for visual appearance optimization (for example, it is a good idea to use it before doing many large text insertions in a row into a <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> under wxGTK) but is not implemented on all platforms nor for all controls so it is mostly just a hint to wxWidgets and not a mandatory directive.</para><para><simplesect kind="see"><para><ref refid="classwx_window_update_locker" kindref="compound">wxWindowUpdateLocker</ref>, <ref refid="classwx_window_1a279a532124073261b28131b6afb59a1e" kindref="member">Thaw()</ref>, <ref refid="classwx_window_1a866c62cc23d8de88e952aad5db4d1a61" kindref="member">IsFrozen()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1534"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a279a532124073261b28131b6afb59a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::Thaw</definition>
        <argsstring>()</argsstring>
        <name>Thaw</name>
        <briefdescription>
<para>Re-enables window updating after a previous call to <ref refid="classwx_window_1a15c678314cfc1d807196bc298b713ed3" kindref="member">Freeze()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>To really thaw the control, it must be called exactly the same number of times as <ref refid="classwx_window_1a15c678314cfc1d807196bc298b713ed3" kindref="member">Freeze()</ref>.</para><para>If the window has any children, they are recursively thawed too.</para><para><simplesect kind="see"><para><ref refid="classwx_window_update_locker" kindref="compound">wxWindowUpdateLocker</ref>, <ref refid="classwx_window_1a15c678314cfc1d807196bc298b713ed3" kindref="member">Freeze()</ref>, <ref refid="classwx_window_1a866c62cc23d8de88e952aad5db4d1a61" kindref="member">IsFrozen()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1546"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a866c62cc23d8de88e952aad5db4d1a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::IsFrozen</definition>
        <argsstring>() const </argsstring>
        <name>IsFrozen</name>
        <reimplementedby refid="classwx_property_grid_1a07c6b69661f61f992e74e17a60e3c47b">IsFrozen</reimplementedby>
        <reimplementedby refid="classwx_property_grid_manager_1ac035d9e555a127ef4bbba1ea3b94b052">IsFrozen</reimplementedby>
        <briefdescription>
<para>Returns true if the window is currently frozen by a call to <ref refid="classwx_window_1a15c678314cfc1d807196bc298b713ed3" kindref="member">Freeze()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a15c678314cfc1d807196bc298b713ed3" kindref="member">Freeze()</ref>, <ref refid="classwx_window_1a279a532124073261b28131b6afb59a1e" kindref="member">Thaw()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1553"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a3006d98a4145b7064c1f08e39487d257" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxWindow::GetBackgroundColour</definition>
        <argsstring>() const </argsstring>
        <name>GetBackgroundColour</name>
        <briefdescription>
<para>Returns the background colour of the window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a37219df52734626e23401fd83b25d8a0" kindref="member">SetBackgroundColour()</ref>, <ref refid="classwx_window_1a69f1e1c7ddd370d72e68c70f13ac8de9" kindref="member">SetForegroundColour()</ref>, <ref refid="classwx_window_1acb8e9bd1c88f330bc9748255a5592964" kindref="member">GetForegroundColour()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1560"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a59047d52b88f2422bbcf01bbecdc4b7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="defs_8h_1a4bc8ece80d508fd70283b5a3b4c41e5f" kindref="member">wxBackgroundStyle</ref></type>
        <definition>virtual wxBackgroundStyle wxWindow::GetBackgroundStyle</definition>
        <argsstring>() const </argsstring>
        <name>GetBackgroundStyle</name>
        <briefdescription>
<para>Returns the background style of the window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a37219df52734626e23401fd83b25d8a0" kindref="member">SetBackgroundColour()</ref>, <ref refid="classwx_window_1acb8e9bd1c88f330bc9748255a5592964" kindref="member">GetForegroundColour()</ref>, <ref refid="classwx_window_1af14f8fd2ed2d30a9bbb5d4f9fd6594ec" kindref="member">SetBackgroundStyle()</ref>, <ref refid="classwx_window_1ac8cf4398cec50ac36634760f45a0656f" kindref="member">SetTransparent()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1568"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a304b4446de399b240a3fa4aa83a2e468" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxWindow::GetCharHeight</definition>
        <argsstring>() const </argsstring>
        <name>GetCharHeight</name>
        <briefdescription>
<para>Returns the character height for this window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1573"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aef2745df13435e913027107cab2a6286" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxWindow::GetCharWidth</definition>
        <argsstring>() const </argsstring>
        <name>GetCharWidth</name>
        <briefdescription>
<para>Returns the average character width for this window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1578"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a24e7b8f717e91f4590d148140e853dc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structwx_visual_attributes" kindref="compound">wxVisualAttributes</ref></type>
        <definition>virtual wxVisualAttributes wxWindow::GetDefaultAttributes</definition>
        <argsstring>() const </argsstring>
        <name>GetDefaultAttributes</name>
        <briefdescription>
<para>Currently this is the same as calling <ref refid="classwx_window_1a170d85e4aa0cbacbfcdd0728120e1417" kindref="member">wxWindow::GetClassDefaultAttributes</ref>(<ref refid="classwx_window_1aafcccd0d5d31651484df02453c53361c" kindref="member">wxWindow::GetWindowVariant()</ref>). </para>        </briefdescription>
        <detaileddescription>
<para>One advantage of using this function compared to the static version is that the call is automatically dispatched to the correct class (as usual with virtual functions) and you don&apos;t have to specify the class name explicitly.</para><para>The other one is that in the future this function could return different results, for example it might return a different font for an &quot;Ok&quot; button than for a generic button if the users GUI is configured to show such buttons in bold font. Of course, the down side is that it is impossible to call this function without actually having an object to apply it to whereas the static version can be used without having to create an object first. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1595"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0dcc6f6f7bda203a868ff10c413289fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_font" kindref="compound">wxFont</ref></type>
        <definition>wxFont wxWindow::GetFont</definition>
        <argsstring>() const </argsstring>
        <name>GetFont</name>
        <briefdescription>
<para>Returns the font for this window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a9ab11e7da57a1d08918aa75fc33f6ad3" kindref="member">SetFont()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1602"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1acb8e9bd1c88f330bc9748255a5592964" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxWindow::GetForegroundColour</definition>
        <argsstring>() const </argsstring>
        <name>GetForegroundColour</name>
        <briefdescription>
<para>Returns the foreground colour of the window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>The meaning of foreground colour varies according to the window class; it may be the text colour or other colour, or it may not be used at all.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a69f1e1c7ddd370d72e68c70f13ac8de9" kindref="member">SetForegroundColour()</ref>, <ref refid="classwx_window_1a37219df52734626e23401fd83b25d8a0" kindref="member">SetBackgroundColour()</ref>, <ref refid="classwx_window_1a3006d98a4145b7064c1f08e39487d257" kindref="member">GetBackgroundColour()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1613"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ac9cd7b4472d5419e518f69311914466f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::GetTextExtent</definition>
        <argsstring>(const wxString &amp;string, int *w, int *h, int *descent=NULL, int *externalLeading=NULL, const wxFont *font=NULL) const </argsstring>
        <name>GetTextExtent</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>descent</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int *</type>
          <declname>externalLeading</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_font" kindref="compound">wxFont</ref> *</type>
          <declname>font</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Gets the dimensions of the string as it would be drawn on the window with the currently selected font. </para>        </briefdescription>
        <detaileddescription>
<para>The text extent is returned in the <emphasis>w</emphasis> and <emphasis>h</emphasis> pointers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>String whose extent is to be measured. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Return value for width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Return value for height. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descent</parametername>
</parameternamelist>
<parameterdescription>
<para>Return value for descent (optional). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>externalLeading</parametername>
</parameternamelist>
<parameterdescription>
<para>Return value for external leading (optional). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>Font to use instead of the current window font (optional).</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method takes only the <emphasis>string</emphasis> and optionally <emphasis>font</emphasis> parameters, and returns a 4-element list (x, y, descent, externalLeading). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1644"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a79e5f88a2408871663d4ab0405cd35f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxWindow::GetTextExtent</definition>
        <argsstring>(const wxString &amp;string) const </argsstring>
        <name>GetTextExtent</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Gets the dimensions of the string as it would be drawn on the window with the currently selected font. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1650"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa982adbcebfa7bc73fbae7465132115b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_region" kindref="compound">wxRegion</ref> &amp;</type>
        <definition>const wxRegion&amp; wxWindow::GetUpdateRegion</definition>
        <argsstring>() const </argsstring>
        <name>GetUpdateRegion</name>
        <briefdescription>
<para>Returns the region specifying which parts of the window have been damaged. </para>        </briefdescription>
        <detaileddescription>
<para>Should only be called within an <ref refid="classwx_paint_event" kindref="compound">wxPaintEvent</ref> handler.</para><para><simplesect kind="see"><para><ref refid="classwx_region" kindref="compound">wxRegion</ref>, <ref refid="classwx_region_iterator" kindref="compound">wxRegionIterator</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1658"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7e32d9a9ffd058c931db20416bc55baa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxWindow::GetUpdateClientRect</definition>
        <argsstring>() const </argsstring>
        <name>GetUpdateClientRect</name>
        <briefdescription>
<para>Get the update rectangle bounding box in client coords. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1663"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab9cbcb6d6f4a272c2f0342e69a13b59a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::HasTransparentBackground</definition>
        <argsstring>()</argsstring>
        <name>HasTransparentBackground</name>
        <briefdescription>
<para>Returns true if this window background is transparent (as, for example, for <ref refid="classwx_static_text" kindref="compound">wxStaticText</ref>) and should show the parent window background. </para>        </briefdescription>
        <detaileddescription>
<para>This method is mostly used internally by the library itself and you normally shouldn&apos;t have to call it. You may, however, have to override it in your wxWindow-derived class to ensure that background is painted correctly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1673"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a29dc7251746154c821b17841b9877830" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::Refresh</definition>
        <argsstring>(bool eraseBackground=true, const wxRect *rect=NULL)</argsstring>
        <name>Refresh</name>
        <reimplementedby refid="classwx_menu_bar_1a45199e821baabb53291a6b459767ccd3">Refresh</reimplementedby>
        <param>
          <type>bool</type>
          <declname>eraseBackground</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_rect" kindref="compound">wxRect</ref> *</type>
          <declname>rect</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Causes this window, and all of its children recursively (except under wxGTK1 where this is not implemented), to be repainted. </para>        </briefdescription>
        <detaileddescription>
<para>Note that repainting doesn&apos;t happen immediately but only during the next event loop iteration, if you need to update the window immediately you should use <ref refid="classwx_window_1abaf28f1a075fd1b10f761a8febe597ec" kindref="member">Update()</ref> instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eraseBackground</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the background will be erased. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, only the given rectangle will be treated as damaged.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_window_1ab0ae6b9898cd261c39ebeb2891aa3d67" kindref="member">RefreshRect()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1689"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab0ae6b9898cd261c39ebeb2891aa3d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::RefreshRect</definition>
        <argsstring>(const wxRect &amp;rect, bool eraseBackground=true)</argsstring>
        <name>RefreshRect</name>
        <param>
          <type>const <ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>eraseBackground</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Redraws the contents of the given rectangle: only the area inside it will be repainted. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same as <ref refid="classwx_window_1a29dc7251746154c821b17841b9877830" kindref="member">Refresh()</ref> but has a nicer syntax as it can be called with a temporary <ref refid="classwx_rect" kindref="compound">wxRect</ref> object as argument like this <computeroutput>RefreshRect</computeroutput>(wxRect(x, y, w, h)). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1698"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1abaf28f1a075fd1b10f761a8febe597ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::Update</definition>
        <argsstring>()</argsstring>
        <name>Update</name>
        <briefdescription>
<para>Calling this method immediately repaints the invalidated area of the window and all of its children recursively (this normally only happens when the flow of control returns to the event loop). </para>        </briefdescription>
        <detaileddescription>
<para>Notice that this function doesn&apos;t invalidate any area of the window so nothing happens if nothing has been invalidated (i.e. marked as requiring a redraw). Use <ref refid="classwx_window_1a29dc7251746154c821b17841b9877830" kindref="member">Refresh()</ref> first if you want to immediately redraw the window unconditionally. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1710"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a37219df52734626e23401fd83b25d8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::SetBackgroundColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetBackgroundColour</name>
        <reimplementedby refid="classwx_list_ctrl_1a935412e9017c3fe511514cfc360a3117">SetBackgroundColour</reimplementedby>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the background colour of the window. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that as with <ref refid="classwx_window_1a69f1e1c7ddd370d72e68c70f13ac8de9" kindref="member">SetForegroundColour()</ref>, setting the background colour of a native control may not affect the entire control and could be not supported at all depending on the control and platform.</para><para>Please see <ref refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" kindref="member">InheritAttributes()</ref> for explanation of the difference between this method and <ref refid="classwx_window_1a9a3f9d8477aab1d9176cd66ee56e75d9" kindref="member">SetOwnBackgroundColour()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>The colour to be used as the background colour; pass wxNullColour to reset to the default colour. Note that you may want to use <ref refid="classwx_system_settings_1ab252414b60f16a233bc17df2a19bd804" kindref="member">wxSystemSettings::GetColour()</ref> to retrieve a suitable colour to use rather than setting an hard-coded one.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The background colour is usually painted by the default <ref refid="classwx_erase_event" kindref="compound">wxEraseEvent</ref> event handler function under Windows and automatically under GTK. Note that setting the background colour does not cause an immediate refresh, so you may wish to call <ref refid="classwx_window_1a61e833684ee5c89775e91e88be1a9a52" kindref="member">wxWindow::ClearBackground</ref> or <ref refid="classwx_window_1a29dc7251746154c821b17841b9877830" kindref="member">wxWindow::Refresh</ref> after calling this function. Using this function will disable attempts to use themes for this window, if the system supports them. Use with care since usually the themes represent the appearance chosen by the user to be used for all applications on the system.</para></simplesect>
<simplesect kind="return"><para>true if the colour was really changed, false if it was already set to this colour and nothing was done.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a3006d98a4145b7064c1f08e39487d257" kindref="member">GetBackgroundColour()</ref>, <ref refid="classwx_window_1a69f1e1c7ddd370d72e68c70f13ac8de9" kindref="member">SetForegroundColour()</ref>, <ref refid="classwx_window_1acb8e9bd1c88f330bc9748255a5592964" kindref="member">GetForegroundColour()</ref>, <ref refid="classwx_window_1a61e833684ee5c89775e91e88be1a9a52" kindref="member">ClearBackground()</ref>, <ref refid="classwx_window_1a29dc7251746154c821b17841b9877830" kindref="member">Refresh()</ref>, <ref refid="classwx_erase_event" kindref="compound">wxEraseEvent</ref>, <ref refid="classwx_system_settings" kindref="compound">wxSystemSettings</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1746"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1af14f8fd2ed2d30a9bbb5d4f9fd6594ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::SetBackgroundStyle</definition>
        <argsstring>(wxBackgroundStyle style)</argsstring>
        <name>SetBackgroundStyle</name>
        <param>
          <type><ref refid="defs_8h_1a4bc8ece80d508fd70283b5a3b4c41e5f" kindref="member">wxBackgroundStyle</ref></type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Sets the background style of the window. </para>        </briefdescription>
        <detaileddescription>
<para>The default background style is <computeroutput>wxBG_STYLE_ERASE</computeroutput> which indicates that the window background may be erased in <computeroutput>EVT_ERASE_BACKGROUND</computeroutput> handler. This is a safe, compatibility default; however you may want to change it to <computeroutput>wxBG_STYLE_SYSTEM</computeroutput> if you don&apos;t define any erase background event handlers at all, to avoid unnecessary generation of erase background events and always let system erase the background. And you should change the background style to <computeroutput>wxBG_STYLE_PAINT</computeroutput> if you define an <computeroutput>EVT_PAINT</computeroutput> handler which completely overwrites the window background as in this case erasing it previously, either in <computeroutput>EVT_ERASE_BACKGROUND</computeroutput> handler or in the system default handler, would result in flicker as the background pixels will be repainted twice every time the window is redrawn. Do ensure that the background is entirely erased by your <computeroutput>EVT_PAINT</computeroutput> handler in this case however as otherwise garbage may be left on screen.</para><para>Notice that in previous versions of wxWidgets a common way to work around the above mentioned flickering problem was to define an empty <computeroutput>EVT_ERASE_BACKGROUND</computeroutput> handler. Setting background style to <computeroutput>wxBG_STYLE_PAINT</computeroutput> is a simpler and more efficient solution to the same problem.</para><para>Under wxGTK and wxOSX, you can use <ref refid="defs_8h_1a4bc8ece80d508fd70283b5a3b4c41e5fa229f1fe9198f8a0eadf0d8ab45a16460" kindref="member">wxBG_STYLE_TRANSPARENT</ref> to obtain full transparency of the window background. Note that wxGTK supports this only since GTK 2.12 with a compositing manager enabled, call <ref refid="classwx_window_1a7940d510c5bdc062a2b109a1022dd8c2" kindref="member">IsTransparentBackgroundSupported()</ref> to check whether this is the case.</para><para>Also, on order for <computeroutput>SetBackgroundStyle(wxBG_STYLE_TRANSPARENT)</computeroutput> to work, it must be called before <ref refid="classwx_window_1a95b7ca8faa033f5ab35458887c07bf38" kindref="member">Create()</ref>. If you&apos;re using your own wxWindow-derived class you should write your code in the following way: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyWidget<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classwx_window" kindref="compound" tooltip="wxWindow is the base class for all windows and represents any visible object on screen.">wxWindow</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyWidget(<ref refid="classwx_window" kindref="compound" tooltip="wxWindow is the base class for all windows and represents any visible object on screen.">wxWindow</ref>*<sp/>parent,<sp/>...)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classwx_window" kindref="compound" tooltip="wxWindow is the base class for all windows and represents any visible object on screen.">wxWindow</ref>()<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>default<sp/>ctor<sp/>here!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>this<sp/>first:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1af14f8fd2ed2d30a9bbb5d4f9fd6594ec" kindref="member" tooltip="Sets the background style of the window.">SetBackgroundStyle</ref>(<ref refid="defs_8h_1a4bc8ece80d508fd70283b5a3b4c41e5fa229f1fe9198f8a0eadf0d8ab45a16460" kindref="member" tooltip="Indicates that the window background is not erased, letting the parent window show through...">wxBG_STYLE_TRANSPARENT</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>really<sp/>create<sp/>the<sp/>window<sp/>afterwards:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1a95b7ca8faa033f5ab35458887c07bf38" kindref="member">Create</ref>(parent,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="classwx_window_1a37219df52734626e23401fd83b25d8a0" kindref="member">SetBackgroundColour()</ref>, <ref refid="classwx_window_1acb8e9bd1c88f330bc9748255a5592964" kindref="member">GetForegroundColour()</ref>, <ref refid="classwx_window_1ac8cf4398cec50ac36634760f45a0656f" kindref="member">SetTransparent()</ref>, <ref refid="classwx_window_1a7940d510c5bdc062a2b109a1022dd8c2" kindref="member">IsTransparentBackgroundSupported()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1800"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7940d510c5bdc062a2b109a1022dd8c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::IsTransparentBackgroundSupported</definition>
        <argsstring>(wxString *reason=NULL) const </argsstring>
        <name>IsTransparentBackgroundSupported</name>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>reason</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Checks whether using transparent background might work. </para>        </briefdescription>
        <detaileddescription>
<para>If this function returns false, calling <ref refid="classwx_window_1af14f8fd2ed2d30a9bbb5d4f9fd6594ec" kindref="member">SetBackgroundStyle()</ref> with <ref refid="defs_8h_1a4bc8ece80d508fd70283b5a3b4c41e5fa229f1fe9198f8a0eadf0d8ab45a16460" kindref="member">wxBG_STYLE_TRANSPARENT</ref> is not going to work. If it returns true, setting transparent style should normally succeed.</para><para>Notice that this function would typically be called on the parent of a window you want to set transparent background style for as the window for which this method is called must be fully created.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, a reason message is provided if transparency is not supported.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if background transparency is supported.</para></simplesect>
<simplesect kind="since"><para>2.9.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1821"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a9ab11e7da57a1d08918aa75fc33f6ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::SetFont</definition>
        <argsstring>(const wxFont &amp;font)</argsstring>
        <name>SetFont</name>
        <reimplementedby refid="classwx_rich_text_ctrl_1ad1e86c9e0daa943945f2fe82954092c6">SetFont</reimplementedby>
        <reimplementedby refid="classwx_info_bar_1aa6daa44e1c08910abf14ad075b1d9f86">SetFont</reimplementedby>
        <reimplementedby refid="classwx_aui_tool_bar_1a8842fa968ac5c45344010bbca457594d">SetFont</reimplementedby>
        <reimplementedby refid="classwx_aui_notebook_1ad97a013c2ad887cde7ebffc67b7a167f">SetFont</reimplementedby>
        <param>
          <type>const <ref refid="classwx_font" kindref="compound">wxFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Sets the font for this window. </para>        </briefdescription>
        <detaileddescription>
<para>This function should not be called for the parent window if you don&apos;t want its font to be inherited by its children, use <ref refid="classwx_window_1a89a4f62f23c1e7c845b8d07cecae4c43" kindref="member">SetOwnFont()</ref> instead in this case and see <ref refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" kindref="member">InheritAttributes()</ref> for more explanations.</para><para>Please notice that the given font is not automatically used for <ref refid="classwx_paint_d_c" kindref="compound">wxPaintDC</ref> objects associated with this window, you need to call <ref refid="classwx_d_c_1afab18239d707cd403235b36a987171a8" kindref="member">wxDC::SetFont</ref> too. However this font is used by any standard controls for drawing their text as well as by <ref refid="classwx_window_1ac9cd7b4472d5419e518f69311914466f" kindref="member">GetTextExtent()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>Font to associate with this window, pass wxNullFont to reset to the default font.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the font was really changed, false if it was already set to this font and nothing was done.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a0dcc6f6f7bda203a868ff10c413289fa" kindref="member">GetFont()</ref>, <ref refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" kindref="member">InheritAttributes()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1844"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a69f1e1c7ddd370d72e68c70f13ac8de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::SetForegroundColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetForegroundColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the foreground colour of the window. </para>        </briefdescription>
        <detaileddescription>
<para>The meaning of foreground colour varies according to the window class; it may be the text colour or other colour, or it may not be used at all. Additionally, not all native controls support changing their foreground colour so this method may change their colour only partially or even not at all.</para><para>Please see <ref refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" kindref="member">InheritAttributes()</ref> for explanation of the difference between this method and <ref refid="classwx_window_1a53f4a878e4e2d440bd00543f8014aaaa" kindref="member">SetOwnForegroundColour()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>The colour to be used as the foreground colour; pass wxNullColour to reset to the default colour.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the colour was really changed, false if it was already set to this colour and nothing was done.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1acb8e9bd1c88f330bc9748255a5592964" kindref="member">GetForegroundColour()</ref>, <ref refid="classwx_window_1a37219df52734626e23401fd83b25d8a0" kindref="member">SetBackgroundColour()</ref>, <ref refid="classwx_window_1a3006d98a4145b7064c1f08e39487d257" kindref="member">GetBackgroundColour()</ref>, <ref refid="classwx_window_1a0c43a27fa04f9c17cc28fde71fdba490" kindref="member">ShouldInheritColours()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1868"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a9a3f9d8477aab1d9176cd66ee56e75d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetOwnBackgroundColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetOwnBackgroundColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the background colour of the window but prevents it from being inherited by the children of this window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a37219df52734626e23401fd83b25d8a0" kindref="member">SetBackgroundColour()</ref>, <ref refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" kindref="member">InheritAttributes()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1876"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a89a4f62f23c1e7c845b8d07cecae4c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetOwnFont</definition>
        <argsstring>(const wxFont &amp;font)</argsstring>
        <name>SetOwnFont</name>
        <param>
          <type>const <ref refid="classwx_font" kindref="compound">wxFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Sets the font of the window but prevents it from being inherited by the children of this window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a9ab11e7da57a1d08918aa75fc33f6ad3" kindref="member">SetFont()</ref>, <ref refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" kindref="member">InheritAttributes()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1884"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a53f4a878e4e2d440bd00543f8014aaaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetOwnForegroundColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetOwnForegroundColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the foreground colour of the window but prevents it from being inherited by the children of this window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a69f1e1c7ddd370d72e68c70f13ac8de9" kindref="member">SetForegroundColour()</ref>, <ref refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" kindref="member">InheritAttributes()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1892"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aee57358435d6bd33f598c81354b47425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetPalette</definition>
        <argsstring>(const wxPalette &amp;pal)</argsstring>
        <name>SetPalette</name>
        <param>
          <type>const <ref refid="classwx_palette" kindref="compound">wxPalette</ref> &amp;</type>
          <declname>pal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000067"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="classwx_d_c_1afc58b0f4653159e713377d38c84a120f" kindref="member">wxDC::SetPalette</ref> instead.</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1897"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0c43a27fa04f9c17cc28fde71fdba490" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::ShouldInheritColours</definition>
        <argsstring>() const </argsstring>
        <name>ShouldInheritColours</name>
        <reimplementedby refid="classwx_rich_text_ctrl_1aa8a8029c63c62d11d273df912b3b302e">ShouldInheritColours</reimplementedby>
        <briefdescription>
<para>Return true from here to allow the colours of this window to be changed by <ref refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" kindref="member">InheritAttributes()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Returning false forbids inheriting them from the parent window.</para><para>The base class version returns false, but this method is overridden in <ref refid="classwx_control" kindref="compound">wxControl</ref> where it returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1906"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a41dd19ed8809fd8ec662e2aa2a9579c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetThemeEnabled</definition>
        <argsstring>(bool enable)</argsstring>
        <name>SetThemeEnabled</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>This function tells a window if it should use the system&apos;s &quot;theme&quot; code to draw the windows&apos; background instead of its own background drawing code. </para>        </briefdescription>
        <detaileddescription>
<para>This does not always have any effect since the underlying platform obviously needs to support the notion of themes in user defined windows. One such platform is GTK+ where windows can have (very colourful) backgrounds defined by a user&apos;s selected theme.</para><para>Dialogs, notebook pages and the status bar have this flag set to true by default so that the default look and feel is simulated best. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1919"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0b31a21532407cf809d73aa09f34235c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::GetThemeEnabled</definition>
        <argsstring>() const </argsstring>
        <name>GetThemeEnabled</name>
        <briefdescription>
<para>Clears the window by filling it with the current background colour. </para>        </briefdescription>
        <detaileddescription>
<para>Does not cause an erase background event to be generated.</para><para>Notice that this uses <ref refid="classwx_client_d_c" kindref="compound">wxClientDC</ref> to draw on the window and the results of doing it while also drawing on <ref refid="classwx_paint_d_c" kindref="compound">wxPaintDC</ref> for this window are undefined. Hence this method shouldn&apos;t be used from EVT_PAINT handlers, just use <ref refid="classwx_d_c_1acf301dfd75b0f31d969ecb9daec21e85" kindref="member">wxDC::Clear()</ref> on the <ref refid="classwx_paint_d_c" kindref="compound">wxPaintDC</ref> you already use there instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1923"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a64f7f6fb75bf4b7281e1d33542d523c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::CanSetTransparent</definition>
        <argsstring>()</argsstring>
        <name>CanSetTransparent</name>
        <reimplementedby refid="classwx_top_level_window_1a392cf325512c5558d776ca85abc0c451">CanSetTransparent</reimplementedby>
        <briefdescription>
<para>Returns true if the system supports transparent windows and calling <ref refid="classwx_window_1ac8cf4398cec50ac36634760f45a0656f" kindref="member">SetTransparent()</ref> may succeed. </para>        </briefdescription>
        <detaileddescription>
<para>If this function returns false, transparent windows are definitely not supported by the current system. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1930"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ac8cf4398cec50ac36634760f45a0656f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::SetTransparent</definition>
        <argsstring>(wxByte alpha)</argsstring>
        <name>SetTransparent</name>
        <reimplementedby refid="classwx_top_level_window_1a8e37aff45a001a83ff49745298a6978e">SetTransparent</reimplementedby>
        <param>
          <type><ref refid="defs_8h_1a02052a0390b909998c03fe2371d8e83e" kindref="member">wxByte</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Set the transparency of the window. </para>        </briefdescription>
        <detaileddescription>
<para>If the system supports transparent windows, returns true, otherwise returns false and the window remains fully opaque. See also <ref refid="classwx_window_1a64f7f6fb75bf4b7281e1d33542d523c7" kindref="member">CanSetTransparent()</ref>.</para><para>The parameter <emphasis>alpha</emphasis> is in the range 0..255 where 0 corresponds to a fully transparent window and 255 to the fully opaque one. The constants <computeroutput>wxIMAGE_ALPHA_TRANSPARENT</computeroutput> and <computeroutput>wxIMAGE_ALPHA_OPAQUE</computeroutput> can be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1941"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Event-handling functions</header>
      <description><para><ref refid="classwx_window" kindref="compound">wxWindow</ref> allows you to build a (sort of) stack of event handlers which can be used to override the window&apos;s own event handling. </para></description>
      <memberdef kind="function" id="classwx_window_1a72c2454cf309f30109da3cbfe237c760" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> *</type>
        <definition>wxEvtHandler* wxWindow::GetEventHandler</definition>
        <argsstring>() const </argsstring>
        <name>GetEventHandler</name>
        <briefdescription>
<para>Returns the event handler for this window. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the window is its own event handler.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1af6c84b7679183b377ba27a52a2f708b4" kindref="member">SetEventHandler()</ref>, <ref refid="classwx_window_1a398c11ab9af7956067a964f560d1978c" kindref="member">PushEventHandler()</ref>, <ref refid="classwx_window_1ac45c1f4cf96c70779764c14cf528790b" kindref="member">PopEventHandler()</ref>, <ref refid="classwx_evt_handler_1a65968dd27f3aac7718f2dd6b2ddd5a08" kindref="member">wxEvtHandler::ProcessEvent</ref>, <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1961"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a89d1b079de97aac170e999692095872c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::HandleAsNavigationKey</definition>
        <argsstring>(const wxKeyEvent &amp;event)</argsstring>
        <name>HandleAsNavigationKey</name>
        <param>
          <type>const <ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>This function will generate the appropriate call to <ref refid="classwx_window_1a86904f6785df4af6036b33383490a805" kindref="member">Navigate()</ref> if the key event is one normally used for keyboard navigation and return true in this case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns true if the key pressed was for navigation and was handled, false otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a86904f6785df4af6036b33383490a805" kindref="member">Navigate()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1972"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a665731bbfa46a72c215b04df60216ef1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::HandleWindowEvent</definition>
        <argsstring>(wxEvent &amp;event) const </argsstring>
        <name>HandleWindowEvent</name>
        <param>
          <type><ref refid="classwx_event" kindref="compound">wxEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Shorthand for: </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1a72c2454cf309f30109da3cbfe237c760" kindref="member" tooltip="Returns the event handler for this window.">GetEventHandler</ref>()-&gt;<ref refid="classwx_evt_handler_1a8205cb1a5a00d8b550b3ead22266b16b" kindref="member" tooltip="Processes an event by calling ProcessEvent() and handles any exceptions that occur in the process...">SafelyProcessEvent</ref>(event);</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="classwx_window_1a0a76891d726ad5f9a729e27e4eab2b57" kindref="member">ProcessWindowEvent()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1982"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0a76891d726ad5f9a729e27e4eab2b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::ProcessWindowEvent</definition>
        <argsstring>(wxEvent &amp;event)</argsstring>
        <name>ProcessWindowEvent</name>
        <param>
          <type><ref refid="classwx_event" kindref="compound">wxEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Convenient wrapper for <ref refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" kindref="member">ProcessEvent()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same as writing <programlisting><codeline><highlight class="normal"><sp/><ref refid="classwx_window_1a72c2454cf309f30109da3cbfe237c760" kindref="member" tooltip="Returns the event handler for this window.">GetEventHandler</ref>()-&gt;<ref refid="classwx_evt_handler_1a65968dd27f3aac7718f2dd6b2ddd5a08" kindref="member" tooltip="Processes an event, searching event tables and calling zero or more suitable event handler function(s...">ProcessEvent</ref>(event);</highlight></codeline>
</programlisting> but more convenient. Notice that <ref refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" kindref="member">ProcessEvent()</ref> itself can&apos;t be called for <ref refid="classwx_window" kindref="compound">wxWindow</ref> objects as it ignores the event handlers associated with the window; use this function instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="1992"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0a11aa4a50491d051f947e2618e52178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::ProcessWindowEventLocally</definition>
        <argsstring>(wxEvent &amp;event)</argsstring>
        <name>ProcessWindowEventLocally</name>
        <param>
          <type><ref refid="classwx_event" kindref="compound">wxEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Wrapper for <ref refid="classwx_evt_handler_1ac0f5d2cb29a04c1f7f82eb6b351f79fb" kindref="member">wxEvtHandler::ProcessEventLocally()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This method is similar to <ref refid="classwx_window_1a0a76891d726ad5f9a729e27e4eab2b57" kindref="member">ProcessWindowEvent()</ref> but can be used to search for the event handler only in this window and any event handlers pushed on top of it. Unlike <ref refid="classwx_window_1a0a76891d726ad5f9a729e27e4eab2b57" kindref="member">ProcessWindowEvent()</ref> it won&apos;t propagate the event upwards. But it will use the validator and event handlers associated with this window, if any.</para><para><simplesect kind="since"><para>2.9.1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2005"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ac45c1f4cf96c70779764c14cf528790b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> *</type>
        <definition>wxEvtHandler* wxWindow::PopEventHandler</definition>
        <argsstring>(bool deleteHandler=false)</argsstring>
        <name>PopEventHandler</name>
        <param>
          <type>bool</type>
          <declname>deleteHandler</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Removes and returns the top-most event handler on the event handler stack. </para>        </briefdescription>
        <detaileddescription>
<para>E.g. in the case of: <image type="html" name="overview_events_winstack.png"></image>
 when calling <computeroutput>W-&gt;<ref refid="classwx_window_1ac45c1f4cf96c70779764c14cf528790b" kindref="member">PopEventHandler()</ref></computeroutput>, the event handler <computeroutput>A</computeroutput> will be removed and <computeroutput>B</computeroutput> will be the first handler of the stack.</para><para>Note that it&apos;s an error to call this function when no event handlers were pushed on this window (i.e. when the window itself is its only event handler).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deleteHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is true, the handler will be deleted after it is removed (and the returned value will be NULL).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="overview_events_1overview_events_processing" kindref="member">How Events are Processed</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2025"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a398c11ab9af7956067a964f560d1978c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::PushEventHandler</definition>
        <argsstring>(wxEvtHandler *handler)</argsstring>
        <name>PushEventHandler</name>
        <param>
          <type><ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Pushes this event handler onto the event stack for the window. </para>        </briefdescription>
        <detaileddescription>
<para>An event handler is an object that is capable of processing the events sent to a window. By default, the window is its own event handler, but an application may wish to substitute another, for example to allow central implementation of event-handling for a variety of different window classes.</para><para><ref refid="classwx_window_1a398c11ab9af7956067a964f560d1978c" kindref="member">wxWindow::PushEventHandler</ref> allows an application to set up a <emphasis>stack</emphasis> of event handlers, where an event not handled by one event handler is handed to the next one in the chain.</para><para>E.g. if you have two event handlers <computeroutput>A</computeroutput> and <computeroutput>B</computeroutput> and a <ref refid="classwx_window" kindref="compound">wxWindow</ref> instance <computeroutput>W</computeroutput> and you call: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W-&gt;PushEventHandler(A);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W-&gt;PushEventHandler(B);</highlight></codeline>
</programlisting> you will end up with the following situation: <image type="html" name="overview_events_winstack.png"></image>
</para><para>Note that you can use <ref refid="classwx_window_1ac45c1f4cf96c70779764c14cf528790b" kindref="member">wxWindow::PopEventHandler</ref> to remove the event handler.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the handler to be pushed. It must not be part of a <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> chain; an assert will fail if it&apos;s not unlinked (see <ref refid="classwx_evt_handler_1a360fdeefcf53b62fb49fb828406bb8a6" kindref="member">wxEvtHandler::IsUnlinked</ref>).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="overview_events_1overview_events_processing" kindref="member">How Events are Processed</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2057"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aacbfe424fa527966b954229a1db96ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::RemoveEventHandler</definition>
        <argsstring>(wxEvtHandler *handler)</argsstring>
        <name>RemoveEventHandler</name>
        <param>
          <type><ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Find the given <emphasis>handler</emphasis> in the windows event handler stack and removes (but does not delete) it from the stack. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_evt_handler_1a22e5db2ec1d19c8252c056fd116975d7" kindref="member">wxEvtHandler::Unlink()</ref> for more info.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The event handler to remove, must be non-NULL and must be present in this windows event handlers stack.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if it was found and false otherwise (this also results in an assert failure so this function should only be called when the handler is supposed to be there).</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a398c11ab9af7956067a964f560d1978c" kindref="member">PushEventHandler()</ref>, <ref refid="classwx_window_1ac45c1f4cf96c70779764c14cf528790b" kindref="member">PopEventHandler()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2075"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1af6c84b7679183b377ba27a52a2f708b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetEventHandler</definition>
        <argsstring>(wxEvtHandler *handler)</argsstring>
        <name>SetEventHandler</name>
        <param>
          <type><ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Sets the event handler for this window. </para>        </briefdescription>
        <detaileddescription>
<para>Note that if you use this function you may want to use as the &quot;next&quot; handler of <emphasis>handler</emphasis> the window itself; in this way when <emphasis>handler</emphasis> doesn&apos;t process an event, the window itself will have a chance to do it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the handler to be set. Cannot be NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="overview_events_1overview_events_processing" kindref="member">How Events are Processed</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2089"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aeab905f61df7004c1b76a3351dca9e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetNextHandler</definition>
        <argsstring>(wxEvtHandler *handler)</argsstring>
        <name>SetNextHandler</name>
        <reimplements refid="classwx_evt_handler_1a68e2ef2d2b7d68c4c9c18ca92933031b">SetNextHandler</reimplements>
        <param>
          <type><ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>wxWindows cannot be used to form event handler chains; this function thus will assert when called. </para>        </briefdescription>
        <detaileddescription>
<para>Note that instead you can use <ref refid="classwx_window_1a398c11ab9af7956067a964f560d1978c" kindref="member">PushEventHandler()</ref> or <ref refid="classwx_window_1af6c84b7679183b377ba27a52a2f708b4" kindref="member">SetEventHandler()</ref> to implement a stack of event handlers to override wxWindow&apos;s own event handling mechanism. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2099"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a07f5f7ed3f78e0ef7b3dee3f4da81001" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetPreviousHandler</definition>
        <argsstring>(wxEvtHandler *handler)</argsstring>
        <name>SetPreviousHandler</name>
        <reimplements refid="classwx_evt_handler_1aff0d1836464be82e2ad723ad3a58eccc">SetPreviousHandler</reimplements>
        <param>
          <type><ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>wxWindows cannot be used to form event handler chains; this function thus will assert when called. </para>        </briefdescription>
        <detaileddescription>
<para>Note that instead you can use <ref refid="classwx_window_1a398c11ab9af7956067a964f560d1978c" kindref="member">PushEventHandler()</ref> or <ref refid="classwx_window_1af6c84b7679183b377ba27a52a2f708b4" kindref="member">SetEventHandler()</ref> to implement a stack of event handlers to override wxWindow&apos;s own event handling mechanism. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Window styles functions</header>
      <memberdef kind="function" id="classwx_window_1a8da0e59017af368c062f11c9abe2c667" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxWindow::GetExtraStyle</definition>
        <argsstring>() const </argsstring>
        <name>GetExtraStyle</name>
        <briefdescription>
<para>Returns the extra style bits for the window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2123"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0a0e81677bf2f0de5982a634e11d9a69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>long</type>
        <definition>virtual long wxWindow::GetWindowStyleFlag</definition>
        <argsstring>() const </argsstring>
        <name>GetWindowStyleFlag</name>
        <reimplementedby refid="classwx_aui_tool_bar_1a346043e96cea75b725b1c790b1116ad6">GetWindowStyleFlag</reimplementedby>
        <briefdescription>
<para>Gets the window style that was passed to the constructor or <ref refid="classwx_window_1a95b7ca8faa033f5ab35458887c07bf38" kindref="member">Create()</ref> method. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classwx_window_1a994147d8294bd7d5a32c825d5692af28" kindref="member">GetWindowStyle()</ref> is another name for the same function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2129"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a994147d8294bd7d5a32c825d5692af28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxWindow::GetWindowStyle</definition>
        <argsstring>() const </argsstring>
        <name>GetWindowStyle</name>
        <briefdescription>
<para>See <ref refid="classwx_window_1a0a0e81677bf2f0de5982a634e11d9a69" kindref="member">GetWindowStyleFlag()</ref> for more info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2134"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae30b415c1ef526563161efea5b78d640" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::HasExtraStyle</definition>
        <argsstring>(int exFlag) const </argsstring>
        <name>HasExtraStyle</name>
        <param>
          <type>int</type>
          <declname>exFlag</declname>
        </param>
        <briefdescription>
<para>Returns true if the window has the given <emphasis>exFlag</emphasis> bit set in its extra styles. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1ae9655f7c35ce7ac89cac2f6c0054b103" kindref="member">SetExtraStyle()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2142"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a62ba2fb9be6422bf06bb7db5871d551f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::HasFlag</definition>
        <argsstring>(int flag) const </argsstring>
        <name>HasFlag</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Returns true if the window has the given <emphasis>flag</emphasis> bit set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2147"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae9655f7c35ce7ac89cac2f6c0054b103" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetExtraStyle</definition>
        <argsstring>(long exStyle)</argsstring>
        <name>SetExtraStyle</name>
        <param>
          <type>long</type>
          <declname>exStyle</declname>
        </param>
        <briefdescription>
<para>Sets the extra style bits for the window. </para>        </briefdescription>
        <detaileddescription>
<para>The currently defined extra style bits are reported in the class description. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2154"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aee2cf342f80523432e7f2299d299451b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetWindowStyleFlag</definition>
        <argsstring>(long style)</argsstring>
        <name>SetWindowStyleFlag</name>
        <reimplementedby refid="classwx_list_ctrl_1ae719fa247088c1f5e3b6bd7de2cfcc39">SetWindowStyleFlag</reimplementedby>
        <reimplementedby refid="classwx_aui_tool_bar_1aa37acd160c70ea5ab90782709c6ae4fa">SetWindowStyleFlag</reimplementedby>
        <param>
          <type>long</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Sets the style of the window. </para>        </briefdescription>
        <detaileddescription>
<para>Please note that some styles cannot be changed after the window creation and that <ref refid="classwx_window_1a29dc7251746154c821b17841b9877830" kindref="member">Refresh()</ref> might need to be called after changing the others for the change to take place immediately.</para><para>See <ref refid="overview_windowstyles" kindref="compound">Window styles</ref> for more information about flags.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a0a0e81677bf2f0de5982a634e11d9a69" kindref="member">GetWindowStyleFlag()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2165"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a306af30adec68689f74ed537b4f9d5fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetWindowStyle</definition>
        <argsstring>(long style)</argsstring>
        <name>SetWindowStyle</name>
        <reimplementedby refid="classwx_tree_ctrl_1a00974d17198e3883bfe4cca9d7ab52ba">SetWindowStyle</reimplementedby>
        <param>
          <type>long</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>See <ref refid="classwx_window_1aee2cf342f80523432e7f2299d299451b" kindref="member">SetWindowStyleFlag()</ref> for more info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2170"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a8a4fa47129de552bfec37db8c69688a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::ToggleWindowStyle</definition>
        <argsstring>(int flag)</argsstring>
        <name>ToggleWindowStyle</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Turns the given <emphasis>flag</emphasis> on if it&apos;s currently turned off and vice versa. </para>        </briefdescription>
        <detaileddescription>
<para>This function cannot be used if the value of the flag is 0 (which is often the case for default flags).</para><para>Also, please notice that not all styles can be changed after the control creation.</para><para><simplesect kind="return"><para>Returns true if the style was turned on by this function, false if it was switched off.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1aee2cf342f80523432e7f2299d299451b" kindref="member">SetWindowStyleFlag()</ref>, <ref refid="classwx_window_1a62ba2fb9be6422bf06bb7db5871d551f" kindref="member">HasFlag()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2185"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Tab order functions</header>
      <memberdef kind="function" id="classwx_window_1a79e66079125e8420de269811bdb6f2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::MoveAfterInTabOrder</definition>
        <argsstring>(wxWindow *win)</argsstring>
        <name>MoveAfterInTabOrder</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>win</declname>
        </param>
        <briefdescription>
<para>Moves this window in the tab navigation order after the specified <emphasis>win</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This means that when the user presses <computeroutput>TAB</computeroutput> key on that other window, the focus switches to this window.</para><para>Default tab order is the same as creation order, this function and <ref refid="classwx_window_1af2b92f61cd9f9e2e0efe4cce307e25b1" kindref="member">MoveBeforeInTabOrder()</ref> allow to change it after creating all the windows.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>win</parametername>
</parameternamelist>
<parameterdescription>
<para>A sibling of this window which should precede it in tab order, must not be NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2208"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1af2b92f61cd9f9e2e0efe4cce307e25b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::MoveBeforeInTabOrder</definition>
        <argsstring>(wxWindow *win)</argsstring>
        <name>MoveBeforeInTabOrder</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>win</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classwx_window_1a79e66079125e8420de269811bdb6f2b6" kindref="member">MoveAfterInTabOrder()</ref> except that it inserts this window just before <emphasis>win</emphasis> instead of putting it right after it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2214"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a86904f6785df4af6036b33383490a805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::Navigate</definition>
        <argsstring>(int flags=wxNavigationKeyEvent::IsForward)</argsstring>
        <name>Navigate</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>wxNavigationKeyEvent::IsForward</defval>
        </param>
        <briefdescription>
<para>Performs a keyboard navigation action starting from this window. </para>        </briefdescription>
        <detaileddescription>
<para>This method is equivalent to calling <ref refid="classwx_window_1aa58039c8fc65e19160becf510ee1d1d5" kindref="member">NavigateIn()</ref> method on the parent window.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A combination of <ref refid="classwx_navigation_key_event_1afba5af727118cf1e63998282c307ba21a225d9ac21e815524d56648d47a1cbda4" kindref="member">wxNavigationKeyEvent::IsForward</ref> and <ref refid="classwx_navigation_key_event_1afba5af727118cf1e63998282c307ba21af2d26172f78b9fcdcc978ee7d4e1b004" kindref="member">wxNavigationKeyEvent::WinChange</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the focus was moved to another window or false if nothing changed.</para></simplesect>
<simplesect kind="remark"><para>You may wish to call this from a text control custom keypress handler to do the default navigation behaviour for the tab key, since the standard default behaviour for a multiline text control with the wxTE_PROCESS_TAB style is to insert a tab and not navigate to the next control. See also <ref refid="classwx_navigation_key_event" kindref="compound">wxNavigationKeyEvent</ref> and HandleAsNavigationKey. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2236"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa58039c8fc65e19160becf510ee1d1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::NavigateIn</definition>
        <argsstring>(int flags=wxNavigationKeyEvent::IsForward)</argsstring>
        <name>NavigateIn</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>wxNavigationKeyEvent::IsForward</defval>
        </param>
        <briefdescription>
<para>Performs a keyboard navigation action inside this window. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_window_1a86904f6785df4af6036b33383490a805" kindref="member">Navigate()</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2242"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Z order functions</header>
      <memberdef kind="function" id="classwx_window_1a124944524f36b71385dad8fddaad8ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::Lower</definition>
        <argsstring>()</argsstring>
        <name>Lower</name>
        <briefdescription>
<para>Lowers the window to the bottom of the window hierarchy (Z-order). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This function only works for wxTopLevelWindow-derived classes.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a54808c933f22a891c5db646f6209fa4d" kindref="member">Raise()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2261"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a54808c933f22a891c5db646f6209fa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::Raise</definition>
        <argsstring>()</argsstring>
        <name>Raise</name>
        <briefdescription>
<para>Raises the window to the top of the window hierarchy (Z-order). </para>        </briefdescription>
        <detaileddescription>
<para>Notice that this function only requests the window manager to raise this window to the top of Z-order. Depending on its configuration, the window manager may raise the window, not do it at all or indicate that a window requested to be raised in some other way, e.g. by flashing its icon if it is minimized.</para><para><simplesect kind="remark"><para>This function only works for wxTopLevelWindow-derived classes.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a124944524f36b71385dad8fddaad8ded" kindref="member">Lower()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2277"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Window status functions</header>
      <memberdef kind="function" id="classwx_window_1a7ed103df04014cb3c59c6a3fb4d95328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::Hide</definition>
        <argsstring>()</argsstring>
        <name>Hide</name>
        <briefdescription>
<para>Equivalent to calling <ref refid="classwx_window_1a7fbc92ce240a8d4f6956b6e0276ef07f" kindref="member">wxWindow::Show</ref>(false). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2291"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a5326fbb26557a224507a1c06e5640e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::HideWithEffect</definition>
        <argsstring>(wxShowEffect effect, unsigned int timeout=0)</argsstring>
        <name>HideWithEffect</name>
        <param>
          <type><ref refid="window_8h_1a49efebddb5cf706e0eb819b434bdf918" kindref="member">wxShowEffect</ref></type>
          <declname>effect</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>This function hides a window, like <ref refid="classwx_window_1a7ed103df04014cb3c59c6a3fb4d95328" kindref="member">Hide()</ref>, but using a special visual effect if possible. </para>        </briefdescription>
        <detaileddescription>
<para>The parameters of this function are the same as for <ref refid="classwx_window_1a596b1715edfc7609f352b2e000ecbaec" kindref="member">ShowWithEffect()</ref>, please see their description there.</para><para><simplesect kind="since"><para>2.9.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2303"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a59452a5bd42f5ea4b31d7fc4aa59644f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::IsEnabled</definition>
        <argsstring>() const </argsstring>
        <name>IsEnabled</name>
        <briefdescription>
<para>Returns true if the window is enabled, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>if it accepts user input, false otherwise.</para><para>Notice that this method can return false even if this window itself hadn&apos;t been explicitly disabled when one of its parent windows is disabled. To get the intrinsic status of this window, use <ref refid="classwx_window_1a657ef8b6055eb06df894ac5e6ddfecf8" kindref="member">IsThisEnabled()</ref></para><para><simplesect kind="see"><para><ref refid="classwx_window_1a4e933aa891f42fbb3b87438057c573af" kindref="member">Enable()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2314"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1af27ef77c913e32050543f3b0ca435a0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::IsExposed</definition>
        <argsstring>(int x, int y) const </argsstring>
        <name>IsExposed</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns true if the given point or rectangle area has been exposed since the last repaint. </para>        </briefdescription>
        <detaileddescription>
<para>Call this in an paint event handler to optimize redrawing by only redrawing those areas, which have been exposed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2321"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a31af79f647cbec4950ce31620db51753" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::IsExposed</definition>
        <argsstring>(wxPoint &amp;pt) const </argsstring>
        <name>IsExposed</name>
        <param>
          <type><ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2326"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a4a23e724619ec070f7d5c45ba21529d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::IsExposed</definition>
        <argsstring>(int x, int y, int w, int h) const </argsstring>
        <name>IsExposed</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2331"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a4da9a2d13534535aaf7b45200ee8728e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::IsExposed</definition>
        <argsstring>(wxRect &amp;rect) const </argsstring>
        <name>IsExposed</name>
        <param>
          <type><ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2336"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a95af3a39aa422580dae156ed281a7e88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::IsShown</definition>
        <argsstring>() const </argsstring>
        <name>IsShown</name>
        <briefdescription>
<para>Returns true if the window is shown, false if it has been hidden. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a72d70fd14e3565bf782fbcd3271d8930" kindref="member">IsShownOnScreen()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2342"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a72d70fd14e3565bf782fbcd3271d8930" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::IsShownOnScreen</definition>
        <argsstring>() const </argsstring>
        <name>IsShownOnScreen</name>
        <briefdescription>
<para>Returns true if the window is physically visible on the screen, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>it is shown and all its parents up to the toplevel window are shown as well.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a95af3a39aa422580dae156ed281a7e88" kindref="member">IsShown()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2350"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a26d7329a9a753fa0445501f01f66c41e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::Disable</definition>
        <argsstring>()</argsstring>
        <name>Disable</name>
        <briefdescription>
<para>Disables the window. </para>        </briefdescription>
        <detaileddescription>
<para>Same as <ref refid="classwx_window_1a4e933aa891f42fbb3b87438057c573af" kindref="member">Enable()</ref> Enable(false).</para><para><simplesect kind="return"><para>Returns true if the window has been disabled, false if it had been already disabled before the call to this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2358"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a4e933aa891f42fbb3b87438057c573af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::Enable</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>Enable</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enable or disable the window for user input. </para>        </briefdescription>
        <detaileddescription>
<para>Note that when a parent window is disabled, all of its children are disabled as well and they are reenabled again when the parent is.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, enables the window for input. If false, disables the window.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the window has been enabled or disabled, false if nothing was done, i.e. if the window had already been in the specified state.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a59452a5bd42f5ea4b31d7fc4aa59644f" kindref="member">IsEnabled()</ref>, <ref refid="classwx_window_1a26d7329a9a753fa0445501f01f66c41e" kindref="member">Disable()</ref>, <ref refid="classwx_radio_box_1a0e297404226d3737560ddd15eebcdccc" kindref="member">wxRadioBox::Enable</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2374"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7fbc92ce240a8d4f6956b6e0276ef07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::Show</definition>
        <argsstring>(bool show=true)</argsstring>
        <name>Show</name>
        <reimplementedby refid="classwx_dialog_1ae8e5fa98d473b812b8d1c2f163b65c67">Show</reimplementedby>
        <param>
          <type>bool</type>
          <declname>show</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Shows or hides the window. </para>        </briefdescription>
        <detaileddescription>
<para>You may need to call <ref refid="classwx_window_1a54808c933f22a891c5db646f6209fa4d" kindref="member">Raise()</ref> for a top level window if you want to bring it to top, although this is not needed if <ref refid="classwx_window_1a7fbc92ce240a8d4f6956b6e0276ef07f" kindref="member">Show()</ref> is called immediately after the frame creation.</para><para>Notice that the default state of newly created top level windows is hidden (to allow you to create their contents without flicker) unlike for all the other, not derived from <ref refid="classwx_top_level_window" kindref="compound">wxTopLevelWindow</ref>, windows that are by default created in the shown state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>show</parametername>
</parameternamelist>
<parameterdescription>
<para>If true displays the window. Otherwise, hides it.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the window has been shown or hidden or false if nothing was done because it already was in the requested state.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a95af3a39aa422580dae156ed281a7e88" kindref="member">IsShown()</ref>, <ref refid="classwx_window_1a7ed103df04014cb3c59c6a3fb4d95328" kindref="member">Hide()</ref>, <ref refid="classwx_radio_box_1a1ad6078e61378f77034b3a93d6d7b0d6" kindref="member">wxRadioBox::Show</ref>, <ref refid="classwx_show_event" kindref="compound">wxShowEvent</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2394"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a596b1715edfc7609f352b2e000ecbaec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::ShowWithEffect</definition>
        <argsstring>(wxShowEffect effect, unsigned int timeout=0)</argsstring>
        <name>ShowWithEffect</name>
        <param>
          <type><ref refid="window_8h_1a49efebddb5cf706e0eb819b434bdf918" kindref="member">wxShowEffect</ref></type>
          <declname>effect</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>This function shows a window, like <ref refid="classwx_window_1a7fbc92ce240a8d4f6956b6e0276ef07f" kindref="member">Show()</ref>, but using a special visual effect if possible. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>effect</parametername>
</parameternamelist>
<parameterdescription>
<para>The effect to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>timeout</emphasis> parameter specifies the time of the animation, in milliseconds. If the default value of 0 is used, the default animation time for the current platform is used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Currently this function is only implemented in wxMSW and wxOSX (for wxTopLevelWindows only in Carbon version and for any kind of windows in Cocoa) and does the same thing as <ref refid="classwx_window_1a7fbc92ce240a8d4f6956b6e0276ef07f" kindref="member">Show()</ref> in the other ports.</para></simplesect>
<simplesect kind="since"><para>2.9.0</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a5326fbb26557a224507a1c06e5640e89" kindref="member">HideWithEffect()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2418"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Context-sensitive help functions</header>
      <memberdef kind="function" id="classwx_window_1a77f8a4bbee228ed333af2e6a06509cff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxWindow::GetHelpText</definition>
        <argsstring>() const </argsstring>
        <name>GetHelpText</name>
        <briefdescription>
<para>Gets the help text to be used as context-sensitive help for this window. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the text is actually stored by the current <ref refid="classwx_help_provider" kindref="compound">wxHelpProvider</ref> implementation, and not in the window object itself.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a4c1a2cbc7363237b3a7c70af4e702c72" kindref="member">SetHelpText()</ref>, <ref refid="classwx_window_1afa448f4e01bedc4a5e3d4324929e5d5d" kindref="member">GetHelpTextAtPoint()</ref>, <ref refid="classwx_help_provider" kindref="compound">wxHelpProvider</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2435"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a4c1a2cbc7363237b3a7c70af4e702c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetHelpText</definition>
        <argsstring>(const wxString &amp;helpText)</argsstring>
        <name>SetHelpText</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>helpText</declname>
        </param>
        <briefdescription>
<para>Sets the help text to be used as context-sensitive help for this window. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the text is actually stored by the current <ref refid="classwx_help_provider" kindref="compound">wxHelpProvider</ref> implementation, and not in the window object itself.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a77f8a4bbee228ed333af2e6a06509cff" kindref="member">GetHelpText()</ref>, <ref refid="classwx_help_provider_1ae4b53b23804a04ce2c4eb93c17e4e8c6" kindref="member">wxHelpProvider::AddHelp()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2444"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1afa448f4e01bedc4a5e3d4324929e5d5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxWindow::GetHelpTextAtPoint</definition>
        <argsstring>(const wxPoint &amp;point, wxHelpEvent::Origin origin) const </argsstring>
        <name>GetHelpTextAtPoint</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="classwx_help_event_1a29fe3ca1a548472f0abd0ae94b5def0c" kindref="member">wxHelpEvent::Origin</ref></type>
          <declname>origin</declname>
        </param>
        <briefdescription>
<para>Gets the help text to be used as context-sensitive help for this window. </para>        </briefdescription>
        <detaileddescription>
<para>This method should be overridden if the help message depends on the position inside the window, otherwise <ref refid="classwx_window_1a77f8a4bbee228ed333af2e6a06509cff" kindref="member">GetHelpText()</ref> can be used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordinates of the mouse at the moment of help event emission. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>Help event origin, see also <ref refid="classwx_help_event_1a55ce4340d1254116a80cb6a8352d33ae" kindref="member">wxHelpEvent::GetOrigin</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2457"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aae94155ccf8a6e4e72ad08527c89ba89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_tool_tip" kindref="compound">wxToolTip</ref> *</type>
        <definition>wxToolTip* wxWindow::GetToolTip</definition>
        <argsstring>() const </argsstring>
        <name>GetToolTip</name>
        <briefdescription>
<para>Get the associated tooltip or NULL if none. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2462"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad1a9c53c8e7e5010874f15b8ff4a6568" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxWindow::GetToolTipText</definition>
        <argsstring>() const </argsstring>
        <name>GetToolTipText</name>
        <briefdescription>
<para>Get the text of the associated tooltip or empty string if none. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2467"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a81a9fb74e3c6c7f4416e882f5e589b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetToolTip</definition>
        <argsstring>(const wxString &amp;tipString)</argsstring>
        <name>SetToolTip</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>tipString</declname>
        </param>
        <briefdescription>
<para>Attach a tooltip to the window. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classwx_tool_tip" kindref="compound">wxToolTip</ref> pointer can be NULL in the overload taking the pointer, meaning to unset any existing tooltips; however <ref refid="classwx_window_1ae75712451673658b0a533480bf5eeaa4" kindref="member">UnsetToolTip()</ref> provides a more readable alternative to this operation.</para><para>Notice that these methods are always available, even if wxWidgets was compiled with <computeroutput>wxUSE_TOOLTIPS</computeroutput> set to 0, but don&apos;t do anything in this case.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1aae94155ccf8a6e4e72ad08527c89ba89" kindref="member">GetToolTip()</ref>, <ref refid="classwx_tool_tip" kindref="compound">wxToolTip</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2482"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a494e0b7cfca9299caa40e847767e7357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetToolTip</definition>
        <argsstring>(wxToolTip *tip)</argsstring>
        <name>SetToolTip</name>
        <param>
          <type><ref refid="classwx_tool_tip" kindref="compound">wxToolTip</ref> *</type>
          <declname>tip</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2487"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae75712451673658b0a533480bf5eeaa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::UnsetToolTip</definition>
        <argsstring>()</argsstring>
        <name>UnsetToolTip</name>
        <briefdescription>
<para>Unset any existing tooltip. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.0</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a81a9fb74e3c6c7f4416e882f5e589b8c" kindref="member">SetToolTip()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2496"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Popup/context menu functions</header>
      <memberdef kind="function" id="classwx_window_1a9b7de6ea85ca926b668ba0682a61a93e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxWindow::GetPopupMenuSelectionFromUser</definition>
        <argsstring>(wxMenu &amp;menu, const wxPoint &amp;pos=wxDefaultPosition)</argsstring>
        <name>GetPopupMenuSelectionFromUser</name>
        <param>
          <type><ref refid="classwx_menu" kindref="compound">wxMenu</ref> &amp;</type>
          <declname>menu</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <briefdescription>
<para>This function shows a popup menu at the given position in this window and returns the selected id. </para>        </briefdescription>
        <detaileddescription>
<para>It can be more convenient than the general purpose <ref refid="classwx_window_1a8f715d238cf74a845488b0e2645e98df" kindref="member">PopupMenu()</ref> function for simple menus proposing a choice in a list of strings to the user.</para><para>Notice that to avoid unexpected conflicts between the (usually consecutive range of) ids used by the menu passed to this function and the existing EVT_UPDATE_UI() handlers, this function temporarily disables UI updates for the window, so you need to manually disable (or toggle or ...) any items which should be disabled in the menu before showing it.</para><para>The parameter <emphasis>menu</emphasis> is the menu to show. The parameter <emphasis>pos</emphasis> (or the parameters <emphasis>x</emphasis> and <emphasis>y</emphasis>) is the position at which to show the menu in client coordinates. It is recommended to not explicitly specify coordinates when calling this method in response to mouse click, because some of the ports (namely, wxGTK) can do a better job of positioning the menu in that case.</para><para><simplesect kind="return"><para>The selected menu item id or <computeroutput>wxID_NONE</computeroutput> if none selected or an error occurred.</para></simplesect>
<simplesect kind="since"><para>2.9.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2535"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a00f5cb3cac003205317a565a33d4bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxWindow::GetPopupMenuSelectionFromUser</definition>
        <argsstring>(wxMenu &amp;menu, int x, int y)</argsstring>
        <name>GetPopupMenuSelectionFromUser</name>
        <param>
          <type><ref refid="classwx_menu" kindref="compound">wxMenu</ref> &amp;</type>
          <declname>menu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2540"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a8f715d238cf74a845488b0e2645e98df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::PopupMenu</definition>
        <argsstring>(wxMenu *menu, const wxPoint &amp;pos=wxDefaultPosition)</argsstring>
        <name>PopupMenu</name>
        <param>
          <type><ref refid="classwx_menu" kindref="compound">wxMenu</ref> *</type>
          <declname>menu</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <briefdescription>
<para>Pops up the given menu at the specified coordinates, relative to this window, and returns control when the user has dismissed the menu. </para>        </briefdescription>
        <detaileddescription>
<para>If a menu item is selected, the corresponding menu event is generated and will be processed as usual. If coordinates are not specified, the current mouse cursor position is used.</para><para><emphasis>menu</emphasis> is the menu to pop up.</para><para>The position where the menu will appear can be specified either as a <ref refid="classwx_point" kindref="compound">wxPoint</ref> <emphasis>pos</emphasis> or by two integers (<emphasis>x</emphasis> and <emphasis>y</emphasis>).</para><para><simplesect kind="remark"><para>Just before the menu is popped up, <ref refid="classwx_menu_1aedd1c1536176ffec144f7e8bea85bd89" kindref="member">wxMenu::UpdateUI</ref> is called to ensure that the menu items are in the correct state. The menu does not get deleted by the window. It is recommended to not explicitly specify coordinates when calling PopupMenu in response to mouse click, because some of the ports (namely, wxGTK) can do a better job of positioning the menu in that case.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_menu" kindref="compound">wxMenu</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2566"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a834bcdfd41f5e5370ebd9ea401c92900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::PopupMenu</definition>
        <argsstring>(wxMenu *menu, int x, int y)</argsstring>
        <name>PopupMenu</name>
        <param>
          <type><ref refid="classwx_menu" kindref="compound">wxMenu</ref> *</type>
          <declname>menu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2571"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_window_1a6a332586346cb9ece4a8fe058a7b88c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_validator" kindref="compound">wxValidator</ref> *</type>
        <definition>virtual wxValidator* wxWindow::GetValidator</definition>
        <argsstring>()</argsstring>
        <name>GetValidator</name>
        <briefdescription>
<para>Validator functions. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the current validator for the window, or NULL if there is none. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2585"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a00066c70049a7be3ce6b648d206e6432" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetValidator</definition>
        <argsstring>(const wxValidator &amp;validator)</argsstring>
        <name>SetValidator</name>
        <param>
          <type>const <ref refid="classwx_validator" kindref="compound">wxValidator</ref> &amp;</type>
          <declname>validator</declname>
        </param>
        <briefdescription>
<para>Deletes the current validator (if any) and sets the window validator, having called <ref refid="classwx_validator_1a25a4e0250afe9451059fd7a967c4883f" kindref="member">wxValidator::Clone</ref> to create a new validator of this type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2591"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::TransferDataFromWindow</definition>
        <argsstring>()</argsstring>
        <name>TransferDataFromWindow</name>
        <briefdescription>
<para>Transfers values from child controls to data areas specified by their validators. </para>        </briefdescription>
        <detaileddescription>
<para>Returns false if a transfer failed.</para><para>If the window has <computeroutput>wxWS_EX_VALIDATE_RECURSIVELY</computeroutput> extra style flag set, the method will also call <ref refid="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" kindref="member">TransferDataFromWindow()</ref> of all child windows.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a88cc65e424a129d9b0057756cdb67ec9" kindref="member">TransferDataToWindow()</ref>, <ref refid="classwx_validator" kindref="compound">wxValidator</ref>, <ref refid="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" kindref="member">Validate()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2602"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a88cc65e424a129d9b0057756cdb67ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::TransferDataToWindow</definition>
        <argsstring>()</argsstring>
        <name>TransferDataToWindow</name>
        <briefdescription>
<para>Transfers values to child controls from data areas specified by their validators. </para>        </briefdescription>
        <detaileddescription>
<para>If the window has <computeroutput>wxWS_EX_VALIDATE_RECURSIVELY</computeroutput> extra style flag set, the method will also call <ref refid="classwx_window_1a88cc65e424a129d9b0057756cdb67ec9" kindref="member">TransferDataToWindow()</ref> of all child windows.</para><para><simplesect kind="return"><para>Returns false if a transfer failed.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" kindref="member">TransferDataFromWindow()</ref>, <ref refid="classwx_validator" kindref="compound">wxValidator</ref>, <ref refid="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" kindref="member">Validate()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2615"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::Validate</definition>
        <argsstring>()</argsstring>
        <name>Validate</name>
        <briefdescription>
<para>Validates the current values of the child controls using their validators. </para>        </briefdescription>
        <detaileddescription>
<para>If the window has <computeroutput>wxWS_EX_VALIDATE_RECURSIVELY</computeroutput> extra style flag set, the method will also call <ref refid="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" kindref="member">Validate()</ref> of all child windows.</para><para><simplesect kind="return"><para>Returns false if any of the validations failed.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" kindref="member">TransferDataFromWindow()</ref>, <ref refid="classwx_window_1a88cc65e424a129d9b0057756cdb67ec9" kindref="member">TransferDataToWindow()</ref>, <ref refid="classwx_validator" kindref="compound">wxValidator</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2627"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>wxWindow properties functions</header>
      <memberdef kind="function" id="classwx_window_1a4633b6ad527c921598f55af5274156f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
        <definition>wxWindowID wxWindow::GetId</definition>
        <argsstring>() const </argsstring>
        <name>GetId</name>
        <briefdescription>
<para>Returns the identifier of the window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Each window has an integer identifier. If the application has not provided one (or the default wxID_ANY) a unique identifier with a negative value will be generated.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a7f27d0faed14effa013381bdc40e1bcd" kindref="member">SetId()</ref>, <ref refid="overview_windowids" kindref="compound">Window IDs</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2646"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a87fc676546f2ab837342b2e164dd52f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxWindow::GetLabel</definition>
        <argsstring>() const </argsstring>
        <name>GetLabel</name>
        <reimplementedby refid="classwx_control_1a0c15321992cfb77595db57cd4e4aec37">GetLabel</reimplementedby>
        <reimplementedby refid="classwx_command_link_button_1a62f9b9ae4a163d4e202498edcccedea3">GetLabel</reimplementedby>
        <reimplementedby refid="classwx_button_1ab2e600e498ab8b2119a9cdc6ae93612d">GetLabel</reimplementedby>
        <briefdescription>
<para>Generic way of getting a label from any window, for identification purposes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>The interpretation of this function differs from class to class. For frames and dialogs, the value returned is the title. For buttons or static text controls, it is the button text. This function can be useful for meta-programs (such as testing tools or special-needs access programs) which need to identify windows by name. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2659"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0a624f5fad4a603d58ffe94b058d4dda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="intl_8h_1a7e30efec05ef9b40b1750ac046400c81" kindref="member">wxLayoutDirection</ref></type>
        <definition>virtual wxLayoutDirection wxWindow::GetLayoutDirection</definition>
        <argsstring>() const </argsstring>
        <name>GetLayoutDirection</name>
        <briefdescription>
<para>Returns the layout direction for this window, Note that <computeroutput>wxLayout_Default</computeroutput> is returned if layout direction is not supported. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2665"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aab1b302c4bdabd134ce8d401dbaaf990" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxWindow::GetName</definition>
        <argsstring>() const </argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns the window&apos;s name. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This name is not guaranteed to be unique; it is up to the programmer to supply an appropriate name in the window constructor or via <ref refid="classwx_window_1af80875cda5e1af98dcd7c8e712e3c800" kindref="member">SetName()</ref>.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1af80875cda5e1af98dcd7c8e712e3c800" kindref="member">SetName()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2676"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aafcccd0d5d31651484df02453c53361c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="window_8h_1a879bccd2c987fedf06030a8abcbba8ac" kindref="member">wxWindowVariant</ref></type>
        <definition>wxWindowVariant wxWindow::GetWindowVariant</definition>
        <argsstring>() const </argsstring>
        <name>GetWindowVariant</name>
        <briefdescription>
<para>Returns the value previously passed to <ref refid="classwx_window_1acd955418c336e73b3e32cadf1ca46e29" kindref="member">SetWindowVariant()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2681"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7f27d0faed14effa013381bdc40e1bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetId</definition>
        <argsstring>(wxWindowID winid)</argsstring>
        <name>SetId</name>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>winid</declname>
        </param>
        <briefdescription>
<para>Sets the identifier of the window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Each window has an integer identifier. If the application has not provided one, an identifier will be generated. Normally, the identifier should be provided on creation and should not be modified subsequently.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a4633b6ad527c921598f55af5274156f0" kindref="member">GetId()</ref>, <ref refid="overview_windowids" kindref="compound">Window IDs</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2693"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa00ffea9f53587f29ae343adde033b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetLabel</definition>
        <argsstring>(const wxString &amp;label)</argsstring>
        <name>SetLabel</name>
        <reimplementedby refid="classwx_control_1a2c2ae20554e7db5e765f163022ce09c0">SetLabel</reimplementedby>
        <reimplementedby refid="classwx_command_link_button_1abc8a21805f1a8c07734a3b781e8dd18b">SetLabel</reimplementedby>
        <reimplementedby refid="classwx_button_1ae16ea5741a8a6ef4c1d2708fef315a9a">SetLabel</reimplementedby>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Sets the window&apos;s label. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>The window label.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_window_1a87fc676546f2ab837342b2e164dd52f0" kindref="member">GetLabel()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2703"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7d494549f7fcfed44af95f8ee364c1f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetLayoutDirection</definition>
        <argsstring>(wxLayoutDirection dir)</argsstring>
        <name>SetLayoutDirection</name>
        <param>
          <type><ref refid="intl_8h_1a7e30efec05ef9b40b1750ac046400c81" kindref="member">wxLayoutDirection</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Sets the layout direction for this window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2708"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1af80875cda5e1af98dcd7c8e712e3c800" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetName</definition>
        <argsstring>(const wxString &amp;name)</argsstring>
        <name>SetName</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Sets the window&apos;s name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A name to set for the window.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_window_1aab1b302c4bdabd134ce8d401dbaaf990" kindref="member">GetName()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2718"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1acd955418c336e73b3e32cadf1ca46e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetWindowVariant</definition>
        <argsstring>(wxWindowVariant variant)</argsstring>
        <name>SetWindowVariant</name>
        <param>
          <type><ref refid="window_8h_1a879bccd2c987fedf06030a8abcbba8ac" kindref="member">wxWindowVariant</ref></type>
          <declname>variant</declname>
        </param>
        <briefdescription>
<para>This function can be called under all platforms but only does anything under Mac OS X 10.3+ currently. </para>        </briefdescription>
        <detaileddescription>
<para>Under this system, each of the standard control can exist in several sizes which correspond to the elements of wxWindowVariant enum.</para><para>By default the controls use the normal size, of course, but this function can be used to change this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2728"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aefc02d7275010ebb8d5b66569e7287c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_accelerator_table" kindref="compound">wxAcceleratorTable</ref> *</type>
        <definition>wxAcceleratorTable* wxWindow::GetAcceleratorTable</definition>
        <argsstring>()</argsstring>
        <name>GetAcceleratorTable</name>
        <briefdescription>
<para>Gets the accelerator table for this window. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_accelerator_table" kindref="compound">wxAcceleratorTable</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2733"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae0469b554e9c501b356b3ed4b6d8a3af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_accessible" kindref="compound">wxAccessible</ref> *</type>
        <definition>wxAccessible* wxWindow::GetAccessible</definition>
        <argsstring>()</argsstring>
        <name>GetAccessible</name>
        <briefdescription>
<para>Returns the accessible object for this window, if any. </para>        </briefdescription>
        <detaileddescription>
<para>See also <ref refid="classwx_accessible" kindref="compound">wxAccessible</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2739"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0af5e9aa4dee6a4e92c0700f92605642" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetAcceleratorTable</definition>
        <argsstring>(const wxAcceleratorTable &amp;accel)</argsstring>
        <name>SetAcceleratorTable</name>
        <param>
          <type>const <ref refid="classwx_accelerator_table" kindref="compound">wxAcceleratorTable</ref> &amp;</type>
          <declname>accel</declname>
        </param>
        <briefdescription>
<para>Sets the accelerator table for this window. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_accelerator_table" kindref="compound">wxAcceleratorTable</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2744"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a413220ead41f05a2ec2cfe10b3d573df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetAccessible</definition>
        <argsstring>(wxAccessible *accessible)</argsstring>
        <name>SetAccessible</name>
        <param>
          <type><ref refid="classwx_accessible" kindref="compound">wxAccessible</ref> *</type>
          <declname>accessible</declname>
        </param>
        <briefdescription>
<para>Sets the accessible for this window. </para>        </briefdescription>
        <detaileddescription>
<para>Any existing accessible for this window will be deleted first, if not identical to <emphasis>accessible</emphasis>. See also <ref refid="classwx_accessible" kindref="compound">wxAccessible</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2751"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Window deletion functions</header>
      <memberdef kind="function" id="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::Close</definition>
        <argsstring>(bool force=false)</argsstring>
        <name>Close</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This function simply generates a <ref refid="classwx_close_event" kindref="compound">wxCloseEvent</ref> whose handler usually tries to close the window. </para>        </briefdescription>
        <detaileddescription>
<para>It doesn&apos;t close the window itself, however.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>false if the window&apos;s close handler should be able to veto the destruction of this window, true if it cannot.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Close calls the close handler for the window, providing an opportunity for the window to choose whether to destroy the window. Usually it is only used with the top level windows (<ref refid="classwx_frame" kindref="compound">wxFrame</ref> and <ref refid="classwx_dialog" kindref="compound">wxDialog</ref> classes) as the others are not supposed to have any special OnClose() logic. The close handler should check whether the window is being deleted forcibly, using <ref refid="classwx_close_event_1adaa0548df45e05e8487cc5664ac352cf" kindref="member">wxCloseEvent::CanVeto</ref>, in which case it should destroy the window using <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">wxWindow::Destroy</ref>. Note that calling Close does not guarantee that the window will be destroyed; but it provides a way to simulate a manual close of a window, which may or may not be implemented by destroying the window. The default implementation of wxDialog::OnCloseWindow does not necessarily delete the dialog, since it will simply simulate an wxID_CANCEL event which is handled by the appropriate button event handler and may do anything at all. To guarantee that the window will be destroyed, call <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">wxWindow::Destroy</ref> instead</para></simplesect>
<simplesect kind="see"><para><ref refid="overview_windowdeletion" kindref="compound">Window Deletion Overview</ref>, <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">Destroy()</ref>, <ref refid="classwx_close_event" kindref="compound">wxCloseEvent</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2790"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::Destroy</definition>
        <argsstring>()</argsstring>
        <name>Destroy</name>
        <briefdescription>
<para>Destroys the window safely. </para>        </briefdescription>
        <detaileddescription>
<para>Use this function instead of the delete operator, since different window classes can be destroyed differently. Frames and dialogs are not destroyed immediately when this function is called -- they are added to a list of windows to be deleted on idle time, when all the window&apos;s events have been processed. This prevents problems with events being sent to non-existent windows.</para><para><simplesect kind="return"><para>true if the window has either been successfully deleted, or it has been added to the list of windows pending real deletion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2803"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1af918e6fe8565c2d5235973cc3de84a43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::IsBeingDeleted</definition>
        <argsstring>() const </argsstring>
        <name>IsBeingDeleted</name>
        <briefdescription>
<para>Returns true if this window is in process of being destroyed. </para>        </briefdescription>
        <detaileddescription>
<para>Top level windows are not deleted immediately but are rather scheduled for later destruction to give them time to process any pending messages; see <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">Destroy()</ref> description.</para><para>This function returns true if this window, or one of its parent windows, is scheduled for destruction and can be useful to avoid manipulating it as it&apos;s usually useless to do something with a window which is on the point of disappearing anyhow. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2817"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Drag and drop functions</header>
      <memberdef kind="function" id="classwx_window_1a4511e71affd926a47c5c320563ca2df5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_drop_target" kindref="compound">wxDropTarget</ref> *</type>
        <definition>virtual wxDropTarget* wxWindow::GetDropTarget</definition>
        <argsstring>() const </argsstring>
        <name>GetDropTarget</name>
        <briefdescription>
<para>Returns the associated drop target, which may be NULL. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1ae34b4d45433ca8287df0e47d46411e58" kindref="member">SetDropTarget()</ref>, <ref refid="overview_dnd" kindref="compound">Drag and Drop Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2833"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae34b4d45433ca8287df0e47d46411e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetDropTarget</definition>
        <argsstring>(wxDropTarget *target)</argsstring>
        <name>SetDropTarget</name>
        <param>
          <type><ref refid="classwx_drop_target" kindref="compound">wxDropTarget</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Associates a drop target with this window. </para>        </briefdescription>
        <detaileddescription>
<para>If the window already has a drop target, it is deleted.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a4511e71affd926a47c5c320563ca2df5" kindref="member">GetDropTarget()</ref>, <ref refid="overview_dnd" kindref="compound">Drag and Drop Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2841"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7e7015bc61bd79b6821d2dccaecf9eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::DragAcceptFiles</definition>
        <argsstring>(bool accept)</argsstring>
        <name>DragAcceptFiles</name>
        <param>
          <type>bool</type>
          <declname>accept</declname>
        </param>
        <briefdescription>
<para>Enables or disables eligibility for drop file events (OnDropFiles). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accept</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the window is eligible for drop file events. If false, the window will not accept drop file events.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Windows only until version 2.8.9, available on all platforms since 2.8.10. Cannot be used together with <ref refid="classwx_window_1ae34b4d45433ca8287df0e47d46411e58" kindref="member">SetDropTarget()</ref> on non-Windows platforms.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1ae34b4d45433ca8287df0e47d46411e58" kindref="member">SetDropTarget()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2856"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constraints, sizers and window layout functions</header>
      <memberdef kind="function" id="classwx_window_1ade8de9a91bb5bf49c3a52e5262a5ffea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_sizer" kindref="compound">wxSizer</ref> *</type>
        <definition>wxSizer* wxWindow::GetContainingSizer</definition>
        <argsstring>() const </argsstring>
        <name>GetContainingSizer</name>
        <briefdescription>
<para>Returns the sizer of which this window is a member, if any, otherwise NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2869"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad8284cce1a2afe57724b52a89d7fac2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_sizer" kindref="compound">wxSizer</ref> *</type>
        <definition>wxSizer* wxWindow::GetSizer</definition>
        <argsstring>() const </argsstring>
        <name>GetSizer</name>
        <briefdescription>
<para>Returns the sizer associated with the window by a previous call to <ref refid="classwx_window_1abc95691b45e29a52c24aa9d33d46dec1" kindref="member">SetSizer()</ref>, or NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2875"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1abc95691b45e29a52c24aa9d33d46dec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetSizer</definition>
        <argsstring>(wxSizer *sizer, bool deleteOld=true)</argsstring>
        <name>SetSizer</name>
        <param>
          <type><ref refid="classwx_sizer" kindref="compound">wxSizer</ref> *</type>
          <declname>sizer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deleteOld</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Sets the window to have the given layout sizer. </para>        </briefdescription>
        <detaileddescription>
<para>The window will then own the object, and will take care of its deletion. If an existing layout constraints object is already owned by the window, it will be deleted if the <emphasis>deleteOld</emphasis> parameter is true.</para><para>Note that this function will also call <ref refid="classwx_window_1ad369fe1db5c20f9d9edff7b5eb1f7226" kindref="member">SetAutoLayout()</ref> implicitly with true parameter if the <emphasis>sizer</emphasis> is non-NULL and false otherwise so that the sizer will be effectively used to layout the window children whenever it is resized.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sizer</parametername>
</parameternamelist>
<parameterdescription>
<para>The sizer to set. Pass NULL to disassociate and conditionally delete the window&apos;s sizer. See below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleteOld</parametername>
</parameternamelist>
<parameterdescription>
<para>If true (the default), this will delete any pre-existing sizer. Pass false if you wish to handle deleting the old sizer yourself but remember to do it yourself in this case to avoid memory leaks.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>SetSizer enables and disables Layout automatically. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2899"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a29938af9828fd35da666536cdfb6b73c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetSizerAndFit</definition>
        <argsstring>(wxSizer *sizer, bool deleteOld=true)</argsstring>
        <name>SetSizerAndFit</name>
        <param>
          <type><ref refid="classwx_sizer" kindref="compound">wxSizer</ref> *</type>
          <declname>sizer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deleteOld</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>This method calls <ref refid="classwx_window_1abc95691b45e29a52c24aa9d33d46dec1" kindref="member">SetSizer()</ref> and then <ref refid="classwx_sizer_1abc460cd0e2bb3bde72142fdb434bc546" kindref="member">wxSizer::SetSizeHints</ref> which sets the initial window size to the size needed to accommodate all sizer elements and sets the size hints which, if this window is a top level one, prevent the user from resizing it to be less than this minimal size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2907"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ac5664c7cd26848b5eebfaded2ecde7be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_layout_constraints" kindref="compound">wxLayoutConstraints</ref> *</type>
        <definition>wxLayoutConstraints* wxWindow::GetConstraints</definition>
        <argsstring>() const </argsstring>
        <name>GetConstraints</name>
        <briefdescription>
<para>Returns a pointer to the window&apos;s layout constraints, or NULL if there are none. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2912"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1afa75d111bbd9a68f837101a5fbed60a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetConstraints</definition>
        <argsstring>(wxLayoutConstraints *constraints)</argsstring>
        <name>SetConstraints</name>
        <param>
          <type><ref refid="classwx_layout_constraints" kindref="compound">wxLayoutConstraints</ref> *</type>
          <declname>constraints</declname>
        </param>
        <briefdescription>
<para>Sets the window to have the given layout constraints. </para>        </briefdescription>
        <detaileddescription>
<para>The window will then own the object, and will take care of its deletion. If an existing layout constraints object is already owned by the window, it will be deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para>The constraints to set. Pass NULL to disassociate and delete the window&apos;s constraints.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>You must call <ref refid="classwx_window_1ad369fe1db5c20f9d9edff7b5eb1f7226" kindref="member">SetAutoLayout()</ref> to tell a window to use the constraints automatically in OnSize; otherwise, you must override OnSize and call <ref refid="classwx_window_1a1b143c3e72bd0af533b76db4830a6113" kindref="member">Layout()</ref> explicitly. When setting both a <ref refid="classwx_layout_constraints" kindref="compound">wxLayoutConstraints</ref> and a <ref refid="classwx_sizer" kindref="compound">wxSizer</ref>, only the sizer will have effect. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2930"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a1b143c3e72bd0af533b76db4830a6113" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::Layout</definition>
        <argsstring>()</argsstring>
        <name>Layout</name>
        <reimplementedby refid="classwx_top_level_window_1adfe7e3f4a32f3ed178968f64431bbfe0">Layout</reimplementedby>
        <reimplementedby refid="classwx_panel_1a6ded9b75baf21e2c9f5496f746b68bf0">Layout</reimplementedby>
        <briefdescription>
<para>Invokes the constraint-based layout algorithm or the sizer-based algorithm for this window. </para>        </briefdescription>
        <detaileddescription>
<para>This function does not get called automatically when the window is resized because lots of windows deriving from <ref refid="classwx_window" kindref="compound">wxWindow</ref> does not need this functionality. If you want to have <ref refid="classwx_window_1a1b143c3e72bd0af533b76db4830a6113" kindref="member">Layout()</ref> called automatically, you should derive from <ref refid="classwx_panel" kindref="compound">wxPanel</ref> (see <ref refid="classwx_panel_1a6ded9b75baf21e2c9f5496f746b68bf0" kindref="member">wxPanel::Layout</ref>).</para><para><simplesect kind="see"><para><ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2943"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad369fe1db5c20f9d9edff7b5eb1f7226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetAutoLayout</definition>
        <argsstring>(bool autoLayout)</argsstring>
        <name>SetAutoLayout</name>
        <param>
          <type>bool</type>
          <declname>autoLayout</declname>
        </param>
        <briefdescription>
<para>Determines whether the <ref refid="classwx_window_1a1b143c3e72bd0af533b76db4830a6113" kindref="member">Layout()</ref> function will be called automatically when the window is resized. </para>        </briefdescription>
        <detaileddescription>
<para>This method is called implicitly by <ref refid="classwx_window_1abc95691b45e29a52c24aa9d33d46dec1" kindref="member">SetSizer()</ref> but if you use <ref refid="classwx_window_1afa75d111bbd9a68f837101a5fbed60a7" kindref="member">SetConstraints()</ref> you should call it manually or otherwise the window layout won&apos;t be correctly updated when its size changes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>autoLayout</parametername>
</parameternamelist>
<parameterdescription>
<para>Set this to true if you wish the <ref refid="classwx_window_1a1b143c3e72bd0af533b76db4830a6113" kindref="member">Layout()</ref> function to be called automatically when the window is resized.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_window_1abc95691b45e29a52c24aa9d33d46dec1" kindref="member">SetSizer()</ref>, <ref refid="classwx_window_1afa75d111bbd9a68f837101a5fbed60a7" kindref="member">SetConstraints()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2959"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad7a9d7fca325112fae493a00d253b3be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::GetAutoLayout</definition>
        <argsstring>() const </argsstring>
        <name>GetAutoLayout</name>
        <briefdescription>
<para>Returns the sizer of which this window is a member, if any, otherwise NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2961"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Mouse functions</header>
      <memberdef kind="function" id="classwx_window_1a5c72c6260a73ef77bb0b1f7ec85fcfef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::CaptureMouse</definition>
        <argsstring>()</argsstring>
        <name>CaptureMouse</name>
        <briefdescription>
<para>Directs all mouse input to this window. </para>        </briefdescription>
        <detaileddescription>
<para>Call <ref refid="classwx_window_1adcc538819c11ecb3bd3e4e5d13c5ba7a" kindref="member">ReleaseMouse()</ref> to release the capture.</para><para>Note that wxWidgets maintains the stack of windows having captured the mouse and when the mouse is released the capture returns to the window which had had captured it previously and it is only really released if there were no previous window. In particular, this means that you must release the mouse as many times as you capture it, unless the window receives the <ref refid="classwx_mouse_capture_lost_event" kindref="compound">wxMouseCaptureLostEvent</ref> event.</para><para>Any application which captures the mouse in the beginning of some operation must handle <ref refid="classwx_mouse_capture_lost_event" kindref="compound">wxMouseCaptureLostEvent</ref> and cancel this operation when it receives the event. The event handler must not recapture mouse.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1adcc538819c11ecb3bd3e4e5d13c5ba7a" kindref="member">ReleaseMouse()</ref>, <ref refid="classwx_mouse_capture_lost_event" kindref="compound">wxMouseCaptureLostEvent</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2988"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a83ed7c9d9252b912eebc753d6132245b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_caret" kindref="compound">wxCaret</ref> *</type>
        <definition>wxCaret* wxWindow::GetCaret</definition>
        <argsstring>() const </argsstring>
        <name>GetCaret</name>
        <briefdescription>
<para>Returns the caret() associated with the window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="2993"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad7ce1e9af33e6be0b608813eff2d349c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_cursor" kindref="compound">wxCursor</ref> &amp;</type>
        <definition>const wxCursor&amp; wxWindow::GetCursor</definition>
        <argsstring>() const </argsstring>
        <name>GetCursor</name>
        <briefdescription>
<para>Return the cursor associated with this window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1ad83f9c51c6f31e0e05f598b47a19ed98" kindref="member">SetCursor()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3000"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a9b44f61543b77317f9820e06856c5514" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::HasCapture</definition>
        <argsstring>() const </argsstring>
        <name>HasCapture</name>
        <briefdescription>
<para>Returns true if this window has the current mouse capture. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a5c72c6260a73ef77bb0b1f7ec85fcfef" kindref="member">CaptureMouse()</ref>, <ref refid="classwx_window_1adcc538819c11ecb3bd3e4e5d13c5ba7a" kindref="member">ReleaseMouse()</ref>, <ref refid="classwx_mouse_capture_lost_event" kindref="compound">wxMouseCaptureLostEvent</ref>, <ref refid="classwx_mouse_capture_changed_event" kindref="compound">wxMouseCaptureChangedEvent</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3008"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1adcc538819c11ecb3bd3e4e5d13c5ba7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::ReleaseMouse</definition>
        <argsstring>()</argsstring>
        <name>ReleaseMouse</name>
        <briefdescription>
<para>Releases mouse input captured with <ref refid="classwx_window_1a5c72c6260a73ef77bb0b1f7ec85fcfef" kindref="member">CaptureMouse()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a5c72c6260a73ef77bb0b1f7ec85fcfef" kindref="member">CaptureMouse()</ref>, <ref refid="classwx_window_1a9b44f61543b77317f9820e06856c5514" kindref="member">HasCapture()</ref>, <ref refid="classwx_window_1adcc538819c11ecb3bd3e4e5d13c5ba7a" kindref="member">ReleaseMouse()</ref>, <ref refid="classwx_mouse_capture_lost_event" kindref="compound">wxMouseCaptureLostEvent</ref>, <ref refid="classwx_mouse_capture_changed_event" kindref="compound">wxMouseCaptureChangedEvent</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3016"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1acfef5e1cada92c73e2937b84ff57ff57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetCaret</definition>
        <argsstring>(wxCaret *caret)</argsstring>
        <name>SetCaret</name>
        <param>
          <type><ref refid="classwx_caret" kindref="compound">wxCaret</ref> *</type>
          <declname>caret</declname>
        </param>
        <briefdescription>
<para>Sets the caret() associated with the window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3021"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad83f9c51c6f31e0e05f598b47a19ed98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::SetCursor</definition>
        <argsstring>(const wxCursor &amp;cursor)</argsstring>
        <name>SetCursor</name>
        <param>
          <type>const <ref refid="classwx_cursor" kindref="compound">wxCursor</ref> &amp;</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
<para>Sets the window&apos;s cursor. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that the window cursor also sets it for the children of the window implicitly.</para><para>The <emphasis>cursor</emphasis> may be <computeroutput>wxNullCursor</computeroutput> in which case the window cursor will be reset back to default.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cursor</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the cursor that the window should normally display.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__group__funcmacro__gdi_1ga04d90db090918ad96448b5603d89617b" kindref="member">wxSetCursor</ref>, <ref refid="classwx_cursor" kindref="compound">wxCursor</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3035"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ac500152d1eca3a2ee98a68e7ea7372b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::WarpPointer</definition>
        <argsstring>(int x, int y)</argsstring>
        <name>WarpPointer</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Moves the pointer to the given position on the window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Apple Human Interface Guidelines forbid moving the mouse cursor programmatically so you should avoid using this function in Mac applications (and probably avoid using it under the other platforms without good reason as well).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The new x position for the cursor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The new y position for the cursor. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3050"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous functions</header>
      <memberdef kind="function" id="classwx_window_1a6a026b2a16a9f050deddd44e5586762c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a9b85a92dd590efbbe1248e0a9fc90024" kindref="member">wxHitTest</ref></type>
        <definition>wxHitTest wxWindow::HitTest</definition>
        <argsstring>(wxCoord x, wxCoord y) const </argsstring>
        <name>HitTest</name>
        <reimplementedby refid="classwx_list_box_1adce64db0563bc9bd035c936082ee8d3d">HitTest</reimplementedby>
        <param>
          <type><ref refid="defs_8h_1a11f6efc0e8d8d680f3ec8e82aa4f1770" kindref="member">wxCoord</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1a11f6efc0e8d8d680f3ec8e82aa4f1770" kindref="member">wxCoord</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Get the window border style from the given flags: this is different from simply doing flags &amp; wxBORDER_MASK because it uses GetDefaultBorder() to translate wxBORDER_DEFAULT to something reasonable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3062"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a44f4d85f42fac6090a42cafd40f24ff5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a9b85a92dd590efbbe1248e0a9fc90024" kindref="member">wxHitTest</ref></type>
        <definition>wxHitTest wxWindow::HitTest</definition>
        <argsstring>(const wxPoint &amp;pt) const </argsstring>
        <name>HitTest</name>
        <reimplementedby refid="classwx_property_grid_1af20ff1e30938a1e0424ade4bf3905989">HitTest</reimplementedby>
        <reimplementedby refid="classwx_list_box_1aaa4fd0b7738f7778d5e019406037ccdc">HitTest</reimplementedby>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Get the window border style from the given flags: this is different from simply doing flags &amp; wxBORDER_MASK because it uses GetDefaultBorder() to translate wxBORDER_DEFAULT to something reasonable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3063"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad95a95e683e57ac6365745b737571582" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1af63c94dff4e3f25a3c5e9d2874456edf" kindref="member">wxBorder</ref></type>
        <definition>wxBorder wxWindow::GetBorder</definition>
        <argsstring>(long flags) const </argsstring>
        <name>GetBorder</name>
        <param>
          <type>long</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Get the window border style from the given flags: this is different from simply doing flags &amp; wxBORDER_MASK because it uses GetDefaultBorder() to translate wxBORDER_DEFAULT to something reasonable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3070"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa53c8d1b5af17a8fbbe8845210e2032b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1af63c94dff4e3f25a3c5e9d2874456edf" kindref="member">wxBorder</ref></type>
        <definition>wxBorder wxWindow::GetBorder</definition>
        <argsstring>() const </argsstring>
        <name>GetBorder</name>
        <briefdescription>
<para>Get border for the flags of this window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3075"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae8a84a80645e99f4d24a22e5c386f626" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::DoUpdateWindowUI</definition>
        <argsstring>(wxUpdateUIEvent &amp;event)</argsstring>
        <name>DoUpdateWindowUI</name>
        <param>
          <type><ref refid="classwx_update_u_i_event" kindref="compound">wxUpdateUIEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Does the window-specific updating after processing the update event. </para>        </briefdescription>
        <detaileddescription>
<para>This function is called by <ref refid="classwx_window_1adf0a4987728bd0bf69f922641b3efbfc" kindref="member">UpdateWindowUI()</ref> in order to check return values in the <ref refid="classwx_update_u_i_event" kindref="compound">wxUpdateUIEvent</ref> and act appropriately. For example, to allow frame and dialog title updating, wxWidgets implements this function as follows:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>window-specific<sp/>processing<sp/>after<sp/>processing<sp/>the<sp/>update<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classwx_window_1ae8a84a80645e99f4d24a22e5c386f626" kindref="member" tooltip="Does the window-specific updating after processing the update event.">wxTopLevelWindowBase::DoUpdateWindowUI</ref>(<ref refid="classwx_update_u_i_event" kindref="compound" tooltip="This class is used for pseudo-events which are called by wxWidgets to give an application the chance ...">wxUpdateUIEvent</ref>&amp;<sp/>event)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>event.<ref refid="classwx_update_u_i_event_1ac61d7606adecfe42790e199180572bf5" kindref="member" tooltip="Returns true if the application has called Enable().">GetSetEnabled</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1a4e933aa891f42fbb3b87438057c573af" kindref="member" tooltip="Enable or disable the window for user input.">Enable</ref>(event.<ref refid="classwx_update_u_i_event_1a25d9c2e56638b3a5da39006f62f9467b" kindref="member" tooltip="Returns true if the UI element should be enabled.">GetEnabled</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>event.<ref refid="classwx_update_u_i_event_1a8212fb8f73b47cd5f99d8f7106de6661" kindref="member" tooltip="Returns true if the application has called SetText().">GetSetText</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>event.<ref refid="classwx_update_u_i_event_1ab0aeaf65ea4fcae740afc061395d6fcd" kindref="member" tooltip="Returns the text that should be set for the UI element.">GetText</ref>()<sp/>!=<sp/>GetTitle()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetTitle(event.<ref refid="classwx_update_u_i_event_1ab0aeaf65ea4fcae740afc061395d6fcd" kindref="member" tooltip="Returns the text that should be set for the UI element.">GetText</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3100"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a185e6cd7065367b552748cb722651b27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>WXWidget</type>
        <definition>virtual WXWidget wxWindow::GetHandle</definition>
        <argsstring>() const </argsstring>
        <name>GetHandle</name>
        <briefdescription>
<para>Returns the platform-specific handle of the physical window. </para>        </briefdescription>
        <detaileddescription>
<para>Cast it to an appropriate handle, such as <bold>HWND</bold> for Windows, <bold>Widget</bold> for Motif or <bold>GtkWidget</bold> for GTK.</para><para><bold>wxPerl Note:</bold> This method will return an integer in wxPerl. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3111"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1abe1522483478b1f777ad8ef34fa7c44a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::HasMultiplePages</definition>
        <argsstring>() const </argsstring>
        <name>HasMultiplePages</name>
        <briefdescription>
<para>This method should be overridden to return true if this window has multiple pages. </para>        </briefdescription>
        <detaileddescription>
<para>All standard class with multiple pages such as <ref refid="classwx_notebook" kindref="compound">wxNotebook</ref>, <ref refid="classwx_listbook" kindref="compound">wxListbook</ref> and <ref refid="classwx_treebook" kindref="compound">wxTreebook</ref> already override it to return true and user-defined classes with similar behaviour should also do so, to allow the library to handle such windows appropriately. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3120"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::InheritAttributes</definition>
        <argsstring>()</argsstring>
        <name>InheritAttributes</name>
        <briefdescription>
<para>This function is (or should be, in case of custom controls) called during window creation to intelligently set up the window visual attributes, that is the font and the foreground and background colours. </para>        </briefdescription>
        <detaileddescription>
<para>By &quot;intelligently&quot; the following is meant: by default, all windows use their own <ref refid="classwx_window_1a170d85e4aa0cbacbfcdd0728120e1417" kindref="member">GetClassDefaultAttributes()</ref> default attributes. However if some of the parents attributes are explicitly (that is, using <ref refid="classwx_window_1a9ab11e7da57a1d08918aa75fc33f6ad3" kindref="member">SetFont()</ref> and not <ref refid="classwx_window_1a89a4f62f23c1e7c845b8d07cecae4c43" kindref="member">wxWindow::SetOwnFont</ref>) changed and if the corresponding attribute hadn&apos;t been explicitly set for this window itself, then this window takes the same value as used by the parent. In addition, if the window overrides <ref refid="classwx_window_1a0c43a27fa04f9c17cc28fde71fdba490" kindref="member">ShouldInheritColours()</ref> to return false, the colours will not be changed no matter what and only the font might.</para><para>This rather complicated logic is necessary in order to accommodate the different usage scenarios. The most common one is when all default attributes are used and in this case, nothing should be inherited as in modern GUIs different controls use different fonts (and colours) than their siblings so they can&apos;t inherit the same value from the parent. However it was also deemed desirable to allow to simply change the attributes of all children at once by just changing the font or colour of their common parent, hence in this case we do inherit the parents attributes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3145"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1aa90a260c0a835a133043460b7d0024a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::InitDialog</definition>
        <argsstring>()</argsstring>
        <name>InitDialog</name>
        <reimplementedby refid="classwx_panel_1ab632da62e9cc8969bb25c628a2b8bdee">InitDialog</reimplementedby>
        <briefdescription>
<para>Sends an <computeroutput>wxEVT_INIT_DIALOG</computeroutput> event, whose handler usually transfers data to the dialog via validators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3151"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a9d1be1bbb625ebf87ad4ad47e49a0194" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::IsDoubleBuffered</definition>
        <argsstring>() const </argsstring>
        <name>IsDoubleBuffered</name>
        <briefdescription>
<para>Returns true if the window contents is double-buffered by the system, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>if any drawing done on the window is really done on a temporary backing surface and transferred to the screen all at once later.</para><para><simplesect kind="see"><para><ref refid="classwx_buffered_d_c" kindref="compound">wxBufferedDC</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3160"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a5477a89c17fdcc3ec6c90274796eb1c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SetDoubleBuffered</definition>
        <argsstring>(bool on)</argsstring>
        <name>SetDoubleBuffered</name>
        <param>
          <type>bool</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Turn on or off double buffering of the window if the system supports it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3165"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae9b31dec54256b68574a4bba8cca94ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::IsRetained</definition>
        <argsstring>() const </argsstring>
        <name>IsRetained</name>
        <briefdescription>
<para>Returns true if the window is retained, false otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Retained windows are only available on X platforms. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3172"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a657ef8b6055eb06df894ac5e6ddfecf8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::IsThisEnabled</definition>
        <argsstring>() const </argsstring>
        <name>IsThisEnabled</name>
        <briefdescription>
<para>Returns true if this window is intrinsically enabled, false otherwise, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>if <ref refid="classwx_window_1a4e933aa891f42fbb3b87438057c573af" kindref="member">Enable()</ref> Enable(false) had been called. This method is mostly used for wxWidgets itself, user code should normally use <ref refid="classwx_window_1a59452a5bd42f5ea4b31d7fc4aa59644f" kindref="member">IsEnabled()</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3180"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0002826ad05f2a5661b4c8995713f37f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::IsTopLevel</definition>
        <argsstring>() const </argsstring>
        <name>IsTopLevel</name>
        <briefdescription>
<para>Returns true if the given window is a top-level one. </para>        </briefdescription>
        <detaileddescription>
<para>Currently all frames and dialogs are considered to be top-level windows (even if they have a parent window). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3187"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a6b5654c0c6c6245d592c279521f7099c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::OnInternalIdle</definition>
        <argsstring>()</argsstring>
        <name>OnInternalIdle</name>
        <briefdescription>
<para>This virtual function is normally only used internally, but sometimes an application may need it to implement functionality that should not be disabled by an application defining an OnIdle handler in a derived class. </para>        </briefdescription>
        <detaileddescription>
<para>This function may be used to do delayed painting, for example, and most implementations call <ref refid="classwx_window_1adf0a4987728bd0bf69f922641b3efbfc" kindref="member">UpdateWindowUI()</ref> in order to send update events to the window in idle time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3200"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a53ca57872dac5851ea6ba55a494b899b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::RegisterHotKey</definition>
        <argsstring>(int hotkeyId, int modifiers, int virtualKeyCode)</argsstring>
        <name>RegisterHotKey</name>
        <param>
          <type>int</type>
          <declname>hotkeyId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>virtualKeyCode</declname>
        </param>
        <briefdescription>
<para>Registers a system wide hotkey. </para>        </briefdescription>
        <detaileddescription>
<para>Every time the user presses the hotkey registered here, this window will receive a hotkey event.</para><para>It will receive the event even if the application is in the background and does not have the input focus because the user is working with some other application.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hotkeyId</parametername>
</parameternamelist>
<parameterdescription>
<para>Numeric identifier of the hotkey. For applications this must be between 0 and 0xBFFF. If this function is called from a shared DLL, it must be a system wide unique identifier between 0xC000 and 0xFFFF. This is a MSW specific detail. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitwise combination of wxMOD_SHIFT, wxMOD_CONTROL, wxMOD_ALT or wxMOD_WIN specifying the modifier keys that have to be pressed along with the key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virtualKeyCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The virtual key code of the hotkey.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the hotkey was registered successfully. false if some other application already registered a hotkey with this modifier/virtualKeyCode combination.</para></simplesect>
<simplesect kind="remark"><para>Use EVT_HOTKEY(hotkeyId, fnc) in the event table to capture the event. This function is currently only implemented under Windows. It is used in the Windows CE port for detecting hardware button presses.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a695f60d65f8f6c12e3c3645ad9c0c35b" kindref="member">UnregisterHotKey()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3234"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a695f60d65f8f6c12e3c3645ad9c0c35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::UnregisterHotKey</definition>
        <argsstring>(int hotkeyId)</argsstring>
        <name>UnregisterHotKey</name>
        <param>
          <type>int</type>
          <declname>hotkeyId</declname>
        </param>
        <briefdescription>
<para>Unregisters a system wide hotkey. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hotkeyId</parametername>
</parameternamelist>
<parameterdescription>
<para>Numeric identifier of the hotkey. Must be the same id that was passed to <ref refid="classwx_window_1a53ca57872dac5851ea6ba55a494b899b" kindref="member">RegisterHotKey()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the hotkey was unregistered successfully, false if the id was invalid.</para></simplesect>
<simplesect kind="remark"><para>This function is currently only implemented under MSW.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a53ca57872dac5851ea6ba55a494b899b" kindref="member">RegisterHotKey()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3250"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1adf0a4987728bd0bf69f922641b3efbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::UpdateWindowUI</definition>
        <argsstring>(long flags=wxUPDATE_UI_NONE)</argsstring>
        <name>UpdateWindowUI</name>
        <param>
          <type>long</type>
          <declname>flags</declname>
          <defval>wxUPDATE_UI_NONE</defval>
        </param>
        <briefdescription>
<para>This function sends one or more <ref refid="classwx_update_u_i_event" kindref="compound">wxUpdateUIEvent</ref> to the window. </para>        </briefdescription>
        <detaileddescription>
<para>The particular implementation depends on the window; for example a <ref refid="classwx_tool_bar" kindref="compound">wxToolBar</ref> will send an update UI event for each toolbar button, and a <ref refid="classwx_frame" kindref="compound">wxFrame</ref> will send an update UI event for each menubar menu item.</para><para>You can call this function from your application to ensure that your UI is up-to-date at this point (as far as your <ref refid="classwx_update_u_i_event" kindref="compound">wxUpdateUIEvent</ref> handlers are concerned). This may be necessary if you have called <ref refid="classwx_update_u_i_event_1ab3a94b31cf5c72ae84ffa8b7cc1777e7" kindref="member">wxUpdateUIEvent::SetMode()</ref> or <ref refid="classwx_update_u_i_event_1a24daac56f682b866baac592e761ccede" kindref="member">wxUpdateUIEvent::SetUpdateInterval()</ref> to limit the overhead that wxWidgets incurs by sending update UI events in idle time. <emphasis>flags</emphasis> should be a bitlist of one or more of the <ref refid="defs_8h_1a125d733e58da75b9609114a226e4d81c" kindref="member">wxUpdateUI</ref> enumeration.</para><para>If you are calling this function from an OnInternalIdle or OnIdle function, make sure you pass the wxUPDATE_UI_FROMIDLE flag, since this tells the window to only update the UI elements that need to be updated in idle time. Some windows update their elements only when necessary, for example when a menu is about to be shown. The following is an example of how to call UpdateWindowUI from an idle function.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classwx_window_1a6b5654c0c6c6245d592c279521f7099c" kindref="member" tooltip="This virtual function is normally only used internally, but sometimes an application may need it to i...">MyWindow::OnInternalIdle</ref>()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classwx_update_u_i_event_1a82d4a0dd8adea9d37d4b04cebe190d5f" kindref="member" tooltip="Returns true if it is appropriate to update (send UI update events to) this window.">wxUpdateUIEvent::CanUpdate</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_window_1adf0a4987728bd0bf69f922641b3efbfc" kindref="member" tooltip="This function sends one or more wxUpdateUIEvent to the window.">UpdateWindowUI</ref>(<ref refid="defs_8h_1a125d733e58da75b9609114a226e4d81ca666eed0046e7a96070b43e2619fecf75" kindref="member" tooltip="Invoked from On(Internal)Idle.">wxUPDATE_UI_FROMIDLE</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="classwx_update_u_i_event" kindref="compound">wxUpdateUIEvent</ref>, <ref refid="classwx_window_1ae8a84a80645e99f4d24a22e5c386f626" kindref="member">DoUpdateWindowUI()</ref>, <ref refid="classwx_window_1a6b5654c0c6c6245d592c279521f7099c" kindref="member">OnInternalIdle()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3283"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous static functions</header>
      <memberdef kind="function" id="classwx_window_1a170d85e4aa0cbacbfcdd0728120e1417" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwx_visual_attributes" kindref="compound">wxVisualAttributes</ref></type>
        <definition>static wxVisualAttributes wxWindow::GetClassDefaultAttributes</definition>
        <argsstring>(wxWindowVariant variant=wxWINDOW_VARIANT_NORMAL)</argsstring>
        <name>GetClassDefaultAttributes</name>
        <param>
          <type><ref refid="window_8h_1a879bccd2c987fedf06030a8abcbba8ac" kindref="member">wxWindowVariant</ref></type>
          <declname>variant</declname>
          <defval>wxWINDOW_VARIANT_NORMAL</defval>
        </param>
        <briefdescription>
<para>Returns the default font and colours which are used by the control. </para>        </briefdescription>
        <detaileddescription>
<para>This is useful if you want to use the same font or colour in your own control as in a standard control -- which is a much better idea than hard coding specific colours or fonts which might look completely out of place on the users system, especially if it uses themes.</para><para>The <emphasis>variant</emphasis> parameter is only relevant under Mac currently and is ignore under other platforms. Under Mac, it will change the size of the returned font. See <ref refid="classwx_window_1acd955418c336e73b3e32cadf1ca46e29" kindref="member">SetWindowVariant()</ref> for more about this.</para><para>This static method is &quot;overridden&quot; in many derived classes and so calling, for example, <ref refid="classwx_window_1a170d85e4aa0cbacbfcdd0728120e1417" kindref="member">wxButton::GetClassDefaultAttributes()</ref> will typically return the values appropriate for a button which will be normally different from those returned by, say, <ref refid="classwx_window_1a170d85e4aa0cbacbfcdd0728120e1417" kindref="member">wxListCtrl::GetClassDefaultAttributes()</ref>.</para><para>The <computeroutput><ref refid="structwx_visual_attributes" kindref="compound">wxVisualAttributes</ref></computeroutput> structure has at least the fields <computeroutput>font</computeroutput>, <computeroutput>colFg</computeroutput> and <computeroutput>colBg</computeroutput>. All of them may be invalid if it was not possible to determine the default control appearance or, especially for the background colour, if the field doesn&apos;t make sense as is the case for <computeroutput>colBg</computeroutput> for the controls with themed background.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" kindref="member">InheritAttributes()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3321"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a777258379a3eef1b0530f12db6b77cab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>static wxWindow* wxWindow::FindFocus</definition>
        <argsstring>()</argsstring>
        <name>FindFocus</name>
        <briefdescription>
<para>Finds the window or control which currently has the keyboard focus. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Note that this is a static function, so it can be called without needing a <ref refid="classwx_window" kindref="compound">wxWindow</ref> pointer.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1a697f9f8d3ff389790f1c74b59bcb1d75" kindref="member">SetFocus()</ref>, <ref refid="classwx_window_1a4e0abff99d64d2a595ee0ab4b415bbd6" kindref="member">HasFocus()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3331"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a101201b12ccd5fba49fa06ed19b5c6fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>static wxWindow* wxWindow::FindWindowById</definition>
        <argsstring>(long id, const wxWindow *parent=0)</argsstring>
        <name>FindWindowById</name>
        <param>
          <type>long</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Find the first window with the given <emphasis>id</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>parent</emphasis> is NULL, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy. The search is recursive in both cases.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a3468ef382c612b5f8e91c7c18d00a69f" kindref="member">FindWindow()</ref></para></simplesect>
<simplesect kind="return"><para>Window with the given <emphasis>id</emphasis> or NULL if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3345"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ab8eb148fffae109e0fac86e88d569670" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>static wxWindow* wxWindow::FindWindowByLabel</definition>
        <argsstring>(const wxString &amp;label, const wxWindow *parent=0)</argsstring>
        <name>FindWindowByLabel</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Find a window by its label. </para>        </briefdescription>
        <detaileddescription>
<para>Depending on the type of window, the label may be a window title or panel item label. If <emphasis>parent</emphasis> is NULL, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy. The search is recursive in both cases.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a3468ef382c612b5f8e91c7c18d00a69f" kindref="member">FindWindow()</ref></para></simplesect>
<simplesect kind="return"><para>Window with the given <emphasis>label</emphasis> or NULL if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3361"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1adbe4eea02f615313c12a2c00557a44c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>static wxWindow* wxWindow::FindWindowByName</definition>
        <argsstring>(const wxString &amp;name, const wxWindow *parent=0)</argsstring>
        <name>FindWindowByName</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Find a window by its name (as given in a window constructor or <ref refid="classwx_window_1a95b7ca8faa033f5ab35458887c07bf38" kindref="member">Create()</ref> function call). </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>parent</emphasis> is NULL, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy.</para><para>The search is recursive in both cases. If no window with such name is found, <ref refid="classwx_window_1ab8eb148fffae109e0fac86e88d569670" kindref="member">FindWindowByLabel()</ref> is called.</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a3468ef382c612b5f8e91c7c18d00a69f" kindref="member">FindWindow()</ref></para></simplesect>
<simplesect kind="return"><para>Window with the given <emphasis>name</emphasis> or NULL if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3379"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a483d3f73925bd38c3964dad058672f0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>static wxWindow* wxWindow::GetCapture</definition>
        <argsstring>()</argsstring>
        <name>GetCapture</name>
        <briefdescription>
<para>Returns the currently captured window. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_window_1a9b44f61543b77317f9820e06856c5514" kindref="member">HasCapture()</ref>, <ref refid="classwx_window_1a5c72c6260a73ef77bb0b1f7ec85fcfef" kindref="member">CaptureMouse()</ref>, <ref refid="classwx_window_1adcc538819c11ecb3bd3e4e5d13c5ba7a" kindref="member">ReleaseMouse()</ref>, <ref refid="classwx_mouse_capture_lost_event" kindref="compound">wxMouseCaptureLostEvent</ref>, <ref refid="classwx_mouse_capture_changed_event" kindref="compound">wxMouseCaptureChangedEvent</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3387"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a8175da594e6045635a1d1cfe775cdddb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
        <definition>static wxWindowID wxWindow::NewControlId</definition>
        <argsstring>(int count=1)</argsstring>
        <name>NewControlId</name>
        <param>
          <type>int</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Create a new ID or range of IDs that are not currently in use. </para>        </briefdescription>
        <detaileddescription>
<para>The IDs will be reserved until assigned to a <ref refid="classwx_window" kindref="compound">wxWindow</ref> ID or unreserved with <ref refid="classwx_window_1ad9bc342d1e38d221e37f0f6396950c8c" kindref="member">UnreserveControlId()</ref>.</para><para>See <ref refid="overview_windowids" kindref="compound">Window IDs</ref> for more information.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sequential IDs to reserve.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the ID or the first ID of the range (i.e. the most negative), or wxID_NONE if the specified number of identifiers couldn&apos;t be allocated.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_window_1ad9bc342d1e38d221e37f0f6396950c8c" kindref="member">UnreserveControlId()</ref>, <ref refid="classwx_id_manager" kindref="compound">wxIdManager</ref>, <ref refid="overview_windowids" kindref="compound">Window IDs</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3405"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ad9bc342d1e38d221e37f0f6396950c8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxWindow::UnreserveControlId</definition>
        <argsstring>(wxWindowID id, int count=1)</argsstring>
        <name>UnreserveControlId</name>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Unreserve an ID or range of IDs that was reserved by <ref refid="classwx_window_1a8175da594e6045635a1d1cfe775cdddb" kindref="member">NewControlId()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="overview_windowids" kindref="compound">Window IDs</ref> for more information.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting ID of the range of IDs to unreserve. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sequential IDs to unreserve.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_window_1a8175da594e6045635a1d1cfe775cdddb" kindref="member">NewControlId()</ref>, <ref refid="classwx_id_manager" kindref="compound">wxIdManager</ref>, <ref refid="overview_windowids" kindref="compound">Window IDs</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3418"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_window_1a0f9814efc50316b4c57b7ec2bf78b716" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::SafelyProcessEvent</definition>
        <argsstring>(wxEvent &amp;event)</argsstring>
        <name>SafelyProcessEvent</name>
        <reimplements refid="classwx_evt_handler_1a8205cb1a5a00d8b550b3ead22266b16b">SafelyProcessEvent</reimplements>
        <param>
          <type><ref refid="classwx_event" kindref="compound">wxEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>See <ref refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" kindref="member">ProcessEvent()</ref> for more info about why you shouldn&apos;t use this function and the reason for making this function protected in <ref refid="classwx_window" kindref="compound">wxWindow</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3501"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a69e450f21b0d7013269ec1a4771f043b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::QueueEvent</definition>
        <argsstring>(wxEvent *event)</argsstring>
        <name>QueueEvent</name>
        <reimplements refid="classwx_evt_handler_1acffd03bf407a856166ea71ef0318b59a">QueueEvent</reimplements>
        <param>
          <type><ref refid="classwx_event" kindref="compound">wxEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>See <ref refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" kindref="member">ProcessEvent()</ref> for more info about why you shouldn&apos;t use this function and the reason for making this function protected in <ref refid="classwx_window" kindref="compound">wxWindow</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3502"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a774b5b5548a6258727b5e2099e63ae9a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::AddPendingEvent</definition>
        <argsstring>(const wxEvent &amp;event)</argsstring>
        <name>AddPendingEvent</name>
        <reimplements refid="classwx_evt_handler_1a0737c6d2cbcd5ded4b1ecdd53ed0def3">AddPendingEvent</reimplements>
        <param>
          <type>const <ref refid="classwx_event" kindref="compound">wxEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>See <ref refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" kindref="member">ProcessEvent()</ref> for more info about why you shouldn&apos;t use this function and the reason for making this function protected in <ref refid="classwx_window" kindref="compound">wxWindow</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3503"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7cbee38944dab02d753a4dba74230443" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::ProcessPendingEvents</definition>
        <argsstring>()</argsstring>
        <name>ProcessPendingEvents</name>
        <reimplements refid="classwx_evt_handler_1a6f643dbdcf8e914ae1c8b70dd305e6f2">ProcessPendingEvents</reimplements>
        <briefdescription>
<para>See <ref refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" kindref="member">ProcessEvent()</ref> for more info about why you shouldn&apos;t use this function and the reason for making this function protected in <ref refid="classwx_window" kindref="compound">wxWindow</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3504"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a9350b3a9c2e380707eaea92cedad12a5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::ProcessThreadEvent</definition>
        <argsstring>(const wxEvent &amp;event)</argsstring>
        <name>ProcessThreadEvent</name>
        <param>
          <type>const <ref refid="classwx_event" kindref="compound">wxEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>See <ref refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" kindref="member">ProcessEvent()</ref> for more info about why you shouldn&apos;t use this function and the reason for making this function protected in <ref refid="classwx_window" kindref="compound">wxWindow</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3505"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_window_1a695200a4915b934926dcf32afa44544c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxWindow::wxWindow</definition>
        <argsstring>()</argsstring>
        <name>wxWindow</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="281"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7799009b10d1765d1bbb6db4994f922e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxWindow::wxWindow</definition>
        <argsstring>(wxWindow *parent, wxWindowID id, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=0, const wxString &amp;name=wxPanelNameStr)</argsstring>
        <name>wxWindow</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>wxPanelNameStr</defval>
        </param>
        <briefdescription>
<para>Constructs a window, which can be a child of a frame, dialog or any other non-control window. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a parent window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Window identifier. If wxID_ANY, will automatically create an identifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Window position. wxDefaultPosition indicates that wxWidgets should generate a default position for the window. If using the <ref refid="classwx_window" kindref="compound">wxWindow</ref> class directly, supply an actual position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size. wxDefaultSize indicates that wxWidgets should generate a default size for the window. If no suitable size can be found, the window will be sized to 20x20 pixels so that the window is visible but obviously not correctly sized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>Window style. For generic window styles, please see <ref refid="classwx_window" kindref="compound">wxWindow</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Window name. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="309"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a0c2a46181a89c349327f0b276f5ef8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxWindow::~wxWindow</definition>
        <argsstring>()</argsstring>
        <name>~wxWindow</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Deletes all sub-windows, then deletes itself. Instead of using the <bold>delete</bold> operator explicitly, you should normally use <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">Destroy()</ref> so that wxWidgets can delete a window only when it is safe to do so, in idle time.</para><para><simplesect kind="see"><para><ref refid="overview_windowdeletion" kindref="compound">Window Deletion Overview</ref>, <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">Destroy()</ref>, <ref refid="classwx_close_event" kindref="compound">wxCloseEvent</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="321"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a95b7ca8faa033f5ab35458887c07bf38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxWindow::Create</definition>
        <argsstring>(wxWindow *parent, wxWindowID id, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=0, const wxString &amp;name=wxPanelNameStr)</argsstring>
        <name>Create</name>
        <reimplementedby refid="classwx_h_v_scrolled_window_1ae14453b61a87766376e8c64653c90ed6">Create</reimplementedby>
        <reimplementedby refid="classwx_h_scrolled_window_1a5982d08464fabd3b47543d298b710224">Create</reimplementedby>
        <reimplementedby refid="classwx_v_scrolled_window_1ac6e7a6ace37133efb091b1bf69d09a90">Create</reimplementedby>
        <reimplementedby refid="classwx_v_list_box_1ab04914d5db45af7c3c032e19fa2b2615">Create</reimplementedby>
        <reimplementedby refid="classwx_tree_list_ctrl_1aca79c6e9b0f49eac98450d8104de8c95">Create</reimplementedby>
        <reimplementedby refid="classwx_treebook_1ac6ff8c68c20d71c2c7d4b96bbe7714ce">Create</reimplementedby>
        <reimplementedby refid="classwx_styled_text_ctrl_1ac9fec1a8bb67fcb8d89751db19583e92">Create</reimplementedby>
        <reimplementedby refid="classwx_static_line_1ac2e6c54b896563e2ff87da22a4361161">Create</reimplementedby>
        <reimplementedby refid="classwx_splitter_window_1a40bd4e468a9c71a837e8de40b4c983db">Create</reimplementedby>
        <reimplementedby refid="classwx_spin_button_1a49a34a60952c5f9319da9379887ca10e">Create</reimplementedby>
        <reimplementedby refid="classwx_property_grid_1a4d40c2c871fbef07cdabf66a91d9ea40">Create</reimplementedby>
        <reimplementedby refid="classwx_property_grid_manager_1ac5197b6834f4dfe5d5864c4af4a06be1">Create</reimplementedby>
        <reimplementedby refid="classwx_panel_1a3ff58c601a52262e03abf84d3896ff2f">Create</reimplementedby>
        <reimplementedby refid="classwx_notebook_1a6ba4f58ec00e3c192bcb856b1244b09f">Create</reimplementedby>
        <reimplementedby refid="classwx_sash_layout_window_1a01ab3e617deb3a4ca348b2bfcd0ab26e">Create</reimplementedby>
        <reimplementedby refid="classwx_html_list_box_1a27e85801bbec57a6d130b214fa5004f7">Create</reimplementedby>
        <reimplementedby refid="classwx_header_ctrl_1a1f8ff3be92e0fb2bd59e25642447c2d5">Create</reimplementedby>
        <reimplementedby refid="classwx_book_ctrl_base_1ad61f7fc3c1fbccbcb119e1dea3fdc4a6">Create</reimplementedby>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>wxPanelNameStr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="329"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classwx_window_1a2d10b472a4962d1c852c83d55252c44b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::DoCentre</definition>
        <argsstring>(int direction)</argsstring>
        <name>DoCentre</name>
        <param>
          <type>int</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Centres the window. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the direction for the centring. May be wxHORIZONTAL, wxVERTICAL or wxBOTH. It may also include the wxCENTRE_ON_SCREEN flag.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>This function is not meant to be called directly by user code, but via Centre, Center, CentreOnParent, or CenterOnParent. This function can be overridden to fine-tune centring behaviour. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3438"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a01e7604ab0f0b2b1a8e322a630a4669e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxWindow::DoGetBestSize</definition>
        <argsstring>() const </argsstring>
        <name>DoGetBestSize</name>
        <reimplementedby refid="classwx_rich_text_ctrl_1add1eb24da3fba91c348f7372a3969638">DoGetBestSize</reimplementedby>
        <briefdescription>
<para>Gets the size which best suits the window: for a control, it would be the minimal size which doesn&apos;t truncate the control, for a panel - the same size as it would have after a call to <ref refid="classwx_window_1a2bf38a6cbd1f82fb46f274396f482994" kindref="member">Fit()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The default implementation of this function is designed for use in container windows, such as <ref refid="classwx_panel" kindref="compound">wxPanel</ref>, and works something like this:<orderedlist>
<listitem><para>If the window has a sizer then it is used to calculate the best size.</para></listitem><listitem><para>Otherwise if the window has layout constraints then those are used to calculate the best size.</para></listitem><listitem><para>Otherwise if the window has children then the best size is set to be large enough to show all the children.</para></listitem><listitem><para>Otherwise if there are no children then the window&apos;s minimal size will be used as its best size.</para></listitem><listitem><para>Otherwise if there is no minimal size set, then the current size is used for the best size.</para></listitem></orderedlist>
</para><para><simplesect kind="see"><para><ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3459"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1ae6dfe0b0d4a8c666b21ce8df8d96727b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWindow::SetInitialBestSize</definition>
        <argsstring>(const wxSize &amp;size)</argsstring>
        <name>SetInitialBestSize</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the initial window size if none is given (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>at least one of the components of the size passed to ctor/Create() is wxDefaultCoord). <xrefsect id="deprecated_1_deprecated000068"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect><xrefsect id="todo_1_todo000063"><xreftitle>Todo</xreftitle><xrefdescription><para>provide deprecation description </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3467"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a7e21eb6a0819281b29134a6432d064fe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWindow::SendDestroyEvent</definition>
        <argsstring>()</argsstring>
        <name>SendDestroyEvent</name>
        <briefdescription>
<para>Generate <ref refid="classwx_window_destroy_event" kindref="compound">wxWindowDestroyEvent</ref> for this window. </para>        </briefdescription>
        <detaileddescription>
<para>This is called by the window itself when it is being destroyed and usually there is no need to call it but see <ref refid="classwx_window_destroy_event" kindref="compound">wxWindowDestroyEvent</ref> for explanations of when you might want to do it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3476"/>
      </memberdef>
      <memberdef kind="function" id="classwx_window_1a5ebdbd87c28644149a07f1742996df96" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxWindow::ProcessEvent</definition>
        <argsstring>(wxEvent &amp;event)</argsstring>
        <name>ProcessEvent</name>
        <reimplements refid="classwx_evt_handler_1a65968dd27f3aac7718f2dd6b2ddd5a08">ProcessEvent</reimplements>
        <param>
          <type><ref refid="classwx_event" kindref="compound">wxEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>This function is public in <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> but protected in <ref refid="classwx_window" kindref="compound">wxWindow</ref> because for wxWindows you should always call <ref refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" kindref="member">ProcessEvent()</ref> on the pointer returned by <ref refid="classwx_window_1a72c2454cf309f30109da3cbfe237c760" kindref="member">GetEventHandler()</ref> and not on the <ref refid="classwx_window" kindref="compound">wxWindow</ref> object itself. </para>        </briefdescription>
        <detaileddescription>
<para>For convenience, a <ref refid="classwx_window_1a0a76891d726ad5f9a729e27e4eab2b57" kindref="member">ProcessWindowEvent()</ref> method is provided as a synonym for <programlisting><codeline><highlight class="normal"><sp/><ref refid="classwx_window_1a72c2454cf309f30109da3cbfe237c760" kindref="member" tooltip="Returns the event handler for this window.">GetEventHandler</ref>()-&gt;<ref refid="classwx_evt_handler_1a65968dd27f3aac7718f2dd6b2ddd5a08" kindref="member" tooltip="Processes an event, searching event tables and calling zero or more suitable event handler function(s...">ProcessEvent</ref>()<sp/></highlight></codeline>
</programlisting></para><para>Note that it&apos;s still possible to call these functions directly on the <ref refid="classwx_window" kindref="compound">wxWindow</ref> object (e.g. casting it to <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref>) but doing that will create subtle bugs when windows with event handlers pushed on them are involved.</para><para>This holds also for all other <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> functions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="3494"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_window" kindref="compound">wxWindow</ref> is the base class for all windows and represents any visible object on screen. </para>    </briefdescription>
    <detaileddescription>
<para>All controls, top level windows and so on are windows. Sizers and device contexts are not, however, as they don&apos;t appear on screen themselves.</para><para>Please note that all children of the window will be deleted automatically by the destructor before the window itself is deleted which means that you don&apos;t have to worry about deleting them manually. Please see the <ref refid="overview_windowdeletion" kindref="compound">window deletion overview</ref> for more information.</para><para>Also note that in this, and many others, wxWidgets classes some <computeroutput>GetXXX()</computeroutput> methods may be overloaded (as, for example, <ref refid="classwx_window_1a124c12cff1e7b6e96a5e1fd3e48dca34" kindref="member">wxWindow::GetSize</ref> or <ref refid="classwx_window_1ae56fc53268b815b58570f66bfc33838f" kindref="member">wxWindow::GetClientSize</ref>). In this case, the overloads are non-virtual because having multiple virtual functions with the same name results in a virtual function name hiding at the derived class level (in English, this means that the derived class has to override all overloaded variants if it overrides any of them). To allow overriding them in the derived class, wxWidgets uses a unique protected virtual <computeroutput>DoGetXXX()</computeroutput> method and all <computeroutput>GetXXX()</computeroutput> ones are forwarded to it, so overriding the former changes the behaviour of the latter.</para><para><heading level="2">Styles</heading>
</para><para>This class supports the following styles: <itemizedlist>
<listitem><para>wxBORDER_DEFAULT: The window class will decide the kind of border to show, if any. </para></listitem>
<listitem><para>wxBORDER_SIMPLE: Displays a thin border around the window. wxSIMPLE_BORDER is the old name for this style. </para></listitem>
<listitem><para>wxBORDER_SUNKEN: Displays a sunken border. wxSUNKEN_BORDER is the old name for this style. </para></listitem>
<listitem><para>wxBORDER_RAISED: Displays a raised border. wxRAISED_BORDER is the old name for this style. </para></listitem>
<listitem><para>wxBORDER_STATIC: Displays a border suitable for a static control. wxSTATIC_BORDER is the old name for this style. Windows only. </para></listitem>
<listitem><para>wxBORDER_THEME: Displays a native border suitable for a control, on the current platform. On Windows XP or Vista, this will be a themed border; on most other platforms a sunken border will be used. For more information for themed borders on Windows, please see Themed borders on Windows. </para></listitem>
<listitem><para>wxBORDER_NONE: Displays no border, overriding the default border style for the window. wxNO_BORDER is the old name for this style. </para></listitem>
<listitem><para>wxBORDER_DOUBLE: This style is obsolete and should not be used. </para></listitem>
<listitem><para>wxTRANSPARENT_WINDOW: The window is transparent, that is, it will not receive paint events. Windows only. </para></listitem>
<listitem><para>wxTAB_TRAVERSAL: Use this to enable tab traversal for non-dialog windows. </para></listitem>
<listitem><para>wxWANTS_CHARS: Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn&apos;t be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab. </para></listitem>
<listitem><para>wxNO_FULL_REPAINT_ON_RESIZE: On Windows, this style used to disable repainting the window completely when its size is changed. Since this behaviour is now the default, the style is now obsolete and no longer has an effect. </para></listitem>
<listitem><para>wxVSCROLL: Use this style to enable a vertical scrollbar. Notice that this style cannot be used with native controls which don&apos;t support scrollbars nor with top-level windows in most ports. </para></listitem>
<listitem><para>wxHSCROLL: Use this style to enable a horizontal scrollbar. The same limitations as for wxVSCROLL apply to this style. </para></listitem>
<listitem><para>wxALWAYS_SHOW_SB: If a window has scrollbars, disable them instead of hiding them when they are not needed (i.e. when the size of the window is big enough to not require the scrollbars to navigate it). This style is currently implemented for wxMSW, wxGTK and wxUniversal and does nothing on the other platforms. </para></listitem>
<listitem><para>wxCLIP_CHILDREN: Use this style to eliminate flicker caused by the background being repainted, then children being painted over them. Windows only. </para></listitem>
<listitem><para>wxFULL_REPAINT_ON_RESIZE: Use this style to force a complete redraw of the window whenever it is resized instead of redrawing just the part of the window affected by resizing. Note that this was the behaviour by default before 2.5.1 release and that if you experience redraw problems with code which previously used to work you may want to try this. Currently this style applies on GTK+ 2 and Windows only, and full repainting is always done on other platforms. </para></listitem>
</itemizedlist>
<hruler/>
<heading level="2">Extra styles</heading>
</para><para>This class supports the following extra styles: <itemizedlist>
<listitem><para>wxWS_EX_VALIDATE_RECURSIVELY: By default, <ref refid="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" kindref="member">wxWindow::Validate()</ref>, wxWindow::TransferDataTo() and <ref refid="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" kindref="member">wxWindow::TransferDataFromWindow()</ref> only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows. </para></listitem>
<listitem><para>wxWS_EX_BLOCK_EVENTS: wxCommandEvents and the objects of the derived classes are forwarded to the parent window and so on recursively by default. Using this flag for the given window allows to block this propagation at this window, i.e. prevent the events from being propagated further upwards. Dialogs have this flag on by default for the reasons explained in the <ref refid="overview_events" kindref="compound">Events and Event Handling</ref>. </para></listitem>
<listitem><para>wxWS_EX_TRANSIENT: Don&apos;t use this window as an implicit parent for the other windows: this must be used with transient windows as otherwise there is the risk of creating a dialog/frame with this window as a parent, which would lead to a crash if the parent were destroyed before the child. </para></listitem>
<listitem><para>wxWS_EX_CONTEXTHELP: Under Windows, puts a query button on the caption. When pressed, Windows will go into a context-sensitive help mode and wxWidgets will send a <computeroutput>wxEVT_HELP</computeroutput> event if the user clicked on an application window. This style cannot be used (because of the underlying native behaviour) together with <computeroutput>wxMAXIMIZE_BOX</computeroutput> or <computeroutput>wxMINIMIZE_BOX</computeroutput>, so these two styles are automatically turned off if this one is used. </para></listitem>
<listitem><para>wxWS_EX_PROCESS_IDLE: This window should always process idle events, even if the mode set by <ref refid="classwx_idle_event_1a655610b1a5a1c668efc7d475313af2e3" kindref="member">wxIdleEvent::SetMode</ref> is <computeroutput>wxIDLE_PROCESS_SPECIFIED</computeroutput>. </para></listitem>
<listitem><para>wxWS_EX_PROCESS_UI_UPDATES: This window should always process UI update events, even if the mode set by <ref refid="classwx_update_u_i_event_1ab3a94b31cf5c72ae84ffa8b7cc1777e7" kindref="member">wxUpdateUIEvent::SetMode</ref> is <computeroutput>wxUPDATE_UI_PROCESS_SPECIFIED</computeroutput>. </para></listitem>
</itemizedlist>
<heading level="2">Events emitted by this class</heading>
</para><para>Event macros for events emitted by this class: <itemizedlist>
<listitem><para>EVT_ACTIVATE(id,  func): Process a <computeroutput>wxEVT_ACTIVATE</computeroutput> event. See <ref refid="classwx_activate_event" kindref="compound">wxActivateEvent</ref>. </para></listitem>
<listitem><para>EVT_CHILD_FOCUS(func): Process a <computeroutput>wxEVT_CHILD_FOCUS</computeroutput> event. See <ref refid="classwx_child_focus_event" kindref="compound">wxChildFocusEvent</ref>. </para></listitem>
<listitem><para>EVT_CONTEXT_MENU(func): A right click (or other context menu command depending on platform) has been detected. See <ref refid="classwx_context_menu_event" kindref="compound">wxContextMenuEvent</ref>. </para></listitem>
<listitem><para>EVT_HELP(id,  func): Process a <computeroutput>wxEVT_HELP</computeroutput> event. See <ref refid="classwx_help_event" kindref="compound">wxHelpEvent</ref>. </para></listitem>
<listitem><para>EVT_HELP_RANGE(id1,  id2,  func): Process a <computeroutput>wxEVT_HELP</computeroutput> event for a range of ids. See <ref refid="classwx_help_event" kindref="compound">wxHelpEvent</ref>. </para></listitem>
<listitem><para>EVT_DROP_FILES(func): Process a <computeroutput>wxEVT_DROP_FILES</computeroutput> event. See <ref refid="classwx_drop_files_event" kindref="compound">wxDropFilesEvent</ref>. </para></listitem>
<listitem><para>EVT_ERASE_BACKGROUND(func): Process a <computeroutput>wxEVT_ERASE_BACKGROUND</computeroutput> event. See <ref refid="classwx_erase_event" kindref="compound">wxEraseEvent</ref>. </para></listitem>
<listitem><para>EVT_SET_FOCUS(func): Process a <computeroutput>wxEVT_SET_FOCUS</computeroutput> event. See <ref refid="classwx_focus_event" kindref="compound">wxFocusEvent</ref>. </para></listitem>
<listitem><para>EVT_KILL_FOCUS(func): Process a <computeroutput>wxEVT_KILL_FOCUS</computeroutput> event. See <ref refid="classwx_focus_event" kindref="compound">wxFocusEvent</ref>. </para></listitem>
<listitem><para>EVT_IDLE(func): Process a <computeroutput>wxEVT_IDLE</computeroutput> event. See <ref refid="classwx_idle_event" kindref="compound">wxIdleEvent</ref>. </para></listitem>
<listitem><para>EVT_JOY_*(func): Processes joystick events. See <ref refid="classwx_joystick_event" kindref="compound">wxJoystickEvent</ref>. </para></listitem>
<listitem><para>EVT_KEY_DOWN(func): Process a <computeroutput>wxEVT_KEY_DOWN</computeroutput> event (any key has been pressed). See <ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref>. </para></listitem>
<listitem><para>EVT_KEY_UP(func): Process a <computeroutput>wxEVT_KEY_UP</computeroutput> event (any key has been released). See <ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref>. </para></listitem>
<listitem><para>EVT_CHAR(func): Process a <computeroutput>wxEVT_CHAR</computeroutput> event. See <ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref>. </para></listitem>
<listitem><para>EVT_CHAR_HOOK(func): Process a <computeroutput>wxEVT_CHAR_HOOK</computeroutput> event. See <ref refid="classwx_key_event" kindref="compound">wxKeyEvent</ref>. </para></listitem>
<listitem><para>EVT_MOUSE_CAPTURE_LOST(func): Process a <computeroutput>wxEVT_MOUSE_CAPTURE_LOST</computeroutput> event. See <ref refid="classwx_mouse_capture_lost_event" kindref="compound">wxMouseCaptureLostEvent</ref>. </para></listitem>
<listitem><para>EVT_MOUSE_CAPTURE_CHANGED(func): Process a <computeroutput>wxEVT_MOUSE_CAPTURE_CHANGED</computeroutput> event. See <ref refid="classwx_mouse_capture_changed_event" kindref="compound">wxMouseCaptureChangedEvent</ref>. </para></listitem>
<listitem><para>EVT_MOUSE_*(func): See <ref refid="classwx_mouse_event" kindref="compound">wxMouseEvent</ref>. </para></listitem>
<listitem><para>EVT_PAINT(func): Process a <computeroutput>wxEVT_PAINT</computeroutput> event. See <ref refid="classwx_paint_event" kindref="compound">wxPaintEvent</ref>. </para></listitem>
<listitem><para>EVT_POWER_*(func): The system power state changed. See <ref refid="classwx_power_event" kindref="compound">wxPowerEvent</ref>. </para></listitem>
<listitem><para>EVT_SCROLLWIN_*(func): Process scroll events. See <ref refid="classwx_scroll_win_event" kindref="compound">wxScrollWinEvent</ref>. </para></listitem>
<listitem><para>EVT_SET_CURSOR(func): Process a <computeroutput>wxEVT_SET_CURSOR</computeroutput> event. See <ref refid="classwx_set_cursor_event" kindref="compound">wxSetCursorEvent</ref>. </para></listitem>
<listitem><para>EVT_SIZE(func): Process a <computeroutput>wxEVT_SIZE</computeroutput> event. See <ref refid="classwx_size_event" kindref="compound">wxSizeEvent</ref>. </para></listitem>
<listitem><para>EVT_SYS_COLOUR_CHANGED(func): Process a <computeroutput>wxEVT_SYS_COLOUR_CHANGED</computeroutput> event. See <ref refid="classwx_sys_colour_changed_event" kindref="compound">wxSysColourChangedEvent</ref>. </para></listitem>
</itemizedlist>
<heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__miscwnd" kindref="compound">Miscellaneous Windows</ref></para><para><simplesect kind="see"><para><ref refid="overview_events" kindref="compound">Events and Event Handling</ref>, <ref refid="overview_windowsizing" kindref="compound">Window Sizing Overview</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="11728">
        <label>wxStaticText</label>
        <link refid="classwx_static_text"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11724">
        <label>wxSpinCtrlDouble</label>
        <link refid="classwx_spin_ctrl_double"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11695">
        <label>wxGenericDirCtrl</label>
        <link refid="classwx_generic_dir_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11764">
        <label>wxDocChildFrame</label>
        <link refid="classwx_doc_child_frame"/>
        <childnode refid="11763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11790">
        <label>wxSashLayoutWindow</label>
        <link refid="classwx_sash_layout_window"/>
        <childnode refid="11789" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11659">
        <label>wxAnimationCtrl</label>
        <link refid="classwx_animation_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11697">
        <label>wxHeaderCtrlSimple</label>
        <link refid="classwx_header_ctrl_simple"/>
        <childnode refid="11696" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11669">
        <label>wxAuiNotebook</label>
        <link refid="classwx_aui_notebook"/>
        <childnode refid="11668" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11677">
        <label>wxCollapsiblePane</label>
        <link refid="classwx_collapsible_pane"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11722">
        <label>wxSpinButton</label>
        <link refid="classwx_spin_button"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11741">
        <label>wxNonOwnedWindow</label>
        <link refid="classwx_non_owned_window"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11686">
        <label>wxListBox</label>
        <link refid="classwx_list_box"/>
        <childnode refid="11683" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11777">
        <label>wxHScrolledWindow</label>
        <link refid="classwx_h_scrolled_window"/>
        <childnode refid="11775" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11768">
        <label>wxMDIChildFrame</label>
        <link refid="classwx_m_d_i_child_frame"/>
        <childnode refid="11763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11664">
        <label>wxCommandLinkButton</label>
        <link refid="classwx_command_link_button"/>
        <childnode refid="11661" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11711">
        <label>wxRibbonControl</label>
        <link refid="classwx_ribbon_control"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11699">
        <label>wxInfoBar</label>
        <link refid="classwx_info_bar"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11668">
        <label>wxBookCtrlBase</label>
        <link refid="classwx_book_ctrl_base"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11792">
        <label>wxTipWindow</label>
        <link refid="classwx_tip_window"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11751">
        <label>wxGenericProgressDialog</label>
        <link refid="classwx_generic_progress_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11735">
        <label>wxTreeCtrl</label>
        <link refid="classwx_tree_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11779">
        <label>wxPreviewControlBar</label>
        <link refid="classwx_preview_control_bar"/>
        <childnode refid="11775" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11782">
        <label>wxVListBox</label>
        <link refid="classwx_v_list_box"/>
        <childnode refid="11781" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11654">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="11750">
        <label>wxFontDialog</label>
        <link refid="classwx_font_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11785">
        <label>wxSimpleHtmlListBox</label>
        <link refid="classwx_simple_html_list_box"/>
        <childnode refid="11783" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11720">
        <label>wxScrollBar</label>
        <link refid="classwx_scroll_bar"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11781">
        <label>wxVScrolledWindow</label>
        <link refid="classwx_v_scrolled_window"/>
        <childnode refid="11775" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11658">
        <label>wxActiveXContainer</label>
        <link refid="classwx_active_x_container"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11732">
        <label>wxSearchCtrl</label>
        <link refid="classwx_search_ctrl"/>
        <childnode refid="11731" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11748">
        <label>wxFileDialog</label>
        <link refid="classwx_file_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11679">
        <label>wxBitmapComboBox</label>
        <link refid="classwx_bitmap_combo_box"/>
        <childnode refid="11678" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11731">
        <label>wxTextCtrl</label>
        <link refid="classwx_text_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11653">
        <label>wxEvtHandler</label>
        <link refid="classwx_evt_handler"/>
        <childnode refid="11654" relation="public-inheritance">
        </childnode>
        <childnode refid="11655" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11775">
        <label>wxPanel</label>
        <link refid="classwx_panel"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11710">
        <label>wxRadioButton</label>
        <link refid="classwx_radio_button"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11729">
        <label>wxStatusBar</label>
        <link refid="classwx_status_bar"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11727">
        <label>wxStaticLine</label>
        <link refid="classwx_static_line"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11692">
        <label>wxDatePickerCtrl</label>
        <link refid="classwx_date_picker_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11788">
        <label>wxPGMultiButton</label>
        <link refid="classwx_p_g_multi_button"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11752">
        <label>wxProgressDialog</label>
        <link refid="classwx_progress_dialog"/>
        <childnode refid="11751" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11716">
        <label>wxRibbonPanel</label>
        <link refid="classwx_ribbon_panel"/>
        <childnode refid="11711" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11709">
        <label>wxRadioBox</label>
        <link refid="classwx_radio_box"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11757">
        <label>wxRichTextStyleOrganiserDialog</label>
        <link refid="classwx_rich_text_style_organiser_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11676">
        <label>wxCheckBox</label>
        <link refid="classwx_check_box"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11765">
        <label>wxDocParentFrame</label>
        <link refid="classwx_doc_parent_frame"/>
        <childnode refid="11763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11665">
        <label>wxToggleButton</label>
        <link refid="classwx_toggle_button"/>
        <childnode refid="11660" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11791">
        <label>wxSplitterWindow</label>
        <link refid="classwx_splitter_window"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11691">
        <label>wxDataViewTreeCtrl</label>
        <link refid="classwx_data_view_tree_ctrl"/>
        <childnode refid="11689" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11734">
        <label>wxToolBar</label>
        <link refid="classwx_tool_bar"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11754">
        <label>wxMultiChoiceDialog</label>
        <link refid="classwx_multi_choice_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11713">
        <label>wxRibbonButtonBar</label>
        <link refid="classwx_ribbon_button_bar"/>
        <childnode refid="11711" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11674">
        <label>wxTreebook</label>
        <link refid="classwx_treebook"/>
        <childnode refid="11668" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11687">
        <label>wxCheckListBox</label>
        <link refid="classwx_check_list_box"/>
        <childnode refid="11686" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11762">
        <label>wxWizard</label>
        <link refid="classwx_wizard"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11690">
        <label>wxDataViewListCtrl</label>
        <link refid="classwx_data_view_list_ctrl"/>
        <childnode refid="11689" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11655">
        <label>wxTrackable</label>
        <link refid="classwx_trackable"/>
      </node>
      <node id="11688">
        <label>wxRearrangeList</label>
        <link refid="classwx_rearrange_list"/>
        <childnode refid="11687" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11743">
        <label>wxPopupTransientWindow</label>
        <link refid="classwx_popup_transient_window"/>
        <childnode refid="11742" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11671">
        <label>wxListbook</label>
        <link refid="classwx_listbook"/>
        <childnode refid="11668" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11784">
        <label>wxRichTextStyleListBox</label>
        <link refid="classwx_rich_text_style_list_box"/>
        <childnode refid="11783" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11704">
        <label>wxColourPickerCtrl</label>
        <link refid="classwx_colour_picker_ctrl"/>
        <childnode refid="11703" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11698">
        <label>wxHyperlinkCtrl</label>
        <link refid="classwx_hyperlink_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11657">
        <label>wxControl</label>
        <link refid="classwx_control"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11701">
        <label>wxListView</label>
        <link refid="classwx_list_view"/>
        <childnode refid="11700" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11718">
        <label>wxRichTextCtrl</label>
        <link refid="classwx_rich_text_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11694">
        <label>wxGauge</label>
        <link refid="classwx_gauge"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11736">
        <label>wxWebView</label>
        <link refid="classwx_web_view"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11652">
        <label>wxWindow</label>
        <link refid="classwx_window"/>
        <childnode refid="11653" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11702">
        <label>wxMediaCtrl</label>
        <link refid="classwx_media_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11673">
        <label>wxToolbook</label>
        <link refid="classwx_toolbook"/>
        <childnode refid="11668" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11700">
        <label>wxListCtrl</label>
        <link refid="classwx_list_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11771">
        <label>wxDocMDIParentFrame</label>
        <link refid="classwx_doc_m_d_i_parent_frame"/>
        <childnode refid="11770" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11667">
        <label>wxAuiToolBar</label>
        <link refid="classwx_aui_tool_bar"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11680">
        <label>wxComboCtrl</label>
        <link refid="classwx_combo_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11714">
        <label>wxRibbonGallery</label>
        <link refid="classwx_ribbon_gallery"/>
        <childnode refid="11711" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11745">
        <label>wxDialog</label>
        <link refid="classwx_dialog"/>
        <childnode refid="11744" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11753">
        <label>wxMessageDialog</label>
        <link refid="classwx_message_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11749">
        <label>wxFindReplaceDialog</label>
        <link refid="classwx_find_replace_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11666">
        <label>wxBitmapToggleButton</label>
        <link refid="classwx_bitmap_toggle_button"/>
        <childnode refid="11665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11783">
        <label>wxHtmlListBox</label>
        <link refid="classwx_html_list_box"/>
        <childnode refid="11782" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11706">
        <label>wxFilePickerCtrl</label>
        <link refid="classwx_file_picker_ctrl"/>
        <childnode refid="11703" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11712">
        <label>wxRibbonBar</label>
        <link refid="classwx_ribbon_bar"/>
        <childnode refid="11711" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11723">
        <label>wxSpinCtrl</label>
        <link refid="classwx_spin_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11684">
        <label>wxChoice</label>
        <link refid="classwx_choice"/>
        <childnode refid="11683" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11678">
        <label>wxComboBox</label>
        <link refid="classwx_combo_box"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11730">
        <label>wxStyledTextCtrl</label>
        <link refid="classwx_styled_text_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11681">
        <label>wxOwnerDrawnComboBox</label>
        <link refid="classwx_owner_drawn_combo_box"/>
        <childnode refid="11680" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11763">
        <label>wxFrame</label>
        <link refid="classwx_frame"/>
        <childnode refid="11744" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11739">
        <label>wxMDIClientWindow</label>
        <link refid="classwx_m_d_i_client_window"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11740">
        <label>wxMenuBar</label>
        <link refid="classwx_menu_bar"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11773">
        <label>wxPreviewFrame</label>
        <link refid="classwx_preview_frame"/>
        <childnode refid="11763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11778">
        <label>wxHVScrolledWindow</label>
        <link refid="classwx_h_v_scrolled_window"/>
        <childnode refid="11775" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11758">
        <label>wxSingleChoiceDialog</label>
        <link refid="classwx_single_choice_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11682">
        <label>wxRichTextStyleComboCtrl</label>
        <link refid="classwx_rich_text_style_combo_ctrl"/>
        <childnode refid="11680" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11747">
        <label>wxDirDialog</label>
        <link refid="classwx_dir_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11660">
        <label>wxAnyButton</label>
        <link refid="classwx_any_button"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11689">
        <label>wxDataViewCtrl</label>
        <link refid="classwx_data_view_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11661">
        <label>wxButton</label>
        <link refid="classwx_button"/>
        <childnode refid="11660" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11717">
        <label>wxRibbonToolBar</label>
        <link refid="classwx_ribbon_tool_bar"/>
        <childnode refid="11711" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11656">
        <label>wxBannerWindow</label>
        <link refid="classwx_banner_window"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11766">
        <label>wxHtmlHelpDialog</label>
        <link refid="classwx_html_help_dialog"/>
        <childnode refid="11763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11746">
        <label>wxColourDialog</label>
        <link refid="classwx_colour_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11780">
        <label>wxPropertyGridManager</label>
        <link refid="classwx_property_grid_manager"/>
        <childnode refid="11775" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11737">
        <label>wxGLCanvas</label>
        <link refid="classwx_g_l_canvas"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11738">
        <label>wxHtmlHelpWindow</label>
        <link refid="classwx_html_help_window"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11670">
        <label>wxChoicebook</label>
        <link refid="classwx_choicebook"/>
        <childnode refid="11668" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11742">
        <label>wxPopupWindow</label>
        <link refid="classwx_popup_window"/>
        <childnode refid="11741" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11683">
        <label>wxControlWithItems</label>
        <link refid="classwx_control_with_items"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11772">
        <label>wxMiniFrame</label>
        <link refid="classwx_mini_frame"/>
        <childnode refid="11763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11708">
        <label>wxPropertyGrid</label>
        <link refid="classwx_property_grid"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11719">
        <label>wxRichTextStyleListCtrl</label>
        <link refid="classwx_rich_text_style_list_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11705">
        <label>wxDirPickerCtrl</label>
        <link refid="classwx_dir_picker_ctrl"/>
        <childnode refid="11703" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11725">
        <label>wxStaticBitmap</label>
        <link refid="classwx_static_bitmap"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11721">
        <label>wxSlider</label>
        <link refid="classwx_slider"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11744">
        <label>wxTopLevelWindow</label>
        <link refid="classwx_top_level_window"/>
        <childnode refid="11741" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11685">
        <label>wxDirFilterListCtrl</label>
        <link refid="classwx_dir_filter_list_ctrl"/>
        <childnode refid="11684" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11672">
        <label>wxNotebook</label>
        <link refid="classwx_notebook"/>
        <childnode refid="11668" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11756">
        <label>wxRichTextFormattingDialog</label>
        <link refid="classwx_rich_text_formatting_dialog"/>
        <childnode refid="11755" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11793">
        <label>wxTreeListCtrl</label>
        <link refid="classwx_tree_list_ctrl"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11760">
        <label>wxTextEntryDialog</label>
        <link refid="classwx_text_entry_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11787">
        <label>wxWizardPageSimple</label>
        <link refid="classwx_wizard_page_simple"/>
        <childnode refid="11786" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11767">
        <label>wxHtmlHelpFrame</label>
        <link refid="classwx_html_help_frame"/>
        <childnode refid="11763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11776">
        <label>wxEditableListBox</label>
        <link refid="classwx_editable_list_box"/>
        <childnode refid="11775" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11662">
        <label>wxBitmapButton</label>
        <link refid="classwx_bitmap_button"/>
        <childnode refid="11661" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11696">
        <label>wxHeaderCtrl</label>
        <link refid="classwx_header_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11663">
        <label>wxContextHelpButton</label>
        <link refid="classwx_context_help_button"/>
        <childnode refid="11662" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11774">
        <label>wxSplashScreen</label>
        <link refid="classwx_splash_screen"/>
        <childnode refid="11763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11770">
        <label>wxMDIParentFrame</label>
        <link refid="classwx_m_d_i_parent_frame"/>
        <childnode refid="11763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11786">
        <label>wxWizardPage</label>
        <link refid="classwx_wizard_page"/>
        <childnode refid="11775" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11693">
        <label>wxFileCtrl</label>
        <link refid="classwx_file_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11769">
        <label>wxDocMDIChildFrame</label>
        <link refid="classwx_doc_m_d_i_child_frame"/>
        <childnode refid="11768" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11761">
        <label>wxPasswordEntryDialog</label>
        <link refid="classwx_password_entry_dialog"/>
        <childnode refid="11760" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11715">
        <label>wxRibbonPage</label>
        <link refid="classwx_ribbon_page"/>
        <childnode refid="11711" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11759">
        <label>wxSymbolPickerDialog</label>
        <link refid="classwx_symbol_picker_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11726">
        <label>wxStaticBox</label>
        <link refid="classwx_static_box"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11707">
        <label>wxFontPickerCtrl</label>
        <link refid="classwx_font_picker_ctrl"/>
        <childnode refid="11703" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11755">
        <label>wxPropertySheetDialog</label>
        <link refid="classwx_property_sheet_dialog"/>
        <childnode refid="11745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11733">
        <label>wxTimePickerCtrl</label>
        <link refid="classwx_time_picker_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11703">
        <label>wxPickerBase</label>
        <link refid="classwx_picker_base"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11789">
        <label>wxSashWindow</label>
        <link refid="classwx_sash_window"/>
        <childnode refid="11652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11675">
        <label>wxCalendarCtrl</label>
        <link refid="classwx_calendar_ctrl"/>
        <childnode refid="11657" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11796">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="11797" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="11795">
        <label>wxEvtHandler</label>
        <link refid="classwx_evt_handler"/>
        <childnode refid="11796" relation="public-inheritance">
        </childnode>
        <childnode refid="11798" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11798">
        <label>wxTrackable</label>
        <link refid="classwx_trackable"/>
      </node>
      <node id="11794">
        <label>wxWindow</label>
        <link refid="classwx_window"/>
        <childnode refid="11795" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11797">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" line="276" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/window.h" bodystart="275" bodyend="3507"/>
    <listofallmembers>
      <member refid="classwx_window_1a3afbd49b1ea2f8275e3600dcac102923" prot="public" virt="virtual"><scope>wxWindow</scope><name>AcceptsFocus</name></member>
      <member refid="classwx_window_1a2370bdd3ab08e7ef3c7555c6aa8301b8" prot="public" virt="virtual"><scope>wxWindow</scope><name>AcceptsFocusFromKeyboard</name></member>
      <member refid="classwx_window_1ac7ed96693517630f4d2e99265b76d1a9" prot="public" virt="virtual"><scope>wxWindow</scope><name>AcceptsFocusRecursively</name></member>
      <member refid="classwx_window_1abf60159278059a5bb397eb8647227bb3" prot="public" virt="virtual"><scope>wxWindow</scope><name>AddChild</name></member>
      <member refid="classwx_evt_handler_1a7dc3c701781f4044372049de5004137e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>AddFilter</name></member>
      <member refid="classwx_window_1a774b5b5548a6258727b5e2099e63ae9a" prot="protected" virt="virtual"><scope>wxWindow</scope><name>AddPendingEvent</name></member>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxWindow</scope><name>AllocExclusive</name></member>
      <member refid="classwx_window_1aae29552806a328c6a55ef8f07647f5ba" prot="public" virt="virtual"><scope>wxWindow</scope><name>AlwaysShowScrollbars</name></member>
      <member refid="classwx_evt_handler_1a84b1e446053bda8f76f13336839e8b64" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Bind</name></member>
      <member refid="classwx_evt_handler_1a95520e770e157ef93d1d60e03db66e5c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Bind</name></member>
      <member refid="classwx_window_1a100905524d330cfd9620fd726e378066" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>CacheBestSize</name></member>
      <member refid="classwx_window_1a179f9a770f8c835f279923d2cbe5d766" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>CanScroll</name></member>
      <member refid="classwx_window_1a64f7f6fb75bf4b7281e1d33542d523c7" prot="public" virt="virtual"><scope>wxWindow</scope><name>CanSetTransparent</name></member>
      <member refid="classwx_window_1a5c72c6260a73ef77bb0b1f7ec85fcfef" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>CaptureMouse</name></member>
      <member refid="classwx_window_1a06c0ecb262995b40083bfb446a6cff99" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Center</name></member>
      <member refid="classwx_window_1a2dc4e0a85d33fc55cc9650eaea1da0a4" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>CenterOnParent</name></member>
      <member refid="classwx_window_1a4a1819eeee3f2143cdde4f329ffde787" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Centre</name></member>
      <member refid="classwx_window_1ab8e9b91b0e2db344fd71259616dfd433" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>CentreOnParent</name></member>
      <member refid="classwx_window_1a61e833684ee5c89775e91e88be1a9a52" prot="public" virt="virtual"><scope>wxWindow</scope><name>ClearBackground</name></member>
      <member refid="classwx_window_1a29eac611e5f6b47db82bb4dd5450ba3d" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ClientToScreen</name></member>
      <member refid="classwx_window_1a7de852b144210b93b690189e99dbe1df" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ClientToScreen</name></member>
      <member refid="classwx_window_1a693fffbbb7ad5f36a5f442703396dafa" prot="public" virt="virtual"><scope>wxWindow</scope><name>ClientToWindowSize</name></member>
      <member refid="classwx_object_1a1d39f1d3650fe0982c9a1abe7f9fe7b7" prot="protected" virt="virtual"><scope>wxWindow</scope><name>CloneRefData</name></member>
      <member refid="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Close</name></member>
      <member refid="classwx_evt_handler_1a78719e8b82c9f9c6e4056b3449df1943" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Connect</name></member>
      <member refid="classwx_evt_handler_1a1e8b5fc4c7e7f6d32d40bc00d4108ba4" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Connect</name></member>
      <member refid="classwx_evt_handler_1aa290d9b67348e74c1da8497955a4e35c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Connect</name></member>
      <member refid="classwx_window_1acb6787b6c3c314f9e015658a89ad0265" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ConvertDialogToPixels</name></member>
      <member refid="classwx_window_1a3daf76b93f648c68224e6ccd8095066b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ConvertDialogToPixels</name></member>
      <member refid="classwx_window_1a449aac6a24f1d14b1a82b58003447dfe" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ConvertPixelsToDialog</name></member>
      <member refid="classwx_window_1afd955ce9d25ec26a115bfb794b1c7d8b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ConvertPixelsToDialog</name></member>
      <member refid="classwx_window_1a95b7ca8faa033f5ab35458887c07bf38" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Create</name></member>
      <member refid="classwx_object_1a95c6a5e4e1e03ff23c7b9efe4cff0c1a" prot="protected" virt="virtual"><scope>wxWindow</scope><name>CreateRefData</name></member>
      <member refid="classwx_evt_handler_1a6e7f9cf4ebd0623c1d94979855d096f8" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>DeletePendingEvents</name></member>
      <member refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" prot="public" virt="virtual"><scope>wxWindow</scope><name>Destroy</name></member>
      <member refid="classwx_window_1aff47b32c8d42d515ea0bb6a6c2fea917" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>DestroyChildren</name></member>
      <member refid="classwx_window_1a26d7329a9a753fa0445501f01f66c41e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Disable</name></member>
      <member refid="classwx_evt_handler_1a13061cf0ed01ac10a804ac057ef4bdbc" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Disconnect</name></member>
      <member refid="classwx_evt_handler_1a2f171e19444b9c4034c5e11f24fa9c91" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Disconnect</name></member>
      <member refid="classwx_evt_handler_1a16a6f823853e4b74b43dd9a2cf3abee6" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Disconnect</name></member>
      <member refid="classwx_window_1a2d10b472a4962d1c852c83d55252c44b" prot="protected" virt="virtual"><scope>wxWindow</scope><name>DoCentre</name></member>
      <member refid="classwx_window_1a01e7604ab0f0b2b1a8e322a630a4669e" prot="protected" virt="virtual"><scope>wxWindow</scope><name>DoGetBestSize</name></member>
      <member refid="classwx_window_1ae8a84a80645e99f4d24a22e5c386f626" prot="public" virt="virtual"><scope>wxWindow</scope><name>DoUpdateWindowUI</name></member>
      <member refid="classwx_window_1a7e7015bc61bd79b6821d2dccaecf9eda" prot="public" virt="virtual"><scope>wxWindow</scope><name>DragAcceptFiles</name></member>
      <member refid="classwx_window_1a4e933aa891f42fbb3b87438057c573af" prot="public" virt="virtual"><scope>wxWindow</scope><name>Enable</name></member>
      <member refid="classwx_window_1a777258379a3eef1b0530f12db6b77cab" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>FindFocus</name></member>
      <member refid="classwx_window_1a3468ef382c612b5f8e91c7c18d00a69f" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>FindWindow</name></member>
      <member refid="classwx_window_1ab2dad735acc2121b964ee1d51836cffa" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>FindWindow</name></member>
      <member refid="classwx_window_1a101201b12ccd5fba49fa06ed19b5c6fb" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>FindWindowById</name></member>
      <member refid="classwx_window_1ab8eb148fffae109e0fac86e88d569670" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>FindWindowByLabel</name></member>
      <member refid="classwx_window_1adbe4eea02f615313c12a2c00557a44c3" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>FindWindowByName</name></member>
      <member refid="classwx_window_1a2bf38a6cbd1f82fb46f274396f482994" prot="public" virt="virtual"><scope>wxWindow</scope><name>Fit</name></member>
      <member refid="classwx_window_1a55aca401aab29d59f7cc53f89ba2e38d" prot="public" virt="virtual"><scope>wxWindow</scope><name>FitInside</name></member>
      <member refid="classwx_window_1a15c678314cfc1d807196bc298b713ed3" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Freeze</name></member>
      <member refid="classwx_window_1aefc02d7275010ebb8d5b66569e7287c4" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetAcceleratorTable</name></member>
      <member refid="classwx_window_1ae0469b554e9c501b356b3ed4b6d8a3af" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetAccessible</name></member>
      <member refid="classwx_window_1ad7a9d7fca325112fae493a00d253b3be" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetAutoLayout</name></member>
      <member refid="classwx_window_1a3006d98a4145b7064c1f08e39487d257" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetBackgroundColour</name></member>
      <member refid="classwx_window_1a59047d52b88f2422bbcf01bbecdc4b7b" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetBackgroundStyle</name></member>
      <member refid="classwx_window_1a7e64b9380374e5681f146e9e319e35e3" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetBestSize</name></member>
      <member refid="classwx_window_1a0180343fa395e0c8e6de4022684ca5d6" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetBestVirtualSize</name></member>
      <member refid="classwx_window_1ad95a95e683e57ac6365745b737571582" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetBorder</name></member>
      <member refid="classwx_window_1aa53c8d1b5af17a8fbbe8845210e2032b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetBorder</name></member>
      <member refid="classwx_window_1a483d3f73925bd38c3964dad058672f0a" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetCapture</name></member>
      <member refid="classwx_window_1a83ed7c9d9252b912eebc753d6132245b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetCaret</name></member>
      <member refid="classwx_window_1a304b4446de399b240a3fa4aa83a2e468" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetCharHeight</name></member>
      <member refid="classwx_window_1aef2745df13435e913027107cab2a6286" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetCharWidth</name></member>
      <member refid="classwx_window_1ad500085ad0511879b5e018706c91a494" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetChildren</name></member>
      <member refid="classwx_window_1a666cfe7cc8eda6fcecfd39c67c50f609" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetChildren</name></member>
      <member refid="classwx_window_1a170d85e4aa0cbacbfcdd0728120e1417" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetClassDefaultAttributes</name></member>
      <member refid="classwx_object_1ab3a0c6f723cbaddb47be4e8dd98cc8e2" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetClassInfo</name></member>
      <member refid="classwx_window_1a8fd1c0fd88d63dfbf6fefb688b7fd19e" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetClientAreaOrigin</name></member>
      <member refid="classwx_evt_handler_1ad6e543115a9405962152630138645588" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetClientData</name></member>
      <member refid="classwx_evt_handler_1a2b3949eaba1f25cb48618163a7c0583b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetClientObject</name></member>
      <member refid="classwx_window_1a3928765a8dd3c5c3d6a689179c8005e0" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetClientRect</name></member>
      <member refid="classwx_window_1ae56fc53268b815b58570f66bfc33838f" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetClientSize</name></member>
      <member refid="classwx_window_1afb9fd4a3b3310b2e11049a5113f749fa" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetClientSize</name></member>
      <member refid="classwx_window_1ac5664c7cd26848b5eebfaded2ecde7be" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetConstraints</name></member>
      <member refid="classwx_window_1ade8de9a91bb5bf49c3a52e5262a5ffea" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetContainingSizer</name></member>
      <member refid="classwx_window_1ad7ce1e9af33e6be0b608813eff2d349c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetCursor</name></member>
      <member refid="classwx_window_1a24e7b8f717e91f4590d148140e853dc5" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetDefaultAttributes</name></member>
      <member refid="classwx_window_1a4511e71affd926a47c5c320563ca2df5" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetDropTarget</name></member>
      <member refid="classwx_window_1a1a54fcda8d52986482e030bd54739e9f" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetEffectiveMinSize</name></member>
      <member refid="classwx_window_1a72c2454cf309f30109da3cbfe237c760" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetEventHandler</name></member>
      <member refid="classwx_evt_handler_1a533e62afcb125abf1fcc8bb53fbc2e81" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetEvtHandlerEnabled</name></member>
      <member refid="classwx_window_1a8da0e59017af368c062f11c9abe2c667" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetExtraStyle</name></member>
      <member refid="classwx_window_1a0dcc6f6f7bda203a868ff10c413289fa" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetFont</name></member>
      <member refid="classwx_window_1acb8e9bd1c88f330bc9748255a5592964" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetForegroundColour</name></member>
      <member refid="classwx_window_1a55d3155d2d3139a84e8fb19a8900aa76" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetGrandParent</name></member>
      <member refid="classwx_window_1a185e6cd7065367b552748cb722651b27" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetHandle</name></member>
      <member refid="classwx_window_1a77f8a4bbee228ed333af2e6a06509cff" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetHelpText</name></member>
      <member refid="classwx_window_1afa448f4e01bedc4a5e3d4324929e5d5d" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetHelpTextAtPoint</name></member>
      <member refid="classwx_window_1a4633b6ad527c921598f55af5274156f0" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetId</name></member>
      <member refid="classwx_window_1a87fc676546f2ab837342b2e164dd52f0" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetLabel</name></member>
      <member refid="classwx_window_1a0a624f5fad4a603d58ffe94b058d4dda" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetLayoutDirection</name></member>
      <member refid="classwx_window_1aef9b71458720452374137cd20be24b97" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetMaxClientSize</name></member>
      <member refid="classwx_window_1a5cc2082eb5ddb27f97be191bd093709e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetMaxHeight</name></member>
      <member refid="classwx_window_1a0a1672e81caf81a95eb5b48383d22065" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetMaxSize</name></member>
      <member refid="classwx_window_1a2e953a64c41131b87bdd7c513ced3687" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetMaxWidth</name></member>
      <member refid="classwx_window_1a8e88d1d38c2bf98a72d86b42cf3e35c0" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetMinClientSize</name></member>
      <member refid="classwx_window_1ae4dd9a046ff774ea3ef114caeb452681" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetMinHeight</name></member>
      <member refid="classwx_window_1a853c9a8443f996a368569a8fae551f5a" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetMinSize</name></member>
      <member refid="classwx_window_1a9f79aa07a1b82a9a738f6c1d9c17496f" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetMinWidth</name></member>
      <member refid="classwx_window_1aab1b302c4bdabd134ce8d401dbaaf990" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetName</name></member>
      <member refid="classwx_evt_handler_1a4b2f853f5c7a64432ae72f9b606698f9" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetNextHandler</name></member>
      <member refid="classwx_window_1a41608736affe2ff115d80d8f69dc832e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetNextSibling</name></member>
      <member refid="classwx_window_1a63871f881941b99b4b94328d1c4cd163" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetParent</name></member>
      <member refid="classwx_window_1a9b7de6ea85ca926b668ba0682a61a93e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetPopupMenuSelectionFromUser</name></member>
      <member refid="classwx_window_1a00f5cb3cac003205317a565a33d4bb27" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetPopupMenuSelectionFromUser</name></member>
      <member refid="classwx_window_1a9f36392b289a1e567e95bee073d6533e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetPosition</name></member>
      <member refid="classwx_window_1ad9a883e20827fa717e92fc2f8bd99d6b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetPosition</name></member>
      <member refid="classwx_evt_handler_1aad1ba7fa9ccbf12ee2d80f5f12350adb" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetPreviousHandler</name></member>
      <member refid="classwx_window_1aa4cb912eb28be31279fa1b95747c6d02" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetPrevSibling</name></member>
      <member refid="classwx_window_1ac8809904bb379c32c33c79fbe38745eb" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetRect</name></member>
      <member refid="classwx_object_1aabdb4fc957226544a8408167844e4f42" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetRefData</name></member>
      <member refid="classwx_window_1abd39ef50fbc1ef3771f695e7322e8c1d" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetScreenPosition</name></member>
      <member refid="classwx_window_1a32074a2c677ebadb1ed6e92ab172656c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetScreenPosition</name></member>
      <member refid="classwx_window_1a5c0e45fac07ac4cf29eefa108337a110" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetScreenRect</name></member>
      <member refid="classwx_window_1a3e23d10c17943fd873d0acb472db0caa" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetScrollPos</name></member>
      <member refid="classwx_window_1a067d2a38efbf2f535f717f1027003281" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetScrollRange</name></member>
      <member refid="classwx_window_1a10d24c60525a1c612cd775fc44dd1953" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetScrollThumb</name></member>
      <member refid="classwx_window_1a124c12cff1e7b6e96a5e1fd3e48dca34" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetSize</name></member>
      <member refid="classwx_window_1a66e144ed8ab9a20e080ae6c69fc7015c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetSize</name></member>
      <member refid="classwx_window_1ad8284cce1a2afe57724b52a89d7fac2f" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetSizer</name></member>
      <member refid="classwx_window_1ac9cd7b4472d5419e518f69311914466f" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetTextExtent</name></member>
      <member refid="classwx_window_1a79e5f88a2408871663d4ab0405cd35f6" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetTextExtent</name></member>
      <member refid="classwx_window_1a0b31a21532407cf809d73aa09f34235c" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetThemeEnabled</name></member>
      <member refid="classwx_window_1aae94155ccf8a6e4e72ad08527c89ba89" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetToolTip</name></member>
      <member refid="classwx_window_1ad1a9c53c8e7e5010874f15b8ff4a6568" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetToolTipText</name></member>
      <member refid="classwx_window_1a7e32d9a9ffd058c931db20416bc55baa" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetUpdateClientRect</name></member>
      <member refid="classwx_window_1aa982adbcebfa7bc73fbae7465132115b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetUpdateRegion</name></member>
      <member refid="classwx_window_1a6a332586346cb9ece4a8fe058a7b88c4" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetValidator</name></member>
      <member refid="classwx_window_1a614d32c464296b7d6caabcafc18deb97" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetVirtualSize</name></member>
      <member refid="classwx_window_1a2628c6f1f4aecb790f0c86622ebf4d56" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetVirtualSize</name></member>
      <member refid="classwx_window_1afd861e553190e22a76d3d40ee5e8d628" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetWindowBorderSize</name></member>
      <member refid="classwx_window_1a994147d8294bd7d5a32c825d5692af28" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetWindowStyle</name></member>
      <member refid="classwx_window_1a0a0e81677bf2f0de5982a634e11d9a69" prot="public" virt="virtual"><scope>wxWindow</scope><name>GetWindowStyleFlag</name></member>
      <member refid="classwx_window_1aafcccd0d5d31651484df02453c53361c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>GetWindowVariant</name></member>
      <member refid="classwx_window_1a89d1b079de97aac170e999692095872c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>HandleAsNavigationKey</name></member>
      <member refid="classwx_window_1a665731bbfa46a72c215b04df60216ef1" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>HandleWindowEvent</name></member>
      <member refid="classwx_window_1a9b44f61543b77317f9820e06856c5514" prot="public" virt="virtual"><scope>wxWindow</scope><name>HasCapture</name></member>
      <member refid="classwx_window_1ae30b415c1ef526563161efea5b78d640" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>HasExtraStyle</name></member>
      <member refid="classwx_window_1a62ba2fb9be6422bf06bb7db5871d551f" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>HasFlag</name></member>
      <member refid="classwx_window_1a4e0abff99d64d2a595ee0ab4b415bbd6" prot="public" virt="virtual"><scope>wxWindow</scope><name>HasFocus</name></member>
      <member refid="classwx_window_1abe1522483478b1f777ad8ef34fa7c44a" prot="public" virt="virtual"><scope>wxWindow</scope><name>HasMultiplePages</name></member>
      <member refid="classwx_window_1a950847ecf2d488d83c14a74a3906f668" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>HasScrollbar</name></member>
      <member refid="classwx_window_1ab9cbcb6d6f4a272c2f0342e69a13b59a" prot="public" virt="virtual"><scope>wxWindow</scope><name>HasTransparentBackground</name></member>
      <member refid="classwx_window_1a7ed103df04014cb3c59c6a3fb4d95328" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Hide</name></member>
      <member refid="classwx_window_1a5326fbb26557a224507a1c06e5640e89" prot="public" virt="virtual"><scope>wxWindow</scope><name>HideWithEffect</name></member>
      <member refid="classwx_window_1a6a026b2a16a9f050deddd44e5586762c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>HitTest</name></member>
      <member refid="classwx_window_1a44f4d85f42fac6090a42cafd40f24ff5" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>HitTest</name></member>
      <member refid="classwx_window_1a9fd5b6520c1b30eb8e82bb5d56bc24c0" prot="public" virt="virtual"><scope>wxWindow</scope><name>InformFirstDirection</name></member>
      <member refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" prot="public" virt="virtual"><scope>wxWindow</scope><name>InheritAttributes</name></member>
      <member refid="classwx_window_1aa90a260c0a835a133043460b7d0024a8" prot="public" virt="virtual"><scope>wxWindow</scope><name>InitDialog</name></member>
      <member refid="classwx_window_1ae1b56ca87d8590ee5e576012229a380a" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>InvalidateBestSize</name></member>
      <member refid="classwx_window_1af918e6fe8565c2d5235973cc3de84a43" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsBeingDeleted</name></member>
      <member refid="classwx_window_1a469f0881da248d37691440c9d4cc7200" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsDescendant</name></member>
      <member refid="classwx_window_1a9d1be1bbb625ebf87ad4ad47e49a0194" prot="public" virt="virtual"><scope>wxWindow</scope><name>IsDoubleBuffered</name></member>
      <member refid="classwx_window_1a59452a5bd42f5ea4b31d7fc4aa59644f" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsEnabled</name></member>
      <member refid="classwx_window_1af27ef77c913e32050543f3b0ca435a0d" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1a31af79f647cbec4950ce31620db51753" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1a4a23e724619ec070f7d5c45ba21529d5" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1a4da9a2d13534535aaf7b45200ee8728e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1a866c62cc23d8de88e952aad5db4d1a61" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsFrozen</name></member>
      <member refid="classwx_object_1af40d580385cf4f8112fae7713404b01e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsKindOf</name></member>
      <member refid="classwx_window_1ae9b31dec54256b68574a4bba8cca94ab" prot="public" virt="virtual"><scope>wxWindow</scope><name>IsRetained</name></member>
      <member refid="classwx_object_1a80a1a3fda7b14396a9ddd3d7a46a88bd" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsSameAs</name></member>
      <member refid="classwx_window_1aeeef7eaf8c8f1ec1a54e7a68d63923d0" prot="public" virt="virtual"><scope>wxWindow</scope><name>IsScrollbarAlwaysShown</name></member>
      <member refid="classwx_window_1a95af3a39aa422580dae156ed281a7e88" prot="public" virt="virtual"><scope>wxWindow</scope><name>IsShown</name></member>
      <member refid="classwx_window_1a72d70fd14e3565bf782fbcd3271d8930" prot="public" virt="virtual"><scope>wxWindow</scope><name>IsShownOnScreen</name></member>
      <member refid="classwx_window_1a657ef8b6055eb06df894ac5e6ddfecf8" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsThisEnabled</name></member>
      <member refid="classwx_window_1a0002826ad05f2a5661b4c8995713f37f" prot="public" virt="virtual"><scope>wxWindow</scope><name>IsTopLevel</name></member>
      <member refid="classwx_window_1a7940d510c5bdc062a2b109a1022dd8c2" prot="public" virt="virtual"><scope>wxWindow</scope><name>IsTransparentBackgroundSupported</name></member>
      <member refid="classwx_evt_handler_1a360fdeefcf53b62fb49fb828406bb8a6" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>IsUnlinked</name></member>
      <member refid="classwx_window_1a1b143c3e72bd0af533b76db4830a6113" prot="public" virt="virtual"><scope>wxWindow</scope><name>Layout</name></member>
      <member refid="classwx_window_1ade808784f0e64d9985e2f279b5ca8c02" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>LineDown</name></member>
      <member refid="classwx_window_1afc0816a174ceee6d36d1995c6824a273" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>LineUp</name></member>
      <member refid="classwx_window_1a124944524f36b71385dad8fddaad8ded" prot="public" virt="virtual"><scope>wxWindow</scope><name>Lower</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxWindow</scope><name>m_refData</name></member>
      <member refid="classwx_window_1ab1cb98c8d25b9e6ff7b706b1446c3df7" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Move</name></member>
      <member refid="classwx_window_1a22a22c1e23ca05776707e7999d8047fe" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Move</name></member>
      <member refid="classwx_window_1a79e66079125e8420de269811bdb6f2b6" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>MoveAfterInTabOrder</name></member>
      <member refid="classwx_window_1af2b92f61cd9f9e2e0efe4cce307e25b1" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>MoveBeforeInTabOrder</name></member>
      <member refid="classwx_window_1a86904f6785df4af6036b33383490a805" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Navigate</name></member>
      <member refid="classwx_window_1aa58039c8fc65e19160becf510ee1d1d5" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>NavigateIn</name></member>
      <member refid="classwx_window_1a8175da594e6045635a1d1cfe775cdddb" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>NewControlId</name></member>
      <member refid="classwx_window_1a6b5654c0c6c6245d592c279521f7099c" prot="public" virt="virtual"><scope>wxWindow</scope><name>OnInternalIdle</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>operator new</name></member>
      <member refid="classwx_window_1a61e78cb48ece3e9e989e37b475ac1e35" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>PageDown</name></member>
      <member refid="classwx_window_1aa7c2bbc480d8863d9f139c01d7abc1b1" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>PageUp</name></member>
      <member refid="classwx_window_1ac45c1f4cf96c70779764c14cf528790b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>PopEventHandler</name></member>
      <member refid="classwx_window_1a8f715d238cf74a845488b0e2645e98df" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>PopupMenu</name></member>
      <member refid="classwx_window_1a834bcdfd41f5e5370ebd9ea401c92900" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>PopupMenu</name></member>
      <member refid="classwx_window_1ab1943463e6661f97e072b43337c6cc09" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>PostSizeEvent</name></member>
      <member refid="classwx_window_1aa080d8dcda58bcc6ea2abd8bea592e3e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>PostSizeEventToParent</name></member>
      <member refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" prot="protected" virt="virtual"><scope>wxWindow</scope><name>ProcessEvent</name></member>
      <member refid="classwx_evt_handler_1ac0f5d2cb29a04c1f7f82eb6b351f79fb" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ProcessEventLocally</name></member>
      <member refid="classwx_window_1a7cbee38944dab02d753a4dba74230443" prot="protected" virt="non-virtual"><scope>wxWindow</scope><name>ProcessPendingEvents</name></member>
      <member refid="classwx_window_1a9350b3a9c2e380707eaea92cedad12a5" prot="protected" virt="non-virtual"><scope>wxWindow</scope><name>ProcessThreadEvent</name></member>
      <member refid="classwx_window_1a0a76891d726ad5f9a729e27e4eab2b57" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ProcessWindowEvent</name></member>
      <member refid="classwx_window_1a0a11aa4a50491d051f947e2618e52178" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ProcessWindowEventLocally</name></member>
      <member refid="classwx_window_1a398c11ab9af7956067a964f560d1978c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>PushEventHandler</name></member>
      <member refid="classwx_window_1a69e450f21b0d7013269ec1a4771f043b" prot="protected" virt="virtual"><scope>wxWindow</scope><name>QueueEvent</name></member>
      <member refid="classwx_window_1a54808c933f22a891c5db646f6209fa4d" prot="public" virt="virtual"><scope>wxWindow</scope><name>Raise</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Ref</name></member>
      <member refid="classwx_window_1a29dc7251746154c821b17841b9877830" prot="public" virt="virtual"><scope>wxWindow</scope><name>Refresh</name></member>
      <member refid="classwx_window_1ab0ae6b9898cd261c39ebeb2891aa3d67" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>RefreshRect</name></member>
      <member refid="classwx_window_1a53ca57872dac5851ea6ba55a494b899b" prot="public" virt="virtual"><scope>wxWindow</scope><name>RegisterHotKey</name></member>
      <member refid="classwx_window_1adcc538819c11ecb3bd3e4e5d13c5ba7a" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ReleaseMouse</name></member>
      <member refid="classwx_window_1acee332ed4368d26e8bc3db5767c1240a" prot="public" virt="virtual"><scope>wxWindow</scope><name>RemoveChild</name></member>
      <member refid="classwx_window_1aacbfe424fa527966b954229a1db96ab5" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>RemoveEventHandler</name></member>
      <member refid="classwx_evt_handler_1a67a57b759c447b121bf70a7c9804c8f2" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>RemoveFilter</name></member>
      <member refid="classwx_window_1a7977b749284e65aecfed2ce146799cb9" prot="public" virt="virtual"><scope>wxWindow</scope><name>Reparent</name></member>
      <member refid="classwx_window_1a0f9814efc50316b4c57b7ec2bf78b716" prot="protected" virt="non-virtual"><scope>wxWindow</scope><name>SafelyProcessEvent</name></member>
      <member refid="classwx_window_1a65531bbc52f9508b0e31a9c08c97bd31" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ScreenToClient</name></member>
      <member refid="classwx_window_1a59d02b70a9107433836a977c4c0cd7a9" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ScreenToClient</name></member>
      <member refid="classwx_window_1aa5c5b683bd11a0d9771bd2fcdf643c64" prot="public" virt="virtual"><scope>wxWindow</scope><name>ScrollLines</name></member>
      <member refid="classwx_window_1adc0ed5e1c4925223cb901ced14b8343d" prot="public" virt="virtual"><scope>wxWindow</scope><name>ScrollPages</name></member>
      <member refid="classwx_window_1ab7be4956ff22da37fff2b8aaa581045c" prot="public" virt="virtual"><scope>wxWindow</scope><name>ScrollWindow</name></member>
      <member refid="classwx_evt_handler_1a3c07426130d2868a5ae7fa918a251f49" prot="public" virt="virtual"><scope>wxWindow</scope><name>SearchEventTable</name></member>
      <member refid="classwx_window_1a7e21eb6a0819281b29134a6432d064fe" prot="protected" virt="non-virtual"><scope>wxWindow</scope><name>SendDestroyEvent</name></member>
      <member refid="classwx_window_1a237f739b21937d3e8f1bff5fa82ba4c2" prot="public" virt="virtual"><scope>wxWindow</scope><name>SendSizeEvent</name></member>
      <member refid="classwx_window_1af7987987978fd8a93df88b29b19a6388" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SendSizeEventToParent</name></member>
      <member refid="classwx_window_1a0af5e9aa4dee6a4e92c0700f92605642" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetAcceleratorTable</name></member>
      <member refid="classwx_window_1a413220ead41f05a2ec2cfe10b3d573df" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetAccessible</name></member>
      <member refid="classwx_window_1ad369fe1db5c20f9d9edff7b5eb1f7226" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetAutoLayout</name></member>
      <member refid="classwx_window_1a37219df52734626e23401fd83b25d8a0" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetBackgroundColour</name></member>
      <member refid="classwx_window_1af14f8fd2ed2d30a9bbb5d4f9fd6594ec" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetBackgroundStyle</name></member>
      <member refid="classwx_window_1a2b8b2e99231a0ec1a05f5066f1b7f3d8" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetCanFocus</name></member>
      <member refid="classwx_window_1acfef5e1cada92c73e2937b84ff57ff57" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetCaret</name></member>
      <member refid="classwx_evt_handler_1a82c74f2cebfa02cb3c1563d459c872bf" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetClientData</name></member>
      <member refid="classwx_evt_handler_1af1e33a06087b8b2ddc43c7d15a91b326" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetClientObject</name></member>
      <member refid="classwx_window_1aa59f715217fffa5bcf14cd97f92e7840" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetClientSize</name></member>
      <member refid="classwx_window_1ab2aadc857ee7f55f47ab9a8669e3beb7" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetClientSize</name></member>
      <member refid="classwx_window_1a582d4d1f60a3f777627773b2da0bb2ef" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetClientSize</name></member>
      <member refid="classwx_window_1afa75d111bbd9a68f837101a5fbed60a7" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetConstraints</name></member>
      <member refid="classwx_window_1a0ccf78fe06722b500adfb7f36b8ce443" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetContainingSizer</name></member>
      <member refid="classwx_window_1ad83f9c51c6f31e0e05f598b47a19ed98" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetCursor</name></member>
      <member refid="classwx_window_1a5477a89c17fdcc3ec6c90274796eb1c3" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetDoubleBuffered</name></member>
      <member refid="classwx_window_1ae34b4d45433ca8287df0e47d46411e58" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetDropTarget</name></member>
      <member refid="classwx_window_1af6c84b7679183b377ba27a52a2f708b4" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetEventHandler</name></member>
      <member refid="classwx_evt_handler_1a7388ae19c8657e5656471b658c320036" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetEvtHandlerEnabled</name></member>
      <member refid="classwx_window_1ae9655f7c35ce7ac89cac2f6c0054b103" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetExtraStyle</name></member>
      <member refid="classwx_window_1a697f9f8d3ff389790f1c74b59bcb1d75" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetFocus</name></member>
      <member refid="classwx_window_1a6fa03f82d7917dff482754d0d2e2b1c8" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetFocusFromKbd</name></member>
      <member refid="classwx_window_1a9ab11e7da57a1d08918aa75fc33f6ad3" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetFont</name></member>
      <member refid="classwx_window_1a69f1e1c7ddd370d72e68c70f13ac8de9" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetForegroundColour</name></member>
      <member refid="classwx_window_1a4c1a2cbc7363237b3a7c70af4e702c72" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetHelpText</name></member>
      <member refid="classwx_window_1a7f27d0faed14effa013381bdc40e1bcd" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetId</name></member>
      <member refid="classwx_window_1ae6dfe0b0d4a8c666b21ce8df8d96727b" prot="protected" virt="virtual"><scope>wxWindow</scope><name>SetInitialBestSize</name></member>
      <member refid="classwx_window_1a1b309ca50ba87e34f968c83b79af1397" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetInitialSize</name></member>
      <member refid="classwx_window_1aa00ffea9f53587f29ae343adde033b8e" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetLabel</name></member>
      <member refid="classwx_window_1a7d494549f7fcfed44af95f8ee364c1f9" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetLayoutDirection</name></member>
      <member refid="classwx_window_1a664e5b2ddd817d9c58788269fe1d8479" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetMaxClientSize</name></member>
      <member refid="classwx_window_1a38b496214d728a3212afadee5ed51606" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetMaxSize</name></member>
      <member refid="classwx_window_1a6e35ba44b97e374dfffa460d41d94b31" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetMinClientSize</name></member>
      <member refid="classwx_window_1a3fc066f4d8083319f004ac43811d545d" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetMinSize</name></member>
      <member refid="classwx_window_1af80875cda5e1af98dcd7c8e712e3c800" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetName</name></member>
      <member refid="classwx_window_1aeab905f61df7004c1b76a3351dca9e96" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetNextHandler</name></member>
      <member refid="classwx_window_1a9a3f9d8477aab1d9176cd66ee56e75d9" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetOwnBackgroundColour</name></member>
      <member refid="classwx_window_1a89a4f62f23c1e7c845b8d07cecae4c43" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetOwnFont</name></member>
      <member refid="classwx_window_1a53f4a878e4e2d440bd00543f8014aaaa" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetOwnForegroundColour</name></member>
      <member refid="classwx_window_1aee57358435d6bd33f598c81354b47425" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetPalette</name></member>
      <member refid="classwx_window_1a81f23590239934fa10fded0566a65d8c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetPosition</name></member>
      <member refid="classwx_window_1a07f5f7ed3f78e0ef7b3dee3f4da81001" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetPreviousHandler</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetRefData</name></member>
      <member refid="classwx_window_1aa842d59529f873683e55cd8392ec46e9" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetScrollbar</name></member>
      <member refid="classwx_window_1afbf4dc9064cf70cfe6884554b97a27bf" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetScrollPos</name></member>
      <member refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a8e383bc6d5ca008965922a36c676aea0" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a030a928cd854de3def97c5720f14695b" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a2ea9b25296d591aea4470c8fd99ff7cb" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a307329dc3b10f5584aeb2cbce9293ffd" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetSizeHints</name></member>
      <member refid="classwx_window_1ae813c640e1e2bc6014423247050846cf" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetSizeHints</name></member>
      <member refid="classwx_window_1abc95691b45e29a52c24aa9d33d46dec1" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetSizer</name></member>
      <member refid="classwx_window_1a29938af9828fd35da666536cdfb6b73c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetSizerAndFit</name></member>
      <member refid="classwx_window_1a41dd19ed8809fd8ec662e2aa2a9579c3" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetThemeEnabled</name></member>
      <member refid="classwx_window_1a81a9fb74e3c6c7f4416e882f5e589b8c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetToolTip</name></member>
      <member refid="classwx_window_1a494e0b7cfca9299caa40e847767e7357" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetToolTip</name></member>
      <member refid="classwx_window_1ac8cf4398cec50ac36634760f45a0656f" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetTransparent</name></member>
      <member refid="classwx_window_1a00066c70049a7be3ce6b648d206e6432" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetValidator</name></member>
      <member refid="classwx_window_1a37f293b7904bc6668b86cccb0aea5669" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetVirtualSize</name></member>
      <member refid="classwx_window_1a8e95201edebe43b9623bd3bdc555af4d" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetVirtualSize</name></member>
      <member refid="classwx_window_1a306af30adec68689f74ed537b4f9d5fd" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetWindowStyle</name></member>
      <member refid="classwx_window_1aee2cf342f80523432e7f2299d299451b" prot="public" virt="virtual"><scope>wxWindow</scope><name>SetWindowStyleFlag</name></member>
      <member refid="classwx_window_1acd955418c336e73b3e32cadf1ca46e29" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>SetWindowVariant</name></member>
      <member refid="classwx_window_1a0c43a27fa04f9c17cc28fde71fdba490" prot="public" virt="virtual"><scope>wxWindow</scope><name>ShouldInheritColours</name></member>
      <member refid="classwx_window_1a7fbc92ce240a8d4f6956b6e0276ef07f" prot="public" virt="virtual"><scope>wxWindow</scope><name>Show</name></member>
      <member refid="classwx_window_1a596b1715edfc7609f352b2e000ecbaec" prot="public" virt="virtual"><scope>wxWindow</scope><name>ShowWithEffect</name></member>
      <member refid="classwx_window_1a279a532124073261b28131b6afb59a1e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Thaw</name></member>
      <member refid="classwx_window_1a8a4fa47129de552bfec37db8c69688a2" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>ToggleWindowStyle</name></member>
      <member refid="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" prot="public" virt="virtual"><scope>wxWindow</scope><name>TransferDataFromWindow</name></member>
      <member refid="classwx_window_1a88cc65e424a129d9b0057756cdb67ec9" prot="public" virt="virtual"><scope>wxWindow</scope><name>TransferDataToWindow</name></member>
      <member refid="classwx_evt_handler_1a5e25fece1cb6cbc11fd1d41ec140319c" prot="protected" virt="virtual"><scope>wxWindow</scope><name>TryAfter</name></member>
      <member refid="classwx_evt_handler_1ad4b0eac704dd005ac6a88fdb1e673c13" prot="protected" virt="virtual"><scope>wxWindow</scope><name>TryBefore</name></member>
      <member refid="classwx_evt_handler_1a5d3854b4dfb6230fd9d3cf3871c6a607" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Unbind</name></member>
      <member refid="classwx_evt_handler_1a9992b15750a133127d76ad6e9be7e11f" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Unbind</name></member>
      <member refid="classwx_evt_handler_1a22e5db2ec1d19c8252c056fd116975d7" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>Unlink</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>UnRef</name></member>
      <member refid="classwx_window_1a695f60d65f8f6c12e3c3645ad9c0c35b" prot="public" virt="virtual"><scope>wxWindow</scope><name>UnregisterHotKey</name></member>
      <member refid="classwx_window_1ad9bc342d1e38d221e37f0f6396950c8c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>UnreserveControlId</name></member>
      <member refid="classwx_window_1ae75712451673658b0a533480bf5eeaa4" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>UnsetToolTip</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>UnShare</name></member>
      <member refid="classwx_window_1abaf28f1a075fd1b10f761a8febe597ec" prot="public" virt="virtual"><scope>wxWindow</scope><name>Update</name></member>
      <member refid="classwx_window_1adf0a4987728bd0bf69f922641b3efbfc" prot="public" virt="virtual"><scope>wxWindow</scope><name>UpdateWindowUI</name></member>
      <member refid="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" prot="public" virt="virtual"><scope>wxWindow</scope><name>Validate</name></member>
      <member refid="classwx_window_1ac500152d1eca3a2ee98a68e7ea7372b5" prot="public" virt="virtual"><scope>wxWindow</scope><name>WarpPointer</name></member>
      <member refid="classwx_window_1aa456f800c9dde3b2361cad0abf54bc27" prot="public" virt="virtual"><scope>wxWindow</scope><name>WindowToClientSize</name></member>
      <member refid="classwx_evt_handler_1a3f0166c4154227d05575b01eb2c8d4be" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>wxEvtHandler</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>wxObject</name></member>
      <member refid="classwx_window_1a695200a4915b934926dcf32afa44544c" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>wxWindow</name></member>
      <member refid="classwx_window_1a7799009b10d1765d1bbb6db4994f922e" prot="public" virt="non-virtual"><scope>wxWindow</scope><name>wxWindow</name></member>
      <member refid="classwx_evt_handler_1a372d2239d91521eddc8fd2715fcab584" prot="public" virt="virtual"><scope>wxWindow</scope><name>~wxEvtHandler</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxWindow</scope><name>~wxObject</name></member>
      <member refid="classwx_window_1a0c2a46181a89c349327f0b276f5ef8d7" prot="public" virt="virtual"><scope>wxWindow</scope><name>~wxWindow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

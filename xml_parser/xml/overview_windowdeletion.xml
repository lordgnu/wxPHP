<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="overview_windowdeletion" kind="page">
    <compoundname>overview_windowdeletion</compoundname>
    <title>Window Deletion</title>
    <detaileddescription>
<para>Classes: <ref refid="classwx_close_event" kindref="compound">wxCloseEvent</ref>, <ref refid="classwx_window" kindref="compound">wxWindow</ref></para><para>Window deletion can be a confusing subject, so this overview is provided to help make it clear when and how you delete windows, or respond to user requests to close windows.</para><para><itemizedlist>
<listitem><para><ref refid="overview_windowdeletion_1overview_windowdeletion_sequence" kindref="member">Sequence of Events During Window Deletion</ref> </para></listitem>
<listitem><para><ref refid="overview_windowdeletion_1overview_windowdeletion_close" kindref="member">Closing Windows</ref> </para></listitem>
<listitem><para><ref refid="overview_windowdeletion_1overview_windowdeletion_default" kindref="member">Default Window Close Behaviour</ref> </para></listitem>
<listitem><para><ref refid="overview_windowdeletion_1overview_windowdeletion_menuexit" kindref="member">User Calls to Exit From a Menu</ref> </para></listitem>
<listitem><para><ref refid="overview_windowdeletion_1overview_windowdeletion_exitapp" kindref="member">Exiting the Application Gracefully</ref> </para></listitem>
<listitem><para><ref refid="overview_windowdeletion_1overview_windowdeletion_deletion" kindref="member">Automatic Deletion of Child Windows</ref> </para></listitem>
<listitem><para><ref refid="overview_windowdeletion_1overview_windowdeletion_windowkinds" kindref="member">Other Kinds of Windows</ref></para></listitem>
</itemizedlist>
<hruler/>
</para><sect1 id="overview_windowdeletion_1overview_windowdeletion_sequence">
<title>Sequence of Events During Window Deletion</title>
<para>When the user clicks on the system close button or system close command, in a frame or a dialog, wxWidgets calls <ref refid="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" kindref="member">wxWindow::Close</ref>. This in turn generates an EVT_CLOSE event: see <ref refid="classwx_close_event" kindref="compound">wxCloseEvent</ref>.</para><para>It is the duty of the application to define a suitable event handler, and decide whether or not to destroy the window. If the application is for some reason forcing the application to close (<ref refid="classwx_close_event_1adaa0548df45e05e8487cc5664ac352cf" kindref="member">wxCloseEvent::CanVeto</ref> returns false), the window should always be destroyed, otherwise there is the option to ignore the request, or maybe wait until the user has answered a question before deciding whether it is safe to close. The handler for EVT_CLOSE should signal to the calling code if it does not destroy the window, by calling <ref refid="classwx_close_event_1a0ec337c77613d5d8407831cd64e16417" kindref="member">wxCloseEvent::Veto</ref>. Calling this provides useful information to the calling code.</para><para>The <ref refid="classwx_close_event" kindref="compound">wxCloseEvent</ref> handler should only call <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">wxWindow::Destroy</ref> to delete the window, and not use the <computeroutput>delete</computeroutput> operator. This is because for some window classes, wxWidgets delays actual deletion of the window until all events have been processed, since otherwise there is the danger that events will be sent to a non-existent window.</para><para>As reinforced in the next section, calling Close does not guarantee that the window will be destroyed. Call <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">wxWindow::Destroy</ref> if you want to be certain that the window is destroyed.</para></sect1>
<sect1 id="overview_windowdeletion_1overview_windowdeletion_close">
<title>Closing Windows</title>
<para>Your application can either use <ref refid="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" kindref="member">wxWindow::Close</ref> event just as the framework does, or it can call <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">wxWindow::Destroy</ref> directly. If using Close(), you can pass a true argument to this function to tell the event handler that we definitely want to delete the frame and it cannot be vetoed.</para><para>The advantage of using Close instead of Destroy is that it will call any clean-up code defined by the EVT_CLOSE handler; for example it may close a document contained in a window after first asking the user whether the work should be saved. Close can be vetoed by this process (return false), whereas Destroy definitely destroys the window.</para></sect1>
<sect1 id="overview_windowdeletion_1overview_windowdeletion_default">
<title>Default Window Close Behaviour</title>
<para>The default close event handler for <ref refid="classwx_dialog" kindref="compound">wxDialog</ref> simulates a Cancel command, generating a wxID_CANCEL event. Since the handler for this cancel event might itself call Close, there is a check for infinite looping. The default handler for wxID_CANCEL hides the dialog (if modeless) or calls EndModal(wxID_CANCEL) (if modal). In other words, by default, the dialog <emphasis>is</emphasis> not destroyed (it might have been created on the stack, so the assumption of dynamic creation cannot be made).</para><para>The default close event handler for <ref refid="classwx_frame" kindref="compound">wxFrame</ref> destroys the frame using Destroy().</para></sect1>
<sect1 id="overview_windowdeletion_1overview_windowdeletion_menuexit">
<title>User Calls to Exit From a Menu</title>
<para>What should I do when the user calls up Exit from a menu? You can simply call <ref refid="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" kindref="member">wxWindow::Close</ref> on the frame. This will invoke your own close event handler which may destroy the frame.</para><para>You can do checking to see if your application can be safely exited at this point, either from within your close event handler, or from within your exit menu command handler. For example, you may wish to check that all files have been saved. Give the user a chance to save and quit, to not save but quit anyway, or to cancel the exit command altogether.</para></sect1>
<sect1 id="overview_windowdeletion_1overview_windowdeletion_exitapp">
<title>Exiting the Application Gracefully</title>
<para>A wxWidgets application automatically exits when the last top level window (<ref refid="classwx_frame" kindref="compound">wxFrame</ref> or <ref refid="classwx_dialog" kindref="compound">wxDialog</ref>), is destroyed. Put any application-wide cleanup code in <ref refid="classwx_app_console_1a5ee60051c92b0b2933258799626a0485" kindref="member">wxApp::OnExit</ref> (this is a virtual function, not an event handler).</para></sect1>
<sect1 id="overview_windowdeletion_1overview_windowdeletion_deletion">
<title>Automatic Deletion of Child Windows</title>
<para>Child windows are deleted from within the parent destructor. This includes any children that are themselves frames or dialogs, so you may wish to close these child frame or dialog windows explicitly from within the parent close handler.</para></sect1>
<sect1 id="overview_windowdeletion_1overview_windowdeletion_windowkinds">
<title>Other Kinds of Windows</title>
<para>So far we&apos;ve been talking about &apos;managed&apos; windows, i.e. frames and dialogs. Windows with parents, such as controls, don&apos;t have delayed destruction and don&apos;t usually have close event handlers, though you can implement them if you wish. For consistency, continue to use the <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">wxWindow::Destroy</ref> function instead of the <computeroutput>delete</computeroutput> operator when deleting these kinds of windows explicitly. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_weak_ref_3_01_t_01_4" kind="class" prot="public">
    <compoundname>wxWeakRef&lt; T &gt;</compoundname>
    <includes local="no">wx/weakref.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classwx_weak_ref_3_01_t_01_4_1a4fecc24579d3b687f2901c3ffb376265" prot="public" static="no">
        <type>T</type>
        <definition>typedef T wxWeakRef&lt; T &gt;::element_type</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <briefdescription>
<para>Type of the element stored by this reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="106" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1ac3c5efac31ae83a70849e27643f0a82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxWeakRef&lt; T &gt;::wxWeakRef</definition>
        <argsstring>(T *pobj=NULL)</argsstring>
        <name>wxWeakRef</name>
        <param>
          <type>T *</type>
          <declname>pobj</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The weak reference is initialized to <emphasis>pobj</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="111"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1ae751cee14dffbd70905482265f7cbab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxWeakRef&lt; T &gt;::wxWeakRef</definition>
        <argsstring>(const wxWeakRef&lt; T &gt; &amp;wr)</argsstring>
        <name>wxWeakRef</name>
        <param>
          <type>const wxWeakRef&lt; T &gt; &amp;</type>
          <declname>wr</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="116"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a58810f09705aecf916d451bb16415c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxWeakRef&lt; T &gt;::~wxWeakRef</definition>
        <argsstring>()</argsstring>
        <name>~wxWeakRef</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="121"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1acb31fe6e5191ee43a2b467b28df3c126" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWeakRef&lt; T &gt;::OnObjectDestroy</definition>
        <argsstring>()</argsstring>
        <name>OnObjectDestroy</name>
        <briefdescription>
<para>Called when the tracked object is destroyed. </para>        </briefdescription>
        <detaileddescription>
<para>Be default sets internal pointer to NULL. You need to call this method if you override it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="128"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1ab175c77e8fabc30fcc3489aa69aca139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWeakRef&lt; T &gt;::Release</definition>
        <argsstring>()</argsstring>
        <name>Release</name>
        <briefdescription>
<para>Release currently tracked object and rests object reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="133"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1addf1a49d933b7a6acffb29e15587b935" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
<para>Returns pointer to the tracked object or NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="138"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a5523917fdaace96d8a9e15e43a242e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::operator=</definition>
        <argsstring>(wxWeakRef&lt; T &gt; &amp;wr)</argsstring>
        <name>operator=</name>
        <param>
          <type>wxWeakRef&lt; T &gt; &amp;</type>
          <declname>wr</declname>
        </param>
        <briefdescription>
<para>Release currently tracked object and start tracking the same object as the wxWeakRef <emphasis>wr</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="144"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a14850b8f235acbf65e322306c3198a41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::operator*</definition>
        <argsstring>() const </argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Implicit conversion to T*. </para>        </briefdescription>
        <detaileddescription>
<para>Returns pointer to the tracked object or NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="150"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a89453000905ac59eb2e683ff6254467f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; wxWeakRef&lt; T &gt;::operator*</definition>
        <argsstring>() const </argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Returns a reference to the tracked object. </para>        </briefdescription>
        <detaileddescription>
<para>If the internal pointer is NULL this method will cause an assert in debug mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="156"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1ac11befd5621ba4f71ff45c681e281fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Smart pointer member access. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the tracked object. If the internal pointer is NULL this method will cause an assert in debug mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="162"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a63400d0275ad3735b4f94b6421d44326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::operator=</definition>
        <argsstring>(T *pobj)</argsstring>
        <name>operator=</name>
        <param>
          <type>T *</type>
          <declname>pobj</declname>
        </param>
        <briefdescription>
<para>Releases the currently tracked object and starts tracking <emphasis>pobj</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>A weak reference may be reset by passing <emphasis></emphasis> NULL as <emphasis>pobj</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_weak_ref_3_01_t_01_4" kindref="compound">wxWeakRef&lt;T&gt;</ref> is a template class for weak references to wxWidgets objects, such as <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref>, <ref refid="classwx_window" kindref="compound">wxWindow</ref> and <ref refid="classwx_object" kindref="compound">wxObject</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>A weak reference behaves much like an ordinary pointer, but when the object pointed is destroyed, the weak reference is automatically reset to a NULL pointer.</para><para><ref refid="classwx_weak_ref_3_01_t_01_4" kindref="compound">wxWeakRef&lt;T&gt;</ref> can be used whenever one must keep a pointer to an object that one does not directly own, and that may be destroyed before the object holding the reference.</para><para><ref refid="classwx_weak_ref_3_01_t_01_4" kindref="compound">wxWeakRef&lt;T&gt;</ref> is a small object and the mechanism behind it is fast (<bold>O(1)</bold>). So the overall cost of using it is small.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_window" kindref="compound" tooltip="wxWindow is the base class for all windows and represents any visible object on screen.">wxWindow</ref><sp/>*wnd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_window" kindref="compound" tooltip="wxWindow is the base class for all windows and represents any visible object on screen.">wxWindow</ref>(<sp/>parent,<sp/>wxID_ANY,<sp/></highlight><highlight class="stringliteral">&quot;wxWindow&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxWeakRef&lt;wxWindow&gt;<sp/>wr<sp/>=<sp/>wnd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxWindowRef<sp/>wr2<sp/>=<sp/>wnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>above,<sp/>but<sp/>using<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>things<sp/>with<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wnd-&gt;<ref refid="classwx_window_1a7fbc92ce240a8d4f6956b6e0276ef07f" kindref="member" tooltip="Shows or hides the window.">Show</ref>(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Weak<sp/>ref<sp/>is<sp/>used<sp/>like<sp/>an<sp/>ordinary<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wr-&gt;Show(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wnd-&gt;<ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member" tooltip="Destroys the window safely.">Destroy</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>the<sp/>weak<sp/>ref<sp/>has<sp/>been<sp/>reset,<sp/>so<sp/>we<sp/>don&apos;t<sp/>risk<sp/>accessing</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>dangling<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__debug_1ga204cc264ee560b67e6c6467ba8ffee5f" kindref="member" tooltip="Assert macro.">wxASSERT</ref>(<sp/>wr==NULL<sp/>);</highlight></codeline>
</programlisting></para><para><ref refid="classwx_weak_ref_3_01_t_01_4" kindref="compound">wxWeakRef&lt;T&gt;</ref> works for any objects that are derived from <ref refid="classwx_trackable" kindref="compound">wxTrackable</ref>. By default, <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> and <ref refid="classwx_window" kindref="compound">wxWindow</ref> derive from <ref refid="classwx_trackable" kindref="compound">wxTrackable</ref>. However, <ref refid="classwx_object" kindref="compound">wxObject</ref> does not, so types like <ref refid="classwx_font" kindref="compound">wxFont</ref> and <ref refid="classwx_colour" kindref="compound">wxColour</ref> are not trackable. The example below shows how to create a <ref refid="classwx_object" kindref="compound">wxObject</ref> derived class that is trackable:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">wxMyTrackableObject<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classwx_object" kindref="compound" tooltip="This is the root class of many of the wxWidgets classes.">wxObject</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classwx_trackable" kindref="compound" tooltip="Add-on base class for a trackable object.">wxTrackable</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>other<sp/>members<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
</programlisting></para><para>The following types of weak references are predefined:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>wxWeakRef&lt;wxEvtHandler&gt;<sp/><sp/>wxEvtHandlerRef;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>wxWeakRef&lt;wxWindow&gt;<sp/><sp/><sp/><sp/><sp/><sp/>wxWindowRef;</highlight></codeline>
</programlisting></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to which the smart pointer points to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/>None; this class implementation is entirely header-based.</para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__smartpointers" kindref="compound">Smart Pointers</ref></para><para><simplesect kind="see"><para><ref refid="classwx_shared_ptr_3_01_t_01_4" kindref="compound">wxSharedPtr&lt;T&gt;</ref>, <ref refid="classwx_scoped_ptr_3_01_t_01_4" kindref="compound">wxScopedPtr&lt;T&gt;</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" line="103" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/weakref.h" bodystart="102" bodyend="169"/>
    <listofallmembers>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a4fecc24579d3b687f2901c3ffb376265" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>element_type</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1addf1a49d933b7a6acffb29e15587b935" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>get</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1acb31fe6e5191ee43a2b467b28df3c126" prot="public" virt="virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>OnObjectDestroy</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a14850b8f235acbf65e322306c3198a41" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator*</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a89453000905ac59eb2e683ff6254467f" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator*</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1ac11befd5621ba4f71ff45c681e281fb2" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator-&gt;</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a5523917fdaace96d8a9e15e43a242e0d" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator=</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a63400d0275ad3735b4f94b6421d44326" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator=</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1ab175c77e8fabc30fcc3489aa69aca139" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>Release</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1ac3c5efac31ae83a70849e27643f0a82d" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>wxWeakRef</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1ae751cee14dffbd70905482265f7cbab3" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>wxWeakRef</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a58810f09705aecf916d451bb16415c05" prot="public" virt="virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>~wxWeakRef</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

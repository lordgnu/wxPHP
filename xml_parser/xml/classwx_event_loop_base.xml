<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_event_loop_base" kind="class" prot="public">
    <compoundname>wxEventLoopBase</compoundname>
    <includes local="no">wx/evtloop.h</includes>
      <sectiondef kind="user-defined">
      <header>Dispatch and processing</header>
      <memberdef kind="function" id="classwx_event_loop_base_1a391d73eec67c7c05308368ef1939b330" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int wxEventLoopBase::Run</definition>
        <argsstring>()=0</argsstring>
        <name>Run</name>
        <briefdescription>
<para>Start the event loop, return the exit code when it is finished. </para>        </briefdescription>
        <detaileddescription>
<para>Logically, this method calls <ref refid="classwx_event_loop_base_1aa6f5e8cf5d07a6f9d2b99a4b64325b84" kindref="member">Dispatch()</ref> in a loop until it returns false and also takes care of generating idle events during each loop iteration. However not all implementations of this class really implement it like this (e.g. wxGTK does not) so you shouldn&apos;t rely on <ref refid="classwx_event_loop_base_1aa6f5e8cf5d07a6f9d2b99a4b64325b84" kindref="member">Dispatch()</ref> being called from inside this function.</para><para><simplesect kind="return"><para>The argument passed to <ref refid="classwx_event_loop_base_1a8d5da74a520b7f190829ce26943613c4" kindref="member">Exit()</ref> which terminated this event loop. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="75"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1aeaba81e95ac7d13d1b8f6fca4e2c9906" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxEventLoopBase::IsRunning</definition>
        <argsstring>() const </argsstring>
        <name>IsRunning</name>
        <briefdescription>
<para>Return true if this event loop is currently running. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that even if this event loop hasn&apos;t terminated yet but has just spawned a nested (e.g. modal) event loop, this method would return false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="84"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1afab302f6b6517d6fb361abb0f8da9b4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxEventLoopBase::IsOk</definition>
        <argsstring>() const </argsstring>
        <name>IsOk</name>
        <briefdescription>
<para>Use this to check whether the event loop was successfully created before using it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="90"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1a8d5da74a520b7f190829ce26943613c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void wxEventLoopBase::Exit</definition>
        <argsstring>(int rc=0)=0</argsstring>
        <name>Exit</name>
        <param>
          <type>int</type>
          <declname>rc</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Exit from the loop with the given exit code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="95"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1a69f9cb42c4105a5041854d3f93ec2e64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxEventLoopBase::Pending</definition>
        <argsstring>() const =0</argsstring>
        <name>Pending</name>
        <briefdescription>
<para>Return true if any events are available. </para>        </briefdescription>
        <detaileddescription>
<para>If this method returns true, calling <ref refid="classwx_event_loop_base_1aa6f5e8cf5d07a6f9d2b99a4b64325b84" kindref="member">Dispatch()</ref> will not block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="102"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1aa6f5e8cf5d07a6f9d2b99a4b64325b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxEventLoopBase::Dispatch</definition>
        <argsstring>()=0</argsstring>
        <name>Dispatch</name>
        <briefdescription>
<para>Dispatches the next event in the windowing system event queue. </para>        </briefdescription>
        <detaileddescription>
<para>Blocks until an event appears if there are none currently (use <ref refid="classwx_event_loop_base_1a69f9cb42c4105a5041854d3f93ec2e64" kindref="member">Pending()</ref> if this is not wanted).</para><para>This can be used for programming event loops, e.g.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(evtloop-&gt;Pending())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evtloop-&gt;Dispatch();</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>false if the event loop should stop and true otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_event_loop_base_1a69f9cb42c4105a5041854d3f93ec2e64" kindref="member">Pending()</ref>, <ref refid="classwx_event_loop_base" kindref="compound">wxEventLoopBase</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="120"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1ac150a90acfad227f2ce174139289d099" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int wxEventLoopBase::DispatchTimeout</definition>
        <argsstring>(unsigned long timeout)=0</argsstring>
        <name>DispatchTimeout</name>
        <param>
          <type>unsigned long</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Dispatch an event but not wait longer than the specified timeout for it. </para>        </briefdescription>
        <detaileddescription>
<para>If an event is received before the specified <emphasis>timeout</emphasis> expires, it is processed and the function returns 1 normally or 0 if the event loop should quite. Otherwise, i.e. if the timeout expires, the functions returns -1 without processing any events.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximal time to wait for the events in milliseconds.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if an event was processed, 0 if the event loop should quit or -1 if the timeout expired. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="138"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1a96d41f8277d23fd9a4a5a0dfe3084120" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void wxEventLoopBase::WakeUp</definition>
        <argsstring>()=0</argsstring>
        <name>WakeUp</name>
        <briefdescription>
<para>Called by wxWidgets to wake up the event loop even if it is currently blocked inside <ref refid="classwx_event_loop_base_1aa6f5e8cf5d07a6f9d2b99a4b64325b84" kindref="member">Dispatch()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="144"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Idle handling</header>
      <memberdef kind="function" id="classwx_event_loop_base_1a07b4fe866e5f267ca50709efb351f606" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxEventLoopBase::WakeUpIdle</definition>
        <argsstring>()</argsstring>
        <name>WakeUpIdle</name>
        <briefdescription>
<para>Makes sure that idle events are sent again. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="157"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1a5a6f47a392e5802e4d614b0dc398c6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxEventLoopBase::ProcessIdle</definition>
        <argsstring>()</argsstring>
        <name>ProcessIdle</name>
        <briefdescription>
<para>This virtual function is called when the application becomes idle and normally just sends <ref refid="classwx_idle_event" kindref="compound">wxIdleEvent</ref> to all interested parties. </para>        </briefdescription>
        <detaileddescription>
<para>It should return true if more idle events are needed, false if not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Yield-related hooks</header>
      <memberdef kind="function" id="classwx_event_loop_base_1a890b327bb21df1aa4989733fccf42fe5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxEventLoopBase::IsYielding</definition>
        <argsstring>() const </argsstring>
        <name>IsYielding</name>
        <briefdescription>
<para>Returns true if called from inside <ref refid="classwx_event_loop_base_1a43b540654cc046ecea5e1e497acd4189" kindref="member">Yield()</ref> or from inside <ref refid="classwx_event_loop_base_1afb5ed08160c7e6b1364170af6115af55" kindref="member">YieldFor()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="178"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1a43b540654cc046ecea5e1e497acd4189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxEventLoopBase::Yield</definition>
        <argsstring>(bool onlyIfNeeded=false)</argsstring>
        <name>Yield</name>
        <param>
          <type>bool</type>
          <declname>onlyIfNeeded</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Yields control to pending messages in the windowing system. </para>        </briefdescription>
        <detaileddescription>
<para>This can be useful, for example, when a time-consuming process writes to a text window. Without an occasional yield, the text window will not be updated properly, and on systems with cooperative multitasking, such as Windows 3.1 other processes will not respond.</para><para>Caution should be exercised, however, since yielding may allow the user to perform actions which are not compatible with the current task. Disabling menu items or whole menus during processing can avoid unwanted reentrance of code: see <ref refid="group__group__funcmacro__appinitterm_1ga25abb4004fac0bcc0b937d93657c8cba" kindref="member">wxSafeYield</ref> for a better function. You can avoid unwanted reentrancies also using <ref refid="classwx_event_loop_base_1a890b327bb21df1aa4989733fccf42fe5" kindref="member">IsYielding()</ref>.</para><para>Note that <ref refid="classwx_event_loop_base_1a43b540654cc046ecea5e1e497acd4189" kindref="member">Yield()</ref> will not flush the message logs. This is intentional as calling <ref refid="classwx_event_loop_base_1a43b540654cc046ecea5e1e497acd4189" kindref="member">Yield()</ref> is usually done to quickly update the screen and popping up a message box dialog may be undesirable. If you do wish to flush the log messages immediately (otherwise it will be done during the next idle loop iteration), call <ref refid="classwx_log_1ab0808092c4ec1d503e261d9d226d7e90" kindref="member">wxLog::FlushActive</ref>.</para><para>Calling <ref refid="classwx_event_loop_base_1a43b540654cc046ecea5e1e497acd4189" kindref="member">Yield()</ref> recursively is normally an error and an assert failure is raised in debug build if such situation is detected. However if the <emphasis>onlyIfNeeded</emphasis> parameter is true, the method will just silently return false instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="205"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1afb5ed08160c7e6b1364170af6115af55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxEventLoopBase::YieldFor</definition>
        <argsstring>(long eventsToProcess)</argsstring>
        <name>YieldFor</name>
        <param>
          <type>long</type>
          <declname>eventsToProcess</declname>
        </param>
        <briefdescription>
<para>Works like <ref refid="classwx_event_loop_base_1a43b540654cc046ecea5e1e497acd4189" kindref="member">Yield()</ref> with <emphasis>onlyIfNeeded</emphasis> == true, except that it allows the caller to specify a mask of the <ref refid="event_8h_1a685cc8dc6176be3ab0d40e3f72719e7d" kindref="member">wxEventCategory</ref> values which indicates which events should be processed and which should instead be &quot;delayed&quot; (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>processed by the main loop later).</para><para>Note that this is a safer alternative to <ref refid="classwx_event_loop_base_1a43b540654cc046ecea5e1e497acd4189" kindref="member">Yield()</ref> since it ensures that only the events you&apos;re interested to will be processed; i.e. this method helps to avoid unwanted reentrancies.</para><para>Note that currently only wxMSW and wxGTK do support selective yield of native events coming from the underlying GUI toolkit. wxWidgets events posted using <ref refid="classwx_evt_handler_1a0737c6d2cbcd5ded4b1ecdd53ed0def3" kindref="member">wxEvtHandler::AddPendingEvent</ref> or <ref refid="classwx_evt_handler_1acffd03bf407a856166ea71ef0318b59a" kindref="member">wxEvtHandler::QueueEvent</ref> are instead selectively processed by all ports.</para><para><simplesect kind="see"><para><ref refid="classwx_event_1a525e5c576e64090af493cb81db2da59b" kindref="member">wxEvent::GetEventCategory</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="224"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1adce29a2d6237e31795787c56984d91c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxEventLoopBase::IsEventAllowedInsideYield</definition>
        <argsstring>(wxEventCategory cat) const </argsstring>
        <name>IsEventAllowedInsideYield</name>
        <param>
          <type><ref refid="event_8h_1a685cc8dc6176be3ab0d40e3f72719e7d" kindref="member">wxEventCategory</ref></type>
          <declname>cat</declname>
        </param>
        <briefdescription>
<para>Returns true if the given event category is allowed inside a <ref refid="classwx_event_loop_base_1afb5ed08160c7e6b1364170af6115af55" kindref="member">YieldFor()</ref> call (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>compares the given category against the last mask passed to <ref refid="classwx_event_loop_base_1afb5ed08160c7e6b1364170af6115af55" kindref="member">YieldFor()</ref>).</para><para><simplesect kind="see"><para><ref refid="classwx_event_1a525e5c576e64090af493cb81db2da59b" kindref="member">wxEvent::GetEventCategory</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="233"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_event_loop_base_1a2027e53527c15342c2e23c8217e82ca3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_event_loop_base" kindref="compound">wxEventLoopBase</ref> *</type>
        <definition>static wxEventLoopBase* wxEventLoopBase::GetActive</definition>
        <argsstring>()</argsstring>
        <name>GetActive</name>
        <briefdescription>
<para>Return the currently active (running) event loop. </para>        </briefdescription>
        <detaileddescription>
<para>May return NULL if there is no active event loop (e.g. during application startup or shutdown). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="40"/>
      </memberdef>
      <memberdef kind="function" id="classwx_event_loop_base_1a23646c8c2bdf2def39c856ac8ec250d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxEventLoopBase::SetActive</definition>
        <argsstring>(wxEventLoopBase *loop)</argsstring>
        <name>SetActive</name>
        <param>
          <type><ref refid="classwx_event_loop_base" kindref="compound">wxEventLoopBase</ref> *</type>
          <declname>loop</declname>
        </param>
        <briefdescription>
<para>Set currently active (running) event loop. </para>        </briefdescription>
        <detaileddescription>
<para>Called by <ref refid="classwx_event_loop_activator" kindref="compound">wxEventLoopActivator</ref>, use an instance of this class instead of calling this method directly to ensure that the previously active event loop is restored.</para><para>Results in a call to <ref refid="classwx_app_console_1aa116701a3bd7700fe6979117e53ae999" kindref="member">wxAppConsole::OnEventLoopEnter</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_event_loop_base_1a676545d2915e616e70683e056d703553" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxEventLoopBase::IsMain</definition>
        <argsstring>() const </argsstring>
        <name>IsMain</name>
        <briefdescription>
<para>Returns true if this is the main loop executed by <ref refid="classwx_app_console_1ac05a28c7cdb529f2cdfe77b3431c385c" kindref="member">wxApp::OnRun()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classwx_event_loop_base_1aeb893bc6dbbf80f19925a9e108965669" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxEventLoopBase::OnExit</definition>
        <argsstring>()</argsstring>
        <name>OnExit</name>
        <briefdescription>
<para>This function is called before the event loop terminates, whether this happens normally (because of <ref refid="classwx_event_loop_base_1a8d5da74a520b7f190829ce26943613c4" kindref="member">Exit()</ref> call) or abnormally (because of an exception thrown from inside the loop). </para>        </briefdescription>
        <detaileddescription>
<para>The default implementation calls <ref refid="classwx_app_console_1a8f94f02a752bb416e99161710637d8f3" kindref="member">wxAppConsole::OnEventLoopExit</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="246"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all event loop implementations. </para>    </briefdescription>
    <detaileddescription>
<para>An event loop is a class which queries the queue of native events sent to the wxWidgets application and dispatches them to the appropriate wxEvtHandlers.</para><para>An object of this class is created by <ref refid="classwx_app_traits_1a11205b08706b4d83bc83d0170511c909" kindref="member">wxAppTraits::CreateEventLoop()</ref> and used by <ref refid="classwx_app" kindref="compound">wxApp</ref> to run the main application event loop. Temporary event loops are usually created by <ref refid="classwx_dialog_1a6e078c3d0653f75ad3c34a37c0b54637" kindref="member">wxDialog::ShowModal()</ref>.</para><para>You can create your own event loop if you need, provided that you restore the main event loop once yours is destroyed (see <ref refid="classwx_event_loop_activator" kindref="compound">wxEventLoopActivator</ref>).</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__appmanagement" kindref="compound">Application and Process Management</ref></para><para><simplesect kind="see"><para><ref refid="classwx_app" kindref="compound">wxApp</ref>, <ref refid="classwx_event_loop_activator" kindref="compound">wxEventLoopActivator</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" line="32" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/evtloop.h" bodystart="31" bodyend="247"/>
    <listofallmembers>
      <member refid="classwx_event_loop_base_1aa6f5e8cf5d07a6f9d2b99a4b64325b84" prot="public" virt="pure-virtual"><scope>wxEventLoopBase</scope><name>Dispatch</name></member>
      <member refid="classwx_event_loop_base_1ac150a90acfad227f2ce174139289d099" prot="public" virt="pure-virtual"><scope>wxEventLoopBase</scope><name>DispatchTimeout</name></member>
      <member refid="classwx_event_loop_base_1a8d5da74a520b7f190829ce26943613c4" prot="public" virt="pure-virtual"><scope>wxEventLoopBase</scope><name>Exit</name></member>
      <member refid="classwx_event_loop_base_1a2027e53527c15342c2e23c8217e82ca3" prot="public" virt="non-virtual"><scope>wxEventLoopBase</scope><name>GetActive</name></member>
      <member refid="classwx_event_loop_base_1adce29a2d6237e31795787c56984d91c3" prot="public" virt="virtual"><scope>wxEventLoopBase</scope><name>IsEventAllowedInsideYield</name></member>
      <member refid="classwx_event_loop_base_1a676545d2915e616e70683e056d703553" prot="public" virt="non-virtual"><scope>wxEventLoopBase</scope><name>IsMain</name></member>
      <member refid="classwx_event_loop_base_1afab302f6b6517d6fb361abb0f8da9b4e" prot="public" virt="virtual"><scope>wxEventLoopBase</scope><name>IsOk</name></member>
      <member refid="classwx_event_loop_base_1aeaba81e95ac7d13d1b8f6fca4e2c9906" prot="public" virt="non-virtual"><scope>wxEventLoopBase</scope><name>IsRunning</name></member>
      <member refid="classwx_event_loop_base_1a890b327bb21df1aa4989733fccf42fe5" prot="public" virt="virtual"><scope>wxEventLoopBase</scope><name>IsYielding</name></member>
      <member refid="classwx_event_loop_base_1aeb893bc6dbbf80f19925a9e108965669" prot="protected" virt="virtual"><scope>wxEventLoopBase</scope><name>OnExit</name></member>
      <member refid="classwx_event_loop_base_1a69f9cb42c4105a5041854d3f93ec2e64" prot="public" virt="pure-virtual"><scope>wxEventLoopBase</scope><name>Pending</name></member>
      <member refid="classwx_event_loop_base_1a5a6f47a392e5802e4d614b0dc398c6f7" prot="public" virt="virtual"><scope>wxEventLoopBase</scope><name>ProcessIdle</name></member>
      <member refid="classwx_event_loop_base_1a391d73eec67c7c05308368ef1939b330" prot="public" virt="pure-virtual"><scope>wxEventLoopBase</scope><name>Run</name></member>
      <member refid="classwx_event_loop_base_1a23646c8c2bdf2def39c856ac8ec250d8" prot="public" virt="non-virtual"><scope>wxEventLoopBase</scope><name>SetActive</name></member>
      <member refid="classwx_event_loop_base_1a96d41f8277d23fd9a4a5a0dfe3084120" prot="public" virt="pure-virtual"><scope>wxEventLoopBase</scope><name>WakeUp</name></member>
      <member refid="classwx_event_loop_base_1a07b4fe866e5f267ca50709efb351f606" prot="public" virt="virtual"><scope>wxEventLoopBase</scope><name>WakeUpIdle</name></member>
      <member refid="classwx_event_loop_base_1a43b540654cc046ecea5e1e497acd4189" prot="public" virt="non-virtual"><scope>wxEventLoopBase</scope><name>Yield</name></member>
      <member refid="classwx_event_loop_base_1afb5ed08160c7e6b1364170af6115af55" prot="public" virt="non-virtual"><scope>wxEventLoopBase</scope><name>YieldFor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="group__group__funcmacro__thread" kind="group">
    <compoundname>group_funcmacro_thread</compoundname>
    <title>Threads</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__funcmacro__thread_1ga11517a2eeeb6367d9e0d705fa29dd97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxIsMainThread</definition>
        <argsstring>()</argsstring>
        <name>wxIsMainThread</name>
        <briefdescription>
<para>Returns true if this thread is the main one. </para>        </briefdescription>
        <detaileddescription>
<para>Always returns true if <computeroutput>wxUSE_THREADS</computeroutput> is 0.</para><para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1751"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__thread_1ga6671c1599fd4ccf6a7c7bb90b2304709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxMutexGuiEnter</definition>
        <argsstring>()</argsstring>
        <name>wxMutexGuiEnter</name>
        <briefdescription>
<para>This function must be called when any thread other than the main GUI thread wants to get access to the GUI library. </para>        </briefdescription>
        <detaileddescription>
<para>This function will block the execution of the calling thread until the main thread (or any other thread holding the main GUI lock) leaves the GUI library and no other thread will enter the GUI library until the calling thread calls <ref refid="group__group__funcmacro__thread_1gaddfdb2956953480a379d998ea7ced5b5" kindref="member">wxMutexGuiLeave()</ref>.</para><para>Typically, these functions are used like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyThread::Foo(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>doing<sp/>any<sp/>GUI<sp/>calls<sp/>we<sp/>must<sp/>ensure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>thread<sp/>is<sp/>the<sp/>only<sp/>one<sp/>doing<sp/>it!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__thread_1ga6671c1599fd4ccf6a7c7bb90b2304709" kindref="member" tooltip="This function must be called when any thread other than the main GUI thread wants to get access to th...">wxMutexGuiEnter</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>GUI<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my_window-&gt;DrawSomething();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__thread_1gaddfdb2956953480a379d998ea7ced5b5" kindref="member" tooltip="This function is only defined on platforms which support preemptive threads.">wxMutexGuiLeave</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>This function is only defined on platforms which support preemptive threads and only works under some ports (wxMSW currently).</para><para><simplesect kind="note"><para>Under GTK, no creation of top-level windows is allowed in any thread but the main one.</para></simplesect>
Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1787"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__thread_1gaddfdb2956953480a379d998ea7ced5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxMutexGuiLeave</definition>
        <argsstring>()</argsstring>
        <name>wxMutexGuiLeave</name>
        <briefdescription>
<para>This function is only defined on platforms which support preemptive threads. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__group__funcmacro__thread_1ga6671c1599fd4ccf6a7c7bb90b2304709" kindref="member">wxMutexGuiEnter()</ref></para></simplesect>
Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1797"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__funcmacro__thread_1ga79ee915c6353e705958843a57a5148e2" prot="public" static="no">
        <name>wxCRIT_SECT_DECLARE</name>
        <param><defname>cs</defname></param>
        <briefdescription>
<para>This macro declares a (static) critical section object named <emphasis>cs</emphasis> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1679" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1gaa9f05a4361ea095939f90512ee52a831" prot="public" static="no">
        <name>wxCRIT_SECT_DECLARE_MEMBER</name>
        <param><defname>cs</defname></param>
        <briefdescription>
<para>This macro declares a critical section object named <emphasis>cs</emphasis> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>As it doesn&apos;t include the <computeroutput>static</computeroutput> keyword (unlike <ref refid="group__group__funcmacro__thread_1ga79ee915c6353e705958843a57a5148e2" kindref="member">wxCRIT_SECT_DECLARE()</ref>), it can be used to declare a class or struct member which explains its name.</para><para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1689" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1gae589848294c2cf63ad6895c4344755fe" prot="public" static="no">
        <name>wxCRIT_SECT_LOCKER</name>
        <param><defname>name</defname></param>
        <param><defname>cs</defname></param>
        <briefdescription>
<para>This macro creates a <ref refid="classwx_critical_section_locker" kindref="compound">wxCriticalSectionLocker</ref> named <emphasis>name</emphasis> and associated with the critical section <emphasis>cs</emphasis> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1698" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1ga3b0ab821a03aeecc1a7ddfcecb581355" prot="public" static="no">
        <name>wxCRITICAL_SECTION</name>
        <param><defname>name</defname></param>
        <briefdescription>
<para>This macro combines <ref refid="group__group__funcmacro__thread_1ga79ee915c6353e705958843a57a5148e2" kindref="member">wxCRIT_SECT_DECLARE()</ref> and <ref refid="group__group__funcmacro__thread_1gae589848294c2cf63ad6895c4344755fe" kindref="member">wxCRIT_SECT_LOCKER()</ref>: it creates a static critical section object and also the lock object associated with it. </para>        </briefdescription>
        <detaileddescription>
<para>Because of this, it can be only used inside a function, not at global scope. For example:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IncCount()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__thread_1ga3b0ab821a03aeecc1a7ddfcecb581355" kindref="member" tooltip="This macro combines wxCRIT_SECT_DECLARE() and wxCRIT_SECT_LOCKER(): it creates a static critical sect...">wxCRITICAL_SECTION</ref>(counter);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>++s_counter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Note that this example assumes that the function is called the first time from the main thread so that the critical section object is initialized correctly by the time other threads start calling it, if this is not the case this approach can <bold>not</bold> be used and the critical section must be made a global instead.</para><para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1725" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1gab5a243025a42da8c351a2df8519f4208" prot="public" static="no">
        <name>wxLEAVE_CRIT_SECT</name>
        <param><defname>critical_section</defname></param>
        <briefdescription>
<para>This macro is equivalent to <ref refid="classwx_critical_section_1a9710ab7240b29a653fd9233c12aadba6" kindref="member">critical_section.Leave()</ref> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1734" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__thread_1ga53ce988bc3201b82b77d4779610be608" prot="public" static="no">
        <name>wxENTER_CRIT_SECT</name>
        <param><defname>critical_section</defname></param>
        <briefdescription>
<para>This macro is equivalent to <ref refid="classwx_critical_section_1afa80c7cb306d72884ebcc4e60ea61d39" kindref="member">critical_section.Enter()</ref> if <computeroutput>wxUSE_THREADS</computeroutput> is 1 and does nothing if it is 0. </para>        </briefdescription>
        <detaileddescription>
<para>Include <ulink url="file:">file:</ulink> <verbatim>#include &lt;wx/thread.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="1743" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="1743" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The functions and macros here mainly exist to make it possible to write code which may be compiled in multi thread build (wxUSE_THREADS = 1) as well as in single thread configuration (wxUSE_THREADS = 0). </para>    </briefdescription>
    <detaileddescription>
<para>For example, a static variable must be protected against simultaneous access by multiple threads in the former configuration but in the latter the extra overhead of using the critical section is not needed. To solve this problem, the <ref refid="group__group__funcmacro__thread_1ga3b0ab821a03aeecc1a7ddfcecb581355" kindref="member">wxCRITICAL_SECTION()</ref> macro may be used to create and use the critical section only when needed.</para><para><simplesect kind="see"><para><ref refid="classwx_thread" kindref="compound">wxThread</ref>, <ref refid="classwx_mutex" kindref="compound">wxMutex</ref>, <ref refid="overview_thread" kindref="compound">Multithreading Overview</ref></para></simplesect>
Related class group: <ref refid="group__group__class__threading" kindref="compound">Threading</ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="overview_propgrid" kind="page">
    <compoundname>overview_propgrid</compoundname>
    <title>wxPropertyGrid Overview</title>
    <detaileddescription>
<para>Key Classes:</para><para><itemizedlist>
<listitem><para><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> </para></listitem>
<listitem><para><ref refid="classwx_property_grid_event" kindref="compound">wxPropertyGridEvent</ref> </para></listitem>
<listitem><para><ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref> </para></listitem>
<listitem><para><ref refid="classwx_property_grid_page" kindref="compound">wxPropertyGridPage</ref></para></listitem>
</itemizedlist>
<ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> is a specialized grid for editing properties - in other words name = value pairs. List of ready-to-use property classes include strings, numbers, flag sets, fonts, colours and many others. It is possible, for example, to categorize properties, set up a complete tree-hierarchy, add more than two columns, and set arbitrary per-property attributes.</para><para>As this version of <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> has some backward-incompatible changes from version 1.4, everybody who need to maintain custom property classes should carefully read final section in <ref refid="overview_propgrid_1propgrid_compat" kindref="member">Changes from wxPropertyGrid 1.4</ref>.</para><para><itemizedlist>
<listitem><para><ref refid="overview_propgrid_1propgrid_basics" kindref="member">Creating and Populating wxPropertyGrid</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_categories" kindref="member">Categories</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_parentprops" kindref="member">Tree-like Property Structure</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_enumandflags" kindref="member">wxEnumProperty and wxFlagsProperty</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_advprops" kindref="member">Specialized Properties</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_processingvalues" kindref="member">Processing Property Values</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_iterating" kindref="member">Iterating through a property container</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_events" kindref="member">Event Handling</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_tooltipandhint" kindref="member">Help String, Hint and Tool Tips</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_validating" kindref="member">Validating Property Values</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_populating" kindref="member">Populating wxPropertyGrid Automatically</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_cellrender" kindref="member">Customizing Individual Cell Appearance</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_keyhandling" kindref="member">Customizing Keyboard Handling</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_customizing" kindref="member">Customizing Properties (without sub-classing)</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_usage2" kindref="member">Using wxPropertyGridManager</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_subclassing" kindref="member">Sub-classing wxPropertyGrid and wxPropertyGridManager</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_misc" kindref="member">Miscellaneous Topics</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_proplist" kindref="member">Property Class Descriptions</ref> </para></listitem>
<listitem><para><ref refid="overview_propgrid_1propgrid_compat" kindref="member">Changes from wxPropertyGrid 1.4</ref></para></listitem>
</itemizedlist>
</para><sect1 id="overview_propgrid_1propgrid_basics">
<title>Creating and Populating wxPropertyGrid</title>
<para>As seen here, <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> is constructed in the same way as other wxWidgets controls:</para><para><programlisting><codeline><highlight class="comment">//<sp/>Necessary<sp/>header<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="interface_2wx_2propgrid_2propgrid_8h" kindref="compound">wx/propgrid/propgrid.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assumes<sp/>code<sp/>is<sp/>in<sp/>frame/dialog<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>wxPropertyGrid<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_property_grid" kindref="compound" tooltip="wxPropertyGrid is a specialized grid for editing properties - in other words name = value pairs...">wxPropertyGrid</ref>*<sp/>pg<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_property_grid" kindref="compound" tooltip="wxPropertyGrid is a specialized grid for editing properties - in other words name = value pairs...">wxPropertyGrid</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PGID,<sp/></highlight><highlight class="comment">//<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member" tooltip="Global instance of a wxPoint initialized with values (-1,-1).">wxDefaultPosition</ref>,<sp/></highlight><highlight class="comment">//<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member" tooltip="Global instance of a wxSize object initialized to (-1,-1).">wxDefaultSize</ref>,<sp/></highlight><highlight class="comment">//<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>are<sp/>just<sp/>some<sp/>of<sp/>the<sp/>supported<sp/>window<sp/>styles</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interface_2wx_2propgrid_2propgrid_8h_1a967b646b15085e115051d83a65ffdfe8a6bc5847c59e582bb9c3910ccb54d8635" kindref="member" tooltip="This will cause Sort() automatically after an item is added.">wxPG_AUTO_SORT</ref><sp/>|<sp/></highlight><highlight class="comment">//<sp/>Automatic<sp/>sorting<sp/>after<sp/>items<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interface_2wx_2propgrid_2propgrid_8h_1a967b646b15085e115051d83a65ffdfe8a998b9d55c606adb1010be7438286e3c5" kindref="member" tooltip="When wxPropertyGrid is resized, splitter moves to the center.">wxPG_SPLITTER_AUTO_CENTER</ref><sp/>|<sp/></highlight><highlight class="comment">//<sp/>Automatically<sp/>center<sp/>splitter<sp/>until<sp/>user<sp/>manually<sp/>adjusts<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interface_2wx_2propgrid_2propgrid_8h_1acf768b936525faa42392f653a3296eb4" kindref="member" tooltip="Combines various styles.">wxPG_DEFAULT_STYLE</ref><sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Window<sp/>style<sp/>flags<sp/>are<sp/>at<sp/>premium,<sp/>so<sp/>some<sp/>less<sp/>often<sp/>needed<sp/>ones<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>available<sp/>as<sp/>extra<sp/>window<sp/>styles<sp/>(wxPG_EX_xxx)<sp/>which<sp/>must<sp/>be<sp/>set<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetExtraStyle<sp/>member<sp/>function.<sp/>wxPG_EX_HELP_AS_TOOLTIPS,<sp/>for<sp/>instance,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allows<sp/>displaying<sp/>help<sp/>strings<sp/>as<sp/>tool<sp/>tips.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_window_1ae9655f7c35ce7ac89cac2f6c0054b103" kindref="member" tooltip="Sets the extra style bits for the window.">SetExtraStyle</ref>(<sp/><ref refid="interface_2wx_2propgrid_2propgrid_8h_1aeebee6f1621b080999ea22a5b76b00a6aab51ec531320af974c83f1af88dd14b1" kindref="member" tooltip="Show property help strings as tool tips instead as text on the status bar.">wxPG_EX_HELP_AS_TOOLTIPS</ref><sp/>);</highlight></codeline>
</programlisting></para><para>(for complete list of new window styles, see <ref refid="interface_2wx_2propgrid_2propgrid_8h_1propgrid_window_styles" kindref="member">wxPropertyGrid Window Styles</ref>)</para><para><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> is usually populated with lines like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxStringProperty(</highlight><highlight class="stringliteral">&quot;Label&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>Value&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
</programlisting></para><para>Naturally, wxStringProperty is a property class. Only the first function argument (label) is mandatory. Second one, name, defaults to label and, third, the initial value, to default value. If constant wxPG_LABEL is used as the name argument, then the label is automatically used as a name as well (this is more efficient than manually defining both as the same). Use of empty name is discouraged and will sometimes result in run-time error. Note that all property class constructors have quite similar constructor argument list.</para><para>To demonstrate other common property classes, here&apos;s another code snippet:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>int<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;IntProperty&quot;</highlight><highlight class="normal">,<sp/>wxPG_LABEL,<sp/>12345678)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>float<sp/>property<sp/>(value<sp/>type<sp/>is<sp/>actually<sp/>double)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxFloatProperty(</highlight><highlight class="stringliteral">&quot;FloatProperty&quot;</highlight><highlight class="normal">,<sp/>wxPG_LABEL,<sp/>12345.678)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>bool<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxBoolProperty(</highlight><highlight class="stringliteral">&quot;BoolProperty&quot;</highlight><highlight class="normal">,<sp/>wxPG_LABEL,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>string<sp/>property<sp/>that<sp/>can<sp/>be<sp/>edited<sp/>in<sp/>a<sp/>separate<sp/>editor<sp/>dialog.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxLongStringProperty(</highlight><highlight class="stringliteral">&quot;LongStringProperty&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>much<sp/>longer<sp/>string<sp/>than<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;first<sp/>one.<sp/>Edit<sp/>it<sp/>by<sp/>clicking<sp/>the<sp/>button.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>String<sp/>editor<sp/>with<sp/>dir<sp/>selector<sp/>button.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxDirProperty(</highlight><highlight class="stringliteral">&quot;DirProperty&quot;</highlight><highlight class="normal">,<sp/>wxPG_LABEL,<sp/>::<ref refid="group__group__funcmacro__networkuseros_1ga18db911e93361ebd5bbfb0d5136ddf5b" kindref="member" tooltip="Returns the home directory for the given user.">wxGetUserHome</ref>())<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wxArrayStringProperty<sp/>embeds<sp/>a<sp/>wxArrayString.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxArrayStringProperty(</highlight><highlight class="stringliteral">&quot;Label<sp/>of<sp/>ArrayStringProperty&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NameOfArrayStringProp&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>file<sp/>selector<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxFileProperty(</highlight><highlight class="stringliteral">&quot;FileProperty&quot;</highlight><highlight class="normal">,<sp/>wxPG_LABEL,<sp/><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member" tooltip="The global wxString instance of an empty string.">wxEmptyString</ref>)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extra:<sp/>set<sp/>wild<sp/>card<sp/>for<sp/>file<sp/>property<sp/>(format<sp/>same<sp/>as<sp/>in<sp/>wxFileDialog).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a129a37f9d87a2a08516772de9860432d" kindref="member" tooltip="Sets an attribute for this property.">SetPropertyAttribute</ref>(<sp/></highlight><highlight class="stringliteral">&quot;FileProperty&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="property_8h_1a1817e1bea592d9cda7a330ea3a25f851" kindref="member" tooltip="wxFileProperty/wxImageFileProperty specific, wxChar*, default is detected/varies.">wxPG_FILE_WILDCARD</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;All<sp/>files<sp/>(*.*)|*.*&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para>Operations on properties are usually done by directly calling wxPGProperty&apos;s or wxPropertyGridInterface&apos;s member functions. <ref refid="classwx_property_grid_interface" kindref="compound">wxPropertyGridInterface</ref> is an abstract base class for property containers such as <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref>, <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref>, and <ref refid="classwx_property_grid_page" kindref="compound">wxPropertyGridPage</ref>. Note however that wxPGProperty&apos;s member functions generally do not refresh the grid.</para><para>wxPropertyGridInterface&apos;s property operation member functions , such as SetPropertyValue() and DisableProperty(), all accept a special wxPGPropArg id argument, using which you can refer to properties either by their pointer (for performance) or by their name (for convenience). For instance:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>file<sp/>selector<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/>prop<sp/>=<sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxFileProperty(</highlight><highlight class="stringliteral">&quot;FileProperty&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member" tooltip="The global wxString instance of an empty string.">wxEmptyString</ref>)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid:<sp/>Set<sp/>wild<sp/>card<sp/>by<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a129a37f9d87a2a08516772de9860432d" kindref="member" tooltip="Sets an attribute for this property.">SetPropertyAttribute</ref>(<sp/></highlight><highlight class="stringliteral">&quot;FileProperty&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="property_8h_1a1817e1bea592d9cda7a330ea3a25f851" kindref="member" tooltip="wxFileProperty/wxImageFileProperty specific, wxChar*, default is detected/varies.">wxPG_FILE_WILDCARD</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;All<sp/>files<sp/>(*.*)|*.*&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>Valid:<sp/>Set<sp/>wild<sp/>card<sp/>by<sp/>property<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a129a37f9d87a2a08516772de9860432d" kindref="member" tooltip="Sets an attribute for this property.">SetPropertyAttribute</ref>(<sp/>prop,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="property_8h_1a1817e1bea592d9cda7a330ea3a25f851" kindref="member" tooltip="wxFileProperty/wxImageFileProperty specific, wxChar*, default is detected/varies.">wxPG_FILE_WILDCARD</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;All<sp/>files<sp/>(*.*)|*.*&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para>Using pointer is faster, since it doesn&apos;t require hash map lookup. Anyway, you can always get property pointer (wxPGProperty*) as return value from Append() or Insert(), or by calling <ref refid="classwx_property_grid_interface_1ac5723b61ae48d373671343e774632ed3" kindref="member">wxPropertyGridInterface::GetPropertyByName()</ref> or just plain GetProperty().</para></sect1>
<sect1 id="overview_propgrid_1propgrid_categories">
<title>Categories</title>
<para><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> has a hierarchic property storage and display model, which allows property categories to hold child properties and even other categories. Other than that, from the programmer&apos;s point of view, categories can be treated exactly the same as &quot;other&quot; properties. For example, despite its name, GetPropertyByName() also returns a category by name. Note however that sometimes the label of a property category may be referred as caption (for example, there is <ref refid="classwx_property_grid_1a690cc9643f94225f38720c336789c7d4" kindref="member">wxPropertyGrid::SetCaptionTextColour()</ref> method that sets text colour of property category labels).</para><para>When category is added at the top (i.e. root) level of the hierarchy, it becomes a *current category*. This means that all other (non-category) properties after it are automatically appended to it. You may add properties to specific categories by using <ref refid="classwx_property_grid_interface_1aed2f5e12acc0bc460c2295ac1564b735" kindref="member">wxPropertyGridInterface::Insert</ref> or <ref refid="classwx_property_grid_interface_1a7ae5812ea47c050f981aec0b8ccbe83e" kindref="member">wxPropertyGridInterface::AppendIn</ref>.</para><para>Category code sample:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>way<sp/>to<sp/>add<sp/>category<sp/>(similar<sp/>to<sp/>how<sp/>other<sp/>properties<sp/>are<sp/>added)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxPropertyCategory(</highlight><highlight class="stringliteral">&quot;Main&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>these<sp/>are<sp/>added<sp/>to<sp/>&quot;Main&quot;<sp/>category</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxStringProperty(</highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;Age&quot;</highlight><highlight class="normal">,wxPG_LABEL,25)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;Height&quot;</highlight><highlight class="normal">,wxPG_LABEL,180)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;Weight&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Another<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxPropertyCategory(</highlight><highlight class="stringliteral">&quot;Attributes&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>these<sp/>are<sp/>added<sp/>to<sp/>&quot;Attributes&quot;<sp/>category</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;Intelligence&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;Agility&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;Strength&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_propgrid_1propgrid_parentprops">
<title>Tree-like Property Structure</title>
<para>Basically any property can have children. There are few limitations, however.</para><para><simplesect kind="remark"><para><itemizedlist>
<listitem><para>Names of properties with non-category, non-root parents are not stored in global hash map. Instead, they can be accessed with strings like &quot;Parent.Child&quot;. For instance, in the sample below, child property named &quot;Max. Speed (mph)&quot; can be accessed by global name &quot;Car.Speeds.Max Speed (mph)&quot;.</para></listitem><listitem><para>If you want to property&apos;s value to be a string composed of the child property values, you must use wxStringProperty as parent and use magic string &quot;&lt;composed&gt;&quot; as its value.</para></listitem><listitem><para>Events (eg. change of value) that occur in parent do not propagate to children. Events that occur in children will propagate to parents, but only if they are wxStringProperties with &quot;&lt;composed&gt;&quot; value.</para></listitem></itemizedlist>
</para></simplesect>
Sample:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/>carProp<sp/>=<sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxStringProperty(</highlight><highlight class="stringliteral">&quot;Car&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;composed&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a7ae5812ea47c050f981aec0b8ccbe83e" kindref="member" tooltip="Same as Append(), but appends under given parent property.">AppendIn</ref>(carProp,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxStringProperty(</highlight><highlight class="stringliteral">&quot;Model&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Lamborghini<sp/>Diablo<sp/>SV&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a7ae5812ea47c050f981aec0b8ccbe83e" kindref="member" tooltip="Same as Append(), but appends under given parent property.">AppendIn</ref>(carProp,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;Engine<sp/>Size<sp/>(cc)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5707)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/>speedsProp<sp/>=<sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a7ae5812ea47c050f981aec0b8ccbe83e" kindref="member" tooltip="Same as Append(), but appends under given parent property.">AppendIn</ref>(carProp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxStringProperty(</highlight><highlight class="stringliteral">&quot;Speeds&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;composed&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a7ae5812ea47c050f981aec0b8ccbe83e" kindref="member" tooltip="Same as Append(), but appends under given parent property.">AppendIn</ref>(<sp/>speedsProp,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;Max.<sp/>Speed<sp/>(mph)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,290)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a7ae5812ea47c050f981aec0b8ccbe83e" kindref="member" tooltip="Same as Append(), but appends under given parent property.">AppendIn</ref>(<sp/>speedsProp,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxFloatProperty(</highlight><highlight class="stringliteral">&quot;0-100<sp/>mph<sp/>(sec)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,3.9)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a7ae5812ea47c050f981aec0b8ccbe83e" kindref="member" tooltip="Same as Append(), but appends under given parent property.">AppendIn</ref>(<sp/>speedsProp,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxFloatProperty(</highlight><highlight class="stringliteral">&quot;1/4<sp/>mile<sp/>(sec)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,8.6)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>how<sp/>child<sp/>property<sp/>can<sp/>be<sp/>referred<sp/>to<sp/>by<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1aa652e127ce0c9d4e80821cbdcfe4983c" kindref="member" tooltip="Sets value (integer) of a property.">SetPropertyValue</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Car.Speeds.Max.<sp/>Speed<sp/>(mph)&quot;</highlight><highlight class="normal">,<sp/>300<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a7ae5812ea47c050f981aec0b8ccbe83e" kindref="member" tooltip="Same as Append(), but appends under given parent property.">AppendIn</ref>(carProp,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxIntProperty(</highlight><highlight class="stringliteral">&quot;Price<sp/>($)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>300000)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Displayed<sp/>value<sp/>of<sp/>&quot;Car&quot;<sp/>property<sp/>is<sp/>now<sp/>very<sp/>close<sp/>to<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Lamborghini<sp/>Diablo<sp/>SV;<sp/>5707<sp/>[300;<sp/>3.9;<sp/>8.6]<sp/>300000&quot;</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_propgrid_1propgrid_enumandflags">
<title>wxEnumProperty and wxFlagsProperty</title>
<para>wxEnumProperty is used when you want property&apos;s (integer or string) value to be selected from a popup list of choices.</para><para>Creating wxEnumProperty is slightly more complex than those described earlier. You have to provide list of constant labels, and optionally relevant values (if label indexes are not sufficient).</para><para><simplesect kind="remark"><para></para></simplesect>
<itemizedlist>
<listitem><para>Value wxPG_INVALID_VALUE (equals INT_MAX) is not allowed as list item value.</para></listitem></itemizedlist>
</para><para>A very simple example:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>wxArrayString</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_array_string" kindref="compound" tooltip="wxArrayString is an efficient container for storing wxString objects.">wxArrayString</ref><sp/>arrDiet;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="classwx_array_string_1af06b61455118d83a24183c3a9f6854b1" kindref="member" tooltip="Appends the given number of copies of the new item str to the array and returns the index of the firs...">Add</ref>(</highlight><highlight class="stringliteral">&quot;Herbivore&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arr.Add(</highlight><highlight class="stringliteral">&quot;Carnivore&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arr.Add(</highlight><highlight class="stringliteral">&quot;Omnivore&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxEnumProperty(</highlight><highlight class="stringliteral">&quot;Diet&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrDiet)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>wxChar*<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member" tooltip="wxChar is defined to be">wxChar</ref>*<sp/>arrayDiet[]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Herbivore&quot;</highlight><highlight class="normal">),<sp/><ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Carnivore&quot;</highlight><highlight class="normal">),<sp/><ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Omnivore&quot;</highlight><highlight class="normal">),<sp/>NULL<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxEnumProperty(</highlight><highlight class="stringliteral">&quot;Diet&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrayDiet)<sp/>);</highlight></codeline>
</programlisting></para><para>Here&apos;s extended example using values as well:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>wxArrayString<sp/>and<sp/>wxArrayInt</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_array_string" kindref="compound" tooltip="wxArrayString is an efficient container for storing wxString objects.">wxArrayString</ref><sp/>arrDiet;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arr.<ref refid="classwx_array_string_1af06b61455118d83a24183c3a9f6854b1" kindref="member" tooltip="Appends the given number of copies of the new item str to the array and returns the index of the firs...">Add</ref>(</highlight><highlight class="stringliteral">&quot;Herbivore&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arr.Add(</highlight><highlight class="stringliteral">&quot;Carnivore&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arr.Add(</highlight><highlight class="stringliteral">&quot;Omnivore&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member" tooltip="Predefined specialization of wxArray&amp;lt;T&amp;gt; for standard types.">wxArrayInt</ref><sp/>arrIds;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrIds.Add(40);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrIds.Add(45);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrIds.Add(50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>initial<sp/>value<sp/>(the<sp/>last<sp/>argument)<sp/>is<sp/>the<sp/>actual<sp/>value,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>index<sp/>or<sp/>anything<sp/>like<sp/>that.<sp/>Thus,<sp/>our<sp/>value<sp/>selects<sp/>&quot;Omnivore&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxEnumProperty(</highlight><highlight class="stringliteral">&quot;Diet&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrDiet,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrIds,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>50));</highlight></codeline>
</programlisting></para><para><ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> is a class where wxEnumProperty, and other properties which require storage for list of items, actually stores strings and values. It is used to facilitate reference counting, and therefore recommended way of adding items when multiple properties share the same set.</para><para>You can use <ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> directly as well, filling it and then passing it to the constructor. In fact, if you wish to display bitmaps next to labels, your best choice is to use this approach.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_choices" kindref="compound" tooltip="Helper class for managing choices of wxPropertyGrid properties.">wxPGChoices</ref><sp/>chs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>chs.<ref refid="classwx_p_g_choices_1a7281ca96c7aaf39b059a93bc08fcd72d" kindref="member" tooltip="Adds to current.">Add</ref>(</highlight><highlight class="stringliteral">&quot;Herbivore&quot;</highlight><highlight class="normal">,<sp/>40);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>chs.<ref refid="classwx_p_g_choices_1a7281ca96c7aaf39b059a93bc08fcd72d" kindref="member" tooltip="Adds to current.">Add</ref>(</highlight><highlight class="stringliteral">&quot;Carnivore&quot;</highlight><highlight class="normal">,<sp/>45);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>chs.<ref refid="classwx_p_g_choices_1a7281ca96c7aaf39b059a93bc08fcd72d" kindref="member" tooltip="Adds to current.">Add</ref>(</highlight><highlight class="stringliteral">&quot;Omnivore&quot;</highlight><highlight class="normal">,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>add<sp/>an<sp/>item<sp/>with<sp/>bitmap,<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>chs.<ref refid="classwx_p_g_choices_1a7281ca96c7aaf39b059a93bc08fcd72d" kindref="member" tooltip="Adds to current.">Add</ref>(</highlight><highlight class="stringliteral">&quot;None<sp/>of<sp/>the<sp/>above&quot;</highlight><highlight class="normal">,<sp/><ref refid="classwx_bitmap" kindref="compound" tooltip="This class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour or co...">wxBitmap</ref>(),<sp/>60);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxEnumProperty(</highlight><highlight class="stringliteral">&quot;Primary<sp/>Diet&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chs)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>same<sp/>choices<sp/>to<sp/>another<sp/>property<sp/>as<sp/>well<sp/>-<sp/>this<sp/>is<sp/>efficient<sp/>due</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>reference<sp/>counting</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxEnumProperty(</highlight><highlight class="stringliteral">&quot;Secondary<sp/>Diet&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chs)<sp/>);</highlight></codeline>
</programlisting></para><para>You can later change choices of property by using <ref refid="classwx_p_g_property_1ab58afbdcd83f0626f44d152127038a89" kindref="member">wxPGProperty::AddChoice()</ref>, <ref refid="classwx_p_g_property_1ae9f9995783eeaf5320cb0c71482cbbc8" kindref="member">wxPGProperty::InsertChoice()</ref>, <ref refid="classwx_p_g_property_1a137f1b7ea16f1f18fcc3e50ec107da1f" kindref="member">wxPGProperty::DeleteChoice()</ref>, and <ref refid="classwx_p_g_property_1a7275467270d2c7ac3f847f4d1b6a1194" kindref="member">wxPGProperty::SetChoices()</ref>.</para><para><bold>wxEditEnumProperty</bold> works exactly like wxEnumProperty, except is uses non-read-only combo box as default editor, and value is stored as string when it is not any of the choices.</para><para>wxFlagsProperty has similar construction:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member" tooltip="wxChar is defined to be">wxChar</ref>*<sp/>flags_prop_labels[]<sp/>=<sp/>{<sp/><ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;wxICONIZE&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;wxCAPTION&quot;</highlight><highlight class="normal">),<sp/><ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;wxMINIMIZE_BOX&quot;</highlight><highlight class="normal">),<sp/><ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;wxMAXIMIZE_BOX&quot;</highlight><highlight class="normal">),<sp/>NULL<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>value<sp/>array<sp/>would<sp/>be<sp/>optional<sp/>if<sp/>values<sp/>matched<sp/>string<sp/>indexes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags_prop_values[]<sp/>=<sp/>{<sp/><ref refid="defs_8h_1a8dd8a3b1da393539bbf97740cf8e15a9" kindref="member">wxICONIZE</ref>,<sp/><ref refid="defs_8h_1ab9dd38fb28514dc86647c9bab14a5abe" kindref="member">wxCAPTION</ref>,<sp/><ref refid="defs_8h_1a58a06afb75f2d7eaf75678be07cd1bb9" kindref="member">wxMINIMIZE_BOX</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1a8968324afeca5856872724521f199e04" kindref="member">wxMAXIMIZE_BOX</ref><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxFlagsProperty(</highlight><highlight class="stringliteral">&quot;Window<sp/>Style&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags_prop_labels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags_prop_values,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="toplevel_8h_1ab3ad2777e5178344fa798ec8fd8e95e2" kindref="member">wxDEFAULT_FRAME_STYLE</ref>)<sp/>);</highlight></codeline>
</programlisting></para><para>wxFlagsProperty can use <ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> just the same way as wxEnumProperty <bold>Note:</bold> When changing &quot;choices&quot; (ie. flag labels) of wxFlagsProperty, you will need to use <ref refid="classwx_p_g_property_1a7275467270d2c7ac3f847f4d1b6a1194" kindref="member">wxPGProperty::SetChoices()</ref> to replace all choices at once - otherwise implicit child properties will not get updated properly.</para></sect1>
<sect1 id="overview_propgrid_1propgrid_advprops">
<title>Specialized Properties</title>
<para>This section describes the use of less often needed property classes. To use them, you have to include &lt;wx/propgrid/advprops.h&gt;.</para><para><programlisting><codeline><highlight class="comment">//<sp/>Necessary<sp/>extra<sp/>header<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/propgrid/advprops.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Date<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxDateProperty(</highlight><highlight class="stringliteral">&quot;MyDateProperty&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_date_time_1a6e6c37a0414bb4831e2cc03b37f498a2" kindref="member" tooltip="Returns the object corresponding to the current time.">wxDateTime::Now</ref>())<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Image<sp/>file<sp/>property.<sp/>Wild<sp/>card<sp/>is<sp/>auto-generated<sp/>from<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>handlers,<sp/>so<sp/>it<sp/>is<sp/>not<sp/>set<sp/>this<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxImageFileProperty(</highlight><highlight class="stringliteral">&quot;Label<sp/>of<sp/>ImageFileProperty&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NameOfImageFileProp&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Font<sp/>property<sp/>has<sp/>sub-properties.<sp/>Note<sp/>that<sp/>we<sp/>give<sp/>window&apos;s<sp/>font<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxFontProperty(</highlight><highlight class="stringliteral">&quot;Font&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetFont())<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Colour<sp/>property<sp/>with<sp/>arbitrary<sp/>colour.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxColourProperty(</highlight><highlight class="stringliteral">&quot;My<sp/>Colour<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_colour" kindref="compound" tooltip="A colour is an object representing a combination of Red, Green, and Blue (RGB) intensity values...">wxColour</ref>(242,109,0)<sp/>)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>System<sp/>colour<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxSystemColourProperty(</highlight><highlight class="stringliteral">&quot;My<sp/>SysColour<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_system_settings_1ab252414b60f16a233bc17df2a19bd804" kindref="member" tooltip="Returns a system colour.">wxSystemSettings::GetColour</ref>(<ref refid="settings_8h_1a44ad26cbd8d579d1b7eff7015c8bd24ba4a6145d1d56adfaa209f03df43a34f63" kindref="member" tooltip="Window background colour.">wxSYS_COLOUR_WINDOW</ref>))<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>System<sp/>colour<sp/>property<sp/>with<sp/>custom<sp/>colour.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxSystemColourProperty(</highlight><highlight class="stringliteral">&quot;My<sp/>SysColour<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_colour" kindref="compound" tooltip="A colour is an object representing a combination of Red, Green, and Blue (RGB) intensity values...">wxColour</ref>(0,200,160)<sp/>)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cursor<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxCursorProperty(</highlight><highlight class="stringliteral">&quot;My<sp/>Cursor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gdicmn_8h_1ae668769c0de48b50d4695b279c7c41b2a97a7a0012654ded652421164575f960b" kindref="member" tooltip="A standard arrow cursor.">wxCURSOR_ARROW</ref>));</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_propgrid_1propgrid_processingvalues">
<title>Processing Property Values</title>
<para>Properties store their values internally as <ref refid="classwx_variant" kindref="compound">wxVariant</ref>, but is also possible to obtain them as <ref refid="classwx_any" kindref="compound">wxAny</ref>, using implicit conversion. You can get property values with <ref refid="classwx_p_g_property_1a76fdd0b4782957b18aca2e8b8e170a0d" kindref="member">wxPGProperty::GetValue()</ref> and <ref refid="classwx_property_grid_interface_1aa1164652240e4b157ce5250769af537e" kindref="member">wxPropertyGridInterface::GetPropertyValue()</ref>.</para><para>Below is a code example which handles wxEVT_PG_CHANGED event:</para><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyWindowClass::OnPropertyGridChanged(<ref refid="classwx_property_grid_event" kindref="compound" tooltip="A property grid event holds information about events associated with wxPropertyGrid objects...">wxPropertyGridEvent</ref>&amp;<sp/>event)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.GetProperty();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing<sp/>if<sp/>event<sp/>did<sp/>not<sp/>have<sp/>associated<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!property<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GetValue()<sp/>returns<sp/>wxVariant,<sp/>but<sp/>it<sp/>is<sp/>converted<sp/>transparently<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wxAny</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_any" kindref="compound" tooltip="The wxAny class represents a container for any type.">wxAny</ref><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">-&gt;GetValue();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>handle<sp/>the<sp/>case<sp/>where<sp/>property<sp/>value<sp/>is<sp/>unspecified</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>value.<ref refid="classwx_any_1abd2b24fc0a7216a5336d8f7d731c2370" kindref="member" tooltip="Tests if wxAny is null (that is, whether there is no data).">IsNull</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>changes<sp/>in<sp/>values,<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>property.<ref refid="classwx_p_g_property_1a38b7e68b49282ac71d6e4cea7643aea1" kindref="member" tooltip="Returns property&amp;#39;s name with all (non-category, non-root) parents.">GetName</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MyStringProperty&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OnMyStringPropertyChanged(value.<ref refid="classwx_any_1ad5958253489be22f0e414cd1dd7a38f6" kindref="member" tooltip="This template function converts wxAny into given type.">As</ref>&lt;<ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>property.<ref refid="classwx_p_g_property_1a38b7e68b49282ac71d6e4cea7643aea1" kindref="member" tooltip="Returns property&amp;#39;s name with all (non-category, non-root) parents.">GetName</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MyColourProperty&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OnMyColourPropertyChanged(value.<ref refid="classwx_any_1ad5958253489be22f0e414cd1dd7a38f6" kindref="member" tooltip="This template function converts wxAny into given type.">As</ref>&lt;<ref refid="classwx_colour" kindref="compound" tooltip="A colour is an object representing a combination of Red, Green, and Blue (RGB) intensity values...">wxColour</ref>&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>You can get a string-representation of property&apos;s value using <ref refid="classwx_p_g_property_1a29f70a60e4844efbebc140270e1a4358" kindref="member">wxPGProperty::GetValueAsString()</ref> or <ref refid="classwx_property_grid_interface_1a42537d846f644d3e8cfdb89bd37d9650" kindref="member">wxPropertyGridInterface::GetPropertyValueAsString()</ref>. This particular function is very safe to use with any kind of property.</para><para><simplesect kind="note"><para>There is a one case in which you may want to take extra care when dealing with raw <ref refid="classwx_variant" kindref="compound">wxVariant</ref> values. That is, integer-type properties, such as wxIntProperty and wxUIntProperty, store value internally as wx(U)LongLong when number doesn&apos;t fit into standard long type. Using &lt;&lt; operator to get wx(U)LongLong from <ref refid="classwx_variant" kindref="compound">wxVariant</ref> is customized to work quite safely with various types of variant data. However, you can also bypass this problem by using <ref refid="classwx_any" kindref="compound">wxAny</ref> in your code instead of <ref refid="classwx_variant" kindref="compound">wxVariant</ref>.</para></simplesect>
Note that in some cases property value can be Null variant, which means that property value is unspecified. This usually occurs only when wxPG_EX_AUTO_UNSPECIFIED_VALUES extra window style is defined or when you manually set property value to Null (or unspecified).</para></sect1>
<sect1 id="overview_propgrid_1propgrid_iterating">
<title>Iterating through a property container</title>
<para>You can use somewhat STL&apos;ish iterator classes to iterate through the grid. Here is a simple example of forward iterating through all individual properties (not categories nor private child properties that are normally &apos;transparent&apos; to application code):</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_property_grid_iterator" kindref="compound">wxPropertyGridIterator</ref><sp/>it;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a41ab8661411082563c8191f614f91007" kindref="member" tooltip="Returns iterator class instance.">GetIterator</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!it.<ref refid="classwx_property_grid_iterator_1afd78a5113e37d3b0ba20a410820779a1" kindref="member">AtEnd</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/>p<sp/>=<sp/>*it;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something<sp/>with<sp/>the<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>As expected there is also a const iterator:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxPropertyGridConstIterator<sp/>it;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a41ab8661411082563c8191f614f91007" kindref="member" tooltip="Returns iterator class instance.">GetIterator</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!it.<ref refid="classwx_property_grid_iterator_1afd78a5113e37d3b0ba20a410820779a1" kindref="member">AtEnd</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/>p<sp/>=<sp/>*it;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something<sp/>with<sp/>the<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>You can give some arguments to GetIterator to determine which properties get automatically filtered out. For complete list of options, see <ref refid="propgridpagestate_8h_1propgrid_iterator_flags" kindref="member">wxPropertyGridIterator Flags</ref>. GetIterator() also accepts other arguments. See <ref refid="classwx_property_grid_interface_1a41ab8661411082563c8191f614f91007" kindref="member">wxPropertyGridInterface::GetIterator()</ref> for details.</para><para>This example reverse-iterates through all visible items:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_property_grid_iterator" kindref="compound">wxPropertyGridIterator</ref><sp/>it;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a41ab8661411082563c8191f614f91007" kindref="member" tooltip="Returns iterator class instance.">GetIterator</ref>(<ref refid="propgridpagestate_8h_1a307ba26bf1eeb9d76108893f4f723b0aaafca9ed41c9420c5efb18b7e519928e5" kindref="member" tooltip="Combines all flags needed to iterate through visible properties (ie.">wxPG_ITERATE_VISIBLE</ref>,<sp/><ref refid="defs_8h_1ac0f30319732dcceda470516918ff3556a17bc9a3dbb6e30a2418601aa5e30019b" kindref="member">wxBOTTOM</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!it.<ref refid="classwx_property_grid_iterator_1afd78a5113e37d3b0ba20a410820779a1" kindref="member">AtEnd</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it--<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/>p<sp/>=<sp/>*it;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something<sp/>with<sp/>the<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>GetIterator() only works with <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> and the individual pages of <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref>. In order to iterate through an arbitrary property container (such as entire <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref>), you need to use <ref refid="classwx_property_grid_interface_1a96a1c13733c0a83d7b509fd7a9e9a61a" kindref="member">wxPropertyGridInterface::GetVIterator()</ref>. Note however that this virtual iterator is limited to forward iteration.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_v_iterator" kindref="compound">wxPGVIterator</ref><sp/>it;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/>manager-&gt;GetVIterator(<ref refid="propgridpagestate_8h_1a307ba26bf1eeb9d76108893f4f723b0aacc6979a5992fc69a76cd8c1ce5f844e5" kindref="member" tooltip="Iterate all items.">wxPG_ITERATE_ALL</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!it.<ref refid="classwx_p_g_v_iterator_1a46dc31e866898f24ac4d0f3f86d471ff" kindref="member">AtEnd</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it.<ref refid="classwx_p_g_v_iterator_1aa44ee191f93c15bc4a0d510b9723be2f" kindref="member">Next</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/>p<sp/>=<sp/>it.<ref refid="classwx_p_g_v_iterator_1a69fbb856e1046a923f17847725a576c4" kindref="member">GetProperty</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something<sp/>with<sp/>the<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_propgrid_1propgrid_populating">
<title>Populating wxPropertyGrid Automatically</title>
<sect2 id="overview_propgrid_1propgrid_fromvariants">
<title>Populating from List of wxVariants</title>
<para>Example of populating an empty <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> from a values stored in an arbitrary list of wxVariants.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>static<sp/>method<sp/>that<sp/>initializes<sp/>*all*<sp/>built-in<sp/>type<sp/>handlers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>available,<sp/>including<sp/>those<sp/>for<sp/>wxColour<sp/>and<sp/>wxFont.<sp/>Refers<sp/>to<sp/>*all*</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>included<sp/>properties,<sp/>so<sp/>when<sp/>compiling<sp/>with<sp/>static<sp/>library,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>method<sp/>may<sp/>increase<sp/>the<sp/>executable<sp/>size<sp/>noticeably.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a38bd0419a578467da07d01aef288848d" kindref="member" tooltip="Initializes *all* property types.">InitAllTypeHandlers</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>contents<sp/>of<sp/>the<sp/>grid<sp/>as<sp/>a<sp/>wxVariant<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_variant" kindref="compound" tooltip="The wxVariant class represents a container for any type.">wxVariant</ref><sp/>all_values<sp/>=<sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a1abce6843caee96faaeeee952f970105" kindref="member" tooltip="Returns a wxVariant list containing wxVariant versions of all property values.">GetPropertyValues</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>the<sp/>list<sp/>with<sp/>values.<sp/>If<sp/>a<sp/>property<sp/>with<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>not<sp/>found,<sp/>it<sp/>is<sp/>created<sp/>according<sp/>to<sp/>the<sp/>type<sp/>of<sp/>variant.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a85caa9196b0278e844df1af5f12c800b" kindref="member" tooltip="Sets property values from a list of wxVariants.">SetPropertyValues</ref>(<sp/>my_list_variant<sp/>);</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="overview_propgrid_1propgrid_fromfile">
<title>Loading Population from a Text-based Storage</title>
<para>Class wxPropertyGridPopulator may be helpful when writing code that loads properties from a text-source. In fact, the <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> xrc-handler (which may not be currently included in wxWidgets, but probably will be in near future) uses it.</para></sect2>
<sect2 id="overview_propgrid_1editablestate">
<title>Saving and Restoring User-Editable State</title>
<para>You can use <ref refid="classwx_property_grid_interface_1a09dcfdf53629918183615627957afe39" kindref="member">wxPropertyGridInterface::SaveEditableState()</ref> and <ref refid="classwx_property_grid_interface_1aceb7f1ca6c7079c075d9876b94a2cb0f" kindref="member">wxPropertyGridInterface::RestoreEditableState()</ref> to save and restore user-editable state (selected property, expanded/collapsed properties, selected page, scrolled position, and splitter positions).</para></sect2>
</sect1>
<sect1 id="overview_propgrid_1propgrid_events">
<title>Event Handling</title>
<para>Probably the most important event is the Changed event which occurs when value of any property is changed by the user. Use EVT_PG_CHANGED(id,func) in your event table to use it.</para><para>For complete list of event types, see <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> class reference.</para><para>However, one type of event that might need focused attention is EVT_PG_CHANGING, which occurs just prior property value is being changed by user. You can acquire pending value using wxPropertyGridEvent::GetValue(), and if it is not acceptable, call <ref refid="classwx_property_grid_event_1a5e35bf2aeaad48147c0270e9b04426c8" kindref="member">wxPropertyGridEvent::Veto()</ref> to prevent the value change from taking place.</para><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyForm::OnPropertyGridChanging(<sp/><ref refid="classwx_property_grid_event" kindref="compound" tooltip="A property grid event holds information about events associated with wxPropertyGrid objects...">wxPropertyGridEvent</ref>&amp;<sp/>event<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.GetProperty();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>property<sp/>==<sp/>m_pWatchThisProperty<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GetValue()<sp/>returns<sp/>the<sp/>pending<sp/>value,<sp/>but<sp/>is<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>supported<sp/>by<sp/>wxEVT_PG_CHANGING.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>event.GetValue().<ref refid="classwx_command_event_1a24323d78936e5f6cd7f4780371f373e0" kindref="member" tooltip="Returns item string for a listbox or choice selection event.">GetString</ref>()<sp/>==<sp/>g_pThisTextIsNotAllowed<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.Veto();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="remark"><para>On Child Property Event Handling<itemizedlist>
<listitem><para>For properties which have private, implicit children (wxFontProperty and wxFlagsProperty), events occur for the main parent property only. For other properties events occur for the children themselves. See <ref refid="overview_propgrid_1propgrid_parentprops" kindref="member">Tree-like Property Structure</ref>.</para></listitem></itemizedlist>
</para></simplesect>
<itemizedlist>
<listitem><para>When property&apos;s child gets changed, you can use <ref refid="classwx_property_grid_event_1a6f31d0996895c1cd8b38c5c264b2921d" kindref="member">wxPropertyGridEvent::GetMainParent()</ref> to obtain its topmost non-category parent (useful, if you have deeply nested properties).</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="overview_propgrid_1propgrid_tooltipandhint">
<title>Help String, Hint and Tool Tips</title>
<para>For each property you can specify two different types of help text. First, you can use <ref refid="classwx_property_grid_interface_1a5793ea3ef9afa47fe2c1c5bf437dd583" kindref="member">wxPropertyGridInterface::SetPropertyHelpString()</ref> or <ref refid="classwx_p_g_property_1a839af036b24fc35696f0ef3cb2b0670a" kindref="member">wxPGProperty::SetHelpString()</ref> to set property&apos;s help text. Second, you can use <ref refid="classwx_p_g_property_1a418c1539969b7a0a9378a3411a5680a6" kindref="member">wxPGProperty::SetAttribute()</ref> to set property&apos;s &quot;Hint&quot; attribute.</para><para>Difference between hint and help string is that the hint is shown in an empty property value cell, while help string is shown either in the description text box, as a tool tip, or on the status bar, whichever of these is available.</para><para>To enable display of help string as tool tips, you must explicitly use the wxPG_EX_HELP_AS_TOOLTIPS extra window style.</para></sect1>
<sect1 id="overview_propgrid_1propgrid_validating">
<title>Validating Property Values</title>
<para>There are various ways to make sure user enters only correct values. First, you can use wxValidators similar to as you would with ordinary controls. Use <ref refid="classwx_property_grid_interface_1ad83fe8ad87751101316345a14133c45f" kindref="member">wxPropertyGridInterface::SetPropertyValidator()</ref> to assign <ref refid="classwx_validator" kindref="compound">wxValidator</ref> to property.</para><para>Second, you can subclass a property and override <ref refid="classwx_p_g_property_1a2e0c041aa3e19a5934a02c65b53f9f7d" kindref="member">wxPGProperty::ValidateValue()</ref>, or handle wxEVT_PG_CHANGING for the same effect. Both of these ways do not actually prevent user from temporarily entering invalid text, but they do give you an opportunity to warn the user and block changed value from being committed in a property.</para><para>Various validation failure options can be controlled globally with <ref refid="classwx_property_grid_interface_1ade72c97a047aa409dc7429010f640bb6" kindref="member">wxPropertyGrid::SetValidationFailureBehavior()</ref>, or on an event basis by calling wxEvent::SetValidationFailureBehavior(). Here&apos;s a code snippet of how to handle wxEVT_PG_CHANGING, and to set custom failure behaviour and message.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFrame::OnPropertyGridChanging(<ref refid="classwx_property_grid_event" kindref="compound" tooltip="A property grid event holds information about events associated with wxPropertyGrid objects...">wxPropertyGridEvent</ref>&amp;<sp/>event)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.GetProperty();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>must<sp/>use<sp/>wxPropertyGridEvent::GetValue()<sp/>to<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>to<sp/>be<sp/>validated.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_variant" kindref="compound" tooltip="The wxVariant class represents a container for any type.">wxVariant</ref><sp/>pendingValue<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.GetValue();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>property-&gt;<ref refid="classwx_p_g_property_1a38b7e68b49282ac71d6e4cea7643aea1" kindref="member" tooltip="Returns property&amp;#39;s name with all (non-category, non-root) parents.">GetName</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Font&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>value<sp/>is<sp/>not<sp/>unspecified</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pendingValue.<ref refid="classwx_variant_1a60ce75cca3c61a25f3218d35a438f799" kindref="member" tooltip="Returns true if there is no data associated with this variant, false if there is data.">IsNull</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_font" kindref="compound" tooltip="A font is an object which determines the appearance of text.">wxFont</ref><sp/>font;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font<sp/>&lt;&lt;<sp/>pendingValue;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>just<sp/>allow<sp/>Arial<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>font.<ref refid="classwx_font_1a8bc47f26fc8ac471b9d312550430adaf" kindref="member" tooltip="Returns the face name associated with the font, or the empty string if there is no face information...">GetFaceName</ref>()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.Veto();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.SetValidationFailureBehavior(<ref refid="interface_2wx_2propgrid_2propgrid_8h_1a509a11f37ea5e56864e257cde913035ead2d679dfb2b9d9b7b3a0bedd130599c7" kindref="member" tooltip="Prevents user from leaving property unless value is valid.">wxPG_VFB_STAY_IN_PROPERTY</ref><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interface_2wx_2propgrid_2propgrid_8h_1a509a11f37ea5e56864e257cde913035ea8a5434967b7ab365106699c8b8eb729b" kindref="member" tooltip="Calls wxBell() on validation failure.">wxPG_VFB_BEEP</ref><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interface_2wx_2propgrid_2propgrid_8h_1a509a11f37ea5e56864e257cde913035ea80db248a442ffa85dd5155d7eb325129" kindref="member" tooltip="Similar to wxPG_VFB_SHOW_MESSAGE, except always displays the message using wxMessageBox.">wxPG_VFB_SHOW_MESSAGEBOX</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_propgrid_1propgrid_cellrender">
<title>Customizing Individual Cell Appearance</title>
<para>You can control text colour, background colour, and attached image of each cell in the property grid. Use <ref refid="classwx_property_grid_interface_1afd6721e817062d6c9dbb522334c029a0" kindref="member">wxPropertyGridInterface::SetPropertyCell()</ref> or <ref refid="classwx_p_g_property_1a0ec5afcf091d8100142887f459d3dd52" kindref="member">wxPGProperty::SetCell()</ref> for this purpose.</para><para>In addition, it is possible to control these characteristics for <ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> list items. See <ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> class reference for more info.</para></sect1>
<sect1 id="overview_propgrid_1propgrid_keyhandling">
<title>Customizing Keyboard Handling</title>
<para>There is probably one preference for keyboard handling for every developer out there, and as a conveniency control <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> tries to cater for that. By the default arrow keys are used for navigating between properties, and TAB key is used to move focus between the property editor and the first column. When the focus is in the editor, arrow keys usually no longer work for navigation since they are consumed by the editor.</para><para>There are mainly two functions which you can use this customize things, <ref refid="classwx_property_grid_1af19463a573440f6bc928ceaa60a1e5e6" kindref="member">wxPropertyGrid::AddActionTrigger()</ref> and <ref refid="classwx_property_grid_1a51ca791689c92a604e4b840c055cfc5d" kindref="member">wxPropertyGrid::DedicateKey()</ref>. First one can be used to set a navigation event to occur on a specific key press and the second is used to divert a key from property editors, making it possible for the grid to use keys normally consumed by the focused editors.</para><para>For example, let&apos;s say you want to have an ENTER-based editing scheme. That is, editor is focused on ENTER press and the next property is selected when the user finishes editing and presses ENTER again. Code like this would accomplish the task:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>property<sp/>editor<sp/>focus<sp/>on<sp/>Enter</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>propgrid-&gt;AddActionTrigger(<sp/><ref refid="interface_2wx_2propgrid_2propgrid_8h_1a241dc2408e56a31edee6739e9b101b0aae9909d01fad9d6f803805212e1cbadd2" kindref="member" tooltip="Move focus to the editor control of the currently selected property.">wxPG_ACTION_EDIT</ref>,<sp/><ref refid="defs_8h_1a41c4609211685cff198618963ec8f77daa097c8ff56f206c7df25f7e011e43e41" kindref="member">WXK_RETURN</ref><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>Enter<sp/>work<sp/>as<sp/>action<sp/>trigger<sp/>even<sp/>when<sp/>editor<sp/>is<sp/>focused</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>propgrid-&gt;DedicateKey(<sp/><ref refid="defs_8h_1a41c4609211685cff198618963ec8f77daa097c8ff56f206c7df25f7e011e43e41" kindref="member">WXK_RETURN</ref><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>Enter<sp/>also<sp/>navigate<sp/>to<sp/>the<sp/>next<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>propgrid-&gt;AddActionTrigger(<sp/><ref refid="interface_2wx_2propgrid_2propgrid_8h_1a241dc2408e56a31edee6739e9b101b0aa44d7740b93df1d29a130cddacdaefe0e" kindref="member" tooltip="Select the next property.">wxPG_ACTION_NEXT_PROPERTY</ref>,<sp/><ref refid="defs_8h_1a41c4609211685cff198618963ec8f77daa097c8ff56f206c7df25f7e011e43e41" kindref="member">WXK_RETURN</ref><sp/>);</highlight></codeline>
</programlisting></para><para>wxPG_ACTION_EDIT is prioritized above wxPG_ACTION_NEXT_PROPERTY so that the above code can work without conflicts. For a complete list of available actions, see <ref refid="interface_2wx_2propgrid_2propgrid_8h_1propgrid_keyboard_actions" kindref="member">wxPropertyGrid Action Identifiers</ref>.</para><para>Here&apos;s another trick. Normally the up and down cursor keys are consumed by the focused <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> editor and as such can&apos;t be used for navigating between properties when that editor is focused. However, using DedicateKey() we can change this so that instead of the cursor keys moving the caret inside the <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref>, they navigate between adjacent properties. As such:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>propgrid-&gt;DedicateKey(<ref refid="defs_8h_1a41c4609211685cff198618963ec8f77dad2f4d3fb6940f1c959d2487fd96a9ba6" kindref="member">WXK_UP</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>propgrid-&gt;DedicateKey(<ref refid="defs_8h_1a41c4609211685cff198618963ec8f77da821b236b6e3cf28b0a958aa98647f1df" kindref="member">WXK_DOWN</ref>);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_propgrid_1propgrid_customizing">
<title>Customizing Properties (without sub-classing)</title>
<para>In this section are presented miscellaneous ways to have custom appearance and behaviour for your properties without all the necessary hassle of sub-classing a property class etc.</para><sect2 id="overview_propgrid_1propgrid_customimage">
<title>Setting Value Image</title>
<para>Every property can have a small value image placed in front of the actual value text. Built-in example of this can be seen with wxColourProperty and wxImageFileProperty, but for others it can be set using <ref refid="classwx_property_grid_interface_1a88befed8aa91d5c6e62844da2166bb3c" kindref="member">wxPropertyGrid::SetPropertyImage</ref> method.</para></sect2>
<sect2 id="overview_propgrid_1propgrid_customeditor">
<title>Setting Property&apos;s Editor Control(s)</title>
<para>You can set editor control (or controls, in case of a control and button), of any property using <ref refid="classwx_property_grid_interface_1aff961af9dd2787fb97f510ea5ce46407" kindref="member">wxPropertyGrid::SetPropertyEditor</ref>. Editors are passed as wxPGEditor_EditorName, and valid built-in EditorNames are TextCtrl, Choice, ComboBox, CheckBox, TextCtrlAndButton, ChoiceAndButton, SpinCtrl, and DatePickerCtrl. Two last mentioned ones require call to static member function <ref refid="classwx_property_grid_interface_1a330dc911b08378e967955f8a6a938612" kindref="member">wxPropertyGrid::RegisterAdditionalEditors()</ref>.</para><para>Following example changes wxColourProperty&apos;s editor from default Choice to TextCtrlAndButton. wxColourProperty has its internal event handling set up so that button click events of the button will be used to trigger colour selection dialog.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>*<sp/>colProp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wxColourProperty(</highlight><highlight class="stringliteral">&quot;Text<sp/>Colour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a8496963f469db86941157f8ce67896c4" kindref="member" tooltip="Appends property to the list.">Append</ref>(colProp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1aff961af9dd2787fb97f510ea5ce46407" kindref="member" tooltip="Sets editor for a property.">SetPropertyEditor</ref>(colProp,<sp/>wxPGEditor_TextCtrlAndButton);</highlight></codeline>
</programlisting></para><para>Naturally, creating and setting custom editor classes is a possibility as well. For more information, see <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> class reference.</para></sect2>
<sect2 id="overview_propgrid_1propgrid_editorattrs">
<title>Property Attributes Recognized by Editors</title>
<para><bold>SpinCtrl</bold> editor can make use of property&apos;s &quot;Min&quot;, &quot;Max&quot;, &quot;Step&quot; and &quot;Wrap&quot; attributes.</para></sect2>
<sect2 id="overview_propgrid_1propgrid_multiplebuttons">
<title>Adding Multiple Buttons Next to an Editor</title>
<para>See <ref refid="classwx_p_g_multi_button" kindref="compound">wxPGMultiButton</ref> class reference.</para></sect2>
<sect2 id="overview_propgrid_1propgrid_customeventhandling">
<title>Handling Events Passed from Properties</title>
<para><bold>wxEVT_COMMAND_BUTTON_CLICKED </bold>(corresponds to event table macro EVT_BUTTON): Occurs when editor button click is not handled by the property itself (as is the case, for example, if you set property&apos;s editor to TextCtrlAndButton from the original TextCtrl).</para></sect2>
<sect2 id="overview_propgrid_1propgrid_attributes">
<title>Property Attributes</title>
<para>Miscellaneous values, often specific to a property type, can be set using <ref refid="classwx_property_grid_interface_1a129a37f9d87a2a08516772de9860432d" kindref="member">wxPropertyGridInterface::SetPropertyAttribute()</ref> and <ref refid="classwx_property_grid_interface_1a9ae755985b70254e3e8a27a629c3fead" kindref="member">wxPropertyGridInterface::SetPropertyAttributeAll()</ref> methods.</para><para>Attribute names are strings and values <ref refid="classwx_variant" kindref="compound">wxVariant</ref>. Arbitrary names are allowed in order to store values that are relevant to application only and not property grid. Constant equivalents of all attribute string names are provided. Some of them are defined as cached strings, so using these constants can provide for smaller binary size.</para><para>For complete list of attributes, see <ref refid="property_8h_1propgrid_property_attributes" kindref="member">wxPropertyGrid Property Attribute Identifiers</ref>.</para></sect2>
</sect1>
<sect1 id="overview_propgrid_1propgrid_usage2">
<title>Using wxPropertyGridManager</title>
<para><ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref> is an efficient multi-page version of <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref>, which can optionally have tool bar for mode and page selection, and a help text box. For more information, see <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref> class reference.</para><sect2 id="overview_propgrid_1propgrid_propgridpage">
<title>wxPropertyGridPage</title>
<para><ref refid="classwx_property_grid_page" kindref="compound">wxPropertyGridPage</ref> is holder of properties for one page in manager. It is derived from <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref>, so you can subclass it to process page-specific property grid events. Hand over your page instance in <ref refid="classwx_property_grid_manager_1aea73aeb92bf18ba189198820f5341f7c" kindref="member">wxPropertyGridManager::AddPage()</ref>.</para><para>Please note that the <ref refid="classwx_property_grid_page" kindref="compound">wxPropertyGridPage</ref> itself only sports subset of <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> API (but unlike manager, this include item iteration). Naturally it inherits from <ref refid="classwx_property_grid_interface" kindref="compound">wxPropertyGridInterface</ref>.</para><para>For more information, see <ref refid="classwx_property_grid_page" kindref="compound">wxPropertyGridPage</ref> class reference.</para></sect2>
</sect1>
<sect1 id="overview_propgrid_1propgrid_subclassing">
<title>Sub-classing wxPropertyGrid and wxPropertyGridManager</title>
<para>Few things to note:</para><para><itemizedlist>
<listitem><para>Only a small percentage of member functions are virtual. If you need more, just e-mail to wx-dev mailing list.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Data manipulation is done in wxPropertyGridPageState class. So, instead of overriding <ref refid="classwx_property_grid_interface_1aed2f5e12acc0bc460c2295ac1564b735" kindref="member">wxPropertyGrid::Insert()</ref>, you&apos;ll probably want to override wxPropertyGridPageState::DoInsert(). See header file for details.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Override wxPropertyGrid::CreateState() to instantiate your derivate wxPropertyGridPageState. For <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref>, you&apos;ll need to subclass <ref refid="classwx_property_grid_page" kindref="compound">wxPropertyGridPage</ref> instead (since it is derived from wxPropertyGridPageState), and hand over instances in <ref refid="classwx_property_grid_manager_1aea73aeb92bf18ba189198820f5341f7c" kindref="member">wxPropertyGridManager::AddPage()</ref> calls.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>You can use a derivate <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> with manager by overriding <ref refid="classwx_property_grid_manager_1a6980326efa2bfc466aa9a5bbead7fe8c" kindref="member">wxPropertyGridManager::CreatePropertyGrid()</ref> member function.</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="overview_propgrid_1propgrid_misc">
<title>Miscellaneous Topics</title>
<sect2 id="overview_propgrid_1propgrid_namescope">
<title>Property Name Scope</title>
<para>All properties which parent is category or root can be accessed directly by their base name (ie. name given for property in its constructor). Other properties can be accessed via &quot;ParentsName.BaseName&quot; notation, Naturally, all property names should be unique.</para></sect2>
<sect2 id="overview_propgrid_1propgrid_nonuniquelabels">
<title>Non-unique Labels</title>
<para>It is possible to have properties with identical label under same parent. However, care must be taken to ensure that each property still has unique (base) name.</para></sect2>
<sect2 id="overview_propgrid_1propgrid_boolproperty">
<title>wxBoolProperty</title>
<para>There are few points about wxBoolProperty that require further discussion:<itemizedlist>
<listitem><para>wxBoolProperty can be shown as either normal combo box or as a check box. Property attribute wxPG_BOOL_USE_CHECKBOX is used to change this. For example, if you have a wxFlagsProperty, you can set its all items to use check box using the following: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a129a37f9d87a2a08516772de9860432d" kindref="member" tooltip="Sets an attribute for this property.">SetPropertyAttribute</ref>(</highlight><highlight class="stringliteral">&quot;MyFlagsProperty&quot;</highlight><highlight class="normal">,<sp/><ref refid="property_8h_1a9e92f4867bf9fbc7c71779c74d18ccd1" kindref="member" tooltip="wxBoolProperty and wxFlagsProperty specific.">wxPG_BOOL_USE_CHECKBOX</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>wxPG_RECURSE);</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para>Following will set all individual bool properties in your control to use check box:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pg-&gt;<ref refid="classwx_property_grid_interface_1a9ae755985b70254e3e8a27a629c3fead" kindref="member" tooltip="Sets property attribute for all applicapple properties.">SetPropertyAttributeAll</ref>(<ref refid="property_8h_1a9e92f4867bf9fbc7c71779c74d18ccd1" kindref="member" tooltip="wxBoolProperty and wxFlagsProperty specific.">wxPG_BOOL_USE_CHECKBOX</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><itemizedlist>
<listitem><para>Default item names for wxBoolProperty are [&quot;False&quot;, &quot;True&quot;]. This can be changed using static function <ref refid="classwx_property_grid_interface_1ac02e6f40e5c5138a40c99a4f7b98100b" kindref="member">wxPropertyGrid::SetBoolChoices</ref>(trueChoice, falseChoice).</para></listitem></itemizedlist>
</para></sect2>
<sect2 id="overview_propgrid_1propgrid_textctrlupdates">
<title>Updates from wxTextCtrl Based Editor</title>
<para>Changes from <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> based property editors are committed (ie. wxEVT_PG_CHANGED is sent etc.) *only* when (1) user presser enter, (2) user moves to edit another property, or (3) when focus leaves the grid.</para><para>Because of this, you may find it useful, in some apps, to call <ref refid="classwx_property_grid_1a6e06d92a622237457fea00372df1eaae" kindref="member">wxPropertyGrid::CommitChangesFromEditor()</ref> just before you need to do any computations based on property grid values. Note that CommitChangesFromEditor() will dispatch wxEVT_PG_CHANGED with ProcessEvent, so any of your event handlers will be called immediately.</para></sect2>
<sect2 id="overview_propgrid_1propgrid_splittercentering">
<title>Centering the Splitter</title>
<para>If you need to center the splitter, but only once when the program starts, then do <bold>not</bold> use the wxPG_SPLITTER_AUTO_CENTER window style, but the <ref refid="classwx_property_grid_1a6803d445ae77514558ec4ad00a25f65a" kindref="member">wxPropertyGrid::CenterSplitter()</ref> method. <bold>However, be sure to call it after the sizer setup and SetSize calls!</bold> (ie. usually at the end of the frame/dialog constructor)</para><para>Splitter centering behaviour can be customized using <ref refid="classwx_property_grid_interface_1a5df440361d9e85f3a48d79d7b45667e1" kindref="member">wxPropertyGridInterface::SetColumnProportion()</ref>. Usually it is used to set non-equal column proportions, which in essence stops the splitter(s) from being &apos;centered&apos; as such, and instead just auto-resized.</para></sect2>
<sect2 id="overview_propgrid_1propgrid_splittersetting">
<title>Setting Splitter Position When Creating Property Grid</title>
<para>Splitter position cannot exceed grid size, and therefore setting it during form creation may fail as initial grid size is often smaller than desired splitter position, especially when sizers are being used.</para></sect2>
<sect2 id="overview_propgrid_1propgrid_colourproperty">
<title>wxColourProperty and wxSystemColourProperty</title>
<para>Through sub-classing, these two property classes provide substantial customization features. Subclass wxSystemColourProperty if you want to use wxColourPropertyValue (which features colour type in addition to <ref refid="classwx_colour" kindref="compound">wxColour</ref>), and wxColourProperty if plain <ref refid="classwx_colour" kindref="compound">wxColour</ref> is enough.</para><para>Override wxSystemColourProperty::ColourToString() to redefine how colours are printed as strings.</para><para>Override wxSystemColourProperty::GetCustomColourIndex() to redefine location of the item that triggers colour picker dialog (default is last).</para><para>Override wxSystemColourProperty::GetColour() to determine which colour matches which choice entry.</para></sect2>
</sect1>
<sect1 id="overview_propgrid_1propgrid_proplist">
<title>Property Class Descriptions</title>
<para>See <ref refid="classwx_p_g_property_1pgproperty_properties" kindref="member">Supplied Ready-to-use Property Classes</ref></para></sect1>
<sect1 id="overview_propgrid_1propgrid_compat">
<title>Changes from wxPropertyGrid 1.4</title>
<para>Version of <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> bundled with wxWidgets 2.9+ has various backward- incompatible changes from version 1.4, which had a stable API and will remain as the last separate branch.</para><para>Note that in general any behaviour-breaking changes should not compile or run without warnings or errors.</para><sect2 id="overview_propgrid_1propgrid_compat_general">
<title>General Changes</title>
<para><itemizedlist>
<listitem><para>Tab-traversal can no longer be used to travel between properties. Now it only causes focus to move from main grid to editor of selected property. Arrow keys are now your primary means of navigating between properties, with keyboard. This change allowed fixing broken tab traversal on wxGTK (which is open issue in <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> 1.4).</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPG_EX_UNFOCUS_ON_ENTER style is removed and is now default behaviour. That is, when enter is pressed, editing is considered done and focus moves back to the property grid from the editor control.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>A few member functions were removed from <ref refid="classwx_property_grid_interface" kindref="compound">wxPropertyGridInterface</ref>. Please use wxPGProperty&apos;s counterparts from now on.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> now has proper Copy-On-Write behaviour.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPGChoices::SetExclusive() was renamed to AllocExclusive().</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPGProperty::SetPropertyChoicesExclusive() was removed. Instead, use GetChoices().AllocExclusive().</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPGProperty::ClearModifiedStatus() is removed. Please use SetModifiedStatus() instead.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPropertyGridInterface::GetExpandedProperties() is removed. You should now use wxPropertyGridInterface::GetEditableState() instead.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPG_EX_DISABLE_TLP_TRACKING is now enabled by default. To get the old behaviour (recommended if you don&apos;t use a system that reparents the grid on its own), use the wxPG_EX_ENABLE_TLP_TRACKING extra style.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Extended window style wxPG_EX_LEGACY_VALIDATORS was removed.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Default property validation failure behaviour has been changed to (wxPG_VFB_MARK_CELL | wxPG_VFB_SHOW_MESSAGEBOX), which means that the cell is marked red and wxMessageBox is shown. This is more user-friendly than the old behaviour, which simply beeped and prevented leaving the property editor until a valid value was entered.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref> now has same Get/SetSelection() semantics as <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref>.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Various <ref refid="classwx_property_grid_manager" kindref="compound">wxPropertyGridManager</ref> page-related functions now return pointer to the page object instead of index.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxArrayEditorDialog used by wxArrayStringProperty and some sample properties has been renamed to wxPGArrayEditorDialog. Also, it now uses <ref refid="classwx_editable_list_box" kindref="compound">wxEditableListBox</ref> for editing.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Instead of calling wxPropertyGrid::SetButtonShortcut(), use wxPropertyGrid::SetActionTrigger(wxPG_ACTION_PRESS_BUTTON).</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><ref refid="classwx_p_g_property_1af2f256f0d3eda31b18548eaf3c5e992d" kindref="member">wxPGProperty::GetCell()</ref> now returns a reference. AcquireCell() was removed.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPGMultiButton::FinalizePosition() has been renamed to Finalize(), and it has slightly different argument list.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPropertyGridEvent::HasProperty() is removed. You can use GetProperty() as immediate replacement when checking if event has a property.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>&quot;InlineHelp&quot; property has been replaced with &quot;Hint&quot;.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPropertyGrid::CanClose() has been removed. Call <ref refid="classwx_property_grid_interface_1a7718a5497b7e5211d847b5a8134bc2ab" kindref="member">wxPropertyGridInterface::EditorValidate()</ref> instead.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPGProperty::SetFlag() has been moved to private API. This was done to underline the fact that it was not the preferred method to change a property&apos;s state since it never had any desired side-effects. ChangeFlag() still exists for those who really need to achieve the same effect.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxArrayStringProperty default delimiter is now comma (&apos;,&apos;), and it can be changed by setting the new &quot;Delimiter&quot; attribute.</para></listitem></itemizedlist>
</para></sect2>
<sect2 id="overview_propgrid_1propgrid_compat_propdev">
<title>Property and Editor Sub-classing Changes</title>
<para><itemizedlist>
<listitem><para>Confusing custom property macros have been eliminated.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Implement <ref refid="classwx_p_g_property_1a7bef52444b2c03a4f10eef54ef9e9739" kindref="member">wxPGProperty::ValueToString()</ref> instead of GetValueAsString().</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><ref refid="classwx_p_g_property_1ac3d79ee3ebbbff20c36627d92ea926e1" kindref="member">wxPGProperty::ChildChanged()</ref> must now return the modified value of whole property instead of writing it back into &apos;thisValue&apos; argument.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Removed wxPropertyGrid::PrepareValueForDialogEditing(). Use wxPropertyGrid::GetPendingEditedValue() instead.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPGProperty::GetChoiceInfo() is removed, as all properties now carry <ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> instance (protected wxPGProperty::m_choices).</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Connect() should no longer be called in implementations of <ref refid="classwx_p_g_editor_1a9d33fbd55fe4fe390bdaa826a7ff87e2" kindref="member">wxPGEditor::CreateControls()</ref>. <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> automatically passes all events from editor to <ref refid="classwx_p_g_editor_1a035fa3bee4ac87e4300df0c637a56261" kindref="member">wxPGEditor::OnEvent()</ref> and <ref refid="classwx_p_g_property_1a16fbe26240bf47ab0a9a02d21781da73" kindref="member">wxPGProperty::OnEvent()</ref>, as appropriate.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>wxPython: Previously some of the reimplemented member functions needed a &apos;Py&apos; prefix. This is no longer necessary. For instance, if you previously implemented PyStringToValue() for your custom property, you should now just implement StringToValue(). </para></listitem></itemizedlist>
</para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

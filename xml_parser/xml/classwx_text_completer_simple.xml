<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_text_completer_simple" kind="class" prot="public">
    <compoundname>wxTextCompleterSimple</compoundname>
    <basecompoundref refid="classwx_text_completer" prot="public" virt="non-virtual">wxTextCompleter</basecompoundref>
    <includes local="no">wx/textcompleter.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_text_completer_simple_1abf3d103eda25bcb7a9d572523d0de736" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void wxTextCompleterSimple::GetCompletions</definition>
        <argsstring>(const wxString &amp;prefix, wxArrayString &amp;res)=0</argsstring>
        <name>GetCompletions</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Pure virtual method returning all possible completions for the given prefix. </para>        </briefdescription>
        <detaileddescription>
<para>The custom completer should examine the provided prefix and return all the possible completions for it in the output array <emphasis>res</emphasis>.</para><para>Please notice that the returned values should start with the prefix, otherwise they will be simply ignored, making adding them to the array in the first place useless.</para><para>Notice that this function may be called from thread other than main one (this is currently always the case under MSW) so the appropriate synchronization mechanism should be used to protect the shared data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The possibly empty prefix that the user had already entered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Initially empty array that should be filled with all possible completions (possibly none if there are no valid possibilities starting with the given prefix). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/textcompleter.h" line="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A simpler base class for custom completer objects. </para>    </briefdescription>
    <detaileddescription>
<para>This class may be simpler to use than the base <ref refid="classwx_text_completer" kindref="compound">wxTextCompleter</ref> as it allows to implement only a single virtual method instead of two of them (at the price of storing all completions in a temporary array).</para><para>Here is a simple example of a custom completer that completes the names of some chess pieces. Of course, as the total list here has only four items it would have been much simpler to just specify the array containing all the completions in this example but the same approach could be used when the total number of completions is much higher provided the number of possibilities for each word is still relatively small: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyTextCompleter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classwx_text_completer_simple" kindref="compound" tooltip="A simpler base class for custom completer objects.">wxTextCompleterSimple</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classwx_text_completer_simple_1abf3d103eda25bcb7a9d572523d0de736" kindref="member" tooltip="Pure virtual method returning all possible completions for the given prefix.">GetCompletions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>&amp;<sp/>prefix,<sp/><ref refid="classwx_array_string" kindref="compound" tooltip="wxArrayString is an efficient container for storing wxString objects.">wxArrayString</ref>&amp;<sp/>res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref><sp/>firstWord<sp/>=<sp/>prefix.<ref refid="classwx_string_1ac37f690daad1637493dc8ffc7c0efe70" kindref="member" tooltip="Gets all characters before the first occurrence of ch.">BeforeFirst</ref>(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>firstWord<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;white&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(</highlight><highlight class="stringliteral">&quot;white<sp/>pawn&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(</highlight><highlight class="stringliteral">&quot;white<sp/>rook&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>firstWord<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;black&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(</highlight><highlight class="stringliteral">&quot;black<sp/>king&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(</highlight><highlight class="stringliteral">&quot;black<sp/>queen&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(</highlight><highlight class="stringliteral">&quot;white&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(</highlight><highlight class="stringliteral">&quot;black&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_text_ctrl" kindref="compound" tooltip="A text control allows text to be displayed and edited.">wxTextCtrl</ref><sp/>*text<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>text-&gt;<ref refid="classwx_text_entry_1ad911d59d6b381a20b0a6c34df2ac1d9f" kindref="member" tooltip="Call this function to enable auto-completion of the text typed in a single-line text control using th...">AutoComplete</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MyTextCompleter);</highlight></codeline>
</programlisting></para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref></para><para><simplesect kind="since"><para>2.9.2 </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="10956">
        <label>wxTextCompleterSimple</label>
        <link refid="classwx_text_completer_simple"/>
        <childnode refid="10957" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10957">
        <label>wxTextCompleter</label>
        <link refid="classwx_text_completer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10958">
        <label>wxTextCompleterSimple</label>
        <link refid="classwx_text_completer_simple"/>
        <childnode refid="10959" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10959">
        <label>wxTextCompleter</label>
        <link refid="classwx_text_completer"/>
      </node>
    </collaborationgraph>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/textcompleter.h" line="117" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/textcompleter.h" bodystart="116" bodyend="142"/>
    <listofallmembers>
      <member refid="classwx_text_completer_simple_1abf3d103eda25bcb7a9d572523d0de736" prot="public" virt="pure-virtual"><scope>wxTextCompleterSimple</scope><name>GetCompletions</name></member>
      <member refid="classwx_text_completer_1afcfaf585fe34114a444411148c299619" prot="public" virt="pure-virtual"><scope>wxTextCompleterSimple</scope><name>GetNext</name></member>
      <member refid="classwx_text_completer_1a041c2f6544f3071f45a944f7ebc743f5" prot="public" virt="pure-virtual"><scope>wxTextCompleterSimple</scope><name>Start</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

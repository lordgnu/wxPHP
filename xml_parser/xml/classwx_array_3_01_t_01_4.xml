<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_array_3_01_t_01_4" kind="class" prot="public">
    <compoundname>wxArray&lt; T &gt;</compoundname>
    <includes local="no">wx/dynarray.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Constructors and Destructors</header>
      <description><para>Array classes are 100% C++ objects and as such they have the appropriate copy constructors and assignment operators.</para><para>Copying wxArray just copies the elements but copying wxObjArray copies the arrays items. However, for memory-efficiency sake, neither of these classes has virtual destructor. It is not very important for wxArray which has trivial destructor anyhow, but it does mean that you should avoid deleting wxObjArray through a wxBaseArray pointer (as you would never use wxBaseArray anyhow it shouldn&apos;t be a problem) and that you should not derive your own classes from the array classes. </para></description>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a714c1ed4b8be1a8e7073ebe8ae387303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArray&lt; T &gt;::wxArray</definition>
        <argsstring>()</argsstring>
        <name>wxArray</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="239"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1adff3fffdc4b2a51cb0ad4606114714ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArray&lt; T &gt;::wxObjArray</definition>
        <argsstring>()</argsstring>
        <name>wxObjArray</name>
        <briefdescription>
<para>Default constructor initializes an empty array object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="244"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a7fcfbd2fa53fe042ea385f4e254729da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArray&lt; T &gt;::wxSortedArray</definition>
        <argsstring>(int(*)(T first, T second) compareFunction)</argsstring>
        <name>wxSortedArray</name>
        <param>
          <type>int(*)(T first, T second)</type>
          <declname>compareFunction</declname>
        </param>
        <briefdescription>
<para>There is no default constructor for wxSortedArray classes - you must initialize it with a function to use for item comparison. </para>        </briefdescription>
        <detaileddescription>
<para>It is a function which is passed two arguments of type <computeroutput>T</computeroutput> where <computeroutput>T</computeroutput> is the array element type and which should return a negative, zero or positive value according to whether the first element passed to it is less than, equal to or greater than the second one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="254"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1ae6ce544f41797c2bca97507beca57b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArray&lt; T &gt;::wxArray</definition>
        <argsstring>(const wxArray &amp;array)</argsstring>
        <name>wxArray</name>
        <param>
          <type>const wxArray &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Performs a shallow array copy (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>doesn&apos;t copy the objects pointed to even if the source array contains the items of pointer type). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="260"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a27baa04ffabb62aab9357e6c92a4d430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArray&lt; T &gt;::wxSortedArray</definition>
        <argsstring>(const wxSortedArray &amp;array)</argsstring>
        <name>wxSortedArray</name>
        <param>
          <type>const wxSortedArray &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Performs a shallow array copy (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>doesn&apos;t copy the objects pointed to even if the source array contains the items of pointer type). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="266"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a7379d427e1cf74eba4cdc27f44c7c682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArray&lt; T &gt;::wxObjArray</definition>
        <argsstring>(const wxObjArray &amp;array)</argsstring>
        <name>wxObjArray</name>
        <param>
          <type>const wxObjArray &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Performs a deep copy (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>the array element are copied too). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="271"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a713b8bad4b168eeaba235aad4b4ac562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxArray &amp;</type>
        <definition>wxArray&amp; wxArray&lt; T &gt;::operator=</definition>
        <argsstring>(const wxArray &amp;array)</argsstring>
        <name>operator=</name>
        <param>
          <type>const wxArray &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Performs a shallow array copy (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>doesn&apos;t copy the objects pointed to even if the source array contains the items of pointer type). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="277"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a3480573120c8a425ca8aaee72462c469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxSortedArray &amp;</type>
        <definition>wxSortedArray&amp; wxArray&lt; T &gt;::operator=</definition>
        <argsstring>(const wxSortedArray &amp;array)</argsstring>
        <name>operator=</name>
        <param>
          <type>const wxSortedArray &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Performs a shallow array copy (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>doesn&apos;t copy the objects pointed to even if the source array contains the items of pointer type). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="283"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1afac88aa2fde976cb6e131369296843d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxObjArray &amp;</type>
        <definition>wxObjArray&amp; wxArray&lt; T &gt;::operator=</definition>
        <argsstring>(const wxObjArray &amp;array)</argsstring>
        <name>operator=</name>
        <param>
          <type>const wxObjArray &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Performs a deep copy (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>the array element are copied too). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="288"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a61cc6bbeef22f43d9604d00d0ec8f383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArray&lt; T &gt;::~wxArray</definition>
        <argsstring>()</argsstring>
        <name>~wxArray</name>
        <briefdescription>
<para>This destructor does not delete all the items owned by the array, you may use the <ref refid="dynarray_8h_1a2057e24dceef760fadfc5ce19229cbc2" kindref="member">WX_CLEAR_ARRAY()</ref> macro for this. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="294"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a5d923c5438b43960e0c26c33149b04f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArray&lt; T &gt;::~wxSortedArray</definition>
        <argsstring>()</argsstring>
        <name>~wxSortedArray</name>
        <briefdescription>
<para>This destructor does not delete all the items owned by the array, you may use the <ref refid="dynarray_8h_1a2057e24dceef760fadfc5ce19229cbc2" kindref="member">WX_CLEAR_ARRAY()</ref> macro for this. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="300"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1aebb57204007527fe96011b2f16c9dacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxArray&lt; T &gt;::~wxObjArray</definition>
        <argsstring>()</argsstring>
        <name>~wxObjArray</name>
        <briefdescription>
<para>This destructor deletes all the items owned by the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="305"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Memory Management</header>
      <description><para>Automatic array memory management is quite trivial: the array starts by preallocating some minimal amount of memory (defined by <computeroutput>WX_ARRAY_DEFAULT_INITIAL_SIZE</computeroutput>) and when further new items exhaust already allocated memory it reallocates it adding 50% of the currently allocated amount, but no more than some maximal number which is defined by the <computeroutput>ARRAY_MAXSIZE_INCREMENT</computeroutput> constant.</para><para>Of course, this may lead to some memory being wasted (<computeroutput>ARRAY_MAXSIZE_INCREMENT</computeroutput> in the worst case, i.e. 4Kb in the current implementation), so the <ref refid="classwx_array_3_01_t_01_4_1a6184a5915ad4878c39282be949f2e20b" kindref="member">Shrink()</ref> function is provided to deallocate the extra memory. The <ref refid="classwx_array_3_01_t_01_4_1a001d4f3d973ed1f9334b83b75e52c277" kindref="member">Alloc()</ref> function can also be quite useful if you know in advance how many items you are going to put in the array and will prevent the array code from reallocating the memory more times than needed. </para></description>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a001d4f3d973ed1f9334b83b75e52c277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Alloc</definition>
        <argsstring>(size_t count)</argsstring>
        <name>Alloc</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Preallocates memory for a given number of array elements. </para>        </briefdescription>
        <detaileddescription>
<para>It is worth calling when the number of items which are going to be added to the array is known in advance because it will save unneeded memory reallocation. If the array already has enough memory for the given number of items, nothing happens. In any case, the existing contents of the array is not modified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="336"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a6184a5915ad4878c39282be949f2e20b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Shrink</definition>
        <argsstring>()</argsstring>
        <name>Shrink</name>
        <briefdescription>
<para>Frees all memory unused by the array. </para>        </briefdescription>
        <detaileddescription>
<para>If the program knows that no new items will be added to the array it may call <ref refid="classwx_array_3_01_t_01_4_1a6184a5915ad4878c39282be949f2e20b" kindref="member">Shrink()</ref> to reduce its memory usage. However, if a new item is added to the array, some extra memory will be allocated again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="344"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Number of Elements and Simple Item Access</header>
      <description><para>Functions in this section return the total number of array elements and allow to retrieve them - possibly using just the C array indexing [] operator which does exactly the same as the <ref refid="classwx_array_3_01_t_01_4_1ae496576cb097636aa2770573f70b67d4" kindref="member">Item()</ref> method. </para></description>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a526112bb0d7a2ad37d7d432272060ef8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxArray&lt; T &gt;::GetCount</definition>
        <argsstring>() const </argsstring>
        <name>GetCount</name>
        <briefdescription>
<para>Return the number of items in the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="361"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a59050981bf25e5b6962fb9fba7ed6c47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxArray&lt; T &gt;::IsEmpty</definition>
        <argsstring>() const </argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns true if the array is empty, false otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="366"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1ae496576cb097636aa2770573f70b67d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; wxArray&lt; T &gt;::Item</definition>
        <argsstring>(size_t index) const </argsstring>
        <name>Item</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the item at the given position in the array. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>index</emphasis> is out of bounds, an assert failure is raised in the debug builds but nothing special is done in the release build.</para><para>The returned value is of type &quot;reference to the array element type&quot; for all of the array classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="376"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1ab9b5e30133d9eb6af0c9675c2b99fc8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; wxArray&lt; T &gt;::Last</definition>
        <argsstring>() const </argsstring>
        <name>Last</name>
        <briefdescription>
<para>Returns the last element in the array, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>is the same as calling &quot;Item(GetCount() - 1)&quot;. An assert failure is raised in the debug mode if the array is empty.</para><para>The returned value is of type &quot;reference to the array element type&quot; for all of the array classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="386"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Adding Items</header>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a0fd8856be5662cb7f07894cf9a318dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Add</definition>
        <argsstring>(T item, size_t copies=1)</argsstring>
        <name>Add</name>
        <param>
          <type>T</type>
          <declname>item</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>copies</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Appends the given number of <emphasis>copies</emphasis> of the <emphasis>item</emphasis> to the array consisting of the elements of type <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This version is used with wxArray.</para><para>You may also use <ref refid="dynarray_8h_1a7631438cf6263e77795c6905e0949b58" kindref="member">WX_APPEND_ARRAY()</ref> macro to append all elements of one array to another one but it is more efficient to use the <emphasis>copies</emphasis> parameter and modify the elements in place later if you plan to append a lot of items. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="407"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a899c54d4193671d14bd3fc8934e83ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxArray&lt; T &gt;::Add</definition>
        <argsstring>(T item)</argsstring>
        <name>Add</name>
        <param>
          <type>T</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Appends the <emphasis>item</emphasis> to the array consisting of the elements of type <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This version is used with wxSortedArray, returning the index where <emphasis>item</emphasis> is stored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="416"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1af6a00260542085cafc38d04ebd34c034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Add</definition>
        <argsstring>(T *item)</argsstring>
        <name>Add</name>
        <param>
          <type>T *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Appends the <emphasis>item</emphasis> to the array consisting of the elements of type <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This version is used with wxObjArray. The array will take ownership of the <emphasis>item</emphasis>, deleting it when the item is deleted from the array. Note that you cannot append more than one pointer as reusing it would lead to deleting it twice (or more) resulting in a crash.</para><para>You may also use <ref refid="dynarray_8h_1a7631438cf6263e77795c6905e0949b58" kindref="member">WX_APPEND_ARRAY()</ref> macro to append all elements of one array to another one but it is more efficient to use the <emphasis>copies</emphasis> parameter and modify the elements in place later if you plan to append a lot of items. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="432"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a22a22c4f4cf3c9e9883dba5699abaf63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Add</definition>
        <argsstring>(T &amp;item, size_t copies=1)</argsstring>
        <name>Add</name>
        <param>
          <type>T &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>copies</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Appends the given number of <emphasis>copies</emphasis> of the <emphasis>item</emphasis> to the array consisting of the elements of type <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This version is used with wxObjArray. The array will make a copy of the item and will not take ownership of the original item.</para><para>You may also use <ref refid="dynarray_8h_1a7631438cf6263e77795c6905e0949b58" kindref="member">WX_APPEND_ARRAY()</ref> macro to append all elements of one array to another one but it is more efficient to use the <emphasis>copies</emphasis> parameter and modify the elements in place later if you plan to append a lot of items. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="446"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a823040226372bac18bca3bd21b61621e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::AddAt</definition>
        <argsstring>(T item, size_t index)</argsstring>
        <name>AddAt</name>
        <param>
          <type>T</type>
          <declname>item</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Inserts the given <emphasis>item</emphasis> into the array in the specified <emphasis>index</emphasis> position. </para>        </briefdescription>
        <detaileddescription>
<para>Be aware that you will set out the order of the array if you give a wrong position.</para><para>This function is useful in conjunction with <ref refid="classwx_array_3_01_t_01_4_1a6f9fbb4563437d24283f105a81321416" kindref="member">IndexForInsert()</ref> for a common operation of &quot;insert only if not found&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="458"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1ae3125ce69e5b1d6a7ec06b0d4bddad63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Insert</definition>
        <argsstring>(T item, size_t n, size_t copies=1)</argsstring>
        <name>Insert</name>
        <param>
          <type>T</type>
          <declname>item</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>copies</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Insert the given number of <emphasis>copies</emphasis> of the <emphasis>item</emphasis> into the array before the existing item <emphasis>n</emphasis> - thus, <emphasis>Insert(something, 0u)</emphasis> will insert an item in such way that it will become the first array element. </para>        </briefdescription>
        <detaileddescription>
<para>wxSortedArray doesn&apos;t have this function because inserting in wrong place would break its sorted condition.</para><para>Please see <ref refid="classwx_array_3_01_t_01_4_1a0fd8856be5662cb7f07894cf9a318dda" kindref="member">Add()</ref> for an explanation of the differences between the overloaded versions of this function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="471"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1ac3eadfa94a64c21a079c8ad9e6e37693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Insert</definition>
        <argsstring>(T *item, size_t n)</argsstring>
        <name>Insert</name>
        <param>
          <type>T *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Insert the <emphasis>item</emphasis> into the array before the existing item <emphasis>n</emphasis> - thus, <emphasis>Insert(something, 0u)</emphasis> will insert an item in such way that it will become the first array element. </para>        </briefdescription>
        <detaileddescription>
<para>wxSortedArray doesn&apos;t have this function because inserting in wrong place would break its sorted condition.</para><para>Please see <ref refid="classwx_array_3_01_t_01_4_1a0fd8856be5662cb7f07894cf9a318dda" kindref="member">Add()</ref> for an explanation of the differences between the overloaded versions of this function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="484"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1aa4f2ca3de52cdf37e2a7d0b88c27541b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Insert</definition>
        <argsstring>(T &amp;item, size_t n, size_t copies=1)</argsstring>
        <name>Insert</name>
        <param>
          <type>T &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>copies</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Insert the given number of <emphasis>copies</emphasis> of the <emphasis>item</emphasis> into the array before the existing item <emphasis>n</emphasis> - thus, <emphasis>Insert(something, 0u)</emphasis> will insert an item in such way that it will become the first array element. </para>        </briefdescription>
        <detaileddescription>
<para>wxSortedArray doesn&apos;t have this function because inserting in wrong place would break its sorted condition.</para><para>Please see <ref refid="classwx_array_3_01_t_01_4_1a0fd8856be5662cb7f07894cf9a318dda" kindref="member">Add()</ref> for an explanation of the differences between the overloaded versions of this function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="497"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1adfddd024c1385af0f089ed37b96defe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::SetCount</definition>
        <argsstring>(size_t count, T defval=T(0))</argsstring>
        <name>SetCount</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>T</type>
          <declname>defval</declname>
          <defval>T(0)</defval>
        </param>
        <briefdescription>
<para>This function ensures that the number of array elements is at least <emphasis>count</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If the array has already <emphasis>count</emphasis> or more items, nothing is done. Otherwise, <emphasis>count</emphasis> - <ref refid="classwx_array_3_01_t_01_4_1a526112bb0d7a2ad37d7d432272060ef8" kindref="member">GetCount()</ref> elements are added and initialized to the value <emphasis>defval</emphasis>.</para><para><simplesect kind="see"><para><ref refid="classwx_array_3_01_t_01_4_1a526112bb0d7a2ad37d7d432272060ef8" kindref="member">GetCount()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="507"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Removing Items</header>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a7c8302670949e819c4b442aba9e258e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>This function does the same as <ref refid="classwx_array_3_01_t_01_4_1adf1797565eeba15d33b1cb8becb1bfe9" kindref="member">Empty()</ref> and additionally frees the memory allocated to the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="521"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a4e49e0385927180ddc2332ff85724a3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxArray&lt; T &gt;::Detach</definition>
        <argsstring>(size_t index)</argsstring>
        <name>Detach</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Removes the element from the array, but unlike <ref refid="classwx_array_3_01_t_01_4_1a917cf490b105c84bb06deb2a9d2f104f" kindref="member">Remove()</ref>, it doesn&apos;t delete it. </para>        </briefdescription>
        <detaileddescription>
<para>The function returns the pointer to the removed element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="527"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1adf1797565eeba15d33b1cb8becb1bfe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Empty</definition>
        <argsstring>()</argsstring>
        <name>Empty</name>
        <briefdescription>
<para>Empties the array. </para>        </briefdescription>
        <detaileddescription>
<para>For wxObjArray classes, this destroys all of the array elements. For wxArray and wxSortedArray this does nothing except marking the array of being empty - this function does not free the allocated memory, use <ref refid="classwx_array_3_01_t_01_4_1a7c8302670949e819c4b442aba9e258e6" kindref="member">Clear()</ref> for this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="535"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a917cf490b105c84bb06deb2a9d2f104f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Remove</definition>
        <argsstring>(T item)</argsstring>
        <name>Remove</name>
        <param>
          <type>T</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Removes an element from the array by value: the first item of the array equal to <emphasis>item</emphasis> is removed, an assert failure will result from an attempt to remove an item which doesn&apos;t exist in the array. </para>        </briefdescription>
        <detaileddescription>
<para>When an element is removed from wxObjArray it is deleted by the array - use <ref refid="classwx_array_3_01_t_01_4_1a4e49e0385927180ddc2332ff85724a3e" kindref="member">Detach()</ref> if you don&apos;t want this to happen. On the other hand, when an object is removed from a wxArray nothing happens - you should delete it manually if required:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>*item<sp/>=<sp/>array[n];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.Remove(item);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
</programlisting></para><para>See also <ref refid="dynarray_8h_1a2057e24dceef760fadfc5ce19229cbc2" kindref="member">WX_CLEAR_ARRAY()</ref> macro which deletes all elements of a wxArray (supposed to contain pointers).</para><para>Notice that for sorted arrays this method uses binary search to find the item so it doesn&apos;t necessarily remove the first matching item, but the first one found by the binary search.</para><para><simplesect kind="see"><para><ref refid="classwx_array_3_01_t_01_4_1a7f5d1a313c7999bd2110157fdacaa026" kindref="member">RemoveAt()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="562"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a7f5d1a313c7999bd2110157fdacaa026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::RemoveAt</definition>
        <argsstring>(size_t index, size_t count=1)</argsstring>
        <name>RemoveAt</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Removes <emphasis>count</emphasis> elements starting at <emphasis>index</emphasis> from the array. </para>        </briefdescription>
        <detaileddescription>
<para>When an element is removed from wxObjArray it is deleted by the array - use <ref refid="classwx_array_3_01_t_01_4_1a4e49e0385927180ddc2332ff85724a3e" kindref="member">Detach()</ref> if you don&apos;t want this to happen. On the other hand, when an object is removed from a wxArray nothing happens - you should delete it manually if required:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>*item<sp/>=<sp/>array[n];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.RemoveAt(n);</highlight></codeline>
</programlisting></para><para>See also <ref refid="dynarray_8h_1a2057e24dceef760fadfc5ce19229cbc2" kindref="member">WX_CLEAR_ARRAY()</ref> macro which deletes all elements of a wxArray (supposed to contain pointers). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="580"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Searching and Sorting</header>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a9627dd7d9eba85d25a4aa1b666ab9a9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxArray&lt; T &gt;::Index</definition>
        <argsstring>(T &amp;item, bool searchFromEnd=false) const </argsstring>
        <name>Index</name>
        <param>
          <type>T &amp;</type>
          <declname>item</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>searchFromEnd</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This version of <ref refid="classwx_array_3_01_t_01_4_1a9627dd7d9eba85d25a4aa1b666ab9a9c" kindref="member">Index()</ref> is for wxArray and wxObjArray only. </para>        </briefdescription>
        <detaileddescription>
<para>Searches the element in the array, starting from either beginning or the end depending on the value of <emphasis>searchFromEnd</emphasis> parameter. <computeroutput>wxNOT_FOUND</computeroutput> is returned if the element is not found, otherwise the index of the element is returned.</para><para><simplesect kind="note"><para>Even for wxObjArray classes, the operator &quot;==&quot; of the elements in the array is <bold>not</bold> used by this function. It searches exactly the given element in the array and so will only succeed if this element had been previously added to the array, but fail even if another, identical, element is in the array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="604"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1abc08a79fe800638f315b35cb34272d7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxArray&lt; T &gt;::Index</definition>
        <argsstring>(T &amp;item) const </argsstring>
        <name>Index</name>
        <param>
          <type>T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>This version of <ref refid="classwx_array_3_01_t_01_4_1a9627dd7d9eba85d25a4aa1b666ab9a9c" kindref="member">Index()</ref> is for wxSortedArray only. </para>        </briefdescription>
        <detaileddescription>
<para>Searches for the element in the array, using binary search.</para><para><computeroutput>wxNOT_FOUND</computeroutput> is returned if the element is not found, otherwise the index of the element is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="614"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1a6f9fbb4563437d24283f105a81321416" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxArray&lt; T &gt;::IndexForInsert</definition>
        <argsstring>(T item) const </argsstring>
        <name>IndexForInsert</name>
        <param>
          <type>T</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Search for a place to insert <emphasis>item</emphasis> into the sorted array (binary search). </para>        </briefdescription>
        <detaileddescription>
<para>The index returned is just before the first existing item that is greater or equal (according to the compare function) to the given <emphasis>item</emphasis>.</para><para>You have to do extra work to know if the <emphasis>item</emphasis> already exists in array.</para><para>This function is useful in conjunction with <ref refid="classwx_array_3_01_t_01_4_1a823040226372bac18bca3bd21b61621e" kindref="member">AddAt()</ref> for a common operation of &quot;insert only if not found&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="628"/>
      </memberdef>
      <memberdef kind="function" id="classwx_array_3_01_t_01_4_1ae45b012bef8ed8980310b17edd37a9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxArray&lt; T &gt;::Sort</definition>
        <argsstring>(CMPFUNC&lt; T &gt; compareFunction)</argsstring>
        <name>Sort</name>
        <param>
          <type>CMPFUNC&lt; T &gt;</type>
          <declname>compareFunction</declname>
        </param>
        <briefdescription>
<para>The notation <computeroutput>&quot;CMPFUNCT&lt;T&gt;&quot;</computeroutput> should be read as if we had the following declaration: </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CMPFUNC(T<sp/>*first,<sp/>T<sp/>*second);</highlight></codeline>
</programlisting></para><para>Where <emphasis>T</emphasis> is the type of the array elements. I.e. it is a function returning <emphasis>int</emphasis> which is passed two arguments of type <emphasis>T*</emphasis>.</para><para>Sorts the array using the specified compare function: this function should return a negative, zero or positive value according to whether the first element passed to it is less than, equal to or greater than the second one.</para><para>wxSortedArray doesn&apos;t have this function because it is always sorted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="648"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This section describes the so called <emphasis>&quot;dynamic arrays&quot;</emphasis>. </para>    </briefdescription>
    <detaileddescription>
<para>This is a C array-like type safe data structure i.e. the member access time is constant (and not linear according to the number of container elements as for linked lists). However, these arrays are dynamic in the sense that they will automatically allocate more memory if there is not enough of it for adding a new element. They also perform range checking on the index values but in debug mode only, so please be sure to compile your application in debug mode to use it (see <ref refid="overview_debugging" kindref="compound">Debugging</ref> for details). So, unlike the arrays in some other languages, attempt to access an element beyond the arrays bound doesn&apos;t automatically expand the array but provokes an assertion failure instead in debug build and does nothing (except possibly crashing your program) in the release build.</para><para>The array classes were designed to be reasonably efficient, both in terms of run-time speed and memory consumption and the executable size. The speed of array item access is, of course, constant (independent of the number of elements) making them much more efficient than linked lists (wxList). Adding items to the arrays is also implemented in more or less constant time, but the price is preallocating the memory in advance. In the &quot;memory management&quot; function section, you may find some useful hints about optimizing wxArray memory usage. As for executable size, all wxArray functions are inline, so they do not take <emphasis>any</emphasis> space at all.</para><para>wxWidgets has three different kinds of array. All of them derive from wxBaseArray class which works with untyped data and cannot be used directly. The standard macros <ref refid="dynarray_8h_1aa9c653860ef656116ad6914e79e17340" kindref="member">WX_DEFINE_ARRAY()</ref>, <ref refid="dynarray_8h_1a12e1e3d31fcc7973cff20edfaadd8473" kindref="member">WX_DEFINE_SORTED_ARRAY()</ref> and <ref refid="dynarray_8h_1a52cebddf0dbdeb2d7dbbfb88656f0f79" kindref="member">WX_DEFINE_OBJARRAY()</ref> are used to define a new class deriving from it. The classes declared will be called in this documentation wxArray, wxSortedArray and wxObjArray but you should keep in mind that no classes with such names actually exist, each time you use one of the WX_DEFINE_XXXARRAY() macros, you define a class with a new name. In fact, these names are &quot;template&quot; names and each usage of one of the macros mentioned above creates a template specialization for the given element type.</para><para>wxArray is suitable for storing integer types and pointers which it does not treat as objects in any way, i.e. the element pointed to by the pointer is not deleted when the element is removed from the array. It should be noted that all of wxArray&apos;s functions are inline, so it costs strictly nothing to define as many array types as you want (either in terms of the executable size or the speed) as long as at least one of them is defined and this is always the case because wxArrays are used by wxWidgets internally. This class has one serious limitation: it can only be used for storing integral types (bool, char, short, int, long and their unsigned variants) or pointers (of any kind). An attempt to use with objects of <computeroutput>sizeof()</computeroutput> greater than <computeroutput>sizeof(long)</computeroutput> will provoke a runtime assertion failure, however declaring a wxArray of floats will not (on the machines where <computeroutput>&quot;sizeof(float) &lt;= sizeof(long)&quot;</computeroutput>), yet it will <bold>not</bold> work, please use wxObjArray for storing floats and doubles.</para><para>wxSortedArray is a wxArray variant which should be used when searching in the array is a frequently used operation. It requires you to define an additional function for comparing two elements of the array element type and always stores its items in the sorted order (according to this function). Thus, its <ref refid="classwx_array_3_01_t_01_4_1a9627dd7d9eba85d25a4aa1b666ab9a9c" kindref="member">Index()</ref> function execution time is <computeroutput>&quot;O(log(N))&quot;</computeroutput> instead of <computeroutput>&quot;O(N)&quot;</computeroutput> for the usual arrays but the <ref refid="classwx_array_3_01_t_01_4_1a0fd8856be5662cb7f07894cf9a318dda" kindref="member">Add()</ref> method is slower: it is <computeroutput>&quot;O(log(N))&quot;</computeroutput> instead of constant time (neglecting time spent in memory allocation routine). However, in a usual situation elements are added to an array much less often than searched inside it, so wxSortedArray may lead to huge performance improvements compared to wxArray. Finally, it should be noticed that, as wxArray, wxSortedArray can be only used for storing integral types or pointers.</para><para>wxObjArray class treats its elements like &quot;objects&quot;. It may delete them when they are removed from the array (invoking the correct destructor) and copies them using the objects copy constructor. In order to implement this behaviour the definition of the wxObjArray arrays is split in two parts: first, you should declare the new wxObjArray class using the <ref refid="dynarray_8h_1a515e9265b474d8a152ec3ec42179abde" kindref="member">WX_DECLARE_OBJARRAY()</ref> macro and then you must include the file defining the implementation of template type: &lt;wx/arrimpl.cpp&gt; and define the array class with the <ref refid="dynarray_8h_1a52cebddf0dbdeb2d7dbbfb88656f0f79" kindref="member">WX_DEFINE_OBJARRAY()</ref> macro from a point where the full (as opposed to &apos;forward&apos;) declaration of the array elements class is in scope. As it probably sounds very complicated here is an example:</para><para><programlisting><codeline><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="dynarray_8h" kindref="compound">wx/dynarray.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>forward<sp/>declare<sp/>the<sp/>array<sp/>because<sp/>it<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inside<sp/>the<sp/>class<sp/>declaration.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyDirectory;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyFile;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>two<sp/>new<sp/>types:<sp/>ArrayOfDirectories<sp/>and<sp/>ArrayOfFiles<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>now<sp/>used<sp/>as<sp/>shown<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="richtextbuffer_8h_1ae267bced101176876e1b4792e974e091" kindref="member">WX_DECLARE_OBJARRAY</ref>(MyDirectory,<sp/>ArrayOfDirectories);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="richtextbuffer_8h_1ae267bced101176876e1b4792e974e091" kindref="member">WX_DECLARE_OBJARRAY</ref>(MyFile,<sp/><sp/><sp/><sp/><sp/><sp/>ArrayOfFiles);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyDirectory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayOfDirectories<sp/>m_subdirectories;<sp/></highlight><highlight class="comment">//<sp/>All<sp/>subdirectories</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayOfFiles<sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_files;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>files<sp/>in<sp/>this<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>we<sp/>have<sp/>MyDirectory<sp/>declaration<sp/>in<sp/>scope<sp/>we<sp/>may<sp/>finish<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>definition<sp/>of<sp/>ArrayOfDirectories<sp/>--<sp/>note<sp/>that<sp/>this<sp/>expands<sp/>into<sp/>some<sp/>C++</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>and<sp/>so<sp/>should<sp/>only<sp/>be<sp/>compiled<sp/>once<sp/>(i.e.,<sp/>don&apos;t<sp/>put<sp/>this<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>header,<sp/>but<sp/>into<sp/>a<sp/>source<sp/>file<sp/>or<sp/>you<sp/>will<sp/>get<sp/>linking<sp/>errors)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;wx/arrimpl.cpp&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>magic<sp/>incantation<sp/>which<sp/>must<sp/>be<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dynarray_8h_1a52cebddf0dbdeb2d7dbbfb88656f0f79" kindref="member" tooltip="This macro defines the methods of the array class name not defined by the WX_DECLARE_OBJARRAY() macro...">WX_DEFINE_OBJARRAY</ref>(ArrayOfDirectories);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that&apos;s<sp/>all!</highlight></codeline>
</programlisting></para><para>It is not as elegant as writing this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;MyDirectory&gt;<sp/>ArrayOfDirectories;</highlight></codeline>
</programlisting></para><para>But is not that complicated and allows the code to be compiled with any, however dumb, C++ compiler in the world.</para><para>Remember to include &lt;wx/arrimpl.cpp&gt; just before each <ref refid="dynarray_8h_1a52cebddf0dbdeb2d7dbbfb88656f0f79" kindref="member">WX_DEFINE_OBJARRAY()</ref> occurrence in your code, even if you have several in the same file.</para><para>Things are much simpler for wxArray and wxSortedArray however: it is enough just to write:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WX_DEFINE_ARRAY_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>ArrayOfInts);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WX_DEFINE_SORTED_ARRAY_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>ArrayOfSortedInts);</highlight></codeline>
</programlisting></para><para>There is only one <computeroutput>DEFINE</computeroutput> macro and no need for separate <computeroutput>DECLARE</computeroutput> one. For the arrays of the primitive types, the macros <computeroutput>WX_DEFINE_ARRAY_CHAR/SHORT/INT/SIZE_T/LONG/DOUBLE</computeroutput> should be used depending on the sizeof of the values (notice that storing values of smaller type, e.g. shorts, in an array of larger one, e.g. <computeroutput>ARRAY_INT</computeroutput>, does not work on all architectures!).</para><sect1 id="classwx_array_3_01_t_01_4_1array_macros">
<title>Macros for Template Array Definition</title>
<para>To use an array you must first define the array class. This is done with the help of the macros in this section. The class of array elements must be (at least) forward declared for <ref refid="dynarray_8h_1aa9c653860ef656116ad6914e79e17340" kindref="member">WX_DEFINE_ARRAY()</ref>, <ref refid="dynarray_8h_1a12e1e3d31fcc7973cff20edfaadd8473" kindref="member">WX_DEFINE_SORTED_ARRAY()</ref> and <ref refid="dynarray_8h_1a515e9265b474d8a152ec3ec42179abde" kindref="member">WX_DECLARE_OBJARRAY()</ref> macros and must be fully declared before you use <ref refid="dynarray_8h_1a52cebddf0dbdeb2d7dbbfb88656f0f79" kindref="member">WX_DEFINE_OBJARRAY()</ref> macro.</para><para><itemizedlist>
<listitem><para><ref refid="dynarray_8h_1aa9c653860ef656116ad6914e79e17340" kindref="member">WX_DEFINE_ARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1a32eb9d62c9479016d9662c510a7c8291" kindref="member">WX_DEFINE_EXPORTED_ARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1a3b9d36de8f94e2946dd96ae715572e88" kindref="member">WX_DEFINE_USER_EXPORTED_ARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1a12e1e3d31fcc7973cff20edfaadd8473" kindref="member">WX_DEFINE_SORTED_ARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1ab304943d0f95d3b5d4494743dbb4b0f8" kindref="member">WX_DEFINE_SORTED_EXPORTED_ARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1af01eea1165404d844c705ed6539b4bf3" kindref="member">WX_DEFINE_SORTED_USER_EXPORTED_ARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1a6c4cbd97b2b8c79aef39d55f35686f96" kindref="member">WX_DECLARE_EXPORTED_OBJARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1ab391af5040f754730afdf5b0fcfc211b" kindref="member">WX_DECLARE_USER_EXPORTED_OBJARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1a52cebddf0dbdeb2d7dbbfb88656f0f79" kindref="member">WX_DEFINE_OBJARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1ae05b2e13eddeb23ff7fdc5163f9d992e" kindref="member">WX_DEFINE_EXPORTED_OBJARRAY()</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1a2555ba53da045a79c54b1303f25d8a47" kindref="member">WX_DEFINE_USER_EXPORTED_OBJARRAY()</ref></para></listitem></itemizedlist>
</para><para>To slightly complicate the matters even further, the operator &quot;-&gt;&quot; defined by default for the array iterators by these macros only makes sense if the array element type is not a pointer itself and, although it still works, this provokes warnings from some compilers and to avoid them you should use the <computeroutput>_PTR</computeroutput> versions of the macros above. For example, to define an array of pointers to <computeroutput>double</computeroutput> you should use:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="richtextbuffer_8h_1ab497ced92a2630597297100314b9ed22" kindref="member">WX_DEFINE_ARRAY_PTR</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*,<sp/>MyArrayOfDoublePointers);</highlight></codeline>
</programlisting></para><para>Note that the above macros are generally only useful for <ref refid="classwx_object" kindref="compound">wxObject</ref> types. There are separate macros for declaring an array of a simple type, such as an int.</para><para>The following simple types are supported:<itemizedlist>
<listitem><para><computeroutput>int</computeroutput> </para></listitem><listitem><para><computeroutput>long</computeroutput> </para></listitem><listitem><para><computeroutput>size_t</computeroutput> </para></listitem><listitem><para><computeroutput>double</computeroutput> </para></listitem></itemizedlist>
</para><para>To create an array of a simple type, simply append the type you want in CAPS to the array definition.</para><para>For example, you&apos;d use one of the following variants for an integer array:</para><para><itemizedlist>
<listitem><para>WX_DEFINE_ARRAY_INT()</para></listitem><listitem><para>WX_DEFINE_EXPORTED_ARRAY_INT()</para></listitem><listitem><para>WX_DEFINE_USER_EXPORTED_ARRAY_INT()</para></listitem><listitem><para>WX_DEFINE_SORTED_ARRAY_INT()</para></listitem><listitem><para>WX_DEFINE_SORTED_EXPORTED_ARRAY_INT()</para></listitem><listitem><para>WX_DEFINE_SORTED_USER_EXPORTED_ARRAY_INT()</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="classwx_array_3_01_t_01_4_1array_predef">
<title>Predefined array types</title>
<para>wxWidgets defines the following dynamic array types:<itemizedlist>
<listitem><para><ref refid="dynarray_8h_1a4d95651e563be2e44c507f5e1c1ebb13" kindref="member">wxArrayShort</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1a84411c7d20ee889cd887dd10ef12b1a7" kindref="member">wxArrayDouble</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1aae5ab96217f8797a82373b4126a6b254" kindref="member">wxArrayLong</ref></para></listitem><listitem><para><ref refid="dynarray_8h_1a6b7224fd0223439eed62c2fae09981d1" kindref="member">wxArrayPtrVoid</ref></para></listitem></itemizedlist>
</para><para>To use them you don&apos;t need any macro; you just need to include <computeroutput><ref refid="dynarray_8h" kindref="compound">dynarray.h</ref></computeroutput>.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__containers" kindref="compound">Containers</ref></para><para><simplesect kind="see"><para><ref refid="overview_container" kindref="compound">Container Classes</ref>, <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref>, <ref refid="classwx_vector_3_01_t_01_4" kindref="compound">wxVector&lt;T&gt;</ref> </para></simplesect>
</para></sect1>
    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" line="219" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/dynarray.h" bodystart="218" bodyend="651"/>
    <listofallmembers>
      <member refid="classwx_array_3_01_t_01_4_1a0fd8856be5662cb7f07894cf9a318dda" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Add</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a899c54d4193671d14bd3fc8934e83ac0" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Add</name></member>
      <member refid="classwx_array_3_01_t_01_4_1af6a00260542085cafc38d04ebd34c034" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Add</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a22a22c4f4cf3c9e9883dba5699abaf63" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Add</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a823040226372bac18bca3bd21b61621e" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>AddAt</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a001d4f3d973ed1f9334b83b75e52c277" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Alloc</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a7c8302670949e819c4b442aba9e258e6" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Clear</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a4e49e0385927180ddc2332ff85724a3e" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Detach</name></member>
      <member refid="classwx_array_3_01_t_01_4_1adf1797565eeba15d33b1cb8becb1bfe9" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Empty</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a526112bb0d7a2ad37d7d432272060ef8" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>GetCount</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a9627dd7d9eba85d25a4aa1b666ab9a9c" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Index</name></member>
      <member refid="classwx_array_3_01_t_01_4_1abc08a79fe800638f315b35cb34272d7a" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Index</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a6f9fbb4563437d24283f105a81321416" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>IndexForInsert</name></member>
      <member refid="classwx_array_3_01_t_01_4_1ae3125ce69e5b1d6a7ec06b0d4bddad63" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Insert</name></member>
      <member refid="classwx_array_3_01_t_01_4_1ac3eadfa94a64c21a079c8ad9e6e37693" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Insert</name></member>
      <member refid="classwx_array_3_01_t_01_4_1aa4f2ca3de52cdf37e2a7d0b88c27541b" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Insert</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a59050981bf25e5b6962fb9fba7ed6c47" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>IsEmpty</name></member>
      <member refid="classwx_array_3_01_t_01_4_1ae496576cb097636aa2770573f70b67d4" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Item</name></member>
      <member refid="classwx_array_3_01_t_01_4_1ab9b5e30133d9eb6af0c9675c2b99fc8c" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Last</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a713b8bad4b168eeaba235aad4b4ac562" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>operator=</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a3480573120c8a425ca8aaee72462c469" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>operator=</name></member>
      <member refid="classwx_array_3_01_t_01_4_1afac88aa2fde976cb6e131369296843d2" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>operator=</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a917cf490b105c84bb06deb2a9d2f104f" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Remove</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a7f5d1a313c7999bd2110157fdacaa026" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>RemoveAt</name></member>
      <member refid="classwx_array_3_01_t_01_4_1adfddd024c1385af0f089ed37b96defe0" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>SetCount</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a6184a5915ad4878c39282be949f2e20b" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Shrink</name></member>
      <member refid="classwx_array_3_01_t_01_4_1ae45b012bef8ed8980310b17edd37a9c7" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>Sort</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a714c1ed4b8be1a8e7073ebe8ae387303" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>wxArray</name></member>
      <member refid="classwx_array_3_01_t_01_4_1ae6ce544f41797c2bca97507beca57b6c" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>wxArray</name></member>
      <member refid="classwx_array_3_01_t_01_4_1adff3fffdc4b2a51cb0ad4606114714ab" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>wxObjArray</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a7379d427e1cf74eba4cdc27f44c7c682" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>wxObjArray</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a7fcfbd2fa53fe042ea385f4e254729da" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>wxSortedArray</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a27baa04ffabb62aab9357e6c92a4d430" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>wxSortedArray</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a61cc6bbeef22f43d9604d00d0ec8f383" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>~wxArray</name></member>
      <member refid="classwx_array_3_01_t_01_4_1aebb57204007527fe96011b2f16c9dacf" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>~wxObjArray</name></member>
      <member refid="classwx_array_3_01_t_01_4_1a5d923c5438b43960e0c26c33149b04f3" prot="public" virt="non-virtual"><scope>wxArray&lt; T &gt;</scope><name>~wxSortedArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="overview_container" kind="page">
    <compoundname>overview_container</compoundname>
    <title>Container Classes</title>
    <detaileddescription>
<para>Classes: <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref>, <ref refid="classwx_array_3_01_t_01_4" kindref="compound">wxArray&lt;T&gt;</ref>, <ref refid="classwx_vector_3_01_t_01_4" kindref="compound">wxVector&lt;T&gt;</ref>, <ref refid="classwx_stack_3_01_t_01_4" kindref="compound">wxStack&lt;T&gt;</ref>, <ref refid="classwx_hash_map" kindref="compound">wxHashMap</ref>, <ref refid="classwx_hash_set" kindref="compound">wxHashSet</ref></para><sect1 id="overview_container_1overview_container_intro">
<title>Overview</title>
<para>For historical reasons, wxWidgets uses custom container classes internally. This was unfortunately unavoidable during a long time when the standard library wasn&apos;t widely available and can&apos;t be easily changed even now that it is for compatibility reasons. If you are building your own version of the library and don&apos;t care about compatibility nor slight (less than 5%) size penalty imposed by the use of STL classes, you may choose to use the &quot;STL&quot; build of wxWidgets in which these custom classes are replaced with their standard counterparts and only read the section <ref refid="overview_container_1overview_container_std" kindref="member">STL Build</ref> explaining how to do it.</para><para>Otherwise you will need to know about the custom wxWidgets container classes such as <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref> and <ref refid="classwx_array_3_01_t_01_4" kindref="compound">wxArray&lt;T&gt;</ref> if only to use wxWidgets functions that work with them, e.g. <ref refid="classwx_window_1ad500085ad0511879b5e018706c91a494" kindref="member">wxWindow::GetChildren()</ref>, and you should find the information about using these classes below useful.</para><para>Notice that we recommend that you use standard classes directly in your own code instead of the container classes provided by wxWidgets in any case as the standard classes are easier to use and may also be safer because of extra run-time checks they may perform as well as more efficient.</para><para>Finally notice that recent versions of wxWidgets also provide standard-like classes such as <ref refid="classwx_vector_3_01_t_01_4" kindref="compound">wxVector&lt;T&gt;</ref>, <ref refid="classwx_stack_3_01_t_01_4" kindref="compound">wxStack&lt;T&gt;</ref> or wxDList which can be used exactly like the std::vector&lt;T&gt;, std::stack&lt;T&gt; and std::list&lt;T*&gt;, respectively, and actually are just typedefs for the corresponding types if wxWidgets is compiled in STL mode. These classes could be useful if you wish to avoid the use of the standard library in your code for some reason.</para><para>To summarize, you should use the standard container classes such as std::vector&lt;T&gt; and std::list&lt;T&gt; if possible and <ref refid="classwx_vector_3_01_t_01_4" kindref="compound">wxVector&lt;T&gt;</ref> or wxDList&lt;T&gt; if it isn&apos;t and only use legacy wxWidgets containers such as <ref refid="classwx_array_3_01_t_01_4" kindref="compound">wxArray&lt;T&gt;</ref> and <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref> when you must, i.e. when you use a wxWidgets function taking or returning a container of such type.</para></sect1>
<sect1 id="overview_container_1overview_container_legacy">
<title>Legacy Classes</title>
<para>The list classes in wxWidgets are doubly-linked lists which may either own the objects they contain (meaning that the list deletes the object when it is removed from the list or the list itself is destroyed) or just store the pointers depending on whether or not you called <ref refid="classwx_list_3_01_t_01_4_1aacdd6247511c440656421c518ca11f88" kindref="member">wxList&lt;T&gt;::DeleteContents()</ref> method.</para><para>Dynamic arrays resemble C arrays but with two important differences: they provide run-time range checking in debug builds and they automatically expand the allocated memory when there is no more space for new items. They come in two sorts: the &quot;plain&quot; arrays which store either built-in types such as &quot;char&quot;, &quot;int&quot; or &quot;bool&quot; or the pointers to arbitrary objects, or &quot;object arrays&quot; which own the object pointers to which they store.</para><para>For the same portability reasons, the container classes implementation in wxWidgets don&apos;t use templates, but are rather based on C preprocessor i.e. are implemented using the macros: WX_DECLARE_LIST() and WX_DEFINE_LIST() for the linked lists and WX_DECLARE_ARRAY(), <ref refid="richtextbuffer_8h_1ae267bced101176876e1b4792e974e091" kindref="member">WX_DECLARE_OBJARRAY()</ref> and <ref refid="dynarray_8h_1a52cebddf0dbdeb2d7dbbfb88656f0f79" kindref="member">WX_DEFINE_OBJARRAY()</ref> for the dynamic arrays.</para><para>The &quot;DECLARE&quot; macro declares a new container class containing the elements of given type and is needed for all three types of container classes: lists, arrays and objarrays. The &quot;DEFINE&quot; classes must be inserted in your program in a place where the <emphasis>full</emphasis> declaration of container element class is in scope (i.e. not just forward declaration), otherwise destructors of the container elements will not be called!</para><para>As array classes never delete the items they contain anyhow, there is no <ref refid="dynarray_8h_1aa9c653860ef656116ad6914e79e17340" kindref="member">WX_DEFINE_ARRAY()</ref> macro for them.</para><para>Examples of usage of these macros may be found in <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref> and <ref refid="classwx_array_3_01_t_01_4" kindref="compound">wxArray&lt;T&gt;</ref> documentation.</para><para>Finally, wxWidgets predefines several commonly used container classes. wxList is defined for compatibility with previous versions as a list containing wxObjects and wxStringList as a list of C-style strings (char *), both of these classes are deprecated and should not be used in new programs. The following array classes are defined: wxArrayInt, wxArrayLong, wxArrayPtrVoid and <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref>. The first three store elements of corresponding types, but <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> is somewhat special: it is an optimized version of wxArray which uses its knowledge about <ref refid="classwx_string" kindref="compound">wxString</ref> reference counting schema.</para></sect1>
<sect1 id="overview_container_1overview_container_std">
<title>STL Build</title>
<para>To build wxWidgets with the standard containers you need to set wxUSE_STD_CONTAINERS option to 1 in <computeroutput>wx/msw/setup.h</computeroutput> for wxMSW builds or specify <computeroutput>--enable-std_containers</computeroutput> option to configure (which is also implicitly enabled by <computeroutput>--enable-stl</computeroutput> option) in Unix builds.</para><para>The standard container build is mostly, but not quite, compatible with the default one. Here are the most important differences:<itemizedlist>
<listitem><para>wxList::compatibility_iterator must be used instead of wxList::Node* when iterating over the list contents. The compatibility_iterator class has the same semantics as a Node pointer but it is an object and not a pointer, so you need to write <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>wxWindowList::compatibility_iterator<sp/>it<sp/>=<sp/>list.GetFirst();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>it-&gt;GetNext()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
</programlisting> instead of the old <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>wxWindowList::Node<sp/>*n<sp/>=<sp/>list.GetFirst();<sp/>n;<sp/>n<sp/>=<sp/>n-&gt;GetNext()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
</programlisting></para></listitem><listitem><para><ref refid="classwx_sorted_array_string" kindref="compound">wxSortedArrayString</ref> and <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> are separate classes now and the former doesn&apos;t derive from the latter. If you need to convert a sorted array to a normal one, you must copy all the elements. Alternatively, you may avoid the use of <ref refid="classwx_sorted_array_string" kindref="compound">wxSortedArrayString</ref> by using a normal array and calling its Sort() method when needed.</para></listitem><listitem><para>WX_DEFINE_ARRAY_INT(bool) cannot be used because of the differences in std::vector&lt;bool&gt; specialization compared with the generic std::vector&lt;&gt; class. Please either use std::vector&lt;bool&gt; directly or use an integer array instead. </para></listitem></itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

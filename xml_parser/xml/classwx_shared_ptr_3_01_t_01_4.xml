<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_shared_ptr_3_01_t_01_4" kind="class" prot="public">
    <compoundname>wxSharedPtr&lt; T &gt;</compoundname>
    <includes local="no">wx/sharedptr.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1ab9a0d5e0d4ae27b41b0e59727a9fd2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxEXPLICIT</type>
        <definition>wxEXPLICIT wxSharedPtr&lt; T &gt;::wxSharedPtr</definition>
        <argsstring>(T *ptr=NULL)</argsstring>
        <name>wxSharedPtr</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Creates shared pointer from the raw pointer <emphasis>ptr</emphasis> and takes ownership of it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="30"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1a78b7860f505470d2d954d33d76bf2372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxSharedPtr&lt; T &gt;::wxSharedPtr</definition>
        <argsstring>(const wxSharedPtr&lt; T &gt; &amp;tocopy)</argsstring>
        <name>wxSharedPtr</name>
        <param>
          <type>const wxSharedPtr&lt; T &gt; &amp;</type>
          <declname>tocopy</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="35"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1a0b5939721f372f5f8f80113b81006a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxSharedPtr&lt; T &gt;::~wxSharedPtr</definition>
        <argsstring>()</argsstring>
        <name>~wxSharedPtr</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="40"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1a899d60ebcd4be6b9ce724a224a5ef4b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxSharedPtr&lt; T &gt;::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
<para>Returns pointer to its object or NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="45"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1a66f84bb60c78099c7f485fe9160cfb4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxSharedPtr&lt; T &gt;::operator unspecified_bool_type</definition>
        <argsstring>() const </argsstring>
        <name>operator unspecified_bool_type</name>
        <briefdescription>
<para>Conversion to a boolean expression (in a variant which is not convertible to anything but a boolean expression). </para>        </briefdescription>
        <detaileddescription>
<para>If this class contains a valid pointer it will return true, if it contains a NULL pointer it will return false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="54"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1a606330d4c8a91f0ab4337ecf535a975a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T wxSharedPtr&lt; T &gt;::operator*</definition>
        <argsstring>() const </argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Returns a reference to the object. </para>        </briefdescription>
        <detaileddescription>
<para>If the internal pointer is NULL this method will cause an assert in debug mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="61"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1ab9b716c07f4263aa9a61c2ef348ca829" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxSharedPtr&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Smart pointer member access. </para>        </briefdescription>
        <detaileddescription>
<para>Returns pointer to its object.</para><para>If the internal pointer is NULL this method will cause an assert in debug mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="68"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1ae02306a82285661c58e809ac32492e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxSharedPtr&lt; T &gt; &amp;</type>
        <definition>wxSharedPtr&lt;T&gt;&amp; wxSharedPtr&lt; T &gt;::operator=</definition>
        <argsstring>(T *ptr)</argsstring>
        <name>operator=</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para>Releases any previously held pointer and creates a reference to <emphasis>ptr</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="75"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1a2843bd42c7d37447d1d27f0507030ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxSharedPtr&lt; T &gt; &amp;</type>
        <definition>wxSharedPtr&lt;T&gt;&amp; wxSharedPtr&lt; T &gt;::operator=</definition>
        <argsstring>(const wxSharedPtr&lt; T &gt; &amp;tocopy)</argsstring>
        <name>operator=</name>
        <param>
          <type>const wxSharedPtr&lt; T &gt; &amp;</type>
          <declname>tocopy</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para>Releases any previously held pointer and creates a reference to the same object as <emphasis>topcopy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="83"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1a0487e5fffe75675432cdbc286c7c70c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxSharedPtr&lt; T &gt;::reset</definition>
        <argsstring>(T *ptr=NULL)</argsstring>
        <name>reset</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Reset pointer to <emphasis>ptr</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If the reference count of the previously owned pointer was 1 it will be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="90"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1acc5ef763bf3ecbb4baea49fa529a7d8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxSharedPtr&lt; T &gt;::unique</definition>
        <argsstring>() const </argsstring>
        <name>unique</name>
        <briefdescription>
<para>Returns true if this is the only pointer pointing to its object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="95"/>
      </memberdef>
      <memberdef kind="function" id="classwx_shared_ptr_3_01_t_01_4_1a8781205f5790b6fcf56219b0de57df73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxSharedPtr&lt; T &gt;::use_count</definition>
        <argsstring>() const </argsstring>
        <name>use_count</name>
        <briefdescription>
<para>Returns the number of pointers pointing to its object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A smart pointer with non-intrusive reference counting. </para>    </briefdescription>
    <detaileddescription>
<para>It is modelled after <computeroutput>boost::shared_ptr&lt;&gt;</computeroutput> and can be used with STL containers and <ref refid="classwx_vector_3_01_t_01_4" kindref="compound">wxVector&lt;T&gt;</ref> unlike <computeroutput>std::auto_ptr&lt;&gt;</computeroutput> and <ref refid="classwx_scoped_ptr_3_01_t_01_4" kindref="compound">wxScopedPtr&lt;T&gt;</ref>.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__smartpointers" kindref="compound">Smart Pointers</ref></para><para><simplesect kind="see"><para><ref refid="classwx_scoped_ptr_3_01_t_01_4" kindref="compound">wxScopedPtr&lt;T&gt;</ref>, <ref refid="classwx_weak_ref_3_01_t_01_4" kindref="compound">wxWeakRef&lt;T&gt;</ref>, <ref refid="classwx_object_data_ptr_3_01_t_01_4" kindref="compound">wxObjectDataPtr&lt;T&gt;</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" line="22" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/sharedptr.h" bodystart="21" bodyend="101"/>
    <listofallmembers>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1a899d60ebcd4be6b9ce724a224a5ef4b7" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>get</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1a66f84bb60c78099c7f485fe9160cfb4f" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>operator unspecified_bool_type</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1a606330d4c8a91f0ab4337ecf535a975a" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>operator*</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1ab9b716c07f4263aa9a61c2ef348ca829" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>operator-&gt;</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1ae02306a82285661c58e809ac32492e46" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>operator=</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1a2843bd42c7d37447d1d27f0507030ef7" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>operator=</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1a0487e5fffe75675432cdbc286c7c70c3" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>reset</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1acc5ef763bf3ecbb4baea49fa529a7d8f" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>unique</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1a8781205f5790b6fcf56219b0de57df73" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>use_count</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1ab9a0d5e0d4ae27b41b0e59727a9fd2d0" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>wxSharedPtr</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1a78b7860f505470d2d954d33d76bf2372" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>wxSharedPtr</name></member>
      <member refid="classwx_shared_ptr_3_01_t_01_4_1a0b5939721f372f5f8f80113b81006a7e" prot="public" virt="non-virtual"><scope>wxSharedPtr&lt; T &gt;</scope><name>~wxSharedPtr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

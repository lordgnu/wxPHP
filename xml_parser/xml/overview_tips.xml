<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="overview_tips" kind="page">
    <compoundname>overview_tips</compoundname>
    <title>wxTipProvider Overview</title>
    <detaileddescription>
<para>Many &quot;modern&quot; Windows programs have a feature (some would say annoyance) of presenting the user tips at program startup.</para><para>While this is probably useless to the advanced users of the program, the experience shows that the tips may be quite helpful for the novices and so more and more programs now do this. For a wxWidgets programmer, implementing this feature is extremely easy. To show a tip, it is enough to just call wxShowTip function like this:</para><para><programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>...show<sp/>tips<sp/>at<sp/>startup?...<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_tip_provider" kindref="compound" tooltip="This is the class used together with wxShowTip() function.">wxTipProvider</ref><sp/>*tipProvider<sp/>=<sp/><ref refid="group__group__funcmacro__dialog_1ga9cc492bddff104d3afceca94ae945f38" kindref="member" tooltip="This function creates a wxTipProvider which may be used with wxShowTip().">wxCreateFileTipProvider</ref>(</highlight><highlight class="stringliteral">&quot;tips.txt&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__dialog_1ga71723a35f5e98349f5a79d7a025dac07" kindref="member" tooltip="This function shows a &amp;quot;startup tip&amp;quot; to the user.">wxShowTip</ref>(windowParent,<sp/>tipProvider);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tipProvider;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Of course, you need to get the text of the tips from somewhere - in the example above, the text is supposed to be in the file tips.txt from where it is read by the <emphasis>tip provider</emphasis>. The tip provider is just an object of a class deriving from <ref refid="classwx_tip_provider" kindref="compound">wxTipProvider</ref>. It has to implement one pure virtual function of the base class: GetTip. In the case of the tip provider created by wxCreateFileTipProvider, the tips are just the lines of the text file.</para><para>If you want to implement your own tip provider (for example, if you wish to hardcode the tips inside your program), you just have to derive another class from <ref refid="classwx_tip_provider" kindref="compound">wxTipProvider</ref> and pass a pointer to the object of this class to wxShowTip - then you don&apos;t need wxCreateFileTipProvider at all.</para><para>You will probably want to save somewhere the index of the tip last shown - so that the program doesn&apos;t always show the same tip on startup. As you also need to remember whether to show tips or not (you shouldn&apos;t do it if the user unchecked &quot;Show tips on startup&quot; checkbox in the dialog), you will probably want to store both the index of the last shown tip (as returned by <ref refid="classwx_tip_provider_1acff065db246be564d5e888210d99e0fc" kindref="member">wxTipProvider::GetCurrentTip</ref> and the flag telling whether to show the tips at startup at all.</para><para>In a tips.txt file, lines that begin with a # character are considered comments and are automatically skipped. Blank lines and lines only having spaces are also skipped.</para><para>You can easily add runtime-translation capacity by placing each line of the tips.txt file inside the usual translation macro. For example, your tips.txt file would look like this:</para><para><programlisting><codeline><highlight class="normal"><ref refid="group__group__funcmacro__string_1ga8a02b8875a521df57263a9e6f090f2d0" kindref="member" tooltip="Macro to be used around all literal strings that should be translated.">_</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>first<sp/>tip&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__group__funcmacro__string_1ga8a02b8875a521df57263a9e6f090f2d0" kindref="member" tooltip="Macro to be used around all literal strings that should be translated.">_</ref>(&quot;This<sp/>is<sp/>my<sp/>second<sp/>tip&quot;)</highlight></codeline>
</programlisting></para><para>Now add your tips.txt file into the list of files that gettext searches for translatable strings. The tips will thus get included into your generated .po file catalog and be translated at runtime along with the rest of your application&apos;s translatable strings.</para><para><simplesect kind="note"><para>Each line in the tips.txt file needs to strictly begin with exactly the 3 characters of underscore-parenthesis-doublequote, and end with doublequote-parenthesis, as shown above. Also, remember to escape any doublequote characters within the tip string with a backslash-doublequote.</para></simplesect>
See the dialogs program in your samples folder for a working example inside a program. </para>    </detaileddescription>
  </compounddef>
</doxygen>

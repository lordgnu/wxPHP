<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_layout_algorithm" kind="class" prot="public">
    <compoundname>wxLayoutAlgorithm</compoundname>
    <basecompoundref refid="classwx_object" prot="public" virt="non-virtual">wxObject</basecompoundref>
    <includes local="no">wx/laywin.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_layout_algorithm_1af8e2301f3e97d27ee3c2e0cbb2587488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxLayoutAlgorithm::wxLayoutAlgorithm</definition>
        <argsstring>()</argsstring>
        <name>wxLayoutAlgorithm</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/laywin.h" line="117"/>
      </memberdef>
      <memberdef kind="function" id="classwx_layout_algorithm_1a5a634c1e3e6b2acf1bffd6b1a16e3a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxLayoutAlgorithm::~wxLayoutAlgorithm</definition>
        <argsstring>()</argsstring>
        <name>~wxLayoutAlgorithm</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/laywin.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="classwx_layout_algorithm_1aec4fbde5e0443135361f134509d6f256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxLayoutAlgorithm::LayoutFrame</definition>
        <argsstring>(wxFrame *frame, wxWindow *mainWindow=NULL)</argsstring>
        <name>LayoutFrame</name>
        <param>
          <type><ref refid="classwx_frame" kindref="compound">wxFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>mainWindow</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Lays out the children of a normal frame. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>mainWindow</emphasis> is set to occupy the remaining space. This function simply calls <ref refid="classwx_layout_algorithm_1a92a081ca21f6faeef4b19c0d248e972e" kindref="member">LayoutWindow()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/laywin.h" line="128"/>
      </memberdef>
      <memberdef kind="function" id="classwx_layout_algorithm_1a8d6669ef1b4166627299e9a17052b1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxLayoutAlgorithm::LayoutMDIFrame</definition>
        <argsstring>(wxMDIParentFrame *frame, wxRect *rect=NULL)</argsstring>
        <name>LayoutMDIFrame</name>
        <param>
          <type><ref refid="classwx_m_d_i_parent_frame" kindref="compound">wxMDIParentFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="classwx_rect" kindref="compound">wxRect</ref> *</type>
          <declname>rect</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Lays out the children of an MDI parent frame. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>rect</emphasis> is non-NULL, the given rectangle will be used as a starting point instead of the frame&apos;s client area. The MDI client window is set to occupy the remaining space. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/laywin.h" line="135"/>
      </memberdef>
      <memberdef kind="function" id="classwx_layout_algorithm_1a92a081ca21f6faeef4b19c0d248e972e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxLayoutAlgorithm::LayoutWindow</definition>
        <argsstring>(wxWindow *parent, wxWindow *mainWindow=NULL)</argsstring>
        <name>LayoutWindow</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>mainWindow</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Lays out the children of a normal frame or other window. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>mainWindow</emphasis> is set to occupy the remaining space. If this is not specified, then the last window that responds to a calculate layout event in query mode will get the remaining space (that is, a non-query OnCalculateLayout event will not be sent to this window and the window will be set to the remaining size). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/laywin.h" line="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_layout_algorithm" kindref="compound">wxLayoutAlgorithm</ref> implements layout of subwindows in MDI or SDI frames. </para>    </briefdescription>
    <detaileddescription>
<para>It sends a <ref refid="classwx_calculate_layout_event" kindref="compound">wxCalculateLayoutEvent</ref> event to children of the frame, asking them for information about their size. For MDI parent frames, the algorithm allocates the remaining space to the MDI client window (which contains the MDI child frames).</para><para>For SDI (normal) frames, a &apos;main&apos; window is specified as taking up the remaining space.</para><para>Because the event system is used, this technique can be applied to any windows, which are not necessarily &apos;aware&apos; of the layout classes (no virtual functions in <ref refid="classwx_window" kindref="compound">wxWindow</ref> refer to <ref refid="classwx_layout_algorithm" kindref="compound">wxLayoutAlgorithm</ref> or its events). However, you may wish to use <ref refid="classwx_sash_layout_window" kindref="compound">wxSashLayoutWindow</ref> for your subwindows since this class provides handlers for the required events, and accessors to specify the desired size of the window. The sash behaviour in the base class can be used, optionally, to make the windows user-resizable.</para><para><ref refid="classwx_layout_algorithm" kindref="compound">wxLayoutAlgorithm</ref> is typically used in IDE (integrated development environment) applications, where there are several resizable windows in addition to the MDI client window, or other primary editing window. Resizable windows might include toolbars, a project window, and a window for displaying error and warning messages.</para><para>When a window receives an OnCalculateLayout event, it should call SetRect in the given event object, to be the old supplied rectangle minus whatever space the window takes up. It should also set its own size accordingly. <ref refid="classwx_sash_layout_window_1a980dceb898b349ade2330e61246e111d" kindref="member">wxSashLayoutWindow::OnCalculateLayout</ref> generates an OnQueryLayoutInfo event which it sends to itself to determine the orientation, alignment and size of the window, which it gets from internal member variables set by the application.</para><para>The algorithm works by starting off with a rectangle equal to the whole frame client area. It iterates through the frame children, generating wxLayoutAlgorithm::OnCalculateLayout events which subtract the window size and return the remaining rectangle for the next window to process. It is assumed (by <ref refid="classwx_sash_layout_window_1a980dceb898b349ade2330e61246e111d" kindref="member">wxSashLayoutWindow::OnCalculateLayout</ref>) that a window stretches the full dimension of the frame client, according to the orientation it specifies. For example, a horizontal window will stretch the full width of the remaining portion of the frame client area. In the other orientation, the window will be fixed to whatever size was specified by wxLayoutAlgorithm::OnQueryLayoutInfo. An alignment setting will make the window &apos;stick&apos; to the left, top, right or bottom of the remaining client area. This scheme implies that order of window creation is important. Say you wish to have an extra toolbar at the top of the frame, a project window to the left of the MDI client window, and an output window above the status bar. You should therefore create the windows in this order: toolbar, output window, project window. This ensures that the toolbar and output window take up space at the top and bottom, and then the remaining height in-between is used for the project window.</para><para><ref refid="classwx_layout_algorithm" kindref="compound">wxLayoutAlgorithm</ref> is quite independent of the way in which wxLayoutAlgorithm::OnCalculateLayout chooses to interpret a window&apos;s size and alignment. Therefore you could implement a different window class with a new wxLayoutAlgorithm::OnCalculateLayout event handler, that has a more sophisticated way of laying out the windows. It might allow specification of whether stretching occurs in the specified orientation, for example, rather than always assuming stretching. (This could, and probably should, be added to the existing implementation).</para><para><simplesect kind="note"><para><ref refid="classwx_layout_algorithm" kindref="compound">wxLayoutAlgorithm</ref> has nothing to do with <ref refid="classwx_layout_constraints" kindref="compound">wxLayoutConstraints</ref>. It is an alternative way of specifying layouts for which the normal constraint system is unsuitable.</para></simplesect>
<heading level="2">Events emitted by this class</heading>
</para><para>The following event handler macros redirect the events to member function handlers &apos;<bold>func</bold>&apos; with prototypes like: void<nonbreakablespace/>handlerFuncName(<ref refid="classwx_query_layout_info_event" kindref="compound">wxQueryLayoutInfoEvent</ref>&amp;<nonbreakablespace/>event) or void<nonbreakablespace/>handlerFuncName(<ref refid="classwx_calculate_layout_event" kindref="compound">wxCalculateLayoutEvent</ref>&amp;<nonbreakablespace/>event)Event macros for events emitted by this class: <itemizedlist>
<listitem><para>EVT_QUERY_LAYOUT_INFO(func): Process a <computeroutput>wxEVT_QUERY_LAYOUT_INFO</computeroutput> event, to get size, orientation and alignment from a window. See <ref refid="classwx_query_layout_info_event" kindref="compound">wxQueryLayoutInfoEvent</ref>. </para></listitem>
<listitem><para>EVT_CALCULATE_LAYOUT(func): Process a <computeroutput>wxEVT_CALCULATE_LAYOUT</computeroutput> event, which asks the window to take a &apos;bite&apos; out of a rectangle provided by the algorithm. See <ref refid="classwx_calculate_layout_event" kindref="compound">wxCalculateLayoutEvent</ref>. </para></listitem>
</itemizedlist>
Note that the algorithm object does not respond to events, but itself generates the previous events in order to calculate window sizes.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxadv" kindref="member">wxAdvanced</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__winlayout" kindref="compound">Window Layout</ref></para><para><simplesect kind="see"><para><ref refid="classwx_sash_event" kindref="compound">wxSashEvent</ref>, <ref refid="classwx_sash_layout_window" kindref="compound">wxSashLayoutWindow</ref>, <ref refid="overview_events" kindref="compound">Events and Event Handling</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="7585">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="7584">
        <label>wxLayoutAlgorithm</label>
        <link refid="classwx_layout_algorithm"/>
        <childnode refid="7585" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7587">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="7588" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="7586">
        <label>wxLayoutAlgorithm</label>
        <link refid="classwx_layout_algorithm"/>
        <childnode refid="7587" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7588">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/laywin.h" line="112" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/laywin.h" bodystart="111" bodyend="146"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>AllocExclusive</name></member>
      <member refid="classwx_object_1a1d39f1d3650fe0982c9a1abe7f9fe7b7" prot="protected" virt="virtual"><scope>wxLayoutAlgorithm</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a95c6a5e4e1e03ff23c7b9efe4cff0c1a" prot="protected" virt="virtual"><scope>wxLayoutAlgorithm</scope><name>CreateRefData</name></member>
      <member refid="classwx_object_1ab3a0c6f723cbaddb47be4e8dd98cc8e2" prot="public" virt="virtual"><scope>wxLayoutAlgorithm</scope><name>GetClassInfo</name></member>
      <member refid="classwx_object_1aabdb4fc957226544a8408167844e4f42" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>GetRefData</name></member>
      <member refid="classwx_object_1af40d580385cf4f8112fae7713404b01e" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>IsKindOf</name></member>
      <member refid="classwx_object_1a80a1a3fda7b14396a9ddd3d7a46a88bd" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>IsSameAs</name></member>
      <member refid="classwx_layout_algorithm_1aec4fbde5e0443135361f134509d6f256" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>LayoutFrame</name></member>
      <member refid="classwx_layout_algorithm_1a8d6669ef1b4166627299e9a17052b1d6" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>LayoutMDIFrame</name></member>
      <member refid="classwx_layout_algorithm_1a92a081ca21f6faeef4b19c0d248e972e" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>LayoutWindow</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>m_refData</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>operator new</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>Ref</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>SetRefData</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>UnShare</name></member>
      <member refid="classwx_layout_algorithm_1af8e2301f3e97d27ee3c2e0cbb2587488" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>wxLayoutAlgorithm</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxLayoutAlgorithm</scope><name>wxObject</name></member>
      <member refid="classwx_layout_algorithm_1a5a634c1e3e6b2acf1bffd6b1a16e3a33" prot="public" virt="virtual"><scope>wxLayoutAlgorithm</scope><name>~wxLayoutAlgorithm</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxLayoutAlgorithm</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

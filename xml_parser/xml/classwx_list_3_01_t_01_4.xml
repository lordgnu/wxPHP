<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_list_3_01_t_01_4" kind="class" prot="public">
    <compoundname>wxList&lt; T &gt;</compoundname>
    <includes local="no">wx/list.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ada111073951a16dac72774ae944cacc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxList&lt; T &gt;::wxList</definition>
        <argsstring>()</argsstring>
        <name>wxList</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="103"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1abfbd82cc6a9378edef3205a4ed2a2cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxList&lt; T &gt;::wxList</definition>
        <argsstring>(size_t count, T *elements[])</argsstring>
        <name>wxList</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>elements</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Constructor which initialized the list with an array of <emphasis>count</emphasis> elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a94d5e8a7634b8a85569b0d2cf8b94021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxList&lt; T &gt;::~wxList</definition>
        <argsstring>()</argsstring>
        <name>~wxList</name>
        <briefdescription>
<para>Destroys the list, but does not delete the objects stored in the list unless you called DeleteContents(true ). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="114"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a83473b364e28de85930f4f6d455b1126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxList&lt; T &gt;::compatibility_iterator</type>
        <definition>wxList&lt;T&gt;::compatibility_iterator wxList&lt; T &gt;::Append</definition>
        <argsstring>(T *object)</argsstring>
        <name>Append</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Appends the pointer to <emphasis>object</emphasis> to the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="119"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ac6fe12197b364ff2e3f5059cd2981b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clears the list. </para>        </briefdescription>
        <detaileddescription>
<para>Deletes the actual objects if DeleteContents( true ) was called previously. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="125"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1aacdd6247511c440656421c518ca11f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::DeleteContents</definition>
        <argsstring>(bool destroy)</argsstring>
        <name>DeleteContents</name>
        <param>
          <type>bool</type>
          <declname>destroy</declname>
        </param>
        <briefdescription>
<para>If <emphasis>destroy</emphasis> is true, instructs the list to call <emphasis>delete</emphasis> on objects stored in the list whenever they are removed. </para>        </briefdescription>
        <detaileddescription>
<para>The default is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="132"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ae84c8a713cbc97a613f7d4ecae804c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxList&lt; T &gt;::DeleteNode</definition>
        <argsstring>(const compatibility_iterator &amp;iter)</argsstring>
        <name>DeleteNode</name>
        <param>
          <type>const compatibility_iterator &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Deletes the given element referred to by <emphasis>iter</emphasis> from the list if <emphasis>iter</emphasis> is a valid iterator. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if successful.</para><para>Deletes the actual object if DeleteContents( true ) was called previously. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="140"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ac1ce9ebe3f444f94996056c0673cbf45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxList&lt; T &gt;::DeleteObject</definition>
        <argsstring>(T *object)</argsstring>
        <name>DeleteObject</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Finds the given <emphasis>object</emphasis> and removes it from the list, returning true if successful. </para>        </briefdescription>
        <detaileddescription>
<para>Deletes <emphasis>object</emphasis> if DeleteContents( true ) was called previously. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="148"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a587aa506850f01705ec1c6765288f4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::Erase</definition>
        <argsstring>(const compatibility_iterator &amp;iter)</argsstring>
        <name>Erase</name>
        <param>
          <type>const compatibility_iterator &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Removes element referred to be <emphasis>iter</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Deletes the actual object if DeleteContents( true ) was called previously. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="155"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a00281b9a83a24adc8166181f4e86e219" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxList&lt; T &gt;::compatibility_iterator</type>
        <definition>wxList&lt;T&gt;::compatibility_iterator wxList&lt; T &gt;::Find</definition>
        <argsstring>(T *object) const </argsstring>
        <name>Find</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Returns the iterator referring to <emphasis>object</emphasis> or NULL if none found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="160"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a8661213abcb683290337a751a7ae233a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxList&lt; T &gt;::GetCount</definition>
        <argsstring>() const </argsstring>
        <name>GetCount</name>
        <briefdescription>
<para>Returns the number of elements in the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="165"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a53d5663bfc1ef42f281270978481ba86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxList&lt; T &gt;::compatibility_iterator</type>
        <definition>wxList&lt;T&gt;::compatibility_iterator wxList&lt; T &gt;::GetFirst</definition>
        <argsstring>() const </argsstring>
        <name>GetFirst</name>
        <briefdescription>
<para>Returns the first iterator in the list (NULL if the list is empty). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="170"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a283c50efc08130512b722dbff88f2091" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxList&lt; T &gt;::compatibility_iterator</type>
        <definition>wxList&lt;T&gt;::compatibility_iterator wxList&lt; T &gt;::GetLast</definition>
        <argsstring>() const </argsstring>
        <name>GetLast</name>
        <briefdescription>
<para>Returns the last iterator in the list (NULL if the list is empty). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="175"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a7578e8bae594bce2f54a25f599f9796d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxList&lt; T &gt;::IndexOf</definition>
        <argsstring>(T *obj) const </argsstring>
        <name>IndexOf</name>
        <param>
          <type>T *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Returns the index of <emphasis>obj</emphasis> within the list or <computeroutput>wxNOT_FOUND</computeroutput> if <emphasis>obj</emphasis> is not found in the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="181"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a3a482e758da82c1b07c363c9d9079005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxList&lt; T &gt;::compatibility_iterator</type>
        <definition>wxList&lt;T&gt;::compatibility_iterator wxList&lt; T &gt;::Insert</definition>
        <argsstring>(T *object)</argsstring>
        <name>Insert</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Inserts <emphasis>object</emphasis> at the beginning of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="186"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a6702dc935cb39735575569cfbc9aa2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxList&lt; T &gt;::compatibility_iterator</type>
        <definition>wxList&lt;T&gt;::compatibility_iterator wxList&lt; T &gt;::Insert</definition>
        <argsstring>(size_t position, T *object)</argsstring>
        <name>Insert</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Inserts <emphasis>object</emphasis> at <emphasis>position</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="192"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ad1b718169edb3d8d237c44818139c454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxList&lt; T &gt;::compatibility_iterator</type>
        <definition>wxList&lt;T&gt;::compatibility_iterator wxList&lt; T &gt;::Insert</definition>
        <argsstring>(compatibility_iterator iter, T *object)</argsstring>
        <name>Insert</name>
        <param>
          <type>compatibility_iterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Inserts <emphasis>object</emphasis> before the object referred to be <emphasis>iter</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="198"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1aa13247d53e344bf94f5ba5e2719bd5a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxList&lt; T &gt;::IsEmpty</definition>
        <argsstring>() const </argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns true if the list is empty, false otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="203"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ace585a27d94a307f638a7748b20075a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxList&lt; T &gt;::compatibility_iterator</type>
        <definition>wxList&lt;T&gt;::compatibility_iterator wxList&lt; T &gt;::Item</definition>
        <argsstring>(size_t index) const </argsstring>
        <name>Item</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the iterator referring to the object at the given <emphasis>index</emphasis> in the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="209"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a710612f09a76d234d949724405338e1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxList&lt; T &gt;::Member</definition>
        <argsstring>(T *object) const </argsstring>
        <name>Member</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Check if the object is present in the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_list_3_01_t_01_4_1a00281b9a83a24adc8166181f4e86e219" kindref="member">Find()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="216"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a97e1e3cf0afc38f2428c1c72196c1c97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxList&lt; T &gt;::compatibility_iterator</type>
        <definition>wxList&lt;T&gt;::compatibility_iterator wxList&lt; T &gt;::Nth</definition>
        <argsstring>(int n) const </argsstring>
        <name>Nth</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000027"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated, use <ref refid="classwx_list_3_01_t_01_4_1ace585a27d94a307f638a7748b20075a7" kindref="member">Item()</ref> instead.</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="221"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a8d958f395ca2a85e6b5ec3efcd055388" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxList&lt; T &gt;::Number</definition>
        <argsstring>() const </argsstring>
        <name>Number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000028"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated, use wxList::GetCount instead.</para></xrefdescription></xrefsect>Returns the number of elements in the list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="227"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ad3defd443865ca9acc9e71bf8a6d7405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::Sort</definition>
        <argsstring>(wxSortCompareFunction compfunc)</argsstring>
        <name>Sort</name>
        <param>
          <type>wxSortCompareFunction</type>
          <declname>compfunc</declname>
        </param>
        <briefdescription>
<para>Allows the sorting of arbitrary lists by giving a function to compare two list elements. </para>        </briefdescription>
        <detaileddescription>
<para>We use the system <bold>qsort</bold> function for the actual sorting process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="234"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ad6111a1f42c6b65189b80b2ff936ee3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::assign</definition>
        <argsstring>(const_iterator first, const const_iterator &amp;last)</argsstring>
        <name>assign</name>
        <param>
          <type>const_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const const_iterator &amp;</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Clears the list and item from <emphasis>first</emphasis> to <emphasis>last</emphasis> from another list to it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="239"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a193c8c65b0cc8ed948fe1be57feafe8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::assign</definition>
        <argsstring>(size_type n, const_reference v=value_type())</argsstring>
        <name>assign</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const_reference</type>
          <declname>v</declname>
          <defval>value_type()</defval>
        </param>
        <briefdescription>
<para>Clears the list and adds <emphasis>n</emphasis> items with value <emphasis>v</emphasis> to it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="244"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a6a4a4c768c5f245512715fe2718037ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>reference</type>
        <definition>reference wxList&lt; T &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
<para>Returns the last item of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="249"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a0ce0c1bc1eac67f2534083dd39c2a9c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference wxList&lt; T &gt;::back</definition>
        <argsstring>() const </argsstring>
        <name>back</name>
        <briefdescription>
<para>Returns the last item of the list as a const reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="254"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a2bc8066f4e262ddf6e28594a07e4f895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxList&lt; T &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an iterator pointing to the beginning of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="259"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a27a4f8994e4b11332a1fdc6a02b02619" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator wxList&lt; T &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a const iterator pointing to the beginning of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="264"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1afc31bec93008cd4881b27f0f7201b9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Removes all items from the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="269"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a2319b140ebf24a4c2b5ef5468eb08db5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxList&lt; T &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns <emphasis></emphasis> true if the list is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="274"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ab75bbef5aeabfdd054afc8de9113b6f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator wxList&lt; T &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a const iterator pointing at the end of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="279"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a2cef277e3fdbeca92cf84b7a43cc2d50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxList&lt; T &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a iterator pointing at the end of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="284"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a14e23d2a4bcf958e414457154f255bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxList&lt; T &gt;::erase</definition>
        <argsstring>(const iterator &amp;it)</argsstring>
        <name>erase</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Erases the given item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="289"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a733bf0261f4c557c976818e5f788407d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxList&lt; T &gt;::erase</definition>
        <argsstring>(const iterator &amp;first, const iterator &amp;last)</argsstring>
        <name>erase</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const iterator &amp;</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Erases the items from <emphasis>first</emphasis> to <emphasis>last</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="295"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ac809ea40e4499f656d7d2d3a6d7b7e2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>reference</type>
        <definition>reference wxList&lt; T &gt;::front</definition>
        <argsstring>() const </argsstring>
        <name>front</name>
        <briefdescription>
<para>Returns the first item in the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="300"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ab01b847479dadcc633afac06430a25d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference wxList&lt; T &gt;::front</definition>
        <argsstring>() const </argsstring>
        <name>front</name>
        <briefdescription>
<para>Returns the first item in the list as a const reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="305"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a8d6883880a636bb77226f04f8c5f18ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxList&lt; T &gt;::insert</definition>
        <argsstring>(const iterator &amp;it)</argsstring>
        <name>insert</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Inserts an item at the head of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="310"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a58b871b00ea26a8d03713be2f5d278d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::insert</definition>
        <argsstring>(const iterator &amp;it, size_type n)</argsstring>
        <name>insert</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Inserts an item at the given position. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="315"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ac91180303f81772a3113742ad0128dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::insert</definition>
        <argsstring>(const iterator &amp;it, const_iterator first, const const_iterator &amp;last)</argsstring>
        <name>insert</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const const_iterator &amp;</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Inserts several items at the given position. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="321"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1aef1bb3d170c87215ff36443773a37017" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type wxList&lt; T &gt;::max_size</definition>
        <argsstring>() const </argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Returns the largest possible size of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="326"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ac5912f6288b56db08e76f6dda722e0e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>Removes the last item from the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="331"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a633be592989e7ee27e70da865f12f60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::pop_front</definition>
        <argsstring>()</argsstring>
        <name>pop_front</name>
        <briefdescription>
<para>Removes the first item from the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="336"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a04421addbc3c50caddf3e60ccb1375d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::push_back</definition>
        <argsstring>(const_reference v=value_type())</argsstring>
        <name>push_back</name>
        <param>
          <type>const_reference</type>
          <declname>v</declname>
          <defval>value_type()</defval>
        </param>
        <briefdescription>
<para>Adds an item to end of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="341"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1afd57f0b7a8ffb7b5047bfe027398e86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::push_front</definition>
        <argsstring>(const_reference v=value_type())</argsstring>
        <name>push_front</name>
        <param>
          <type>const_reference</type>
          <declname>v</declname>
          <defval>value_type()</defval>
        </param>
        <briefdescription>
<para>Adds an item to the front of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="346"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1aa7a5a1e9422dbd6e6fa72fb89117c1a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator wxList&lt; T &gt;::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Returns a reverse iterator pointing to the beginning of the reversed list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="352"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1adad51201fbc661eb2ea528de97ff72e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator wxList&lt; T &gt;::rbegin</definition>
        <argsstring>() const </argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Returns a const reverse iterator pointing to the beginning of the reversed list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="358"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a2d5df236b8c230fe449506076cac2ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::remove</definition>
        <argsstring>(const_reference v)</argsstring>
        <name>remove</name>
        <param>
          <type>const_reference</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Removes an item from the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="363"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a17020c95641b37d5938d0e62e145e768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator wxList&lt; T &gt;::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Returns a reverse iterator pointing to the end of the reversed list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="368"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ae25d3071b82f35e8dbe4c6b001c3a15d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator wxList&lt; T &gt;::rend</definition>
        <argsstring>() const </argsstring>
        <name>rend</name>
        <briefdescription>
<para>Returns a const reverse iterator pointing to the end of the reversed list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="373"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1ac8e1fd756566bb90a786011e8d5e849f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::resize</definition>
        <argsstring>(size_type n, value_type v=value_type())</argsstring>
        <name>resize</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type>value_type</type>
          <declname>v</declname>
          <defval>value_type()</defval>
        </param>
        <briefdescription>
<para>Resizes the list. </para>        </briefdescription>
        <detaileddescription>
<para>If the list is longer than <emphasis>n</emphasis>, then items are removed until the list becomes long <emphasis>n</emphasis>. If the list is shorter than <emphasis>n</emphasis> items with the value <emphasis>v</emphasis> are appended to the list until the list becomes long <emphasis>n</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="383"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1a354d6659c3047e3d8f529a574fe5fdeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxList&lt; T &gt;::reverse</definition>
        <argsstring>()</argsstring>
        <name>reverse</name>
        <briefdescription>
<para>Reverses the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="388"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_3_01_t_01_4_1aae3afa0cf1e567490c2c890859a0d02d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type wxList&lt; T &gt;::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the size of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="393"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref> class provides linked list functionality. </para>    </briefdescription>
    <detaileddescription>
<para>This class has been rewritten to be type safe and to provide the full API of the STL std::list container and should be used like it. The exception is that <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref> actually stores pointers and therefore its iterators return pointers and not references to the actual objects in the list (see example below) and <emphasis>value_type</emphasis> is defined as <emphasis>T*</emphasis>. <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref> destroys an object after removing it only if <ref refid="classwx_list_3_01_t_01_4_1aacdd6247511c440656421c518ca11f88" kindref="member">wxList&lt;T&gt;::DeleteContents</ref> has been called.</para><para><ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref> is not a real template and it requires that you declare and define each <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref> class in your program. This is done with <emphasis>WX_DECLARE_LIST</emphasis> and <emphasis>WX_DEFINE_LIST</emphasis> macros (see example). We hope that we&apos;ll be able to provide a proper template class providing both the STL <computeroutput>std::list</computeroutput> and the old wxList API in the future.</para><para>Please refer to the STL <computeroutput>std::list</computeroutput> documentation (see <ulink url="http://www.cppreference.com/wiki/stl/list/start">http://www.cppreference.com/wiki/stl/list/start</ulink>) for further information on how to use the class. Below we documented both the supported STL and the legacy API that originated from the old wxList class and which can still be used alternatively for the same class.</para><para>Note that if you compile wxWidgets in STL mode (<computeroutput>wxUSE_STL</computeroutput> defined as 1) then <ref refid="classwx_list_3_01_t_01_4" kindref="compound">wxList&lt;T&gt;</ref> will actually derive from <computeroutput>std::list</computeroutput> and just add a legacy compatibility layer for the old wxList class.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>part<sp/>might<sp/>be<sp/>in<sp/>a<sp/>header<sp/>or<sp/>source<sp/>(.cpp)<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyListElement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/></highlight><highlight class="comment">//<sp/>whatever</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>macro<sp/>declares<sp/>and<sp/>partly<sp/>implements<sp/>MyList<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WX_DECLARE_LIST(MyListElement,<sp/>MyList);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>only<sp/>requirement<sp/>for<sp/>the<sp/>rest<sp/>is<sp/>to<sp/>be<sp/>AFTER<sp/>the<sp/>full<sp/>declaration<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MyListElement<sp/>(for<sp/>WX_DECLARE_LIST<sp/>forward<sp/>declaration<sp/>is<sp/>enough),<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>usually<sp/>it<sp/>will<sp/>be<sp/>found<sp/>in<sp/>the<sp/>source<sp/>file<sp/>and<sp/>not<sp/>in<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;wx/listimpl.cpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WX_DEFINE_LIST(MyList);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MyList<sp/>list;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MyListElement<sp/>element;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>list.<ref refid="classwx_string_1a2faf8f428d7fac92e11f00a017ab46b3" kindref="member" tooltip="Appends the string literal psz.">Append</ref>(&amp;element);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>list.<ref refid="classwx_string_1a2faf8f428d7fac92e11f00a017ab46b3" kindref="member" tooltip="Appends the string literal psz.">Append</ref>(17);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error:<sp/>incorrect<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let&apos;s<sp/>iterate<sp/>over<sp/>the<sp/>list<sp/>in<sp/>STL<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MyList::iterator<sp/>iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>list.begin();<sp/>iter<sp/>!=<sp/>list.end();<sp/>++iter)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyListElement<sp/>*current<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...process<sp/>the<sp/>current<sp/>element...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>with<sp/>the<sp/>legacy<sp/>API<sp/>from<sp/>the<sp/>old<sp/>wxList<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MyList::compatibility_iterator<sp/>node<sp/>=<sp/>list.GetFirst();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyListElement<sp/>*current<sp/>=<sp/>node-&gt;GetData();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...process<sp/>the<sp/>current<sp/>element...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;GetNext();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>For compatibility with previous versions wxList and wxStringList classes are still defined, but their usage is deprecated and they will disappear in the future versions completely. The use of the latter is especially discouraged as it is not only unsafe but is also much less efficient than <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> class.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type stored in the wxList nodes.</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__containers" kindref="compound">Containers</ref></para><para><simplesect kind="see"><para><ref refid="classwx_array_3_01_t_01_4" kindref="compound">wxArray&lt;T&gt;</ref>, <ref refid="classwx_vector_3_01_t_01_4" kindref="compound">wxVector&lt;T&gt;</ref>, <ref refid="classwx_node_3_01_t_01_4" kindref="compound">wxNode&lt;T&gt;</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" line="98" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/list.h" bodystart="97" bodyend="394"/>
    <listofallmembers>
      <member refid="classwx_list_3_01_t_01_4_1a83473b364e28de85930f4f6d455b1126" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Append</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ad6111a1f42c6b65189b80b2ff936ee3b" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>assign</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a193c8c65b0cc8ed948fe1be57feafe8b" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>assign</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a6a4a4c768c5f245512715fe2718037ca" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>back</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a0ce0c1bc1eac67f2534083dd39c2a9c5" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>back</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a2bc8066f4e262ddf6e28594a07e4f895" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>begin</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a27a4f8994e4b11332a1fdc6a02b02619" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>begin</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ac6fe12197b364ff2e3f5059cd2981b50" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Clear</name></member>
      <member refid="classwx_list_3_01_t_01_4_1afc31bec93008cd4881b27f0f7201b9f4" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>clear</name></member>
      <member refid="classwx_list_3_01_t_01_4_1aacdd6247511c440656421c518ca11f88" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>DeleteContents</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ae84c8a713cbc97a613f7d4ecae804c1a" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>DeleteNode</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ac1ce9ebe3f444f94996056c0673cbf45" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>DeleteObject</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a2319b140ebf24a4c2b5ef5468eb08db5" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>empty</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ab75bbef5aeabfdd054afc8de9113b6f8" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>end</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a2cef277e3fdbeca92cf84b7a43cc2d50" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>end</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a587aa506850f01705ec1c6765288f4ca" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Erase</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a14e23d2a4bcf958e414457154f255bb8" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>erase</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a733bf0261f4c557c976818e5f788407d" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>erase</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a00281b9a83a24adc8166181f4e86e219" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Find</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ac809ea40e4499f656d7d2d3a6d7b7e2f" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>front</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ab01b847479dadcc633afac06430a25d0" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>front</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a8661213abcb683290337a751a7ae233a" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>GetCount</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a53d5663bfc1ef42f281270978481ba86" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>GetFirst</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a283c50efc08130512b722dbff88f2091" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>GetLast</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a7578e8bae594bce2f54a25f599f9796d" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>IndexOf</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a8d6883880a636bb77226f04f8c5f18ce" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>insert</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a58b871b00ea26a8d03713be2f5d278d6" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>insert</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ac91180303f81772a3113742ad0128dfc" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>insert</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a3a482e758da82c1b07c363c9d9079005" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Insert</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a6702dc935cb39735575569cfbc9aa2ab" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Insert</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ad1b718169edb3d8d237c44818139c454" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Insert</name></member>
      <member refid="classwx_list_3_01_t_01_4_1aa13247d53e344bf94f5ba5e2719bd5a8" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>IsEmpty</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ace585a27d94a307f638a7748b20075a7" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Item</name></member>
      <member refid="classwx_list_3_01_t_01_4_1aef1bb3d170c87215ff36443773a37017" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>max_size</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a710612f09a76d234d949724405338e1d" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Member</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a97e1e3cf0afc38f2428c1c72196c1c97" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Nth</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a8d958f395ca2a85e6b5ec3efcd055388" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Number</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ac5912f6288b56db08e76f6dda722e0e9" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>pop_back</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a633be592989e7ee27e70da865f12f60d" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>pop_front</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a04421addbc3c50caddf3e60ccb1375d6" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>push_back</name></member>
      <member refid="classwx_list_3_01_t_01_4_1afd57f0b7a8ffb7b5047bfe027398e86e" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>push_front</name></member>
      <member refid="classwx_list_3_01_t_01_4_1aa7a5a1e9422dbd6e6fa72fb89117c1a4" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>rbegin</name></member>
      <member refid="classwx_list_3_01_t_01_4_1adad51201fbc661eb2ea528de97ff72e6" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>rbegin</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a2d5df236b8c230fe449506076cac2ad8" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>remove</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a17020c95641b37d5938d0e62e145e768" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>rend</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ae25d3071b82f35e8dbe4c6b001c3a15d" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>rend</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ac8e1fd756566bb90a786011e8d5e849f" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>resize</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a354d6659c3047e3d8f529a574fe5fdeb" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>reverse</name></member>
      <member refid="classwx_list_3_01_t_01_4_1aae3afa0cf1e567490c2c890859a0d02d" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>size</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ad3defd443865ca9acc9e71bf8a6d7405" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>Sort</name></member>
      <member refid="classwx_list_3_01_t_01_4_1ada111073951a16dac72774ae944cacc3" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>wxList</name></member>
      <member refid="classwx_list_3_01_t_01_4_1abfbd82cc6a9378edef3205a4ed2a2cd0" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>wxList</name></member>
      <member refid="classwx_list_3_01_t_01_4_1a94d5e8a7634b8a85569b0d2cf8b94021" prot="public" virt="non-virtual"><scope>wxList&lt; T &gt;</scope><name>~wxList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

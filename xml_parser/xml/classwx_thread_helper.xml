<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_thread_helper" kind="class" prot="public">
    <compoundname>wxThreadHelper</compoundname>
    <includes local="no">wx/thread.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_thread_helper_1ace38e9960ed62f8cafdfc8f7008815ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxThreadHelper::wxThreadHelper</definition>
        <argsstring>(wxThreadKind kind=wxTHREAD_JOINABLE)</argsstring>
        <name>wxThreadHelper</name>
        <param>
          <type><ref refid="interface_2wx_2thread_8h_1a0dc9a167e8d084946512da99b37b5fd0" kindref="member">wxThreadKind</ref></type>
          <declname>kind</declname>
          <defval>wxTHREAD_JOINABLE</defval>
        </param>
        <briefdescription>
<para>This constructor simply initializes internal member variables and tells <ref refid="classwx_thread_helper" kindref="compound">wxThreadHelper</ref> which type the thread internally managed should be. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="411"/>
      </memberdef>
      <memberdef kind="function" id="classwx_thread_helper_1affe96946d9bceaba028209f4fd90ddf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxThreadHelper::~wxThreadHelper</definition>
        <argsstring>()</argsstring>
        <name>~wxThreadHelper</name>
        <briefdescription>
<para>The destructor frees the resources associated with the thread, forcing it to terminate (it uses <ref refid="classwx_thread_1a2cbff8b3b0a93ab82f212c02f38a1ef4" kindref="member">wxThread::Kill</ref> function). </para>        </briefdescription>
        <detaileddescription>
<para>Because of the <ref refid="classwx_thread_1a2cbff8b3b0a93ab82f212c02f38a1ef4" kindref="member">wxThread::Kill</ref> unsafety, you should always wait (with <ref refid="classwx_thread_1a62ee778033013d3a4754b71b8cf2902e" kindref="member">wxThread::Wait</ref>) for joinable threads to end or call <ref refid="classwx_thread_1a66796042bf5f3eb33a0ad3db85f686d4" kindref="member">wxThread::Delete</ref> on detached threads, instead of relying on this destructor for stopping the thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="422"/>
      </memberdef>
      <memberdef kind="function" id="classwx_thread_helper_1a7f3e0f028fb1b295bc61064ad4d4bc1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>ExitCode</type>
        <definition>virtual ExitCode wxThreadHelper::Entry</definition>
        <argsstring>()=0</argsstring>
        <name>Entry</name>
        <briefdescription>
<para>This is the entry point of the thread. </para>        </briefdescription>
        <detaileddescription>
<para>This function is pure virtual and must be implemented by any derived class. The thread execution will start here.</para><para>You&apos;ll typically want your <ref refid="classwx_thread_helper_1a7f3e0f028fb1b295bc61064ad4d4bc1b" kindref="member">Entry()</ref> to look like: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_thread_1ade9497fa072fe19481086e6486dcc028" kindref="member" tooltip="The return type for the thread functions.">wxThread::ExitCode</ref><sp/><ref refid="classwx_thread_helper_1a7f3e0f028fb1b295bc61064ad4d4bc1b" kindref="member" tooltip="This is the entry point of the thread.">Entry</ref>()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="classwx_thread_helper_1ac61fe16deda566773cdc7d4d38709370" kindref="member" tooltip="This is a public function that returns the wxThread object associated with the thread.">GetThread</ref>()-&gt;TestDestroy())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>do<sp/>some<sp/>work<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsWorkCompleted)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HappenedStoppingError)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classwx_thread_1ade9497fa072fe19481086e6486dcc028" kindref="member" tooltip="The return type for the thread functions.">wxThread::ExitCode</ref>)1;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classwx_thread_1ade9497fa072fe19481086e6486dcc028" kindref="member" tooltip="The return type for the thread functions.">wxThread::ExitCode</ref>)0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>The returned value is the thread exit code which is only useful for joinable threads and is the value returned by <computeroutput>&quot;GetThread()-&gt;Wait()&quot;</computeroutput>.</para><para>This function is called by wxWidgets itself and should never be called directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="455"/>
      </memberdef>
      <memberdef kind="function" id="classwx_thread_helper_1ad6275bdfa1590d13f4890a433ee3e1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxThreadHelper::OnDelete</definition>
        <argsstring>()</argsstring>
        <name>OnDelete</name>
        <briefdescription>
<para>Callback called by Delete() before actually deleting the thread. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be overridden by the derived class to perform some specific task when the thread is gracefully destroyed. Notice that it will be executed in the context of the thread that called Delete() and <bold>not</bold> in this thread&apos;s context.</para><para>TestDestroy() will be true for the thread before <ref refid="classwx_thread_helper_1ad6275bdfa1590d13f4890a433ee3e1c2" kindref="member">OnDelete()</ref> gets executed.</para><para><simplesect kind="since"><para>2.9.2</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_thread_helper_1aafc07894e382cbd964c3e9900b2b780b" kindref="member">OnKill()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="472"/>
      </memberdef>
      <memberdef kind="function" id="classwx_thread_helper_1aafc07894e382cbd964c3e9900b2b780b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxThreadHelper::OnKill</definition>
        <argsstring>()</argsstring>
        <name>OnKill</name>
        <briefdescription>
<para>Callback called by Kill() before actually killing the thread. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be overridden by the derived class to perform some specific task when the thread is terminated. Notice that it will be executed in the context of the thread that called Kill() and <bold>not</bold> in this thread&apos;s context.</para><para><simplesect kind="since"><para>2.9.2</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_thread_helper_1ad6275bdfa1590d13f4890a433ee3e1c2" kindref="member">OnDelete()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="486"/>
      </memberdef>
      <memberdef kind="function" id="classwx_thread_helper_1ae9f65014cb9c8ef1d27f22d6259c0fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2" kindref="member">wxThreadError</ref></type>
        <definition>wxThreadError wxThreadHelper::Create</definition>
        <argsstring>(unsigned int stackSize=0)</argsstring>
        <name>Create</name>
        <param>
          <type>unsigned int</type>
          <declname>stackSize</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000055"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="classwx_thread_helper_1a3682b1b5a08741335aa8acc7feb0ece5" kindref="member">CreateThread()</ref> instead.</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="492"/>
      </memberdef>
      <memberdef kind="function" id="classwx_thread_helper_1a3682b1b5a08741335aa8acc7feb0ece5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2" kindref="member">wxThreadError</ref></type>
        <definition>wxThreadError wxThreadHelper::CreateThread</definition>
        <argsstring>(wxThreadKind kind=wxTHREAD_JOINABLE, unsigned int stackSize=0)</argsstring>
        <name>CreateThread</name>
        <param>
          <type><ref refid="interface_2wx_2thread_8h_1a0dc9a167e8d084946512da99b37b5fd0" kindref="member">wxThreadKind</ref></type>
          <declname>kind</declname>
          <defval>wxTHREAD_JOINABLE</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>stackSize</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a new thread of the given <emphasis>kind</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The thread object is created in the suspended state, and you should call <ref refid="classwx_thread_1a5d894750ffaac8fc42ee85aeff8bb4c0" kindref="member">GetThread()-&gt;Run()</ref> to start running it.</para><para>You may optionally specify the stack size to be allocated to it (ignored on platforms that don&apos;t support setting it explicitly, e.g. Unix).</para><para><simplesect kind="return"><para>One of the <ref refid="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2" kindref="member">wxThreadError</ref> enum values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="506"/>
      </memberdef>
      <memberdef kind="function" id="classwx_thread_helper_1ac61fe16deda566773cdc7d4d38709370" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_thread" kindref="compound">wxThread</ref> *</type>
        <definition>wxThread* wxThreadHelper::GetThread</definition>
        <argsstring>() const </argsstring>
        <name>GetThread</name>
        <briefdescription>
<para>This is a public function that returns the <ref refid="classwx_thread" kindref="compound">wxThread</ref> object associated with the thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="512"/>
      </memberdef>
      <memberdef kind="function" id="classwx_thread_helper_1ae84f7a6b2bfc7e890d0dfd296cbc43cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_2wx_2thread_8h_1a0dc9a167e8d084946512da99b37b5fd0" kindref="member">wxThreadKind</ref></type>
        <definition>wxThreadKind wxThreadHelper::GetThreadKind</definition>
        <argsstring>() const </argsstring>
        <name>GetThreadKind</name>
        <briefdescription>
<para>Returns the last type of thread given to the <ref refid="classwx_thread_helper_1a3682b1b5a08741335aa8acc7feb0ece5" kindref="member">CreateThread()</ref> function or to the constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="518"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classwx_thread_helper" kindref="compound">wxThreadHelper</ref> class is a mix-in class that manages a single background thread, either detached or joinable (see <ref refid="classwx_thread" kindref="compound">wxThread</ref> for the differences). </para>    </briefdescription>
    <detaileddescription>
<para>By deriving from <ref refid="classwx_thread_helper" kindref="compound">wxThreadHelper</ref>, a class can implement the thread code in its own <ref refid="classwx_thread_helper_1a7f3e0f028fb1b295bc61064ad4d4bc1b" kindref="member">wxThreadHelper::Entry()</ref> method and easily share data and synchronization objects between the main thread and the worker thread.</para><para>Doing this prevents the awkward passing of pointers that is needed when the original object in the main thread needs to synchronize with its worker thread in its own <ref refid="classwx_thread" kindref="compound">wxThread</ref> derived object.</para><para>For example, <ref refid="classwx_frame" kindref="compound">wxFrame</ref> may need to make some calculations in a background thread and then display the results of those calculations in the main window.</para><para>Ordinarily, a <ref refid="classwx_thread" kindref="compound">wxThread</ref> derived object would be created with the calculation code implemented in <ref refid="classwx_thread_1af50fa7d3ac55002e367e79989b9cbc5d" kindref="member">wxThread::Entry</ref>. To access the inputs to the calculation, the frame object would often need to pass a pointer to itself to the thread object. Similarly, the frame object would hold a pointer to the thread object.</para><para>Shared data and synchronization objects could be stored in either object though the object without the data would have to access the data through a pointer. However with <ref refid="classwx_thread_helper" kindref="compound">wxThreadHelper</ref> the frame object and the thread object are treated as the same object. Shared data and synchronization variables are stored in the single object, eliminating a layer of indirection and the associated pointers.</para><para>Example: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__events_1ga767b12d37f7370bc5f6b3d62340f3ef8" kindref="member" tooltip="Declares a custom event type.">wxDECLARE_EVENT</ref>(wxEVT_COMMAND_MYTHREAD_UPDATE,<sp/><ref refid="classwx_thread_event" kindref="compound" tooltip="This class adds some simple functionality to wxEvent to facilitate inter-thread communication.">wxThreadEvent</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyFrame<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classwx_frame" kindref="compound" tooltip="A frame is a window whose size and position can (usually) be changed by the user.">wxFrame</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classwx_thread_helper" kindref="compound" tooltip="The wxThreadHelper class is a mix-in class that manages a single background thread, either detached or joinable (see wxThread for the differences).">wxThreadHelper</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyFrame(...)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~MyFrame()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>better<sp/>to<sp/>do<sp/>any<sp/>thread<sp/>cleanup<sp/>in<sp/>the<sp/>OnClose()</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>event<sp/>handler,<sp/>rather<sp/>than<sp/>in<sp/>the<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>because<sp/>the<sp/>event<sp/>loop<sp/>for<sp/>a<sp/>top-level<sp/>window<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>active<sp/>anymore<sp/>when<sp/>its<sp/>destructor<sp/>is<sp/>called<sp/>and<sp/>if<sp/>the<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sends<sp/>events<sp/>when<sp/>ending,<sp/>they<sp/>won&apos;t<sp/>be<sp/>processed<sp/>unless</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>you<sp/>ended<sp/>the<sp/>thread<sp/>from<sp/>OnClose.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>@ref<sp/>overview_windowdeletion<sp/>for<sp/>more<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DoStartALongTask();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnThreadUpdate(<ref refid="classwx_thread_event" kindref="compound" tooltip="This class adds some simple functionality to wxEvent to facilitate inter-thread communication.">wxThreadEvent</ref>&amp;<sp/>evt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnClose(<ref refid="classwx_close_event" kindref="compound" tooltip="This event class contains information about window and session close events.">wxCloseEvent</ref>&amp;<sp/>evt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classwx_thread_1ade9497fa072fe19481086e6486dcc028" kindref="member" tooltip="The return type for the thread functions.">wxThread::ExitCode</ref><sp/><ref refid="classwx_thread_helper_1a7f3e0f028fb1b295bc61064ad4d4bc1b" kindref="member" tooltip="This is the entry point of the thread.">Entry</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>output<sp/>data<sp/>of<sp/>the<sp/>Entry()<sp/>routine:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>m_data[1024];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_critical_section" kindref="compound" tooltip="A critical section object is used for exactly the same purpose as a wxMutex.">wxCriticalSection</ref><sp/>m_dataCS;<sp/></highlight><highlight class="comment">//<sp/>protects<sp/>field<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__events_1gab6eca03fad44ec10b75d3cb82e9219e3" kindref="member" tooltip="Use this macro inside a class declaration to declare a static event table for that class...">wxDECLARE_EVENT_TABLE</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__events_1ga09ec1d095bee3085c1cb31459b46bc00" kindref="member" tooltip="Define a new event type associated with the specified event class.">wxDEFINE_EVENT</ref>(wxEVT_COMMAND_MYTHREAD_UPDATE,<sp/><ref refid="classwx_thread_event" kindref="compound" tooltip="This class adds some simple functionality to wxEvent to facilitate inter-thread communication.">wxThreadEvent</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__events_1ga736930efaab4d7e445e9e8e520c7b74d" kindref="member" tooltip="Use this macro in a source file to start listing static event handlers for a specific class...">wxBEGIN_EVENT_TABLE</ref>(MyFrame,<sp/><ref refid="classwx_frame" kindref="compound" tooltip="A frame is a window whose size and position can (usually) be changed by the user.">wxFrame</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVT_COMMAND(wxID_ANY,<sp/>wxEVT_COMMAND_MYTHREAD_UPDATE,<sp/>MyFrame::OnThreadUpdate)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVT_CLOSE(MyFrame::OnClose)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__events_1ga383fad2a46e1d6c220fbe03ecfbc9c17" kindref="member" tooltip="Use this macro in a source file to end listing static event handlers for a specific class...">wxEND_EVENT_TABLE</ref>()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFrame::DoStartALongTask()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>to<sp/>start<sp/>a<sp/>long<sp/>task,<sp/>but<sp/>we<sp/>don&apos;t<sp/>want<sp/>our<sp/>GUI<sp/>to<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>it&apos;s<sp/>executed,<sp/>so<sp/>we<sp/>use<sp/>a<sp/>thread<sp/>to<sp/>do<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classwx_thread_helper_1a3682b1b5a08741335aa8acc7feb0ece5" kindref="member" tooltip="Creates a new thread of the given kind.">CreateThread</ref>(<ref refid="interface_2wx_2thread_8h_1a0dc9a167e8d084946512da99b37b5fd0ab5246cc8dc6eeb20bc69e4790e7b00a4" kindref="member" tooltip="Joinable thread.">wxTHREAD_JOINABLE</ref>)<sp/>!=<sp/><ref refid="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2ad1525fe128b4989cb43a7e8112ac1b13" kindref="member" tooltip="No error.">wxTHREAD_NO_ERROR</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__log_1ga0dd3c633f990f794e76065c9a7af4c87" kindref="member" tooltip="The functions to use for error messages, i.e.">wxLogError</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>the<sp/>worker<sp/>thread!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classwx_thread_helper_1ac61fe16deda566773cdc7d4d38709370" kindref="member" tooltip="This is a public function that returns the wxThread object associated with the thread.">GetThread</ref>()-&gt;Run()<sp/>!=<sp/><ref refid="interface_2wx_2thread_8h_1a9e4ba0577f752fee0ba2133035f75ac2ad1525fe128b4989cb43a7e8112ac1b13" kindref="member" tooltip="No error.">wxTHREAD_NO_ERROR</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__log_1ga0dd3c633f990f794e76065c9a7af4c87" kindref="member" tooltip="The functions to use for error messages, i.e.">wxLogError</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>run<sp/>the<sp/>worker<sp/>thread!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_thread_1ade9497fa072fe19481086e6486dcc028" kindref="member" tooltip="The return type for the thread functions.">wxThread::ExitCode</ref><sp/><ref refid="classwx_thread_helper_1a7f3e0f028fb1b295bc61064ad4d4bc1b" kindref="member" tooltip="This is the entry point of the thread.">MyFrame::Entry</ref>()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IMPORTANT:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>gets<sp/>executed<sp/>in<sp/>the<sp/>secondary<sp/>thread<sp/>context!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>do<sp/>our<sp/>long<sp/>task,<sp/>periodically<sp/>calling<sp/>TestDestroy():</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="classwx_thread_helper_1ac61fe16deda566773cdc7d4d38709370" kindref="member" tooltip="This is a public function that returns the wxThread object associated with the thread.">GetThread</ref>()-&gt;TestDestroy())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>this<sp/>Entry()<sp/>is<sp/>implemented<sp/>in<sp/>MyFrame<sp/>context<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>any<sp/>pointer<sp/>to<sp/>access<sp/>the<sp/>m_data,<sp/>m_processedData,<sp/>m_dataCS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>variables...<sp/>very<sp/>nice!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>an<sp/>example<sp/>of<sp/>the<sp/>generic<sp/>structure<sp/>of<sp/>a<sp/>download<sp/>thread:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[1024];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>download_chunk(buffer,<sp/>1024);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>takes<sp/>time...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>no<sp/>one<sp/>reads<sp/>m_data<sp/>while<sp/>we<sp/>write<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_critical_section_locker" kindref="compound" tooltip="This is a small helper class to be used with wxCriticalSection objects.">wxCriticalSectionLocker</ref><sp/>lock(m_dataCS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(m_data+offset,<sp/>buffer,<sp/>1024);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>1024;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VERY<sp/>IMPORTANT:<sp/>do<sp/>not<sp/>call<sp/>any<sp/>GUI<sp/>function<sp/>inside<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function;<sp/>rather<sp/>use<sp/>wxQueueEvent():</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__funcmacro__events_1gae921d7bd0e52fedbf3f253d2c408bce1" kindref="member" tooltip="Queue an event for processing on the given object.">wxQueueEvent</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_thread_event" kindref="compound" tooltip="This class adds some simple functionality to wxEvent to facilitate inter-thread communication.">wxThreadEvent</ref>(wxEVT_COMMAND_MYTHREAD_UPDATE));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>used<sp/>pointer<sp/>&apos;this&apos;<sp/>assuming<sp/>it&apos;s<sp/>safe;<sp/>see<sp/>OnClose()</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TestDestroy()<sp/>returned<sp/>true<sp/>(which<sp/>means<sp/>the<sp/>main<sp/>thread<sp/>asked<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>terminate<sp/>as<sp/>soon<sp/>as<sp/>possible)<sp/>or<sp/>we<sp/>ended<sp/>the<sp/>long<sp/>task...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classwx_thread_1ade9497fa072fe19481086e6486dcc028" kindref="member" tooltip="The return type for the thread functions.">wxThread::ExitCode</ref>)0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFrame::OnClose(<ref refid="classwx_close_event" kindref="compound" tooltip="This event class contains information about window and session close events.">wxCloseEvent</ref>&amp;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>important:<sp/>before<sp/>terminating,<sp/>we<sp/>_must_<sp/>wait<sp/>for<sp/>our<sp/>joinable</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>to<sp/>end,<sp/>if<sp/>it&apos;s<sp/>running;<sp/>in<sp/>fact<sp/>it<sp/>uses<sp/>variables<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instance<sp/>and<sp/>posts<sp/>events<sp/>to<sp/>*this<sp/>event<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classwx_thread_helper_1ac61fe16deda566773cdc7d4d38709370" kindref="member" tooltip="This is a public function that returns the wxThread object associated with the thread.">GetThread</ref>()<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DoStartALongTask()<sp/>may<sp/>have<sp/>not<sp/>been<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_thread_helper_1ac61fe16deda566773cdc7d4d38709370" kindref="member" tooltip="This is a public function that returns the wxThread object associated with the thread.">GetThread</ref>()-&gt;IsRunning())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_thread_helper_1ac61fe16deda566773cdc7d4d38709370" kindref="member" tooltip="This is a public function that returns the wxThread object associated with the thread.">GetThread</ref>()-&gt;<ref refid="classwx_thread_1a62ee778033013d3a4754b71b8cf2902e" kindref="member" tooltip="Waits for a joinable thread to terminate and returns the value the thread returned from Entry() or &amp;quot;(...">Wait</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Destroy();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFrame::OnThreadUpdate(<ref refid="classwx_thread_event" kindref="compound" tooltip="This class adds some simple functionality to wxEvent to facilitate inter-thread communication.">wxThreadEvent</ref>&amp;<sp/>evt)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...do<sp/>something...<sp/>e.g.<sp/>m_pGauge-&gt;Pulse();</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>some<sp/>parts<sp/>of<sp/>m_data<sp/>just<sp/>for<sp/>fun:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_critical_section_locker" kindref="compound" tooltip="This is a small helper class to be used with wxCriticalSection objects.">wxCriticalSectionLocker</ref><sp/>lock(m_dataCS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPrintf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>m_data[100]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__threading" kindref="compound">Threading</ref></para><para><simplesect kind="see"><para><ref refid="classwx_thread" kindref="compound">wxThread</ref>, <ref refid="classwx_thread_event" kindref="compound">wxThreadEvent</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" line="405" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/thread.h" bodystart="404" bodyend="519"/>
    <listofallmembers>
      <member refid="classwx_thread_helper_1ae9f65014cb9c8ef1d27f22d6259c0fc2" prot="public" virt="non-virtual"><scope>wxThreadHelper</scope><name>Create</name></member>
      <member refid="classwx_thread_helper_1a3682b1b5a08741335aa8acc7feb0ece5" prot="public" virt="non-virtual"><scope>wxThreadHelper</scope><name>CreateThread</name></member>
      <member refid="classwx_thread_helper_1a7f3e0f028fb1b295bc61064ad4d4bc1b" prot="public" virt="pure-virtual"><scope>wxThreadHelper</scope><name>Entry</name></member>
      <member refid="classwx_thread_helper_1ac61fe16deda566773cdc7d4d38709370" prot="public" virt="non-virtual"><scope>wxThreadHelper</scope><name>GetThread</name></member>
      <member refid="classwx_thread_helper_1ae84f7a6b2bfc7e890d0dfd296cbc43cd" prot="public" virt="non-virtual"><scope>wxThreadHelper</scope><name>GetThreadKind</name></member>
      <member refid="classwx_thread_helper_1ad6275bdfa1590d13f4890a433ee3e1c2" prot="public" virt="virtual"><scope>wxThreadHelper</scope><name>OnDelete</name></member>
      <member refid="classwx_thread_helper_1aafc07894e382cbd964c3e9900b2b780b" prot="public" virt="virtual"><scope>wxThreadHelper</scope><name>OnKill</name></member>
      <member refid="classwx_thread_helper_1ace38e9960ed62f8cafdfc8f7008815ae" prot="public" virt="non-virtual"><scope>wxThreadHelper</scope><name>wxThreadHelper</name></member>
      <member refid="classwx_thread_helper_1affe96946d9bceaba028209f4fd90ddf8" prot="public" virt="virtual"><scope>wxThreadHelper</scope><name>~wxThreadHelper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

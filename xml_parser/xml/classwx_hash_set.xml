<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_hash_set" kind="class" prot="public">
    <compoundname>wxHashSet</compoundname>
    <includes local="no">wx/hashset.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_hash_set_1af71a133692e70c51624551d353094263" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator wxHashSet::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an iterator pointing at the first element of the hash set. </para>        </briefdescription>
        <detaileddescription>
<para>Please remember that hash sets do not guarantee ordering. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="160"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1a215be550553feb0f0dc2da770c3a5ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxHashSet::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an iterator pointing at the first element of the hash set. </para>        </briefdescription>
        <detaileddescription>
<para>Please remember that hash sets do not guarantee ordering. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="161"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_hash_set_1a7f9fc908c787551edaca580b6364d573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator wxHashSet::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an iterator pointing at the one-after-the-last element of the hash set. </para>        </briefdescription>
        <detaileddescription>
<para>Please remember that hash sets do not guarantee ordering. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="185"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1a64e72e9f58a5f33fd24aa2e3ca3b3b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxHashSet::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an iterator pointing at the one-after-the-last element of the hash set. </para>        </briefdescription>
        <detaileddescription>
<para>Please remember that hash sets do not guarantee ordering. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="186"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_hash_set_1a0a2addc247305cffdc9bea89fe17ffb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxHashSet::erase</definition>
        <argsstring>(iterator it)</argsstring>
        <name>erase</name>
        <param>
          <type>iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Erases the element pointed to by the iterator. </para>        </briefdescription>
        <detaileddescription>
<para>After the deletion the iterator is no longer valid and must not be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="200"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1a2f289bb421d517896f400176ba539fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxHashSet::erase</definition>
        <argsstring>(const_iterator it)</argsstring>
        <name>erase</name>
        <param>
          <type>const_iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Erases the element pointed to by the iterator. </para>        </briefdescription>
        <detaileddescription>
<para>After the deletion the iterator is no longer valid and must not be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="201"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_hash_set_1a64240455373cd5d418b2c1998f86aa33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator wxHashSet::find</definition>
        <argsstring>(const key_type &amp;key) const </argsstring>
        <name>find</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>If an element with the given key is present, the functions returns an iterator pointing at that element, otherwise an invalid iterator is returned; i.e. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashset.find(<sp/>non_existent_key<sp/>)<sp/>==<sp/>hashset.end()</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="213"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1adb4b274b7d8c9fbca9e4453f0971fe12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator wxHashSet::find</definition>
        <argsstring>(const key_type &amp;key) const </argsstring>
        <name>find</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>If an element with the given key is present, the functions returns an iterator pointing at that element, otherwise an invalid iterator is returned; i.e. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashset.find(<sp/>non_existent_key<sp/>)<sp/>==<sp/>hashset.end()</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="214"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_hash_set_1aac5dee2aa36123c56c88d8b40e52faca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxHashSet::wxHashSet</definition>
        <argsstring>(size_type size=10)</argsstring>
        <name>wxHashSet</name>
        <param>
          <type>size_type</type>
          <declname>size</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>The size parameter is just a hint, the table will resize automatically to preserve performance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="148"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1aa9819f9680e3450479cf7be1d832fd9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxHashSet::wxHashSet</definition>
        <argsstring>(const wxHashSet &amp;set)</argsstring>
        <name>wxHashSet</name>
        <param>
          <type>const <ref refid="classwx_hash_set" kindref="compound">wxHashSet</ref> &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="153"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1a81dee12cfec562dcd8ebf14b77bbecf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxHashSet::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Removes all elements from the hash set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="167"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1ae102adc16fa54b4aba2eefbb355c228a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type wxHashSet::count</definition>
        <argsstring>(const key_type &amp;key) const </argsstring>
        <name>count</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Counts the number of elements with the given key present in the set. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns only 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="173"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1a7fe7d3968606d33a1dca3a75b47ec827" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxHashSet::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns true if the hash set does not contain any elements, false otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="178"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1a1c54e60d26122a8eae9c3dfe12446e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type wxHashSet::erase</definition>
        <argsstring>(const key_type &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Erases the element with the given key, and returns the number of elements erased (either 0 or 1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="193"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1ad8c4392cba0a4b1f903b9cfe788180da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Insert_Result</type>
        <definition>Insert_Result wxHashSet::insert</definition>
        <argsstring>(const value_type &amp;v)</argsstring>
        <name>insert</name>
        <param>
          <type>const value_type &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Inserts the given value in the hash set. </para>        </briefdescription>
        <detaileddescription>
<para>The return value is equivalent to a <programlisting><codeline><highlight class="normal"><sp/>std::pair&lt;wxHashMap::iterator,<sp/>bool&gt;<sp/></highlight></codeline>
</programlisting> The iterator points to the inserted element, the boolean value is true if <emphasis>v</emphasis> was actually inserted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="224"/>
      </memberdef>
      <memberdef kind="function" id="classwx_hash_set_1a31c570890219139fafc7b8b62c29db8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type wxHashSet::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the number of elements in the set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is a simple, type-safe, and reasonably efficient hash set class, whose interface is a subset of the interface of STL containers. </para>    </briefdescription>
    <detaileddescription>
<para>The interface is similar to std::tr1::hash_set or std::set classes but notice that, unlike std::set, the contents of a hash set is not sorted.</para><para>Example: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyClass<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same,<sp/>with<sp/>MyClass*<sp/>keys<sp/>(only<sp/>uses<sp/>pointer<sp/>equality!)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_DECLARE_HASH_SET(<sp/>MyClass*,<sp/>::wxPointerHash,<sp/>::wxPointerEqual,<sp/>MySet1<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same,<sp/>with<sp/>int<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_DECLARE_HASH_SET(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>::wxIntegerHash,<sp/>::wxIntegerEqual,<sp/>MySet2<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>declare<sp/>a<sp/>hash<sp/>set<sp/>with<sp/>string<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_DECLARE_HASH_SET(<sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>,<sp/>::wxStringHash,<sp/>::wxStringEqual,<sp/>MySet3<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MySet1<sp/>h1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MySet2<sp/>h1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MySet3<sp/>h3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>and<sp/>retrieve<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h1.insert(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MyClass(<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h3.insert(<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h3.insert(<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h3.insert(<sp/></highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>h3.size();<sp/></highlight><highlight class="comment">//<sp/>now<sp/>is<sp/>three</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_foo<sp/>=<sp/>h3.find(<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>h3.end();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h3.insert(<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal"><sp/>);<sp/></highlight><highlight class="comment">//<sp/>still<sp/>has<sp/>size<sp/>three</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>over<sp/>all<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MySet3::iterator<sp/>it;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>it<sp/>=<sp/>h3.begin();<sp/>it<sp/>!=<sp/>h3.end();<sp/>++it<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref><sp/>key<sp/>=<sp/>*it;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>useful<sp/>with<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><sect1 id="classwx_hash_set_1hashset_declaringnew">
<title>Declaring new hash set types</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WX_DECLARE_HASH_SET(<sp/>KEY_T,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>of<sp/>the<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HASH_T,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hasher</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY_EQ_T,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>key<sp/>equality<sp/>predicate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLASSNAME);<sp/></highlight><highlight class="comment">//<sp/>name<sp/>of<sp/>the<sp/>class</highlight></codeline>
</programlisting> The HASH_T and KEY_EQ_T are the types used for the hashing function and key comparison. wxWidgets provides three predefined hashing functions: wxIntegerHash for integer types ( int, long, short, and their unsigned counterparts ), wxStringHash for strings ( <ref refid="classwx_string" kindref="compound">wxString</ref>, wxChar*, char* ), and wxPointerHash for any kind of pointer. Similarly three equality predicates: wxIntegerEqual, wxStringEqual, wxPointerEqual are provided. Using this you could declare a hash set using int values like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_DECLARE_HASH_SET(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::wxIntegerHash,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::wxIntegerEqual,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MySet<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>an<sp/>user-defined<sp/>class<sp/>for<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyKey<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hashing<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyKeyHash</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyKeyHash()<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>operator()(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyKey&amp;<sp/>k<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyKeyHash&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyKeyHash&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>comparison<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyKeyEqual</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyKeyEqual()<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyKey&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyKey&amp;<sp/>b<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compare<sp/>for<sp/>equality</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyKeyEqual&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyKeyEqual&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_DECLARE_HASH_SET(<sp/>MyKey,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>of<sp/>the<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::MyKeyHash,<sp/><sp/></highlight><highlight class="comment">//<sp/>hasher</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::MyKeyEqual,<sp/></highlight><highlight class="comment">//<sp/>key<sp/>equality<sp/>predicate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLASSNAME);<sp/></highlight><highlight class="comment">//<sp/>name<sp/>of<sp/>the<sp/>class</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="classwx_hash_set_1hashset_types">
<title>Types</title>
<para>In the documentation below you should replace <ref refid="classwx_hash_set" kindref="compound">wxHashSet</ref> with the name you used in the class declaration.</para><para><itemizedlist>
<listitem><para>wxHashSet::key_type: Type of the hash keys</para></listitem><listitem><para>wxHashSet::mapped_type: Type of hash keys</para></listitem><listitem><para>wxHashSet::value_type: Type of hash keys</para></listitem><listitem><para>wxHashSet::iterator: Used to enumerate all the elements in a hash set; it is similar to a value_type*</para></listitem><listitem><para>wxHashSet::const_iterator: Used to enumerate all the elements in a constant hash set; it is similar to a const value_type*</para></listitem><listitem><para>wxHashSet::size_type: Used for sizes</para></listitem><listitem><para>wxHashSet::Insert_Result: The return value for <ref refid="classwx_hash_set_1ad8c4392cba0a4b1f903b9cfe788180da" kindref="member">insert()</ref></para></listitem></itemizedlist>
</para></sect1>
<sect1 id="classwx_hash_set_1hashset_iter">
<title>Iterators</title>
<para>An iterator is similar to a pointer, and so you can use the usual pointer operations: ++it ( and it++ ) to move to the next element, *it to access the element pointed to, *it to access the value of the element pointed to. Hash sets provide forward only iterators, this means that you can&apos;t use --it, it + 3, it1 - it2.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__containers" kindref="compound">Containers</ref> </para></sect1>
    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" line="142" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/hashset.h" bodystart="141" bodyend="230"/>
    <listofallmembers>
      <member refid="classwx_hash_set_1af71a133692e70c51624551d353094263" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>begin</name></member>
      <member refid="classwx_hash_set_1a215be550553feb0f0dc2da770c3a5ff7" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>begin</name></member>
      <member refid="classwx_hash_set_1a81dee12cfec562dcd8ebf14b77bbecf5" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>clear</name></member>
      <member refid="classwx_hash_set_1ae102adc16fa54b4aba2eefbb355c228a" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>count</name></member>
      <member refid="classwx_hash_set_1a7fe7d3968606d33a1dca3a75b47ec827" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>empty</name></member>
      <member refid="classwx_hash_set_1a7f9fc908c787551edaca580b6364d573" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>end</name></member>
      <member refid="classwx_hash_set_1a64e72e9f58a5f33fd24aa2e3ca3b3b00" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>end</name></member>
      <member refid="classwx_hash_set_1a1c54e60d26122a8eae9c3dfe12446e2f" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>erase</name></member>
      <member refid="classwx_hash_set_1a0a2addc247305cffdc9bea89fe17ffb9" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>erase</name></member>
      <member refid="classwx_hash_set_1a2f289bb421d517896f400176ba539fe8" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>erase</name></member>
      <member refid="classwx_hash_set_1a64240455373cd5d418b2c1998f86aa33" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>find</name></member>
      <member refid="classwx_hash_set_1adb4b274b7d8c9fbca9e4453f0971fe12" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>find</name></member>
      <member refid="classwx_hash_set_1ad8c4392cba0a4b1f903b9cfe788180da" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>insert</name></member>
      <member refid="classwx_hash_set_1a31c570890219139fafc7b8b62c29db8a" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>size</name></member>
      <member refid="classwx_hash_set_1aac5dee2aa36123c56c88d8b40e52faca" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>wxHashSet</name></member>
      <member refid="classwx_hash_set_1aa9819f9680e3450479cf7be1d832fd9e" prot="public" virt="non-virtual"><scope>wxHashSet</scope><name>wxHashSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_file" kind="class" prot="public">
    <compoundname>wxFile</compoundname>
    <includes local="no">wx/file.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569df" prot="public" static="no">
        <name>OpenMode</name>
        <enumvalue id="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfae10ad0bce1ba499f9d8164e1d6ca037b" prot="public">
          <name>read</name>
          <briefdescription>
<para>Open file for reading or test if it can be opened for reading with <ref refid="classwx_file_1a9842fdcc9d4f4b8c74cf73c2dd48be26" kindref="member">Access()</ref> </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfabfa8d43f2e87d73f80ae1a181b1544b8" prot="public">
          <name>write</name>
          <briefdescription>
<para>Open file for writing deleting the contents of the file if it already exists or test if it can be opened for writing with <ref refid="classwx_file_1a9842fdcc9d4f4b8c74cf73c2dd48be26" kindref="member">Access()</ref>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfaa08562dcbd6cd8900950880061096e78" prot="public">
          <name>read_write</name>
          <briefdescription>
<para>Open file for reading and writing; cannot be used with <ref refid="classwx_file_1a9842fdcc9d4f4b8c74cf73c2dd48be26" kindref="member">Access()</ref> </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfa938253b5bcf20e1fc14586cc4f132ae7" prot="public">
          <name>write_append</name>
          <briefdescription>
<para>Open file for appending: the file is opened for writing, but the old contents of the file are not erased and the file pointer is initially placed at the end of the file; cannot be used with <ref refid="classwx_file_1a9842fdcc9d4f4b8c74cf73c2dd48be26" kindref="member">Access()</ref>. </para>          </briefdescription>
          <detaileddescription>
<para>This is the same as OpenMode::write if the file doesn&apos;t exist. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfaca62414e4aa186958cae52879475fe3f" prot="public">
          <name>write_excl</name>
          <briefdescription>
<para>Open the file securely for writing (Uses O_EXCL | O_CREAT). </para>          </briefdescription>
          <detaileddescription>
<para>Will fail if the file already exists, else create and open it atomically. Useful for opening temporary files without being vulnerable to race exploits. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The OpenMode enumeration defines the different modes for opening a file with <ref refid="classwx_file" kindref="compound">wxFile</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It is also used with <ref refid="classwx_file_1a9842fdcc9d4f4b8c74cf73c2dd48be26" kindref="member">wxFile::Access</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="167" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" bodystart="167" bodyend="193"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_file_1a57fc49bbc3780d68849d09c4ea248154" prot="public" static="no">
        <name>@12</name>
        <enumvalue id="classwx_file_1a57fc49bbc3780d68849d09c4ea248154a359b3619a978343a5d73f56d85ce325d" prot="public">
          <name>fd_invalid</name>
          <initializer> -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_file_1a57fc49bbc3780d68849d09c4ea248154a2d93554cc38b0192eb4ee2470c0a3da3" prot="public">
          <name>fd_stdin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_file_1a57fc49bbc3780d68849d09c4ea248154a38e8e5eadaa724762a1fc8e2268c3298" prot="public">
          <name>fd_stdout</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_file_1a57fc49bbc3780d68849d09c4ea248154aeb6c143720130cb92ec6fc29abe23382" prot="public">
          <name>fd_stderr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Standard file descriptors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="198" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" bodystart="198" bodyend="198"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_file_1ad56ba11167f09c6ce6689c6047c15d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxFile::wxFile</definition>
        <argsstring>()</argsstring>
        <name>wxFile</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="203"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1ac41559b817a0cc02fb3f7524431e4221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxFile::wxFile</definition>
        <argsstring>(const wxString &amp;filename, wxFile::OpenMode mode=wxFile::read)</argsstring>
        <name>wxFile</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569df" kindref="member">wxFile::OpenMode</ref></type>
          <declname>mode</declname>
          <defval>wxFile::read</defval>
        </param>
        <briefdescription>
<para>Opens a file with a filename. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode in which to open the file.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>You should use <ref refid="classwx_file_1a91ba1ec486bbc7668f95cb11e13511fb" kindref="member">IsOpened()</ref> to verify that the constructor succeeded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="217"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1aaefb4f5175e5721396cabfb569348c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxFile::wxFile</definition>
        <argsstring>(int fd)</argsstring>
        <name>wxFile</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Associates the file with the given file descriptor, which has already been opened. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_file_1ad1721a816177180fd8b464cef6cc54a1" kindref="member">Attach()</ref> for the list of predefined descriptors.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>An existing file descriptor. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="226"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a44707e27c5af7e178ea2139fb21fd3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxFile::~wxFile</definition>
        <argsstring>()</argsstring>
        <name>~wxFile</name>
        <briefdescription>
<para>Destructor will close the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This destructor is not virtual so you should not use <ref refid="classwx_file" kindref="compound">wxFile</ref> polymorphically. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="232"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a9cf7fc7bb53404e017a243fa6151c64f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxFile::GetLastError</definition>
        <argsstring>() const </argsstring>
        <name>GetLastError</name>
        <briefdescription>
<para>Returns the error code for the last unsuccessful operation. </para>        </briefdescription>
        <detaileddescription>
<para>The error code is system-dependent and corresponds to the value of the standard <computeroutput>errno</computeroutput> variable when the last error occurred.</para><para>Notice that only simple accessors such as <ref refid="classwx_file_1a91ba1ec486bbc7668f95cb11e13511fb" kindref="member">IsOpened()</ref> and <ref refid="classwx_file_1ae584442c77415e9d287ca7faec0dcca4" kindref="member">Eof()</ref> (and this method itself) don&apos;t modify the last error value, all other methods can potentially change it if an error occurs, including the const ones such as <ref refid="classwx_file_1afc7eaf653255bf2db25f20626d3eedb1" kindref="member">Tell()</ref> or <ref refid="classwx_file_1a68b1ea981eec7888507fbb5d75fb1749" kindref="member">Length()</ref>.</para><para><simplesect kind="since"><para>2.9.2</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_file_1a8bf168da91695be4da8207a9c3358cbc" kindref="member">ClearLastError()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="249"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a8bf168da91695be4da8207a9c3358cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxFile::ClearLastError</definition>
        <argsstring>()</argsstring>
        <name>ClearLastError</name>
        <briefdescription>
<para>Resets the error code. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classwx_file_1a9cf7fc7bb53404e017a243fa6151c64f" kindref="member">GetLastError()</ref> will return 0 until the next error occurs.</para><para><simplesect kind="since"><para>2.9.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="258"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1ad1721a816177180fd8b464cef6cc54a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxFile::Attach</definition>
        <argsstring>(int fd)</argsstring>
        <name>Attach</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Attaches an existing file descriptor to the <ref refid="classwx_file" kindref="compound">wxFile</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>Examples of predefined file descriptors are 0, 1 and 2 which correspond to stdin, stdout and stderr (and have symbolic names of <computeroutput><ref refid="classwx_file_1a57fc49bbc3780d68849d09c4ea248154a2d93554cc38b0192eb4ee2470c0a3da3" kindref="member">wxFile::fd_stdin</ref></computeroutput>, <computeroutput><ref refid="classwx_file_1a57fc49bbc3780d68849d09c4ea248154a38e8e5eadaa724762a1fc8e2268c3298" kindref="member">wxFile::fd_stdout</ref></computeroutput> and <computeroutput><ref refid="classwx_file_1a57fc49bbc3780d68849d09c4ea248154aeb6c143720130cb92ec6fc29abe23382" kindref="member">wxFile::fd_stderr</ref></computeroutput>).</para><para>The descriptor should be already opened and it will be closed by <ref refid="classwx_file" kindref="compound">wxFile</ref> object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="275"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1ac703999133859f1fa67075b89c3c69de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxFile::Close</definition>
        <argsstring>()</argsstring>
        <name>Close</name>
        <briefdescription>
<para>Closes the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="280"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a4b86bd2e79c8ce3dbdc713949c6b39ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxFile::Create</definition>
        <argsstring>(const wxString &amp;filename, bool overwrite=false, int access=wxS_DEFAULT)</argsstring>
        <name>Create</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>overwrite</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>access</declname>
          <defval>wxS_DEFAULT</defval>
        </param>
        <briefdescription>
<para>Creates a file for writing. </para>        </briefdescription>
        <detaileddescription>
<para>If the file already exists, setting <bold>overwrite</bold> to true will ensure it is overwritten.</para><para><emphasis>access</emphasis> may be an OR combination of the <ref refid="group__group__funcmacro__file_1ga64460401fb35c137c9df28f3c019694d" kindref="member">wxPosixPermissions</ref> enumeration values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="293"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a5b14a0250f5c792d43aa4a4e572378f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxFile::Detach</definition>
        <argsstring>()</argsstring>
        <name>Detach</name>
        <briefdescription>
<para>Get back a file descriptor from <ref refid="classwx_file" kindref="compound">wxFile</ref> object - the caller is responsible for closing the file if this descriptor is opened. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classwx_file_1a91ba1ec486bbc7668f95cb11e13511fb" kindref="member">IsOpened()</ref> will return false after call to <ref refid="classwx_file_1a5b14a0250f5c792d43aa4a4e572378f4" kindref="member">Detach()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="300"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1ae584442c77415e9d287ca7faec0dcca4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxFile::Eof</definition>
        <argsstring>() const </argsstring>
        <name>Eof</name>
        <briefdescription>
<para>Returns true if the end of the file has been reached. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the behaviour of the file pointer-based class <ref refid="classwx_f_file" kindref="compound">wxFFile</ref> is different as <ref refid="classwx_f_file_1a16992b8b1da3d2a06b8be60529f29327" kindref="member">wxFFile::Eof()</ref> will return true here only if an attempt has been made to read <bold>past</bold> the last byte of the file, while <ref refid="classwx_file_1ae584442c77415e9d287ca7faec0dcca4" kindref="member">wxFile::Eof()</ref> will return true even before such attempt is made if the file pointer is at the last position in the file.</para><para>Note also that this function doesn&apos;t work on unseekable file descriptors (examples include pipes, terminals and sockets under Unix) and an attempt to use it will result in an error message.</para><para>So, to read the entire file into memory, you should write a loop which uses <ref refid="classwx_file_1a411aefd67cf2e33812a06380f973b850" kindref="member">Read()</ref> repeatedly and tests its return condition instead of using <ref refid="classwx_file_1ae584442c77415e9d287ca7faec0dcca4" kindref="member">Eof()</ref> as this will not work for special files under Unix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="318"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a0b3ac667c1e6133c6c4ffce3c81b3c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxFile::Flush</definition>
        <argsstring>()</argsstring>
        <name>Flush</name>
        <briefdescription>
<para>Flushes the file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para>Note that <ref refid="classwx_file_1a0b3ac667c1e6133c6c4ffce3c81b3c4c" kindref="member">Flush()</ref> is not implemented on some Windows compilers due to a missing fsync function, which reduces the usefulness of this function (it can still be called but it will do nothing on unsupported compilers). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="333"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a765609522af7fbf010a76902961673be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__funcmacro__file_1ga68af15575db590aaa874d40a1073809d" kindref="member">wxFileKind</ref></type>
        <definition>wxFileKind wxFile::GetKind</definition>
        <argsstring>() const </argsstring>
        <name>GetKind</name>
        <briefdescription>
<para>Returns the type of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="338"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a91ba1ec486bbc7668f95cb11e13511fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxFile::IsOpened</definition>
        <argsstring>() const </argsstring>
        <name>IsOpened</name>
        <briefdescription>
<para>Returns true if the file has been opened. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="343"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a68b1ea981eec7888507fbb5d75fb1749" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__funcmacro__file_1ga69d831b3febabc149c67b716c8e22de5" kindref="member">wxFileOffset</ref></type>
        <definition>wxFileOffset wxFile::Length</definition>
        <argsstring>() const </argsstring>
        <name>Length</name>
        <briefdescription>
<para>Returns the length of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="348"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a70f2abe0e310dcf77ea6aeaac60df25b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxFile::Open</definition>
        <argsstring>(const wxString &amp;filename, wxFile::OpenMode mode=wxFile::read, int access=wxS_DEFAULT)</argsstring>
        <name>Open</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569df" kindref="member">wxFile::OpenMode</ref></type>
          <declname>mode</declname>
          <defval>wxFile::read</defval>
        </param>
        <param>
          <type>int</type>
          <declname>access</declname>
          <defval>wxS_DEFAULT</defval>
        </param>
        <briefdescription>
<para>Opens the file, returning true if successful. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode in which to open the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>An OR-combination of <ref refid="group__group__funcmacro__file_1ga64460401fb35c137c9df28f3c019694d" kindref="member">wxPosixPermissions</ref> enumeration values. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="361"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a411aefd67cf2e33812a06380f973b850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t wxFile::Read</definition>
        <argsstring>(void *buffer, size_t count)</argsstring>
        <name>Read</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Reads from the file into a memory buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes to read</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, or the symbol <ref refid="group__group__funcmacro__file_1gab184c7199d93541d22ae42e515cbbcb7" kindref="member">wxInvalidOffset</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="373"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a106441378d84369853a60b0c8846aa9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__funcmacro__file_1ga69d831b3febabc149c67b716c8e22de5" kindref="member">wxFileOffset</ref></type>
        <definition>wxFileOffset wxFile::Seek</definition>
        <argsstring>(wxFileOffset ofs, wxSeekMode mode=wxFromStart)</argsstring>
        <name>Seek</name>
        <param>
          <type><ref refid="group__group__funcmacro__file_1ga69d831b3febabc149c67b716c8e22de5" kindref="member">wxFileOffset</ref></type>
          <declname>ofs</declname>
        </param>
        <param>
          <type><ref refid="group__group__funcmacro__file_1gae3981f8632f0391e5c852bf62eb982b0" kindref="member">wxSeekMode</ref></type>
          <declname>mode</declname>
          <defval>wxFromStart</defval>
        </param>
        <briefdescription>
<para>Seeks to the specified position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ofs</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset to seek to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>One of wxFromStart, wxFromEnd, wxFromCurrent.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The actual offset position achieved, or <ref refid="group__group__funcmacro__file_1gab184c7199d93541d22ae42e515cbbcb7" kindref="member">wxInvalidOffset</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="387"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a6be7359a2b54f730f4e33c83f9d44d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__funcmacro__file_1ga69d831b3febabc149c67b716c8e22de5" kindref="member">wxFileOffset</ref></type>
        <definition>wxFileOffset wxFile::SeekEnd</definition>
        <argsstring>(wxFileOffset ofs=0)</argsstring>
        <name>SeekEnd</name>
        <param>
          <type><ref refid="group__group__funcmacro__file_1ga69d831b3febabc149c67b716c8e22de5" kindref="member">wxFileOffset</ref></type>
          <declname>ofs</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Moves the file pointer to the specified number of bytes relative to the end of the file. </para>        </briefdescription>
        <detaileddescription>
<para>For example, <computeroutput>SeekEnd</computeroutput>(-5) would position the pointer 5 bytes before the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ofs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes before the end of the file.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The actual offset position achieved, or <ref refid="group__group__funcmacro__file_1gab184c7199d93541d22ae42e515cbbcb7" kindref="member">wxInvalidOffset</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="400"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1afc7eaf653255bf2db25f20626d3eedb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__funcmacro__file_1ga69d831b3febabc149c67b716c8e22de5" kindref="member">wxFileOffset</ref></type>
        <definition>wxFileOffset wxFile::Tell</definition>
        <argsstring>() const </argsstring>
        <name>Tell</name>
        <briefdescription>
<para>Returns the current position or <ref refid="group__group__funcmacro__file_1gab184c7199d93541d22ae42e515cbbcb7" kindref="member">wxInvalidOffset</ref> if file is not opened or if another error occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="406"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a0974a92a5c8793629fd9ee0f1735657c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wxFile::Write</definition>
        <argsstring>(const void *buffer, size_t count)</argsstring>
        <name>Write</name>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Write data to the file (descriptor). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer from which to read data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="418"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1aac7158f2a854d1bac2a454e2851849b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxFile::Write</definition>
        <argsstring>(const wxString &amp;s, const wxMBConv &amp;conv=wxConvUTF8)</argsstring>
        <name>Write</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
          <defval>wxConvUTF8</defval>
        </param>
        <briefdescription>
<para>Writes the contents of the string to the file, returns true on success. </para>        </briefdescription>
        <detaileddescription>
<para>The second argument is only meaningful in Unicode build of wxWidgets when <emphasis>conv</emphasis> is used to convert <emphasis>s</emphasis> to a multibyte representation.</para><para>Note that this method only works with <computeroutput>NUL-terminated</computeroutput> strings, if you want to write data with embedded <computeroutput>NULs</computeroutput> to the file you should use the other <ref refid="classwx_file_1a0974a92a5c8793629fd9ee0f1735657c" kindref="member">Write()</ref> overload. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="429"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1a785378439ec028b40e6b5708e4b61c10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxFile::fd</definition>
        <argsstring>() const </argsstring>
        <name>fd</name>
        <briefdescription>
<para>Returns the file descriptor associated with the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="434"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_file_1a9842fdcc9d4f4b8c74cf73c2dd48be26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool wxFile::Access</definition>
        <argsstring>(const wxString &amp;name, wxFile::OpenMode mode)</argsstring>
        <name>Access</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569df" kindref="member">wxFile::OpenMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>This function verifies if we may access the given file in specified mode. </para>        </briefdescription>
        <detaileddescription>
<para>Only values of <computeroutput><ref refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfae10ad0bce1ba499f9d8164e1d6ca037b" kindref="member">wxFile::read</ref></computeroutput> or <computeroutput><ref refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfabfa8d43f2e87d73f80ae1a181b1544b8" kindref="member">wxFile::write</ref></computeroutput> really make sense here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="264"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_1ad6530a4db084b157d81a1314c4a62420" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool wxFile::Exists</definition>
        <argsstring>(const wxString &amp;filename)</argsstring>
        <name>Exists</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Returns true if the given name specifies an existing regular file (not a directory or a link). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="324"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classwx_file" kindref="compound">wxFile</ref> performs raw file I/O. </para>    </briefdescription>
    <detaileddescription>
<para>This is a very small class designed to minimize the overhead of using it - in fact, there is hardly any overhead at all, but using it brings you automatic error checking and hides differences between platforms and compilers. <ref refid="classwx_file" kindref="compound">wxFile</ref> also automatically closes the file in its destructor so you won&apos;t forget to do so. <ref refid="classwx_file" kindref="compound">wxFile</ref> is a wrapper around <computeroutput>file</computeroutput> descriptor. - see also <ref refid="classwx_f_file" kindref="compound">wxFFile</ref> for a wrapper around <computeroutput>FILE</computeroutput> structure.</para><para><ref refid="group__group__funcmacro__file_1ga69d831b3febabc149c67b716c8e22de5" kindref="member">wxFileOffset</ref> is used by the <ref refid="classwx_file" kindref="compound">wxFile</ref> functions which require offsets as parameter or return them. If the platform supports it, wxFileOffset is a typedef for a native 64 bit integer, otherwise a 32 bit integer is used for <ref refid="group__group__funcmacro__file_1ga69d831b3febabc149c67b716c8e22de5" kindref="member">wxFileOffset</ref>.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__file" kindref="compound">File Handling</ref> </para>    </detaileddescription>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" line="160" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/file.h" bodystart="159" bodyend="435"/>
    <listofallmembers>
      <member refid="classwx_file_1a9842fdcc9d4f4b8c74cf73c2dd48be26" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Access</name></member>
      <member refid="classwx_file_1ad1721a816177180fd8b464cef6cc54a1" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Attach</name></member>
      <member refid="classwx_file_1a8bf168da91695be4da8207a9c3358cbc" prot="public" virt="non-virtual"><scope>wxFile</scope><name>ClearLastError</name></member>
      <member refid="classwx_file_1ac703999133859f1fa67075b89c3c69de" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Close</name></member>
      <member refid="classwx_file_1a4b86bd2e79c8ce3dbdc713949c6b39ca" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Create</name></member>
      <member refid="classwx_file_1a5b14a0250f5c792d43aa4a4e572378f4" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Detach</name></member>
      <member refid="classwx_file_1ae584442c77415e9d287ca7faec0dcca4" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Eof</name></member>
      <member refid="classwx_file_1ad6530a4db084b157d81a1314c4a62420" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Exists</name></member>
      <member refid="classwx_file_1a785378439ec028b40e6b5708e4b61c10" prot="public" virt="non-virtual"><scope>wxFile</scope><name>fd</name></member>
      <member refid="classwx_file_1a57fc49bbc3780d68849d09c4ea248154a359b3619a978343a5d73f56d85ce325d" prot="public" virt="non-virtual"><scope>wxFile</scope><name>fd_invalid</name></member>
      <member refid="classwx_file_1a57fc49bbc3780d68849d09c4ea248154aeb6c143720130cb92ec6fc29abe23382" prot="public" virt="non-virtual"><scope>wxFile</scope><name>fd_stderr</name></member>
      <member refid="classwx_file_1a57fc49bbc3780d68849d09c4ea248154a2d93554cc38b0192eb4ee2470c0a3da3" prot="public" virt="non-virtual"><scope>wxFile</scope><name>fd_stdin</name></member>
      <member refid="classwx_file_1a57fc49bbc3780d68849d09c4ea248154a38e8e5eadaa724762a1fc8e2268c3298" prot="public" virt="non-virtual"><scope>wxFile</scope><name>fd_stdout</name></member>
      <member refid="classwx_file_1a0b3ac667c1e6133c6c4ffce3c81b3c4c" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Flush</name></member>
      <member refid="classwx_file_1a765609522af7fbf010a76902961673be" prot="public" virt="non-virtual"><scope>wxFile</scope><name>GetKind</name></member>
      <member refid="classwx_file_1a9cf7fc7bb53404e017a243fa6151c64f" prot="public" virt="non-virtual"><scope>wxFile</scope><name>GetLastError</name></member>
      <member refid="classwx_file_1a91ba1ec486bbc7668f95cb11e13511fb" prot="public" virt="non-virtual"><scope>wxFile</scope><name>IsOpened</name></member>
      <member refid="classwx_file_1a68b1ea981eec7888507fbb5d75fb1749" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Length</name></member>
      <member refid="classwx_file_1a70f2abe0e310dcf77ea6aeaac60df25b" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Open</name></member>
      <member refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569df" prot="public" virt="non-virtual"><scope>wxFile</scope><name>OpenMode</name></member>
      <member refid="classwx_file_1a411aefd67cf2e33812a06380f973b850" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Read</name></member>
      <member refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfae10ad0bce1ba499f9d8164e1d6ca037b" prot="public" virt="non-virtual"><scope>wxFile</scope><name>read</name></member>
      <member refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfaa08562dcbd6cd8900950880061096e78" prot="public" virt="non-virtual"><scope>wxFile</scope><name>read_write</name></member>
      <member refid="classwx_file_1a106441378d84369853a60b0c8846aa9a" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Seek</name></member>
      <member refid="classwx_file_1a6be7359a2b54f730f4e33c83f9d44d9f" prot="public" virt="non-virtual"><scope>wxFile</scope><name>SeekEnd</name></member>
      <member refid="classwx_file_1afc7eaf653255bf2db25f20626d3eedb1" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Tell</name></member>
      <member refid="classwx_file_1a0974a92a5c8793629fd9ee0f1735657c" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Write</name></member>
      <member refid="classwx_file_1aac7158f2a854d1bac2a454e2851849b1" prot="public" virt="non-virtual"><scope>wxFile</scope><name>Write</name></member>
      <member refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfabfa8d43f2e87d73f80ae1a181b1544b8" prot="public" virt="non-virtual"><scope>wxFile</scope><name>write</name></member>
      <member refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfa938253b5bcf20e1fc14586cc4f132ae7" prot="public" virt="non-virtual"><scope>wxFile</scope><name>write_append</name></member>
      <member refid="classwx_file_1ae26cef66ac8e94be0c687c2a0fd569dfaca62414e4aa186958cae52879475fe3f" prot="public" virt="non-virtual"><scope>wxFile</scope><name>write_excl</name></member>
      <member refid="classwx_file_1ad56ba11167f09c6ce6689c6047c15d20" prot="public" virt="non-virtual"><scope>wxFile</scope><name>wxFile</name></member>
      <member refid="classwx_file_1ac41559b817a0cc02fb3f7524431e4221" prot="public" virt="non-virtual"><scope>wxFile</scope><name>wxFile</name></member>
      <member refid="classwx_file_1aaefb4f5175e5721396cabfb569348c89" prot="public" virt="non-virtual"><scope>wxFile</scope><name>wxFile</name></member>
      <member refid="classwx_file_1a44707e27c5af7e178ea2139fb21fd3d3" prot="public" virt="non-virtual"><scope>wxFile</scope><name>~wxFile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

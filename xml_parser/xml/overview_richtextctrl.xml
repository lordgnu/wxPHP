<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="overview_richtextctrl" kind="page">
    <compoundname>overview_richtextctrl</compoundname>
    <title>wxRichTextCtrl Overview</title>
    <detaileddescription>
<para><itemizedlist>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_classes" kindref="member">Related Classes</ref> </para></listitem>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_intro" kindref="member">Introduction</ref> </para></listitem>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_example" kindref="member">Code Example</ref> </para></listitem>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_starting" kindref="member">Starting to Use wxRichTextCtrl</ref> </para></listitem>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_styles" kindref="member">Text Styles</ref> </para></listitem>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_dialogs" kindref="member">Included Dialogs</ref> </para></listitem>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_impl" kindref="member">How wxRichTextCtrl is Implemented</ref> </para></listitem>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_nested_object" kindref="member">Nested Objects</ref> </para></listitem>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_context_menus" kindref="member">Context menus and property dialogs</ref> </para></listitem>
<listitem><para><ref refid="overview_richtextctrl_1overview_richtextctrl_roadmap" kindref="member">Development Roadmap</ref></para></listitem>
</itemizedlist>
<hruler/>
</para><sect1 id="overview_richtextctrl_1overview_richtextctrl_classes">
<title>Related Classes</title>
<para><bold>Major classes:</bold> <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref>, <ref refid="classwx_rich_text_buffer" kindref="compound">wxRichTextBuffer</ref>, <ref refid="classwx_rich_text_event" kindref="compound">wxRichTextEvent</ref></para><para><bold>Helper classes:</bold> <ref refid="classwx_text_attr" kindref="compound">wxTextAttr</ref>, <ref refid="classwx_rich_text_range" kindref="compound">wxRichTextRange</ref></para><para><bold>File handler classes:</bold> <ref refid="classwx_rich_text_file_handler" kindref="compound">wxRichTextFileHandler</ref>, <ref refid="classwx_rich_text_h_t_m_l_handler" kindref="compound">wxRichTextHTMLHandler</ref>, <ref refid="classwx_rich_text_x_m_l_handler" kindref="compound">wxRichTextXMLHandler</ref></para><para><bold>Style classes:</bold> <ref refid="classwx_rich_text_character_style_definition" kindref="compound">wxRichTextCharacterStyleDefinition</ref>, <ref refid="classwx_rich_text_paragraph_style_definition" kindref="compound">wxRichTextParagraphStyleDefinition</ref>, <ref refid="classwx_rich_text_list_style_definition" kindref="compound">wxRichTextListStyleDefinition</ref>, <ref refid="classwx_rich_text_style_sheet" kindref="compound">wxRichTextStyleSheet</ref></para><para><bold>Additional controls:</bold> <ref refid="classwx_rich_text_style_combo_ctrl" kindref="compound">wxRichTextStyleComboCtrl</ref>, <ref refid="classwx_rich_text_style_list_box" kindref="compound">wxRichTextStyleListBox</ref>, <ref refid="classwx_rich_text_style_list_ctrl" kindref="compound">wxRichTextStyleListCtrl</ref></para><para><bold>Printing classes:</bold> <ref refid="classwx_rich_text_printing" kindref="compound">wxRichTextPrinting</ref>, <ref refid="classwx_rich_text_printout" kindref="compound">wxRichTextPrintout</ref>, <ref refid="classwx_rich_text_header_footer_data" kindref="compound">wxRichTextHeaderFooterData</ref></para><para><bold>Dialog classes:</bold> <ref refid="classwx_rich_text_style_organiser_dialog" kindref="compound">wxRichTextStyleOrganiserDialog</ref>, <ref refid="classwx_rich_text_formatting_dialog" kindref="compound">wxRichTextFormattingDialog</ref>, <ref refid="classwx_symbol_picker_dialog" kindref="compound">wxSymbolPickerDialog</ref></para></sect1>
<sect1 id="overview_richtextctrl_1overview_richtextctrl_intro">
<title>Introduction</title>
<para><ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> provides a generic implementation of a rich text editor that can handle different character styles, paragraph formatting, and images. It&apos;s aimed at editing &apos;natural&apos; language text - if you need an editor that supports code editing, <ref refid="classwx_styled_text_ctrl" kindref="compound">wxStyledTextCtrl</ref> is a better choice.</para><para>Despite its name, it cannot currently read or write RTF (rich text format) files. Instead, it uses its own XML format, and can also read and write plain text. In future we expect to provide RTF or OpenDocument file capabilities. Custom file formats can be supported by creating additional file handlers and registering them with the control.</para><para><ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> is largely compatible with the <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> API, but extends it where necessary. The control can be used where the native rich text capabilities of <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> are not adequate (this is particularly true on Windows) and where more direct access to the content representation is required. It is difficult and inefficient to read the style information in a <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref>, whereas this information is readily available in <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref>. Since it&apos;s written in pure wxWidgets, any customizations you make to <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> will be reflected on all platforms.</para><para><ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> supports basic printing via the easy-to-use <ref refid="classwx_rich_text_printing" kindref="compound">wxRichTextPrinting</ref> class. Creating applications with simple word processing features is simplified with the inclusion of <ref refid="classwx_rich_text_formatting_dialog" kindref="compound">wxRichTextFormattingDialog</ref>, a tabbed dialog allowing interactive tailoring of paragraph and character styling. Also provided is the multi-purpose dialog <ref refid="classwx_rich_text_style_organiser_dialog" kindref="compound">wxRichTextStyleOrganiserDialog</ref> that can be used for managing style definitions, browsing styles and applying them, or selecting list styles with a renumber option.</para><para>There are a few disadvantages to using <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref>. It is not native, so does not behave exactly as a native <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref>, although common editing conventions are followed. Users may miss the built-in spelling correction on Mac OS X, or any special character input that may be provided by the native control. It would also be a poor choice if intended users rely on screen readers that would be not work well with non-native text input implementation. You might mitigate this by providing the choice between <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> and <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref>, with fewer features in the former case.</para><para>A good way to understand wxRichTextCtrl&apos;s capabilities is to compile and run the sample, <computeroutput>samples/richtext</computeroutput>, and browse the code.</para></sect1>
<sect1 id="overview_richtextctrl_1overview_richtextctrl_example">
<title>Code Example</title>
<para>The following code is an example taken from the sample, and adds text and styles to a rich text control programmatically.</para><para><programlisting><codeline><highlight class="normal"><ref refid="classwx_rich_text_ctrl" kindref="compound" tooltip="wxRichTextCtrl provides a generic, ground-up implementation of a text control capable of showing mult...">wxRichTextCtrl</ref>*<sp/>richTextCtrl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_rich_text_ctrl" kindref="compound" tooltip="wxRichTextCtrl provides a generic, ground-up implementation of a text control capable of showing mult...">wxRichTextCtrl</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>splitter,<sp/>wxID_ANY,<sp/><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member" tooltip="The global wxString instance of an empty string.">wxEmptyString</ref>,<sp/><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member" tooltip="Global instance of a wxPoint initialized with values (-1,-1).">wxDefaultPosition</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_size" kindref="compound" tooltip="A wxSize is a useful data structure for graphics operations.">wxSize</ref>(200,<sp/>200),<sp/><ref refid="defs_8h_1a78a1371cbc8c3b8bb36f27b9d3c47ba9" kindref="member">wxVSCROLL</ref><sp/>|<sp/><ref refid="defs_8h_1a138eed616dd15fd021e8cc838e26d589" kindref="member">wxHSCROLL</ref><sp/>|<sp/><ref refid="defs_8h_1af63c94dff4e3f25a3c5e9d2874456edfaefc06a089c4d7317026613fd8bdf3e22" kindref="member">wxBORDER_NONE</ref><sp/>|<sp/><ref refid="defs_8h_1a9fefaef352af381851b2b78eb5979a95" kindref="member">wxWANTS_CHARS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_font" kindref="compound" tooltip="A font is an object which determines the appearance of text.">wxFont</ref><sp/>textFont<sp/>=<sp/><ref refid="classwx_font" kindref="compound" tooltip="A font is an object which determines the appearance of text.">wxFont</ref>(12,<sp/>wxROMAN,<sp/>wxNORMAL,<sp/>wxNORMAL);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_font" kindref="compound" tooltip="A font is an object which determines the appearance of text.">wxFont</ref><sp/>boldFont<sp/>=<sp/><ref refid="classwx_font" kindref="compound" tooltip="A font is an object which determines the appearance of text.">wxFont</ref>(12,<sp/>wxROMAN,<sp/>wxNORMAL,<sp/>wxBOLD);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_font" kindref="compound" tooltip="A font is an object which determines the appearance of text.">wxFont</ref><sp/>italicFont<sp/>=<sp/><ref refid="classwx_font" kindref="compound" tooltip="A font is an object which determines the appearance of text.">wxFont</ref>(12,<sp/>wxROMAN,<sp/>wxITALIC,<sp/>wxNORMAL);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_font" kindref="compound" tooltip="A font is an object which determines the appearance of text.">wxFont</ref><sp/>font(12,<sp/>wxROMAN,<sp/>wxNORMAL,<sp/>wxNORMAL);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">m_richTextCtrl-&gt;SetFont(font);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_rich_text_ctrl" kindref="compound" tooltip="wxRichTextCtrl provides a generic, ground-up implementation of a text control capable of showing mult...">wxRichTextCtrl</ref>&amp;<sp/>r<sp/>=<sp/>richTextCtrl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a307060a7027047925188e1088f68c884" kindref="member" tooltip="Starts suppressing undo history for commands.">BeginSuppressUndo</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1af7c2d1c0b33b6875df176a876c011583" kindref="member" tooltip="Begins paragraph spacing; pass the before-paragraph and after-paragraph spacing in tenths of a millim...">BeginParagraphSpacing</ref>(0,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1ae1f6f09dad00eb28d01c652826977f5f" kindref="member" tooltip="Begins using alignment.">BeginAlignment</ref>(<ref refid="textctrl_8h_1acf93ad4eb51199602dc2af60ca78b4e5a44f21beb45aab0d65e987023f2edfbcf" kindref="member">wxTEXT_ALIGNMENT_CENTRE</ref>);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a002052b559e3816c112ab338e9747f0c" kindref="member" tooltip="Begins using bold.">BeginBold</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1ac6a91a68493f2b00cbdc018992f0be7a" kindref="member" tooltip="Begins using the given point size.">BeginFontSize</ref>(14);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Welcome<sp/>to<sp/>wxRichTextCtrl,<sp/>a<sp/>wxWidgets<sp/>control<sp/>for<sp/>editing<sp/>and<sp/>presenting<sp/>styled<sp/>text<sp/>and<sp/>images&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a90de1fbcf177563f610617ba69ead0ea" kindref="member" tooltip="Ends using a point size.">EndFontSize</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1ae0b04f3a15482a58d3fdfd0257bd7d48" kindref="member" tooltip="Begins using italic.">BeginItalic</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;by<sp/>Julian<sp/>Smart&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a63ecaab126a52f72fc4cbf05bbf22ec5" kindref="member" tooltip="Ends using italic.">EndItalic</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a9adc96400a3f4573d8d2e3a78acd6b74" kindref="member" tooltip="Ends using bold.">EndBold</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a1315611c0741d03e852ee26eba3a9d94" kindref="member" tooltip="Write a bitmap or image at the current insertion point.">WriteImage</ref>(<ref refid="classwx_bitmap" kindref="compound" tooltip="This class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour or co...">wxBitmap</ref>(zebra_xpm));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a9a41c8bf160e2b06b5b6f22c64c2211f" kindref="member" tooltip="Ends alignment.">EndAlignment</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;What<sp/>can<sp/>you<sp/>do<sp/>with<sp/>this<sp/>thing?<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a1315611c0741d03e852ee26eba3a9d94" kindref="member" tooltip="Write a bitmap or image at the current insertion point.">WriteImage</ref>(<ref refid="classwx_bitmap" kindref="compound" tooltip="This class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour or co...">wxBitmap</ref>(smiley_xpm));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>Well,<sp/>you<sp/>can<sp/>change<sp/>text<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a59618fdff1032e843d47a05b21c23d93" kindref="member" tooltip="Begins using this colour.">BeginTextColour</ref>(<ref refid="classwx_colour" kindref="compound" tooltip="A colour is an object representing a combination of Red, Green, and Blue (RGB) intensity values...">wxColour</ref>(255,<sp/>0,<sp/>0));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;colour,<sp/>like<sp/>this<sp/>red<sp/>bit.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a789792f7bf805aff5eaef8efcf2e75f0" kindref="member" tooltip="Ends applying a text colour.">EndTextColour</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a59618fdff1032e843d47a05b21c23d93" kindref="member" tooltip="Begins using this colour.">BeginTextColour</ref>(<ref refid="classwx_colour" kindref="compound" tooltip="A colour is an object representing a combination of Red, Green, and Blue (RGB) intensity values...">wxColour</ref>(0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>And<sp/>this<sp/>blue<sp/>bit.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a789792f7bf805aff5eaef8efcf2e75f0" kindref="member" tooltip="Ends applying a text colour.">EndTextColour</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>Naturally<sp/>you<sp/>can<sp/>make<sp/>things<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a002052b559e3816c112ab338e9747f0c" kindref="member" tooltip="Begins using bold.">BeginBold</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;bold<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a9adc96400a3f4573d8d2e3a78acd6b74" kindref="member" tooltip="Ends using bold.">EndBold</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1ae0b04f3a15482a58d3fdfd0257bd7d48" kindref="member" tooltip="Begins using italic.">BeginItalic</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;or<sp/>italic<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a63ecaab126a52f72fc4cbf05bbf22ec5" kindref="member" tooltip="Ends using italic.">EndItalic</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a333b2e675617ed2299cf91e7c0dbd0d8" kindref="member" tooltip="Begins using underlining.">BeginUnderline</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;or<sp/>underlined.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a9f44e85782c447e6eb4e82fd877ead15" kindref="member" tooltip="End applying underlining.">EndUnderline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1ac6a91a68493f2b00cbdc018992f0be7a" kindref="member" tooltip="Begins using the given point size.">BeginFontSize</ref>(14);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>Different<sp/>font<sp/>sizes<sp/>on<sp/>the<sp/>same<sp/>line<sp/>is<sp/>allowed,<sp/>too.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a90de1fbcf177563f610617ba69ead0ea" kindref="member" tooltip="Ends using a point size.">EndFontSize</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>Next<sp/>we&apos;ll<sp/>show<sp/>an<sp/>indented<sp/>paragraph.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1aa287dc84fa062b8b8f33e26d8050d9fc" kindref="member" tooltip="Begins applying a left indent and subindent in tenths of a millimetre.">BeginLeftIndent</ref>(60);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Indented<sp/>paragraph.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a53111d236d0db253c809320e9657a7d4" kindref="member" tooltip="Ends left indent.">EndLeftIndent</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Next,<sp/>we&apos;ll<sp/>show<sp/>a<sp/>first-line<sp/>indent,<sp/>achieved<sp/>using<sp/>BeginLeftIndent(100,<sp/>-40).&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1aa287dc84fa062b8b8f33e26d8050d9fc" kindref="member" tooltip="Begins applying a left indent and subindent in tenths of a millimetre.">BeginLeftIndent</ref>(100,<sp/>-40);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;It<sp/>was<sp/>in<sp/>January,<sp/>the<sp/>most<sp/>down-trodden<sp/>month<sp/>of<sp/>an<sp/>Edinburgh<sp/>winter.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a53111d236d0db253c809320e9657a7d4" kindref="member" tooltip="Ends left indent.">EndLeftIndent</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Numbered<sp/>bullets<sp/>are<sp/>possible,<sp/>again<sp/>using<sp/>subindents:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a320aa0d999e75bda7673914a66474512" kindref="member" tooltip="Begins a numbered bullet.">BeginNumberedBullet</ref>(1,<sp/>100,<sp/>60);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>first<sp/>item.<sp/>Note<sp/>that<sp/>wxRichTextCtrl<sp/>doesn&apos;t<sp/>automatically<sp/>do<sp/>numbering,<sp/>but<sp/>this<sp/>will<sp/>be<sp/>added<sp/>later.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1ae4b1394329c35c980d0fcded6b5155b5" kindref="member" tooltip="Ends application of a numbered bullet.">EndNumberedBullet</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a320aa0d999e75bda7673914a66474512" kindref="member" tooltip="Begins a numbered bullet.">BeginNumberedBullet</ref>(2,<sp/>100,<sp/>60);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>second<sp/>item.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1ae4b1394329c35c980d0fcded6b5155b5" kindref="member" tooltip="Ends application of a numbered bullet.">EndNumberedBullet</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;The<sp/>following<sp/>paragraph<sp/>is<sp/>right-indented:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1acf0f84f0ef18618009f4d20ebcda8096" kindref="member" tooltip="Begins a right indent, specified in tenths of a millimetre.">BeginRightIndent</ref>(200);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;It<sp/>was<sp/>in<sp/>January,<sp/>the<sp/>most<sp/>down-trodden<sp/>month<sp/>of<sp/>an<sp/>Edinburgh<sp/>winter.<sp/>An<sp/>attractive<sp/>woman<sp/>came<sp/>into<sp/>the<sp/>cafe,<sp/>which<sp/>is<sp/>nothing<sp/>remarkable.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a42c4ef3ba8b2fc76a7425de0d9d0a798" kindref="member" tooltip="Ends right indent.">EndRightIndent</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member" tooltip="Predefined specialization of wxArray&amp;lt;T&amp;gt; for standard types.">wxArrayInt</ref><sp/>tabs;</highlight></codeline>
<codeline><highlight class="normal">tabs.Add(400);</highlight></codeline>
<codeline><highlight class="normal">tabs.Add(600);</highlight></codeline>
<codeline><highlight class="normal">tabs.Add(800);</highlight></codeline>
<codeline><highlight class="normal">tabs.Add(1000);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classwx_text_attr" kindref="compound" tooltip="wxTextAttr represents the character and paragraph attributes, or style, for a range of text in a wxTe...">wxTextAttr</ref><sp/>attr;</highlight></codeline>
<codeline><highlight class="normal">attr.<ref refid="classwx_text_attr_1a315ebbc5a41840a0777a7716fc19f5f0" kindref="member" tooltip="Sets the flags determining which styles are being specified.">SetFlags</ref>(<ref refid="textctrl_8h_1a5544b853914845e9d6453501951d60c2a15c4756ed27d78788e60f53121f4aef5" kindref="member">wxTEXT_ATTR_TABS</ref>);</highlight></codeline>
<codeline><highlight class="normal">attr.<ref refid="classwx_text_attr_1ad21e66c498c5a60e3603d71938b8c772" kindref="member" tooltip="Sets the tab stops, expressed in tenths of a millimetre.">SetTabs</ref>(tabs);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a6397391edcc22594e92f046f2d99a06f" kindref="member" tooltip="Sets the current default style, which can be used to change how subsequently inserted text is display...">SetDefaultStyle</ref>(attr);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>line<sp/>contains<sp/>tabs:\tFirst<sp/>tab\tSecond<sp/>tab\tThird<sp/>tab&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Other<sp/>notable<sp/>features<sp/>of<sp/>wxRichTextCtrl<sp/>include:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1afb7a6b5794ba2081c17a04a0811f56b4" kindref="member" tooltip="Begins applying a symbol bullet, using a character from the current font.">BeginSymbolBullet</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">),<sp/>100,<sp/>60);</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a5016a69296d7a9f42f5562d0a7b46332" kindref="member" tooltip="Inserts a new paragraph at the current insertion point.">Newline</ref>();</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Compatibility<sp/>with<sp/>wxTextCtrl<sp/>API&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a47edd72f17682bdacbf0f91ab43d9e0f" kindref="member" tooltip="Ends applying a symbol bullet.">EndSymbolBullet</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a083b9d2b3a04f192080e143897b4bf89" kindref="member" tooltip="Writes text at the current position.">WriteText</ref>(<ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;Note:<sp/>this<sp/>sample<sp/>content<sp/>was<sp/>generated<sp/>programmatically<sp/>from<sp/>within<sp/>the<sp/>MyFrame<sp/>constructor<sp/>in<sp/>the<sp/>demo.<sp/>The<sp/>images<sp/>were<sp/>loaded<sp/>from<sp/>inline<sp/>XPMs.<sp/>Enjoy<sp/>wxRichTextCtrl!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">r.<ref refid="classwx_rich_text_ctrl_1a1e6f7ac3c1ee26d49abcc9408e9a3e5c" kindref="member" tooltip="Ends suppressing undo command history.">EndSuppressUndo</ref>();</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_richtextctrl_1overview_richtextctrl_starting">
<title>Starting to Use wxRichTextCtrl</title>
<para>You need to include <computeroutput>&lt;<ref refid="interface_2wx_2richtext_2richtextctrl_8h" kindref="compound">wx/richtext/richtextctrl.h</ref>&gt;</computeroutput> in your source, and link with the appropriate wxWidgets library with <computeroutput>richtext</computeroutput> suffix. Put the rich text library first in your link line to avoid unresolved symbols.</para><para>Then you can create a <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref>, with the wxWANT_CHARS style if you want tabs to be processed by the control rather than being used for navigation between controls.</para></sect1>
<sect1 id="overview_richtextctrl_1overview_richtextctrl_styles">
<title>Text Styles</title>
<para>Styling attributes are represented by <ref refid="classwx_text_attr" kindref="compound">wxTextAttr</ref>, or for more control over attributes such as margins and size, the derived class <ref refid="classwx_rich_text_attr" kindref="compound">wxRichTextAttr</ref>.</para><para>When setting a style, the flags of the attribute object determine which attributes are applied. When querying a style, the passed flags are ignored except (optionally) to determine whether attributes should be retrieved from character content or from the paragraph object.</para><para><ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> takes a layered approach to styles, so that different parts of the content may be responsible for contributing different attributes to the final style you see on the screen.</para><para>There are four main notions of style within a control:</para><para><itemizedlist>
<listitem><para><bold>Basic style</bold>: The fundamental style of a control, onto which any other styles are layered. It provides default attributes, and changing the basic style may immediately change the look of the content depending on what other styles the content uses. Calling <ref refid="classwx_rich_text_ctrl_1ad1e86c9e0daa943945f2fe82954092c6" kindref="member">wxRichTextCtrl::SetFont</ref> changes the font for the basic style. The basic style is set with <ref refid="classwx_rich_text_ctrl_1a994f95fd91df10f3110edbc68dc7112d" kindref="member">wxRichTextCtrl::SetBasicStyle</ref>. </para></listitem>
<listitem><para><bold>Paragraph style</bold>: Each paragraph has attributes that are set independently from other paragraphs and independently from the content within the paragraph. Normally, these attributes are paragraph-related, such as alignment and indentation, but it is possible to set character attributes too. The paragraph style can be set independently of its content by passing wxRICHTEXT_SETSTYLE_PARAGRAPHS_ONLY to <ref refid="classwx_rich_text_ctrl_1ad0bc0f8dfad4d929a532f748e1930c4b" kindref="member">wxRichTextCtrl::SetStyleEx</ref>. </para></listitem>
<listitem><para><bold>Character style</bold>: Characters within each paragraph can have attributes. A single character, or a run of characters, can have a particular set of attributes. The character style can be with <ref refid="classwx_rich_text_ctrl_1a019caef1a5e254ae3496e74de1c41fd4" kindref="member">wxRichTextCtrl::SetStyle</ref> or <ref refid="classwx_rich_text_ctrl_1ad0bc0f8dfad4d929a532f748e1930c4b" kindref="member">wxRichTextCtrl::SetStyleEx</ref>. </para></listitem>
<listitem><para><bold>Default style</bold>: This is the &apos;current&apos; style that determines the style of content that is subsequently typed, pasted or programmatically inserted. The default style is set with <ref refid="classwx_rich_text_ctrl_1a6397391edcc22594e92f046f2d99a06f" kindref="member">wxRichTextCtrl::SetDefaultStyle</ref>.</para></listitem>
</itemizedlist>
What you see on the screen is the dynamically <emphasis>combined</emphasis> style, found by merging the first three of the above style types (the fourth is only a guide for future content insertion and therefore does not affect the currently displayed content).</para><para>To make all this more concrete, here are examples of where you might set these different styles:</para><para><itemizedlist>
<listitem><para>You might set the <emphasis>basic style</emphasis> to have a Times Roman font in 12 point, left-aligned, with two millimetres of spacing after each paragraph. </para></listitem>
<listitem><para>You might set the <emphasis>paragraph style</emphasis> (for one particular paragraph) to be centred. </para></listitem>
<listitem><para>You might set the <emphasis>character style</emphasis> of one particular word to bold. </para></listitem>
<listitem><para>You might set the <emphasis>default style</emphasis> to be underlined, for subsequent inserted text.</para></listitem>
</itemizedlist>
Naturally you can do any of these things either using your own UI, or programmatically.</para><para>The basic <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> doesn&apos;t make the same distinctions as <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> regarding attribute storage. So we need finer control when setting and retrieving attributes. <ref refid="classwx_rich_text_ctrl_1ad0bc0f8dfad4d929a532f748e1930c4b" kindref="member">wxRichTextCtrl::SetStyleEx</ref> takes a <emphasis>flags</emphasis> parameter:</para><para><itemizedlist>
<listitem><para>wxRICHTEXT_SETSTYLE_OPTIMIZE specifies that the style should be changed only if the combined attributes are different from the attributes for the current object. This is important when applying styling that has been edited by the user, because he has just edited the <emphasis>combined</emphasis> (visible) style, and <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> wants to leave unchanged attributes associated with their original objects instead of applying them to both paragraph and content objects. </para></listitem>
<listitem><para>wxRICHTEXT_SETSTYLE_PARAGRAPHS_ONLY specifies that only paragraph objects within the given range should take on the attributes. </para></listitem>
<listitem><para>wxRICHTEXT_SETSTYLE_CHARACTERS_ONLY specifies that only content objects (text or images) within the given range should take on the attributes. </para></listitem>
<listitem><para>wxRICHTEXT_SETSTYLE_WITH_UNDO specifies that the operation should be undoable.</para></listitem>
</itemizedlist>
It&apos;s great to be able to change arbitrary attributes in a <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref>, but it can be unwieldy for the user or programmer to set attributes separately. Word processors have collections of styles that you can tailor or use as-is, and this means that you can set a heading with one click instead of marking text in bold, specifying a large font size, and applying a certain paragraph spacing and alignment for every such heading. Similarly, wxWidgets provides a class called <ref refid="classwx_rich_text_style_sheet" kindref="compound">wxRichTextStyleSheet</ref> which manages style definitions (<ref refid="classwx_rich_text_paragraph_style_definition" kindref="compound">wxRichTextParagraphStyleDefinition</ref>, <ref refid="classwx_rich_text_list_style_definition" kindref="compound">wxRichTextListStyleDefinition</ref> and <ref refid="classwx_rich_text_character_style_definition" kindref="compound">wxRichTextCharacterStyleDefinition</ref>). Once you have added definitions to a style sheet and associated it with a <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref>, you can apply a named definition to a range of text. The classes <ref refid="classwx_rich_text_style_combo_ctrl" kindref="compound">wxRichTextStyleComboCtrl</ref> and <ref refid="classwx_rich_text_style_list_box" kindref="compound">wxRichTextStyleListBox</ref> can be used to present the user with a list of styles in a sheet, and apply them to the selected text.</para><para>You can reapply a style sheet to the contents of the control, by calling <ref refid="classwx_rich_text_ctrl_1ab4dd025a2ad34eb31cc604cf6411b352" kindref="member">wxRichTextCtrl::ApplyStyleSheet</ref>. This is useful if the style definitions have changed, and you want the content to reflect this. It relies on the fact that when you apply a named style, the style definition name is recorded in the content. So ApplyStyleSheet works by finding the paragraph attributes with style names and re-applying the definition&apos;s attributes to the paragraph. Currently, this works with paragraph and list style definitions only.</para></sect1>
<sect1 id="overview_richtextctrl_1overview_richtextctrl_dialogs">
<title>Included Dialogs</title>
<para><ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> comes with standard dialogs to make it easier to implement text editing functionality.</para><para><ref refid="classwx_rich_text_formatting_dialog" kindref="compound">wxRichTextFormattingDialog</ref> can be used for character or paragraph formatting, or a combination of both. It&apos;s a <ref refid="classwx_property_sheet_dialog" kindref="compound">wxPropertySheetDialog</ref> with the following available tabs: Font, Indents &amp; Spacing, Tabs, Bullets, Style, Borders, Margins, Background, Size, and List Style. You can select which pages will be shown by supplying flags to the dialog constructor. In a character formatting dialog, typically only the Font page will be shown. In a paragraph formatting dialog, you&apos;ll show the Indents &amp; Spacing, Tabs and Bullets pages. The Style tab is useful when editing a style definition.</para><para>You can customize this dialog by providing your own <ref refid="classwx_rich_text_formatting_dialog_factory" kindref="compound">wxRichTextFormattingDialogFactory</ref> object, which tells the formatting dialog how many pages are supported, what their identifiers are, and how to creates the pages.</para><para><ref refid="classwx_rich_text_style_organiser_dialog" kindref="compound">wxRichTextStyleOrganiserDialog</ref> is a multi-purpose dialog that can be used for managing style definitions, browsing styles and applying them, or selecting list styles with a renumber option. See the sample for usage - it is used for the &quot;Manage Styles&quot; and &quot;Bullets and Numbering&quot; menu commands.</para><para><ref refid="classwx_symbol_picker_dialog" kindref="compound">wxSymbolPickerDialog</ref> lets the user insert a symbol from a specified font. It has no <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> dependencies besides being included in the rich text library.</para></sect1>
<sect1 id="overview_richtextctrl_1overview_richtextctrl_impl">
<title>How wxRichTextCtrl is Implemented</title>
<para>Data representation is handled by <ref refid="classwx_rich_text_buffer" kindref="compound">wxRichTextBuffer</ref>, and a <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> always has one such buffer.</para><para>The content is represented by a hierarchy of objects, all derived from <ref refid="classwx_rich_text_object" kindref="compound">wxRichTextObject</ref>. An object might be an image, a fragment of text, a paragraph, or a further composite object. Objects store a <ref refid="classwx_rich_text_attr" kindref="compound">wxRichTextAttr</ref> containing style information; a paragraph object can contain both paragraph and character information, but content objects such as text can only store character information. The final style displayed in the control or in a printout is a combination of base style, paragraph style and content (character) style.</para><para>The top of the hierarchy is the buffer, a kind of <ref refid="classwx_rich_text_paragraph_layout_box" kindref="compound">wxRichTextParagraphLayoutBox</ref>, containing further <ref refid="classwx_rich_text_paragraph" kindref="compound">wxRichTextParagraph</ref> objects, each of which can include text, images and potentially other types of object.</para><para>Each object maintains a range (start and end position) measured from the start of the main parent object.</para><para>When Layout is called on an object, it is given a size which the object must limit itself to, or one or more flexible directions (vertical or horizontal). So, for example, a centred paragraph is given the page width to play with (minus any margins), but can extend indefinitely in the vertical direction. The implementation of Layout caches the calculated size and position.</para><para>When the buffer is modified, a range is invalidated (marked as requiring layout), so that only the minimum amount of layout is performed.</para><para>A paragraph of pure text with the same style contains just one further object, a <ref refid="classwx_rich_text_plain_text" kindref="compound">wxRichTextPlainText</ref> object. When styling is applied to part of this object, the object is decomposed into separate objects, one object for each different character style. So each object within a paragraph always has just one <ref refid="classwx_text_attr" kindref="compound">wxTextAttr</ref> object to denote its character style. Of course, this can lead to fragmentation after a lot of edit operations, potentially leading to several objects with the same style where just one would do. So a Defragment function is called when updating the control&apos;s display, to ensure that the minimum number of objects is used.</para></sect1>
<sect1 id="overview_richtextctrl_1overview_richtextctrl_nested_object">
<title>Nested Objects</title>
<para><ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> supports nested objects such as text boxes and tables. To achieve compatibility with the existing API, there is the concept of <emphasis>object</emphasis> <emphasis>focus</emphasis>. When the user clicks on a nested text box, the object focus is set to that container object so all keyboard input and API functions apply to that container. The application can change the focus using wxRichTextCtrl::SetObjectFocus. Call this function with a  parameter to set the focus back to the top-level object.</para><para>An event will be sent to the control when the focus changes.</para><para>When the user clicks on the control, <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> determines which container to set as the current object focus by calling the found container&apos;s overrided <ref refid="classwx_rich_text_object_1ae42498f572d7a1859748605dbeb4a2a2" kindref="member">wxRichTextObject::AcceptsFocus</ref> function. For example, although a table is a container, it must not itself be the object focus because there is no text editing at the table level. Instead, a cell within the table must accept the focus.</para><para>Since with nested objects it is not possible to represent a section with merely a start position and an end position, the class <ref refid="classwx_rich_text_selection" kindref="compound">wxRichTextSelection</ref> is provided which stores multiple ranges (for non-contiguous selections such as table cells) and a pointer to the container object in question. You can pass <ref refid="classwx_rich_text_selection" kindref="compound">wxRichTextSelection</ref> to <ref refid="classwx_rich_text_ctrl_1a6c03432e13fb42c87df867f18252e10e" kindref="member">wxRichTextCtrl::SetSelection</ref> or get an instance of it from <ref refid="classwx_rich_text_ctrl_1a7d83b1a753beade27d09cf3905f28975" kindref="member">wxRichTextCtrl::GetSelection</ref>.</para><para>When selecting multiple objects, such as cell tables, the <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> dragging handler code calls the function <ref refid="classwx_rich_text_object_1a747d48c460a7a6d73742479a9fb08d14" kindref="member">wxRichTextObject::HandlesChildSelections</ref> to determine whether the children can be individual selections. Currently only table cells can be multiply-selected in this way.</para></sect1>
<sect1 id="overview_richtextctrl_1overview_richtextctrl_context_menus">
<title>Context menus and property dialogs</title>
<para>There are three ways you can make use of context menus: you can let <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> handle everything and provide a basic menu; you can set your own context menu using <ref refid="classwx_rich_text_ctrl_1a220fd0f4032fa7c0a1b1c2ed5c85a7aa" kindref="member">wxRichTextCtrl::SetContextMenu</ref> but let <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> handle showing it and adding property items; or you can override the default context menu behaviour by adding a context menu event handler to your class in the normal way.</para><para>If you right-click over a text box in cell in a table, you may want to edit the properties of one of these objects - but which properties will you be editing?</para><para>Well, the default behaviour allows up to three property-editing menu items simultaneously - for the object clicked on, the container of that object, and the container&apos;s parent (depending on whether any of these objects return true from their <ref refid="classwx_rich_text_object_1a86ceb93a7e960fecf5239a814c88be7d" kindref="member">wxRichTextObject::CanEditProperties</ref> functions). If you supply a context menu, add a property command item using the wxID_RICHTEXT_PROPERTIES1 identifier, so that <ref refid="classwx_rich_text_ctrl" kindref="compound">wxRichTextCtrl</ref> can find the position to add command items. The object should tell the control what label to use by returning a string from <ref refid="classwx_rich_text_object_1ae28b43263d92734c5893c87ee11167ee" kindref="member">wxRichTextObject::GetPropertiesMenuLabel</ref>.</para><para>Since there may be several property-editing commands showing, it is recommended that you don&apos;t include the word Properties - just the name of the object, such as Text Box or Table.</para></sect1>
<sect1 id="overview_richtextctrl_1overview_richtextctrl_roadmap">
<title>Development Roadmap</title>
<sect2 id="overview_richtextctrl_1overview_richtextctrl_roadmap_bugs">
<title>Bugs</title>
<para>This is an incomplete list of bugs.</para><para><itemizedlist>
<listitem><para>Moving the caret up at the beginning of a line sometimes incorrectly positions the caret. </para></listitem>
<listitem><para>As the selection is expanded, the text jumps slightly due to kerning differences between drawing a single text string versus drawing several fragments separately. This could be improved by using <ref refid="classwx_d_c_1aa0dd5cdd1ce56ff3d1c23d233711653d" kindref="member">wxDC::GetPartialTextExtents</ref> to calculate exactly where the separate fragments should be drawn. Note that this problem also applies to separation of text fragments due to difference in their attributes.</para></listitem>
</itemizedlist>
</para></sect2>
<sect2 id="overview_richtextctrl_1overview_richtextctrl_roadmap_features">
<title>Features</title>
<para>This is a list of some of the features that have yet to be implemented. Help with them will be appreciated.</para><para><itemizedlist>
<listitem><para>support for composite objects in some functions where it&apos;s not yet implemented, for example ApplyStyleSheet </para></listitem>
<listitem><para>Table API enhancements and dialogs; improved table layout especially row spans and fitting </para></listitem>
<listitem><para>Conversion from HTML, and a rewrite of the HTML output handler that includes CSS, tables, text boxes, and floating images, in addition to a simplified-HTML mode for wxHTML compatibility </para></listitem>
<listitem><para>Open Office input and output </para></listitem>
<listitem><para>RTF input and output </para></listitem>
<listitem><para>A ruler control </para></listitem>
<listitem><para>Standard editing toolbars </para></listitem>
<listitem><para>Bitmap bullets </para></listitem>
<listitem><para>Justified text, in print/preview at least </para></listitem>
<listitem><para>scaling: either everything scaled, or rendering using a custom reference point size and an optional dimension scale</para></listitem>
</itemizedlist>
There are also things that could be done to take advantage of the underlying text capabilities of the platform; higher-level text formatting APIs are available on some platforms, such as Mac OS X, and some of translation from high level to low level <ref refid="classwx_d_c" kindref="compound">wxDC</ref> API is unnecessary. However this would require additions to the wxWidgets API. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

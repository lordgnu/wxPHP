<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classwx_p_g_property" kind="class" prot="public">
    <compoundname>wxPGProperty</compoundname>
    <basecompoundref refid="classwx_object" prot="public" virt="non-virtual">wxObject</basecompoundref>
    <includes local="no">wx/propgrid/property.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classwx_p_g_property_1a68b0ae8aab37c387f5fc4b7e9c53968e" prot="public" static="no">
        <type><ref refid="defs_8h_1afdb12e5345c3fae4b537e813df9f02a3" kindref="member">wxUint32</ref></type>
        <definition>typedef wxUint32 wxPGProperty::FlagType</definition>
        <argsstring></argsstring>
        <name>FlagType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="692" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_p_g_property_1ade8edb58a7853a539664c77b2d9c9c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxPGProperty::wxPGProperty</definition>
        <argsstring>()</argsstring>
        <name>wxPGProperty</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="697"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1adde08613b47eda8e324483ac754e8920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxPGProperty::wxPGProperty</definition>
        <argsstring>(const wxString &amp;label, const wxString &amp;name)</argsstring>
        <name>wxPGProperty</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Non-abstract property classes should have constructor of this style:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>(label,<sp/>name)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generally<sp/>recommended<sp/>way<sp/>to<sp/>set<sp/>the<sp/>initial<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(as<sp/>it<sp/>should<sp/>work<sp/>in<sp/>pretty<sp/>much<sp/>100%<sp/>of<sp/>cases).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_variant" kindref="compound" tooltip="The wxVariant class represents a container for any type.">wxVariant</ref><sp/>variant;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variant<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property_1aa8e771a01a93fe94f87a449f430afa79" kindref="member" tooltip="Call this to set value of the property.">SetValue</ref>(variant);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>has<sp/>private<sp/>child<sp/>properties<sp/>then<sp/>create<sp/>them<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>AddPrivateChild(<sp/>new<sp/>wxStringProperty(&quot;Subprop<sp/>1&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxPG_LABEL,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.GetSubProp1()));</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="723"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ac18fca1cac5343b510220929a4f6a0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxPGProperty::~wxPGProperty</definition>
        <argsstring>()</argsstring>
        <name>~wxPGProperty</name>
        <briefdescription>
<para>Virtual destructor. </para>        </briefdescription>
        <detaileddescription>
<para>It is customary for derived properties to implement this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="728"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ae5c4f47d3ff609d19346b994a9a25acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxPGProperty::OnSetValue</definition>
        <argsstring>()</argsstring>
        <name>OnSetValue</name>
        <briefdescription>
<para>This virtual function is called after m_value has been set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para><itemizedlist>
<listitem><para>If m_value was set to Null variant (ie. unspecified value), <ref refid="classwx_p_g_property_1ae5c4f47d3ff609d19346b994a9a25acb" kindref="member">OnSetValue()</ref> will not be called.</para></listitem><listitem><para>m_value may be of any variant type. Typically properties internally support only one variant type, and as such <ref refid="classwx_p_g_property_1ae5c4f47d3ff609d19346b994a9a25acb" kindref="member">OnSetValue()</ref> provides a good opportunity to convert supported values into internal type.</para></listitem><listitem><para>Default implementation does nothing. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="741"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ad34da516faa44c994598ce0a6dda4063" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>virtual wxVariant wxPGProperty::DoGetValue</definition>
        <argsstring>() const </argsstring>
        <name>DoGetValue</name>
        <briefdescription>
<para>Override this to return something else than m_value as the value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="746"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a2e0c041aa3e19a5934a02c65b53f9f7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxPGProperty::ValidateValue</definition>
        <argsstring>(wxVariant &amp;value, wxPGValidationInfo &amp;validationInfo) const </argsstring>
        <name>ValidateValue</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classwx_p_g_validation_info" kindref="compound">wxPGValidationInfo</ref> &amp;</type>
          <declname>validationInfo</declname>
        </param>
        <briefdescription>
<para>Implement this function in derived class to check the value. </para>        </briefdescription>
        <detaileddescription>
<para>Return true if it is ok. Returning false prevents property change events from occurring.</para><para><simplesect kind="remark"><para><itemizedlist>
<listitem><para>Default implementation always returns true. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="756"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a974a9b01c1f88cf4db630b6895453db8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxPGProperty::StringToValue</definition>
        <argsstring>(wxVariant &amp;variant, const wxString &amp;text, int argFlags=0) const </argsstring>
        <name>StringToValue</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>variant</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argFlags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Converts text into <ref refid="classwx_variant" kindref="compound">wxVariant</ref> value appropriate for this property. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variant</parametername>
</parameternamelist>
<parameterdescription>
<para>On function entry this is the old value (should not be wxNullVariant in normal cases). Translated value must be assigned back to it.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text to be translated into variant.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>If wxPG_FULL_VALUE is set, returns complete, storable value instead of displayable one (they may be different). If wxPG_COMPOSITE_FRAGMENT is set, text is interpreted as a part of composite property string value (as generated by <ref refid="classwx_p_g_property_1a7bef52444b2c03a4f10eef54ef9e9739" kindref="member">ValueToString()</ref> called with this same flag).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if resulting <ref refid="classwx_variant" kindref="compound">wxVariant</ref> value was different.</para></simplesect>
<simplesect kind="remark"><para>Default implementation converts semicolon delimited tokens into child values. Only works for properties with children.</para></simplesect>
You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="784"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a571ac2cc435cffa9a2d2377f3430f19d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxPGProperty::IntToValue</definition>
        <argsstring>(wxVariant &amp;variant, int number, int argFlags=0) const </argsstring>
        <name>IntToValue</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>variant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argFlags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Converts integer (possibly a choice selection) into <ref refid="classwx_variant" kindref="compound">wxVariant</ref> value appropriate for this property. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variant</parametername>
</parameternamelist>
<parameterdescription>
<para>On function entry this is the old value (should not be wxNullVariant in normal cases). Translated value must be assigned back to it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer to be translated into variant. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>If wxPG_FULL_VALUE is set, returns complete, storable value instead of displayable one.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if resulting <ref refid="classwx_variant" kindref="compound">wxVariant</ref> value was different.</para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>If property is not supposed to use choice or spinctrl or other editor with int-based value, it is not necessary to implement this method.</para></listitem><listitem><para>Default implementation simply assign given int to m_value.</para></listitem><listitem><para>If property uses choice control, and displays a dialog on some choice items, then it is preferred to display that dialog in IntToValue instead of OnEvent.</para></listitem><listitem><para>You might want to take into account that m_value is Mull variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour). </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="812"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a7bef52444b2c03a4f10eef54ef9e9739" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxPGProperty::ValueToString</definition>
        <argsstring>(wxVariant &amp;value, int argFlags=0) const </argsstring>
        <name>ValueToString</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argFlags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Converts property value into a text representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be converted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>If 0 (default value), then displayed string is returned. If wxPG_FULL_VALUE is set, returns complete, storable string value instead of displayable. If wxPG_EDITABLE_VALUE is set, returns string value that must be editable in textctrl. If wxPG_COMPOSITE_FRAGMENT is set, returns text that is appropriate to display as a part of string property&apos;s composite text representation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Default implementation calls <ref refid="classwx_p_g_property_1a5f266fcee82f96b626914e1876078135" kindref="member">GenerateComposedValue()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="829"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a0fbb7142a10cfcf02bb45000ab4527cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::SetValueFromString</definition>
        <argsstring>(const wxString &amp;text, int flags=0)</argsstring>
        <name>SetValueFromString</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Converts string to a value, and if successful, calls <ref refid="classwx_p_g_property_1aa8e771a01a93fe94f87a449f430afa79" kindref="member">SetValue()</ref> on it. </para>        </briefdescription>
        <detaileddescription>
<para>Default behaviour is to do nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>String to get the value from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000045"><xreftitle>Todo</xreftitle><xrefdescription><para>docme</para></xrefdescription></xrefsect></para><para><simplesect kind="return"><para>true if value was changed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="842"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a0b3351061910b91a954237735466ca88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::SetValueFromInt</definition>
        <argsstring>(long value, int flags=0)</argsstring>
        <name>SetValueFromInt</name>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine Converts integer to a value, and if successful, calls <ref refid="classwx_p_g_property_1aa8e771a01a93fe94f87a449f430afa79" kindref="member">SetValue()</ref> on it. </para>        </briefdescription>
        <detaileddescription>
<para>Default behaviour is to do nothing. ======= Converts integer to a value, and if successful, calls <ref refid="classwx_p_g_property_1aa8e771a01a93fe94f87a449f430afa79" kindref="member">SetValue()</ref> on it. Default behavior is to do nothing. &gt;&gt;&gt;&gt;&gt;&gt;&gt; .r67279</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Int to get the value from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>If has wxPG_FULL_VALUE, then the value given is a actual value and not an index.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if value was changed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="860"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a8c4008c4d7d148bd06f9db590301df76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxPGProperty::OnMeasureImage</definition>
        <argsstring>(int item=-1) const </argsstring>
        <name>OnMeasureImage</name>
        <param>
          <type>int</type>
          <declname>item</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Returns size of the custom painted image in front of property. </para>        </briefdescription>
        <detaileddescription>
<para>This method must be overridden to return non-default value if OnCustomPaint is to be called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Normally -1, but can be an index to the property&apos;s list of items.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>Default behaviour is to return wxSize(0,0), which means no image.</para></listitem><listitem><para>Default image width or height is indicated with dimension -1.</para></listitem><listitem><para>You can also return wxPG_DEFAULT_IMAGE_SIZE which equals <ref refid="classwx_size" kindref="compound">wxSize</ref>(-1, -1). </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="875"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a16fbe26240bf47ab0a9a02d21781da73" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxPGProperty::OnEvent</definition>
        <argsstring>(wxPropertyGrid *propgrid, wxWindow *wnd_primary, wxEvent &amp;event)</argsstring>
        <name>OnEvent</name>
        <param>
          <type><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> *</type>
          <declname>propgrid</declname>
        </param>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>wnd_primary</declname>
        </param>
        <param>
          <type><ref refid="classwx_event" kindref="compound">wxEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Events received by editor widgets are processed here. </para>        </briefdescription>
        <detaileddescription>
<para>Note that editor class usually processes most events. Some, such as button press events of TextCtrlAndButton class, can be handled here. Also, if custom handling for regular events is desired, then that can also be done (for example, wxSystemColourProperty custom handles <computeroutput>wxEVT_COMMAND_CHOICE_SELECTED</computeroutput> to display colour picker dialog when &apos;custom&apos; selection is made).</para><para>If the event causes value to be changed, <ref refid="classwx_p_g_property_1ade9385b0bc3c9ba4833b271157e87354" kindref="member">SetValueInEvent()</ref> should be called to set the new value.</para><para>The parameter <emphasis>event</emphasis> is the associated <ref refid="classwx_event" kindref="compound">wxEvent</ref>.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Should</parametername>
</parameternamelist>
<parameterdescription>
<para>return true if any changes in value should be reported.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>If property uses choice control, and displays a dialog on some choice items, then it is preferred to display that dialog in IntToValue instead of OnEvent. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="897"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ac3d79ee3ebbbff20c36627d92ea926e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>virtual wxVariant wxPGProperty::ChildChanged</definition>
        <argsstring>(wxVariant &amp;thisValue, int childIndex, wxVariant &amp;childValue) const </argsstring>
        <name>ChildChanged</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>thisValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>childIndex</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>childValue</declname>
        </param>
        <briefdescription>
<para>Called after value of a child property has been altered. </para>        </briefdescription>
        <detaileddescription>
<para>Must return new value of the whole property (after any alterations warranted by child&apos;s new value).</para><para>Note that this function is usually called at the time that value of this property, or given child property, is still pending for change, and as such, result of <ref refid="classwx_p_g_property_1a76fdd0b4782957b18aca2e8b8e170a0d" kindref="member">GetValue()</ref> or m_value should not be relied on.</para><para>Sample pseudo-code implementation:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_variant" kindref="compound" tooltip="The wxVariant class represents a container for any type.">wxVariant</ref><sp/><ref refid="classwx_p_g_property_1ac3d79ee3ebbbff20c36627d92ea926e1" kindref="member" tooltip="Called after value of a child property has been altered.">MyProperty::ChildChanged</ref>(<sp/><ref refid="classwx_variant" kindref="compound" tooltip="The wxVariant class represents a container for any type.">wxVariant</ref>&amp;<sp/>thisValue,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>childIndex,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_variant" kindref="compound" tooltip="The wxVariant class represents a container for any type.">wxVariant</ref>&amp;<sp/>childValue<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acquire<sp/>reference<sp/>to<sp/>actual<sp/>type<sp/>of<sp/>data<sp/>stored<sp/>in<sp/>variant</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(TFromVariant<sp/>only<sp/>exists<sp/>if<sp/>wxPropertyGrid&apos;s<sp/>wxVariant-macros</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>were<sp/>used<sp/>to<sp/>create<sp/>the<sp/>variant<sp/>class).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;<sp/>data<sp/>=<sp/>TFromVariant(thisValue);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>childValue<sp/>into<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>childIndex<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.SetSubProp1(<sp/>childvalue.GetLong()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.SetSubProp2(<sp/>childvalue.GetString()<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>altered<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thisValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of this property. Changed value should be returned (in previous versions of <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> it was only necessary to write value back to this argument). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>childIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of child changed (you can use Item(childIndex) to get child property). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>childValue</parametername>
</parameternamelist>
<parameterdescription>
<para>(Pending) value of the child property.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modified value of the whole property. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="953"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a2a890026b842c51658e8c358e137722d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> *</type>
        <definition>virtual const wxPGEditor* wxPGProperty::DoGetEditorClass</definition>
        <argsstring>() const </argsstring>
        <name>DoGetEditorClass</name>
        <briefdescription>
<para>Returns pointer to an instance of used editor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="958"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1af1b9f11eab24b1c1331f3f4a663ff98e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_validator" kindref="compound">wxValidator</ref> *</type>
        <definition>virtual wxValidator* wxPGProperty::DoGetValidator</definition>
        <argsstring>() const </argsstring>
        <name>DoGetValidator</name>
        <briefdescription>
<para>Returns pointer to the <ref refid="classwx_validator" kindref="compound">wxValidator</ref> that should be used with the editor of this property (NULL for no validator). </para>        </briefdescription>
        <detaileddescription>
<para>Setting validator explicitly via SetPropertyValidator will override this.</para><para>In most situations, code like this should work well (macros are used to maintain one actual validator instance, so on the second call the function exits within the first macro):</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_validator" kindref="compound" tooltip="wxValidator is the base class for a family of validator classes that mediate between a class of contr...">wxValidator</ref>*<sp/><ref refid="classwx_p_g_property_1af1b9f11eab24b1c1331f3f4a663ff98e" kindref="member" tooltip="Returns pointer to the wxValidator that should be used with the editor of this property (NULL for no ...">wxMyPropertyClass::DoGetValidator</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_PG_DOGETVALIDATOR_ENTRY()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxMyValidator*<sp/>validator<sp/>=<sp/>new<sp/>wxMyValidator(...);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>prepare<sp/>validator...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_PG_DOGETVALIDATOR_EXIT(validator)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><simplesect kind="remark"><para>You can get common filename validator by returning wxFileProperty::GetClassValidator(). wxDirProperty, for example, uses it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="991"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ad0b00df4a3916cb80adfa1227c70baf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxPGProperty::OnCustomPaint</definition>
        <argsstring>(wxDC &amp;dc, const wxRect &amp;rect, wxPGPaintData &amp;paintdata)</argsstring>
        <name>OnCustomPaint</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>wxPGPaintData &amp;</type>
          <declname>paintdata</declname>
        </param>
        <briefdescription>
<para>Override to paint an image in front of the property value text or drop-down list item (but only if <ref refid="classwx_p_g_property_1a8c4008c4d7d148bd06f9db590301df76" kindref="member">wxPGProperty::OnMeasureImage</ref> is overridden as well). </para>        </briefdescription>
        <detaileddescription>
<para>If property&apos;s <ref refid="classwx_p_g_property_1a8c4008c4d7d148bd06f9db590301df76" kindref="member">OnMeasureImage()</ref> returns size that has height != 0 but less than row height ( &lt; 0 has special meanings), <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> calls this method to draw a custom image in a limited area in front of the editor control or value text/graphics, and if control has drop-down list, then the image is drawn there as well (even in the case <ref refid="classwx_p_g_property_1a8c4008c4d7d148bd06f9db590301df76" kindref="member">OnMeasureImage()</ref> returned higher height than row height).</para><para>NOTE: Following applies when <ref refid="classwx_p_g_property_1a8c4008c4d7d148bd06f9db590301df76" kindref="member">OnMeasureImage()</ref> returns a &quot;flexible&quot; height ( using wxPG_FLEXIBLE_SIZE(W,H) macro), which implies variable height items: If rect.x is &lt; 0, then this is a measure item call, which means that dc is invalid and only thing that should be done is to set paintdata.m_drawnHeight to the height of the image of item at index paintdata.m_choiceItem. This call may be done even as often as once every drop-down popup show.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classwx_d_c" kindref="compound">wxDC</ref> to paint on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>Box reserved for custom graphics. Includes surrounding rectangle, if any. If x is &lt; 0, then this is a measure item call (see above). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paintdata</parametername>
</parameternamelist>
<parameterdescription>
<para>wxPGPaintData structure with much useful data about painted item. <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">wxPGPaintData</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wxPropertyGrid.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_property_grid" kindref="compound" tooltip="wxPropertyGrid is a specialized grid for editing properties - in other words name = value pairs...">wxPropertyGrid</ref>*<sp/><sp/><sp/>m_parent;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normally<sp/>-1,<sp/>otherwise<sp/>index<sp/>to<sp/>drop-down<sp/>list<sp/>item<sp/>that<sp/>has<sp/>to<sp/>be<sp/>drawn.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_choiceItem;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>to<sp/>drawn<sp/>width<sp/>in<sp/>OnCustomPaint<sp/>(optional).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_drawnWidth;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>a<sp/>measure<sp/>item<sp/>call,<sp/>set<sp/>this<sp/>to<sp/>the<sp/>height<sp/>of<sp/>item<sp/>at<sp/>m_choiceItem<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_drawnHeight;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
</programlisting></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>You can actually exceed rect width, but if you do so then paintdata.m_drawnWidth must be set to the full width drawn in pixels.</para></listitem><listitem><para>Due to technical reasons, rect&apos;s height will be default even if custom height was reported during measure call.</para></listitem><listitem><para>Brush is guaranteed to be default background colour. It has been already used to clear the background of area being painted. It can be modified.</para></listitem><listitem><para>Pen is guaranteed to be 1-wide &apos;black&apos; (or whatever is the proper colour) pen for drawing framing rectangle. It can be changed as well.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_p_g_property_1a7bef52444b2c03a4f10eef54ef9e9739" kindref="member">ValueToString()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1047"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a200356776151608f0ca63e8cc68fdc8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>wxPGCellRenderer *</type>
        <definition>virtual wxPGCellRenderer* wxPGProperty::GetCellRenderer</definition>
        <argsstring>(int column) const </argsstring>
        <name>GetCellRenderer</name>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Returns used wxPGCellRenderer instance for given property column (label=0, value=1). </para>        </briefdescription>
        <detaileddescription>
<para>Default implementation returns editor&apos;s renderer for all columns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1054"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a5423122f2b186d07f5b73d9e119f0549" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxPGProperty::GetChoiceSelection</definition>
        <argsstring>() const </argsstring>
        <name>GetChoiceSelection</name>
        <briefdescription>
<para>Returns which choice is currently selected. </para>        </briefdescription>
        <detaileddescription>
<para>Only applies to properties which have choices.</para><para>Needs to reimplemented in derived class if property value does not map directly to a choice. Integer as index, bool, and string usually do. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1063"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a167afcb85ed4d527e34567e32a0cc714" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxPGProperty::RefreshChildren</definition>
        <argsstring>()</argsstring>
        <name>RefreshChildren</name>
        <briefdescription>
<para>Refresh values of child properties. </para>        </briefdescription>
        <detaileddescription>
<para>Automatically called after value is set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1068"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a7d355ae4bd55f00bc149e5416c39908c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxPGProperty::DoSetAttribute</definition>
        <argsstring>(const wxString &amp;name, wxVariant &amp;value)</argsstring>
        <name>DoSetAttribute</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Reimplement this member function to add special handling for attributes of this property. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return false to have the attribute automatically stored in m_attributes. Default implementation simply does that and nothing else.</para></simplesect>
<simplesect kind="remark"><para>To actually set property attribute values from the application, use <ref refid="classwx_p_g_property_1a418c1539969b7a0a9378a3411a5680a6" kindref="member">wxPGProperty::SetAttribute()</ref> instead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1081"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a4417dd87a03fd41d6e4b831c5b2a4548" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>virtual wxVariant wxPGProperty::DoGetAttribute</definition>
        <argsstring>(const wxString &amp;name) const </argsstring>
        <name>DoGetAttribute</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns value of an attribute. </para>        </briefdescription>
        <detaileddescription>
<para>Override if custom handling of attributes is needed.</para><para>Default implementation simply return NULL variant. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1090"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a874654d10c66572f2a4c4c41c843f557" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>wxPGEditorDialogAdapter *</type>
        <definition>virtual wxPGEditorDialogAdapter* wxPGProperty::GetEditorDialog</definition>
        <argsstring>() const </argsstring>
        <name>GetEditorDialog</name>
        <briefdescription>
<para>Returns instance of a new wxPGEditorDialogAdapter instance, which is used when user presses the (optional) button next to the editor control;. </para>        </briefdescription>
        <detaileddescription>
<para>Default implementation returns NULL (ie. no action is generated when button is pressed). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1099"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1acbffb1a7f8dee530918ff74c5cb70363" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxPGProperty::OnValidationFailure</definition>
        <argsstring>(wxVariant &amp;pendingValue)</argsstring>
        <name>OnValidationFailure</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>pendingValue</declname>
        </param>
        <briefdescription>
<para>Called whenever validation has failed with given pending value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>If you implement this in your custom property class, please remember to call the baser implementation as well, since they may use it to revert property into pre-change state. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1108"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ab58afbdcd83f0626f44d152127038a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxPGProperty::AddChoice</definition>
        <argsstring>(const wxString &amp;label, int value=wxPG_INVALID_VALUE)</argsstring>
        <name>AddChoice</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
          <defval>wxPG_INVALID_VALUE</defval>
        </param>
        <briefdescription>
<para>Append a new choice to property&apos;s list of choices. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Label for added choice.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for new choice. Do not specify if you wish this to equal choice index.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index to added choice. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1123"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1af9aa04abe8dc641dec6211568fb74fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxPGProperty::wxDEPRECATED</definition>
        <argsstring>(void AddChild(wxPGProperty *prop))</argsstring>
        <name>wxDEPRECATED</name>
        <param>
          <type>void </type>
          <declname>AddChild</declname>
          <array>wxPGProperty *prop</array>
        </param>
        <briefdescription>
<para>Adds a private child property. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000045"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="classwx_p_g_property_1abec97e799f836560d4f65c7c5fc97f6f" kindref="member">AddPrivateChild()</ref> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><ref refid="classwx_p_g_property_1abec97e799f836560d4f65c7c5fc97f6f" kindref="member">AddPrivateChild()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1132"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1abec97e799f836560d4f65c7c5fc97f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::AddPrivateChild</definition>
        <argsstring>(wxPGProperty *prop)</argsstring>
        <name>AddPrivateChild</name>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
<para>Adds a private child property. </para>        </briefdescription>
        <detaileddescription>
<para>If you use this instead of <ref refid="classwx_property_grid_interface_1aed2f5e12acc0bc460c2295ac1564b735" kindref="member">wxPropertyGridInterface::Insert()</ref> or <ref refid="classwx_property_grid_interface_1a7ae5812ea47c050f981aec0b8ccbe83e" kindref="member">wxPropertyGridInterface::AppendIn()</ref>, then property&apos;s parental type will automatically be set up to wxPG_PROP_AGGREGATE. In other words, all properties of this property will become private. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1141"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a0202ce34acdf8114a55b1180ecffeeda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::AdaptListToValue</definition>
        <argsstring>(wxVariant &amp;list, wxVariant *value) const </argsstring>
        <name>AdaptListToValue</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Adapts list variant into proper value using consecutive <ref refid="classwx_p_g_property_1ac3d79ee3ebbbff20c36627d92ea926e1" kindref="member">ChildChanged()</ref> calls. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1147"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a77549498512cfa99b3b3e2c4317d5b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty* wxPGProperty::AppendChild</definition>
        <argsstring>(wxPGProperty *childProperty)</argsstring>
        <name>AppendChild</name>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>childProperty</declname>
        </param>
        <briefdescription>
<para>Use this member function to add independent (ie. </para>        </briefdescription>
        <detaileddescription>
<para>regular) children to a property.</para><para><simplesect kind="return"><para>Appended childProperty.</para></simplesect>
<simplesect kind="remark"><para><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> is not automatically refreshed by this function.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_p_g_property_1a572697e79fd8785f3477cc7f8d72f5d5" kindref="member">InsertChild()</ref>, <ref refid="classwx_p_g_property_1abec97e799f836560d4f65c7c5fc97f6f" kindref="member">AddPrivateChild()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1160"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a4f8871590e381ee0d63efc72ed76bba9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::AreAllChildrenSpecified</definition>
        <argsstring>(wxVariant *pendingList=NULL) const </argsstring>
        <name>AreAllChildrenSpecified</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> *</type>
          <declname>pendingList</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Determines, recursively, if all children are not unspecified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pendingList</parametername>
</parameternamelist>
<parameterdescription>
<para>Assumes members in this <ref refid="classwx_variant" kindref="compound">wxVariant</ref> list as pending replacement values. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1169"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a1a4ff5d3a02a006dc27e33af02d093a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::AreChildrenComponents</definition>
        <argsstring>() const </argsstring>
        <name>AreChildrenComponents</name>
        <briefdescription>
<para>Returns true if children of this property are component values (for instance, points size, face name, and is_underlined are component values of a font). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1175"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a8cebe6f162709ab46c878f9c4e7b53a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::ChangeFlag</definition>
        <argsstring>(wxPGPropertyFlags flag, bool set)</argsstring>
        <name>ChangeFlag</name>
        <param>
          <type><ref refid="property_8h_1a2aac85b6d4e1018849f0026b62f1b751" kindref="member">wxPGPropertyFlags</ref></type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Sets or clears given property flag. </para>        </briefdescription>
        <detaileddescription>
<para>Mainly for internal use.</para><para><simplesect kind="remark"><para>Setting a property flag never has any side-effect, and is intended almost exclusively for internal use. So, for example, if you want to disable a property, call Enable(false) instead of setting wxPG_PROP_DISABLED flag.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_p_g_property_1a3cf53ef7dff19595ab4b62bb3af738bd" kindref="member">HasFlag()</ref>, <ref refid="classwx_p_g_property_1a20532654013f84d21774f939c4283546" kindref="member">GetFlags()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1187"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aa8d29e4896c228f93d14fe2420c99f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::DeleteChildren</definition>
        <argsstring>()</argsstring>
        <name>DeleteChildren</name>
        <briefdescription>
<para>Deletes children of the property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1192"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a137f1b7ea16f1f18fcc3e50ec107da1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::DeleteChoice</definition>
        <argsstring>(int index)</argsstring>
        <name>DeleteChoice</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Removes entry from property&apos;s <ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> and editor control (if it is active). </para>        </briefdescription>
        <detaileddescription>
<para>If selected item is deleted, then the value is set to unspecified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1199"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aa024322106dfb1300ed68919c27dd1e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::Enable</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>Enable</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enables or disables the property. </para>        </briefdescription>
        <detaileddescription>
<para>Disabled property usually appears as having grey text.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>If false, property is disabled instead.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_property_grid_interface_1ab46cadeb40c717d902daef74005431bf" kindref="member">wxPropertyGridInterface::EnableProperty()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1210"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a5f266fcee82f96b626914e1876078135" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxPGProperty::GenerateComposedValue</definition>
        <argsstring>() const </argsstring>
        <name>GenerateComposedValue</name>
        <briefdescription>
<para>Composes text from values of child properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1215"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aef37546c4f5bf61e20f67a28df9e7093" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>wxVariant wxPGProperty::GetAttribute</definition>
        <argsstring>(const wxString &amp;name) const </argsstring>
        <name>GetAttribute</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns property attribute value, null variant if not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1220"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aca7fc7738d8ed57e13e2cee6adc6d7d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxPGProperty::GetAttribute</definition>
        <argsstring>(const wxString &amp;name, const wxString &amp;defVal) const </argsstring>
        <name>GetAttribute</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>defVal</declname>
        </param>
        <briefdescription>
<para>Returns named attribute, as string, if found. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise defVal is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1224"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a5084cee03676645c40dc8c5dcb9ef802" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxPGProperty::GetAttributeAsLong</definition>
        <argsstring>(const wxString &amp;name, long defVal) const </argsstring>
        <name>GetAttributeAsLong</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>long</type>
          <declname>defVal</declname>
        </param>
        <briefdescription>
<para>Returns named attribute, as long, if found. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise defVal is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1228"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1afb2c6fd9dc99d6a56d45eda1cdc1db79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxPGProperty::GetAttributeAsDouble</definition>
        <argsstring>(const wxString &amp;name, double defVal) const </argsstring>
        <name>GetAttributeAsDouble</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defVal</declname>
        </param>
        <briefdescription>
<para>Returns named attribute, as double, if found. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise defVal is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1232"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ac5e17dd4ace122b9ba8e007538ba7a02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>wxVariant wxPGProperty::GetAttributesAsList</definition>
        <argsstring>() const </argsstring>
        <name>GetAttributesAsList</name>
        <briefdescription>
<para>Returns attributes as list <ref refid="classwx_variant" kindref="compound">wxVariant</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1237"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a7e360285dcfa6fc18c6bc8a88e261baf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> *</type>
        <definition>const wxPGEditor* wxPGProperty::GetColumnEditor</definition>
        <argsstring>(int column) const </argsstring>
        <name>GetColumnEditor</name>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Returns editor used for given column. </para>        </briefdescription>
        <detaileddescription>
<para>NULL for no editor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1242"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1adc211e2a17cfaab3a1c7d4b6fd8788b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString&amp; wxPGProperty::GetBaseName</definition>
        <argsstring>() const </argsstring>
        <name>GetBaseName</name>
        <briefdescription>
<para>Returns property&apos;s base name (ie. </para>        </briefdescription>
        <detaileddescription>
<para>parent&apos;s name is not added in any case) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1245"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1af2f256f0d3eda31b18548eaf3c5e992d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_p_g_cell" kindref="compound">wxPGCell</ref> &amp;</type>
        <definition>const wxPGCell&amp; wxPGProperty::GetCell</definition>
        <argsstring>(unsigned int column) const </argsstring>
        <name>GetCell</name>
        <param>
          <type>unsigned int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="classwx_p_g_cell" kindref="compound">wxPGCell</ref> of given column. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>const version of this member function returns &apos;default&apos; <ref refid="classwx_p_g_cell" kindref="compound">wxPGCell</ref> object if the property itself didn&apos;t hold cell data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1254"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aca895baa1adfa0536d1b623595ad198b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_cell" kindref="compound">wxPGCell</ref> &amp;</type>
        <definition>wxPGCell&amp; wxPGProperty::GetCell</definition>
        <argsstring>(unsigned int column)</argsstring>
        <name>GetCell</name>
        <param>
          <type>unsigned int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="classwx_p_g_cell" kindref="compound">wxPGCell</ref> of given column, creating one if necessary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1259"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a5c3624606ec872e85fcba2e9d411475c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_cell" kindref="compound">wxPGCell</ref> &amp;</type>
        <definition>wxPGCell&amp; wxPGProperty::GetOrCreateCell</definition>
        <argsstring>(unsigned int column)</argsstring>
        <name>GetOrCreateCell</name>
        <param>
          <type>unsigned int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="classwx_p_g_cell" kindref="compound">wxPGCell</ref> of given column, creating one if necessary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1264"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aaa1e0364c2a3d0bd34d989634a828fcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int wxPGProperty::GetChildCount</definition>
        <argsstring>() const </argsstring>
        <name>GetChildCount</name>
        <briefdescription>
<para>Returns number of child properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1269"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a6aedf98d88f968610f6adef45d391e80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxPGProperty::GetChildrenHeight</definition>
        <argsstring>(int lh, int iMax=-1) const </argsstring>
        <name>GetChildrenHeight</name>
        <param>
          <type>int</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iMax</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Returns height of children, recursively, and by taking expanded/collapsed status into account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lh</parametername>
</parameternamelist>
<parameterdescription>
<para>Line height. Pass result of <ref refid="classwx_p_g_property_1a921b49bc576e83b6cb900ade60f3787a" kindref="member">GetGrid()</ref>-&gt;GetRowHeight() here.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iMax</parametername>
</parameternamelist>
<parameterdescription>
<para>Only used (internally) when finding property y-positions. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1281"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a5659f9cc520b7093b64a10d5ceda04d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> &amp;</type>
        <definition>const wxPGChoices&amp; wxPGProperty::GetChoices</definition>
        <argsstring>() const </argsstring>
        <name>GetChoices</name>
        <briefdescription>
<para>Returns read-only reference to property&apos;s list of choices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1286"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1acb1585da22f65d15e7015b66ca3a455c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* wxPGProperty::GetClientData</definition>
        <argsstring>() const </argsstring>
        <name>GetClientData</name>
        <briefdescription>
<para>Returns client data (void*) of a property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1291"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ac9b089203d786e268b73ec77f0a42504" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_client_data" kindref="compound">wxClientData</ref> *</type>
        <definition>wxClientData* wxPGProperty::GetClientObject</definition>
        <argsstring>() const </argsstring>
        <name>GetClientObject</name>
        <briefdescription>
<para>Sets managed client object of a property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1295"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aab8de8a18aa6817ac262d37a1c18e591" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>wxVariant wxPGProperty::GetDefaultValue</definition>
        <argsstring>() const </argsstring>
        <name>GetDefaultValue</name>
        <briefdescription>
<para>Returns property&apos;s default value. </para>        </briefdescription>
        <detaileddescription>
<para>If property&apos;s value type is not a built-in one, and &quot;DefaultValue&quot; attribute is not defined, then this function usually returns Null variant. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1302"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1afc4727eecd9a28a4f7a5361dbc1e5e76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxPGProperty::GetDisplayedString</definition>
        <argsstring>() const </argsstring>
        <name>GetDisplayedString</name>
        <briefdescription>
<para>Returns property&apos;s displayed text. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1306"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a2f15b192dc294f8a66f2584d8bf0974f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> *</type>
        <definition>const wxPGEditor* wxPGProperty::GetEditorClass</definition>
        <argsstring>() const </argsstring>
        <name>GetEditorClass</name>
        <briefdescription>
<para>Returns <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> that will be used and created when property becomes selected. </para>        </briefdescription>
        <detaileddescription>
<para>Returns more accurate value than <ref refid="classwx_p_g_property_1a2a890026b842c51658e8c358e137722d" kindref="member">DoGetEditorClass()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1313"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a20532654013f84d21774f939c4283546" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property_1a68b0ae8aab37c387f5fc4b7e9c53968e" kindref="member">FlagType</ref></type>
        <definition>FlagType wxPGProperty::GetFlags</definition>
        <argsstring>() const </argsstring>
        <name>GetFlags</name>
        <briefdescription>
<para>Returns property flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1318"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a921b49bc576e83b6cb900ade60f3787a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> *</type>
        <definition>wxPropertyGrid* wxPGProperty::GetGrid</definition>
        <argsstring>() const </argsstring>
        <name>GetGrid</name>
        <briefdescription>
<para>Returns property grid where property lies. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1321"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ab116666b230d5d98e8fcb7619eea162c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> *</type>
        <definition>wxPropertyGrid* wxPGProperty::GetGridIfDisplayed</definition>
        <argsstring>() const </argsstring>
        <name>GetGridIfDisplayed</name>
        <briefdescription>
<para>Returns owner <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref>, but only if one is currently on a page displaying this property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1327"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a83843454085c699c2d886671c3460b5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString&amp; wxPGProperty::GetHelpString</definition>
        <argsstring>() const </argsstring>
        <name>GetHelpString</name>
        <briefdescription>
<para>Returns property&apos;s help or description text. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_p_g_property_1a839af036b24fc35696f0ef3cb2b0670a" kindref="member">SetHelpString()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1334"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aef71581ec3dcd1e17457457def9f9d24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int wxPGProperty::GetIndexInParent</definition>
        <argsstring>() const </argsstring>
        <name>GetIndexInParent</name>
        <briefdescription>
<para>Returns position in parent&apos;s array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1339"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a7610de7df326219f954133b2460f7bd9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString&amp; wxPGProperty::GetLabel</definition>
        <argsstring>() const </argsstring>
        <name>GetLabel</name>
        <briefdescription>
<para>Returns property&apos;s label. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1342"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aef439150fcdfcc32bebedb278aea9806" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>const wxPGProperty* wxPGProperty::GetLastVisibleSubItem</definition>
        <argsstring>() const </argsstring>
        <name>GetLastVisibleSubItem</name>
        <briefdescription>
<para>Returns last visible child property, recursively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1347"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a50aa7238a183862723e1505d5cffc341" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty* wxPGProperty::GetMainParent</definition>
        <argsstring>() const </argsstring>
        <name>GetMainParent</name>
        <briefdescription>
<para>Returns highest level non-category, non-root parent. </para>        </briefdescription>
        <detaileddescription>
<para>Useful when you have nested properties with children.</para><para><simplesect kind="remark"><para>If immediate parent is root or category, this will return the property itself. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1356"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a78a3bf23304ec8a483c75fac5002986e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxPGProperty::GetMaxLength</definition>
        <argsstring>() const </argsstring>
        <name>GetMaxLength</name>
        <briefdescription>
<para>Returns maximum allowed length of property&apos;s text value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1360"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a38b7e68b49282ac71d6e4cea7643aea1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxPGProperty::GetName</definition>
        <argsstring>() const </argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns property&apos;s name with all (non-category, non-root) parents. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1363"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a88aa40a48c253824dcc296bcf1ff9f89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty* wxPGProperty::GetParent</definition>
        <argsstring>() const </argsstring>
        <name>GetParent</name>
        <briefdescription>
<para>Return parent of property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1366"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ac19bf570e71050edb3b100a3bdb68734" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty* wxPGProperty::GetPropertyByName</definition>
        <argsstring>(const wxString &amp;name) const </argsstring>
        <name>GetPropertyByName</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns (direct) child property with given name (or NULL if not found). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1371"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a79cb24032f2aaee16a260ca560957a6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_validator" kindref="compound">wxValidator</ref> *</type>
        <definition>wxValidator* wxPGProperty::GetValidator</definition>
        <argsstring>() const </argsstring>
        <name>GetValidator</name>
        <briefdescription>
<para>Gets assignable version of property&apos;s validator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1374"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a76fdd0b4782957b18aca2e8b8e170a0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
        <definition>wxVariant wxPGProperty::GetValue</definition>
        <argsstring>() const </argsstring>
        <name>GetValue</name>
        <briefdescription>
<para>Returns property&apos;s value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1379"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a2565aba121d1df376d7ba7c16fbc0553" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> *</type>
        <definition>wxBitmap* wxPGProperty::GetValueImage</definition>
        <argsstring>() const </argsstring>
        <name>GetValueImage</name>
        <briefdescription>
<para>Returns bitmap that appears next to value text. </para>        </briefdescription>
        <detaileddescription>
<para>Only returns non-NULL bitmap if one was set with <ref refid="classwx_p_g_property_1a5c5be1292d329945b0a24e33db485207" kindref="member">SetValueImage()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1385"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a29f70a60e4844efbebc140270e1a4358" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxPGProperty::GetValueAsString</definition>
        <argsstring>(int argFlags=0) const </argsstring>
        <name>GetValueAsString</name>
        <param>
          <type>int</type>
          <declname>argFlags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns text representation of property&apos;s value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>If 0 (default value), then displayed string is returned. If wxPG_FULL_VALUE is set, returns complete, storable string value instead of displayable. If wxPG_EDITABLE_VALUE is set, returns string value that must be editable in textctrl. If wxPG_COMPOSITE_FRAGMENT is set, returns text that is appropriate to display as a part of string property&apos;s composite text representation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>In older versions, this function used to be overridden to convert property&apos;s value into a string representation. This function is now handled by <ref refid="classwx_p_g_property_1a7bef52444b2c03a4f10eef54ef9e9739" kindref="member">ValueToString()</ref>, and overriding this function now will result in run-time assertion failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1403"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a0db56c7df1153eacebc53e428f22f322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxPGProperty::wxDEPRECATED</definition>
        <argsstring>(wxString GetValueString(int argFlags=0) const )</argsstring>
        <name>wxDEPRECATED</name>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> GetValueString(int argFlags=0)</type>
          <declname>const</declname>
        </param>
        <briefdescription>
<para>Synonymous to <ref refid="classwx_p_g_property_1a29f70a60e4844efbebc140270e1a4358" kindref="member">GetValueAsString()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000046"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="classwx_p_g_property_1a29f70a60e4844efbebc140270e1a4358" kindref="member">GetValueAsString()</ref> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><ref refid="classwx_p_g_property_1a29f70a60e4844efbebc140270e1a4358" kindref="member">GetValueAsString()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1411"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a729634b1a2f7574e4f98f48bcfe5b937" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxPGProperty::GetValueType</definition>
        <argsstring>() const </argsstring>
        <name>GetValueType</name>
        <briefdescription>
<para>Returns value type used by this property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1416"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aa36f8e8d6f0e48c9bbb105905220605f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxPGProperty::GetY</definition>
        <argsstring>() const </argsstring>
        <name>GetY</name>
        <briefdescription>
<para>Returns coordinate to the top y of the property. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the position of scrollbars is not taken into account. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1422"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a3cf53ef7dff19595ab4b62bb3af738bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property_1a68b0ae8aab37c387f5fc4b7e9c53968e" kindref="member">FlagType</ref></type>
        <definition>FlagType wxPGProperty::HasFlag</definition>
        <argsstring>(wxPGPropertyFlags flag) const </argsstring>
        <name>HasFlag</name>
        <param>
          <type><ref refid="property_8h_1a2aac85b6d4e1018849f0026b62f1b751" kindref="member">wxPGPropertyFlags</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Returns non-zero if property has given flag set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>propgrid_propflags </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1429"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a58d3125c3b7eebef540363d5720eafa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::HasVisibleChildren</definition>
        <argsstring>() const </argsstring>
        <name>HasVisibleChildren</name>
        <briefdescription>
<para>Returns true if property has even one visible child. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1434"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ad1bd50c81626773176c5d951d0e34c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::Hide</definition>
        <argsstring>(bool hide, int flags=wxPG_RECURSE)</argsstring>
        <name>Hide</name>
        <param>
          <type>bool</type>
          <declname>hide</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>wxPG_RECURSE</defval>
        </param>
        <briefdescription>
<para>Hides or reveals the property. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hide</parametername>
</parameternamelist>
<parameterdescription>
<para>true for hide, false for reveal.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>By default changes are applied recursively. Set this parameter wxPG_DONT_RECURSE to prevent this. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1445"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a83f63b596fd2a2a677d8096485f0299e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxPGProperty::Index</definition>
        <argsstring>(const wxPGProperty *p) const </argsstring>
        <name>Index</name>
        <param>
          <type>const <ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns index of given child property. </para>        </briefdescription>
        <detaileddescription>
<para>wxNOT_FOUND if given property is not child of this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1451"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a572697e79fd8785f3477cc7f8d72f5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty* wxPGProperty::InsertChild</definition>
        <argsstring>(int index, wxPGProperty *childProperty)</argsstring>
        <name>InsertChild</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>childProperty</declname>
        </param>
        <briefdescription>
<para>Use this member function to add independent (ie. </para>        </briefdescription>
        <detaileddescription>
<para>regular) children to a property.</para><para><simplesect kind="return"><para>Inserted childProperty.</para></simplesect>
<simplesect kind="remark"><para><ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> is not automatically refreshed by this function.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_p_g_property_1a77549498512cfa99b3b3e2c4317d5b70" kindref="member">AppendChild()</ref>, <ref refid="classwx_p_g_property_1abec97e799f836560d4f65c7c5fc97f6f" kindref="member">AddPrivateChild()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1464"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ae9f9995783eeaf5320cb0c71482cbbc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxPGProperty::InsertChoice</definition>
        <argsstring>(const wxString &amp;label, int index, int value=wxPG_INVALID_VALUE)</argsstring>
        <name>InsertChoice</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
          <defval>wxPG_INVALID_VALUE</defval>
        </param>
        <briefdescription>
<para>Inserts a new choice to property&apos;s list of choices. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Text for new choice</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Insertion position. Use wxNOT_FOUND to append.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for new choice. Do not specify if you wish this to equal choice index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1479"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aaf32ea058af511067b6f496dd55072eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::IsCategory</definition>
        <argsstring>() const </argsstring>
        <name>IsCategory</name>
        <briefdescription>
<para>Returns true if this property is actually a wxPropertyCategory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1484"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1afbcf920da6022bfdbc6050aea3ded3be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::IsEnabled</definition>
        <argsstring>() const </argsstring>
        <name>IsEnabled</name>
        <briefdescription>
<para>Returns true if property is enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1489"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ad49b8eb1fcd8b275ce20b2f18be05755" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::IsExpanded</definition>
        <argsstring>() const </argsstring>
        <name>IsExpanded</name>
        <briefdescription>
<para>Returns true if property has visible children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1494"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aa9313d6d246d9cd3643a6bb34808c695" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::IsRoot</definition>
        <argsstring>() const </argsstring>
        <name>IsRoot</name>
        <briefdescription>
<para>Returns true if this property is actually a wxRootProperty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1499"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ab1ca1b66276badfc8e7c32b458181786" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::IsSomeParent</definition>
        <argsstring>(wxPGProperty *candidateParent) const </argsstring>
        <name>IsSomeParent</name>
        <param>
          <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
          <declname>candidateParent</declname>
        </param>
        <briefdescription>
<para>Returns true if candidateParent is some parent of this property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1504"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aa5a9ebcac6c954178f97a4c100bb3ac0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::IsTextEditable</definition>
        <argsstring>() const </argsstring>
        <name>IsTextEditable</name>
        <briefdescription>
<para>Returns true if property has editable <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> when selected. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Although disabled properties do not displayed editor, they still return true here as being disabled is considered a temporary condition (unlike being read-only or having limited editing enabled). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1513"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a785c3679e91f5b878bcbaec31aa1bccc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::IsValueUnspecified</definition>
        <argsstring>() const </argsstring>
        <name>IsValueUnspecified</name>
        <briefdescription>
<para>Returns true if property&apos;s value is considered unspecified. </para>        </briefdescription>
        <detaileddescription>
<para>This usually means that value is Null variant. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1519"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a8050a0de4f8625d544851fbcacb1961c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::IsVisible</definition>
        <argsstring>() const </argsstring>
        <name>IsVisible</name>
        <briefdescription>
<para>Returns true if all parents expanded. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1524"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1af2f7f8a157295b8d56138f59573a8254" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty* wxPGProperty::Item</definition>
        <argsstring>(unsigned int i) const </argsstring>
        <name>Item</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns child property at index i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1529"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1af154d4b9d070c594a75164a5482d6888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::RefreshEditor</definition>
        <argsstring>()</argsstring>
        <name>RefreshEditor</name>
        <briefdescription>
<para>If property&apos;s editor is active, then update it&apos;s value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1534"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a418c1539969b7a0a9378a3411a5680a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetAttribute</definition>
        <argsstring>(const wxString &amp;name, wxVariant value)</argsstring>
        <name>SetAttribute</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets an attribute for this property. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Text identifier of attribute. See <ref refid="property_8h_1propgrid_property_attributes" kindref="member">wxPropertyGrid Property Attribute Identifiers</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of attribute.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Setting attribute&apos;s value to Null variant will simply remove it from property&apos;s set of attributes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1548"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a126a59cc86786f51cc72469bc2143b4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetAutoUnspecified</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>SetAutoUnspecified</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set if user can change the property&apos;s value to unspecified by modifying the value of the editor control (usually by clearing it). </para>        </briefdescription>
        <detaileddescription>
<para>Currently, this can work with following properties: wxIntProperty, wxUIntProperty, wxFloatProperty, wxEditEnumProperty.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to enable or disable this behaviour (it is disabled by default). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1560"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a5a3851a607cf1f73f34caeaba24374be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetBackgroundColour</definition>
        <argsstring>(const wxColour &amp;colour, int flags=wxPG_RECURSE)</argsstring>
        <name>SetBackgroundColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>wxPG_RECURSE</defval>
        </param>
        <briefdescription>
<para>Sets property&apos;s background colour. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>Background colour to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Default is wxPG_RECURSE which causes colour to be set recursively. Omit this flag to only set colour for the property in question and not any of its children. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1574"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a2cd2e6f0b30a1ab789f9ea8b58226260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetEditor</definition>
        <argsstring>(const wxPGEditor *editor)</argsstring>
        <name>SetEditor</name>
        <param>
          <type>const <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> *</type>
          <declname>editor</declname>
        </param>
        <briefdescription>
<para>Sets editor for a property. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>editor</parametername>
</parameternamelist>
<parameterdescription>
<para>For builtin editors, use wxPGEditor_X, where X is builtin editor&apos;s name (TextCtrl, Choice, etc. see <ref refid="classwx_p_g_editor" kindref="compound">wxPGEditor</ref> documentation for full list).</para></parameterdescription>
</parameteritem>
</parameterlist>
For custom editors, use pointer you received from <ref refid="classwx_property_grid_1adb8c3d0d29d1c051a8a9ece93d40f6b7" kindref="member">wxPropertyGrid::RegisterEditorClass()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1585"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a90294ea6cae6cf504d032b46787bb6e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetEditor</definition>
        <argsstring>(const wxString &amp;editorName)</argsstring>
        <name>SetEditor</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>editorName</declname>
        </param>
        <briefdescription>
<para>Sets editor for a property, by editor name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1590"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a0ec5afcf091d8100142887f459d3dd52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetCell</definition>
        <argsstring>(int column, const wxPGCell &amp;cell)</argsstring>
        <name>SetCell</name>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_p_g_cell" kindref="compound">wxPGCell</ref> &amp;</type>
          <declname>cell</declname>
        </param>
        <briefdescription>
<para>Sets cell information for given column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1595"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a7275467270d2c7ac3f847f4d1b6a1194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::SetChoices</definition>
        <argsstring>(wxPGChoices &amp;choices)</argsstring>
        <name>SetChoices</name>
        <param>
          <type><ref refid="classwx_p_g_choices" kindref="compound">wxPGChoices</ref> &amp;</type>
          <declname>choices</declname>
        </param>
        <briefdescription>
<para>Sets new set of choices for the property. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This operation deselects the property and clears its value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1603"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aa27f45f58bbcd53802e6644db33aec83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetClientData</definition>
        <argsstring>(void *clientData)</argsstring>
        <name>SetClientData</name>
        <param>
          <type>void *</type>
          <declname>clientData</declname>
        </param>
        <briefdescription>
<para>Sets client data (void*) of a property. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This untyped client data has to be deleted manually. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1610"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ab35b3529f2b6afbc1ec02d2bbb187709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetClientObject</definition>
        <argsstring>(wxClientData *clientObject)</argsstring>
        <name>SetClientObject</name>
        <param>
          <type><ref refid="classwx_client_data" kindref="compound">wxClientData</ref> *</type>
          <declname>clientObject</declname>
        </param>
        <briefdescription>
<para>Returns client object of a property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1614"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a4244276bf942fd52e1dd182535e7ba5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetChoiceSelection</definition>
        <argsstring>(int newValue)</argsstring>
        <name>SetChoiceSelection</name>
        <param>
          <type>int</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
<para>Sets selected choice and changes property value. </para>        </briefdescription>
        <detaileddescription>
<para>Tries to retain value type, although currently if it is not string, then it is forced to integer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1622"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a7722a2c503051fd6ef1477a9c0c081a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetDefaultValue</definition>
        <argsstring>(wxVariant &amp;value)</argsstring>
        <name>SetDefaultValue</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set default value of a property. </para>        </briefdescription>
        <detaileddescription>
<para>Synonymous to</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_p_g_property_1a418c1539969b7a0a9378a3411a5680a6" kindref="member" tooltip="Sets an attribute for this property.">SetAttribute</ref>(</highlight><highlight class="stringliteral">&quot;DefaultValue&quot;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1630"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a02dd250ff0cfe074a8de9f8cd8643880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetFlagRecursively</definition>
        <argsstring>(wxPGPropertyFlags flag, bool set)</argsstring>
        <name>SetFlagRecursively</name>
        <param>
          <type><ref refid="property_8h_1a2aac85b6d4e1018849f0026b62f1b751" kindref="member">wxPGPropertyFlags</ref></type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Sets or clears given property flag, recursively. </para>        </briefdescription>
        <detaileddescription>
<para>This function is primarily intended for internal use.</para><para><simplesect kind="see"><para><ref refid="classwx_p_g_property_1a8cebe6f162709ab46c878f9c4e7b53a4" kindref="member">ChangeFlag()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1638"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a839af036b24fc35696f0ef3cb2b0670a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetHelpString</definition>
        <argsstring>(const wxString &amp;helpString)</argsstring>
        <name>SetHelpString</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>helpString</declname>
        </param>
        <briefdescription>
<para>Sets property&apos;s help string, which is shown, for example, in wxPropertyGridManager&apos;s description text box. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1644"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a5acdc1db23a6e219de6619bc54e1a2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetLabel</definition>
        <argsstring>(const wxString &amp;label)</argsstring>
        <name>SetLabel</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Sets property&apos;s label. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Properties under same parent may have same labels. However, property names must still remain unique. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1652"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aa74671893440ce2a0f2a0e47ba897ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::SetMaxLength</definition>
        <argsstring>(int maxLen)</argsstring>
        <name>SetMaxLength</name>
        <param>
          <type>int</type>
          <declname>maxLen</declname>
        </param>
        <briefdescription>
<para>Set max length of text in text editor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1657"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a43f07192741d219d50e94b2d54e93847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetModifiedStatus</definition>
        <argsstring>(bool modified)</argsstring>
        <name>SetModifiedStatus</name>
        <param>
          <type>bool</type>
          <declname>modified</declname>
        </param>
        <briefdescription>
<para>Sets property&apos;s &quot;is it modified?&quot; flag. </para>        </briefdescription>
        <detaileddescription>
<para>Affects children recursively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1662"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a79f28d83cf79c6bb87337183fb8c56f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetName</definition>
        <argsstring>(const wxString &amp;newName)</argsstring>
        <name>SetName</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
<para>Sets new (base) name for property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1667"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1af7e9a4c245025e118373a3c876c7904d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetParentalType</definition>
        <argsstring>(int flag)</argsstring>
        <name>SetParentalType</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Changes what sort of parent this property is for its children. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Use one of the following values: wxPG_PROP_MISC_PARENT (for generic parents), wxPG_PROP_CATEGORY (for categories), or wxPG_PROP_AGGREGATE (for derived property classes with private children).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>You generally do not need to call this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1680"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a8d34f624ad2f38300741c3caa0929629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetTextColour</definition>
        <argsstring>(const wxColour &amp;colour, int flags=wxPG_RECURSE)</argsstring>
        <name>SetTextColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>wxPG_RECURSE</defval>
        </param>
        <briefdescription>
<para>Sets property&apos;s text colour. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>Text colour to use.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Default is wxPG_RECURSE which causes colour to be set recursively. Omit this flag to only set colour for the property in question and not any of its children. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1694"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a9eb7d1f243c6fb993b3563c241b2ef4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetValidator</definition>
        <argsstring>(const wxValidator &amp;validator)</argsstring>
        <name>SetValidator</name>
        <param>
          <type>const <ref refid="classwx_validator" kindref="compound">wxValidator</ref> &amp;</type>
          <declname>validator</declname>
        </param>
        <briefdescription>
<para>Sets <ref refid="classwx_validator" kindref="compound">wxValidator</ref> for a property. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1697"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1aa8e771a01a93fe94f87a449f430afa79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetValue</definition>
        <argsstring>(wxVariant value, wxVariant *pList=NULL, int flags=wxPG_SETVAL_REFRESH_EDITOR)</argsstring>
        <name>SetValue</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref> *</type>
          <declname>pList</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>wxPG_SETVAL_REFRESH_EDITOR</defval>
        </param>
        <briefdescription>
<para>Call this to set value of the property. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike methods in <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref>, this does not automatically update the display.</para><para><simplesect kind="remark"><para>Use <ref refid="classwx_property_grid_1a6958b5c1a1f71512afaf6f2c07c1becd" kindref="member">wxPropertyGrid::ChangePropertyValue()</ref> instead if you need to run through validation process and send property change event.</para></simplesect>
If you need to change property value in event, based on user input, use <ref refid="classwx_p_g_property_1ade9385b0bc3c9ba4833b271157e87354" kindref="member">SetValueInEvent()</ref> instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pList</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to list variant that contains child values. Used to indicate which children should be marked as modified. Usually you just use NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>wxPG_SETVAL_REFRESH_EDITOR is set by default, to refresh editor and redraw properties. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1720"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a5c5be1292d329945b0a24e33db485207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetValueImage</definition>
        <argsstring>(wxBitmap &amp;bmp)</argsstring>
        <name>SetValueImage</name>
        <param>
          <type><ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> &amp;</type>
          <declname>bmp</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> in front of the value. </para>        </briefdescription>
        <detaileddescription>
<para>This bitmap may be ignored by custom cell renderers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1726"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1ade9385b0bc3c9ba4833b271157e87354" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetValueInEvent</definition>
        <argsstring>(wxVariant value) const </argsstring>
        <name>SetValueInEvent</name>
        <param>
          <type><ref refid="classwx_variant" kindref="compound">wxVariant</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Call this function in <ref refid="classwx_p_g_property_1a16fbe26240bf47ab0a9a02d21781da73" kindref="member">OnEvent()</ref>, OnButtonClick() etc. </para>        </briefdescription>
        <detaileddescription>
<para>to change the property value based on user input.</para><para><simplesect kind="remark"><para>This method is const since it doesn&apos;t actually modify value, but posts given variant as pending value, stored in <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1735"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a4e55506bbc49f0b7d447df71a00f2df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetValueToUnspecified</definition>
        <argsstring>()</argsstring>
        <name>SetValueToUnspecified</name>
        <briefdescription>
<para>Sets property&apos;s value to unspecified (ie. </para>        </briefdescription>
        <detaileddescription>
<para>Null variant). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1740"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a46da7a139ba90c3852710f181280667d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::SetWasModified</definition>
        <argsstring>(bool set=true)</argsstring>
        <name>SetWasModified</name>
        <param>
          <type>bool</type>
          <declname>set</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Call with false in <ref refid="classwx_p_g_property_1ae5c4f47d3ff609d19346b994a9a25acb" kindref="member">OnSetValue()</ref> to cancel value changes after all (ie. </para>        </briefdescription>
        <detaileddescription>
<para>cancel true returned by <ref refid="classwx_p_g_property_1a974a9b01c1f88cf4db630b6895453db8" kindref="member">StringToValue()</ref> or <ref refid="classwx_p_g_property_1a571ac2cc435cffa9a2d2377f3430f19d" kindref="member">IntToValue()</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1746"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a7b2f517388b0f0038354d5fd9f0bab43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> *</type>
        <definition>wxPGProperty* wxPGProperty::UpdateParentValues</definition>
        <argsstring>()</argsstring>
        <name>UpdateParentValues</name>
        <briefdescription>
<para>Updates composed values of parent non-category properties, recursively. </para>        </briefdescription>
        <detaileddescription>
<para>Returns topmost property updated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1752"/>
      </memberdef>
      <memberdef kind="function" id="classwx_p_g_property_1a9de64f67dc90b2aaad1f5e1a6d30e7e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPGProperty::UsesAutoUnspecified</definition>
        <argsstring>() const </argsstring>
        <name>UsesAutoUnspecified</name>
        <briefdescription>
<para>Returns true if containing grid uses wxPG_EX_AUTO_UNSPECIFIED_VALUES. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1757"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classwx_p_g_property_1abcd8337b04de4934c15b81e4470c5919" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxPGProperty::Empty</definition>
        <argsstring>()</argsstring>
        <name>Empty</name>
        <briefdescription>
<para>Deletes all child properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="1761"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> is base class for all <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> properties. </para>    </briefdescription>
    <detaileddescription>
<para>In sections below we cover few related topics.</para><para><itemizedlist>
<listitem><para><ref refid="classwx_p_g_property_1pgproperty_properties" kindref="member">Supplied Ready-to-use Property Classes</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1pgproperty_creating" kindref="member">Creating Custom Properties</ref></para></listitem>
</itemizedlist>
</para><sect1 id="classwx_p_g_property_1pgproperty_properties">
<title>Supplied Ready-to-use Property Classes</title>
<para>Here is a list and short description of supplied fully-functional property classes. They are located in either props.h or advprops.h.</para><para><itemizedlist>
<listitem><para><ref refid="classwx_p_g_property_1wxArrayStringProperty" kindref="member">wxArrayStringProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxBoolProperty" kindref="member">wxBoolProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxColourProperty" kindref="member">wxColourProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxCursorProperty" kindref="member">wxCursorProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxDateProperty" kindref="member">wxDateProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxDirProperty" kindref="member">wxDirProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxEditEnumProperty" kindref="member">wxEditEnumProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxEnumProperty" kindref="member">wxEnumProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxFileProperty" kindref="member">wxFileProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxFlagsProperty" kindref="member">wxFlagsProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxFloatProperty" kindref="member">wxFloatProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxFontProperty" kindref="member">wxFontProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxImageFileProperty" kindref="member">wxImageFileProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxIntProperty" kindref="member">wxIntProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxLongStringProperty" kindref="member">wxLongStringProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxMultiChoiceProperty" kindref="member">wxMultiChoiceProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxPropertyCategory" kindref="member">wxPropertyCategory</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxStringProperty" kindref="member">wxStringProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxSystemColourProperty" kindref="member">wxSystemColourProperty</ref> </para></listitem>
<listitem><para><ref refid="classwx_p_g_property_1wxUIntProperty" kindref="member">wxUIntProperty</ref></para></listitem>
</itemizedlist>
</para><sect2 id="classwx_p_g_property_1wxPropertyCategory">
<title>wxPropertyCategory</title>
<para>Not an actual property per se, but a header for a group of properties. Regardless inherits from <ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref>, and supports displaying &apos;labels&apos; for columns other than the first one. Easiest way to set category&apos;s label for second column is to call <ref refid="classwx_p_g_property_1aa8e771a01a93fe94f87a449f430afa79" kindref="member">wxPGProperty::SetValue()</ref> with string argument.</para></sect2>
<sect2 id="classwx_p_g_property_1wxStringProperty">
<title>wxStringProperty</title>
<para>Simple string property. wxPG_STRING_PASSWORD attribute may be used to echo value as asterisks and use wxTE_PASSWORD for <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref>. wxPG_ATTR_AUTOCOMPLETE attribute may be used to enable auto-completion (use a <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> value), and is also supported by any property that happens to use a wxTextCtrl-based editor.</para><para><simplesect kind="remark"><para>wxStringProperty has a special trait: if it has value of &quot;&lt;composed&gt;&quot;, and also has child properties, then its displayed value becomes composition of child property values, similar as with wxFontProperty, for instance.</para></simplesect>
</para></sect2>
<sect2 id="classwx_p_g_property_1wxIntProperty">
<title>wxIntProperty</title>
<para>Like wxStringProperty, but converts text to a signed long integer. wxIntProperty seamlessly supports 64-bit integers (ie. <ref refid="classwx_long_long" kindref="compound">wxLongLong</ref>). To safely convert variant to integer, use code like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_long_long" kindref="compound" tooltip="This class represents a signed 64 bit long number.">wxLongLong</ref><sp/>ll;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">-&gt;<ref refid="classwx_long_long_1a9b10c4f110db0e37b4fcf0250c246454" kindref="member" tooltip="Convert to native long long (only for compilers supporting it).">GetValue</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_long_long" kindref="compound" tooltip="This class represents a signed 64 bit long number.">wxLongLong</ref><sp/>ll<sp/>=<sp/>propertyGrid-&gt;GetPropertyValueAsLong(property);</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="classwx_p_g_property_1wxUIntProperty">
<title>wxUIntProperty</title>
<para>Like wxIntProperty, but displays value as unsigned int. To set the prefix used globally, manipulate wxPG_UINT_PREFIX string attribute. To set the globally used base, manipulate wxPG_UINT_BASE int attribute. Regardless of current prefix, understands (hex) values starting with both &quot;0x&quot; and &quot;$&quot;. Like wxIntProperty, wxUIntProperty seamlessly supports 64-bit unsigned integers (ie. <ref refid="classwx_u_long_long" kindref="compound">wxULongLong</ref>). Same <ref refid="classwx_variant" kindref="compound">wxVariant</ref> safety rules apply.</para></sect2>
<sect2 id="classwx_p_g_property_1wxFloatProperty">
<title>wxFloatProperty</title>
<para>Like wxStringProperty, but converts text to a double-precision floating point. Default float-to-text precision is 6 decimals, but this can be changed by modifying wxPG_FLOAT_PRECISION attribute.</para><para>Note that when displaying the value, sign is omitted if the resulting textual representation is effectively zero (for example, -0.0001 with precision of 3 will become 0.0 instead of -0.0). This behaviour is unlike what C standard library does, but should result in better end-user experience in almost all cases.</para></sect2>
<sect2 id="classwx_p_g_property_1wxBoolProperty">
<title>wxBoolProperty</title>
<para>Represents a boolean value. <ref refid="classwx_choice" kindref="compound">wxChoice</ref> is used as editor control, by the &lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine default. wxPG_BOOL_USE_CHECKBOX attribute can be set to true in order to use check box instead. ======= default. wxPG_BOOL_USE_CHECKBOX attribute can be set to true in order to use check box instead. &gt;&gt;&gt;&gt;&gt;&gt;&gt; .r67279</para></sect2>
<sect2 id="classwx_p_g_property_1wxLongStringProperty">
<title>wxLongStringProperty</title>
<para>Like wxStringProperty, but has a button that triggers a small text editor dialog. Note that in long string values, tabs are represented by &quot;\t&quot; and line break by &quot;\n&quot;.</para><para>To display custom dialog on button press, you can subclass wxLongStringProperty and implement OnButtonClick, like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OnButtonClick(<sp/><ref refid="classwx_property_grid" kindref="compound" tooltip="wxPropertyGrid is a specialized grid for editing properties - in other words name = value pairs...">wxPropertyGrid</ref>*<sp/>propGrid,<sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>&amp;<sp/>value<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_size" kindref="compound" tooltip="A wxSize is a useful data structure for graphics operations.">wxSize</ref><sp/>dialogSize(...size<sp/>of<sp/>your<sp/>dialog...);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_point" kindref="compound" tooltip="A wxPoint is a useful data structure for graphics operations.">wxPoint</ref><sp/>dlgPos<sp/>=<sp/>propGrid-&gt;GetGoodEditorDialogPosition(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dialogSize)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>dialog<sp/>dlg<sp/>at<sp/>dlgPos.<sp/>Use<sp/>value<sp/>as<sp/>initial<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dlg.ShowModal()<sp/>==<sp/><ref refid="defs_8h_1ac66d0a09761e7d86b2ac0b2e0c6a8cbbaeeb1bdf97306d7f0fdffb62c8af3d02f" kindref="member" tooltip="Standard button and menu IDs.">wxID_OK</ref><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>dlg.GetStringValue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Also, if you wish not to have line breaks and tabs translated to escape sequences, then do following in constructor of your subclass:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_flags<sp/>|=<sp/>wxPG_PROP_NO_ESCAPE;</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="classwx_p_g_property_1wxDirProperty">
<title>wxDirProperty</title>
<para>Like wxLongStringProperty, but the button triggers dir selector instead. Supported properties (all with string value): wxPG_DIR_DIALOG_MESSAGE.</para></sect2>
<sect2 id="classwx_p_g_property_1wxFileProperty">
<title>wxFileProperty</title>
<para>Like wxLongStringProperty, but the button triggers file selector instead. Default wildcard is &quot;All files...&quot; but this can be changed by setting wxPG_FILE_WILDCARD attribute (see <ref refid="classwx_file_dialog" kindref="compound">wxFileDialog</ref> for format details). Attribute wxPG_FILE_SHOW_FULL_PATH can be set to false in order to show only the filename, not the entire path.</para></sect2>
<sect2 id="classwx_p_g_property_1wxEnumProperty">
<title>wxEnumProperty</title>
<para>Represents a single selection from a list of choices - <ref refid="classwx_owner_drawn_combo_box" kindref="compound">wxOwnerDrawnComboBox</ref> is used to edit the value.</para></sect2>
<sect2 id="classwx_p_g_property_1wxFlagsProperty">
<title>wxFlagsProperty</title>
<para>Represents a bit set that fits in a long integer. wxBoolProperty sub- properties are created for editing individual bits. Textctrl is created to manually edit the flags as a text; a continuous sequence of spaces, commas and semicolons are considered as a flag id separator.</para><para><bold>Note:</bold> When changing &quot;choices&quot; (ie. flag labels) of wxFlagsProperty, you will need to use <ref refid="classwx_p_g_property_1a7275467270d2c7ac3f847f4d1b6a1194" kindref="member">wxPGProperty::SetChoices()</ref> - otherwise they will not get updated properly.</para><para>wxFlagsProperty supports the same attributes as wxBoolProperty.</para></sect2>
<sect2 id="classwx_p_g_property_1wxArrayStringProperty">
<title>wxArrayStringProperty</title>
<para>Allows editing of a list of strings in <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> and in a separate dialog. Supports &quot;Delimiter&quot; attribute, which defaults to comma (&apos;,&apos;).</para></sect2>
<sect2 id="classwx_p_g_property_1wxDateProperty">
<title>wxDateProperty</title>
<para><ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> property. Default editor is DatePickerCtrl, although TextCtrl should work as well. wxPG_DATE_FORMAT attribute can be used to change string <ref refid="classwx_date_time_1a32377f43a31e29ad4fe70f299650c5f8" kindref="member">wxDateTime::Format</ref> uses (although default is recommended as it is locale-dependent), and wxPG_DATE_PICKER_STYLE allows changing window style given to DatePickerCtrl (default is wxDP_DEFAULT|wxDP_SHOWCENTURY). Using wxDP_ALLOWNONE will enable better unspecified value support.</para></sect2>
<sect2 id="classwx_p_g_property_1wxEditEnumProperty">
<title>wxEditEnumProperty</title>
<para>Represents a string that can be freely edited or selected from list of choices - custom combobox control is used to edit the value.</para></sect2>
<sect2 id="classwx_p_g_property_1wxMultiChoiceProperty">
<title>wxMultiChoiceProperty</title>
<para>Allows editing a multiple selection from a list of strings. This is property is pretty much built around concept of <ref refid="classwx_multi_choice_dialog" kindref="compound">wxMultiChoiceDialog</ref>. It uses <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> value.</para></sect2>
<sect2 id="classwx_p_g_property_1wxImageFileProperty">
<title>wxImageFileProperty</title>
<para>Like wxFileProperty, but has thumbnail of the image in front of the filename and autogenerates wildcard from available image handlers.</para></sect2>
<sect2 id="classwx_p_g_property_1wxColourProperty">
<title>wxColourProperty</title>
<para><bold>Useful alternate editor:</bold> Choice.</para><para>Represents <ref refid="classwx_colour" kindref="compound">wxColour</ref>. <ref refid="classwx_button" kindref="compound">wxButton</ref> is used to trigger a colour picker dialog. There are various sub-classing opportunities with this class. See below in wxSystemColourProperty section for details.</para><para>Setting &quot;HasAlpha&quot; attribute to true for this property allows user to edit the alpha colour component.</para></sect2>
<sect2 id="classwx_p_g_property_1wxFontProperty">
<title>wxFontProperty</title>
<para>Represents <ref refid="classwx_font" kindref="compound">wxFont</ref>. Various sub-properties are used to edit individual subvalues.</para></sect2>
<sect2 id="classwx_p_g_property_1wxSystemColourProperty">
<title>wxSystemColourProperty</title>
<para>Represents <ref refid="classwx_colour" kindref="compound">wxColour</ref> and a system colour index. <ref refid="classwx_choice" kindref="compound">wxChoice</ref> is used to edit the value. Drop-down list has color images. Note that value type is wxColourPropertyValue instead of <ref refid="classwx_colour" kindref="compound">wxColour</ref> (which wxColourProperty uses).</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">wxColourPropertyValue<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classwx_object" kindref="compound" tooltip="This is the root class of many of the wxWidgets classes.">wxObject</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>An<sp/>integer<sp/>value<sp/>relating<sp/>to<sp/>the<sp/>colour,<sp/>and<sp/>which<sp/>exact</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>meaning<sp/>depends<sp/>on<sp/>the<sp/>property<sp/>with<sp/>which<sp/>it<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>For<sp/>wxSystemColourProperty:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Any<sp/>of<sp/>wxSYS_COLOUR_XXX,<sp/>or<sp/>any<sp/>web-colour<sp/>(<sp/>use<sp/>wxPG_TO_WEB_COLOUR</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>macro<sp/>-<sp/>(currently<sp/>unsupported)<sp/>),<sp/>or<sp/>wxPG_COLOUR_CUSTOM.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1afdb12e5345c3fae4b537e813df9f02a3" kindref="member" tooltip="32 bit type (the mapping is more complex than a simple typedef and is not shown here).">wxUint32</ref><sp/><sp/><sp/><sp/>m_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resulting<sp/>colour.<sp/>Should<sp/>be<sp/>correct<sp/>regardless<sp/>of<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_colour" kindref="compound" tooltip="A colour is an object representing a combination of Red, Green, and Blue (RGB) intensity values...">wxColour</ref><sp/><sp/><sp/><sp/>m_colour;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
</programlisting></para><para>in wxSystemColourProperty, and its derived class wxColourProperty, there are various sub-classing features. To set a basic list of colour names, call <ref refid="classwx_p_g_property_1a7275467270d2c7ac3f847f4d1b6a1194" kindref="member">wxPGProperty::SetChoices()</ref>.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Override<sp/>in<sp/>derived<sp/>class<sp/>to<sp/>customize<sp/>how<sp/>colours<sp/>are<sp/>translated</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref><sp/>ColourToString(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_colour" kindref="compound" tooltip="A colour is an object representing a combination of Red, Green, and Blue (RGB) intensity values...">wxColour</ref>&amp;<sp/>col,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>index<sp/>of<sp/>entry<sp/>that<sp/>triggers<sp/>colour<sp/>picker<sp/>dialog</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(default<sp/>is<sp/>last).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetCustomColourIndex()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>show<sp/>the<sp/>colour<sp/>dialog</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>QueryColourFromUser(<sp/><ref refid="classwx_variant" kindref="compound" tooltip="The wxVariant class represents a container for any type.">wxVariant</ref>&amp;<sp/>variant<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>colour<sp/>for<sp/>given<sp/>choice.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>function<sp/>returns<sp/>wxSystemSettings::GetColour(index).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classwx_colour" kindref="compound" tooltip="A colour is an object representing a combination of Red, Green, and Blue (RGB) intensity values...">wxColour</ref><sp/>GetColour(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="classwx_p_g_property_1wxCursorProperty">
<title>wxCursorProperty</title>
<para>Represents a <ref refid="classwx_cursor" kindref="compound">wxCursor</ref>. <ref refid="classwx_choice" kindref="compound">wxChoice</ref> is used to edit the value. Drop-down list has cursor images under some (wxMSW) platforms.</para></sect2>
</sect1>
<sect1 id="classwx_p_g_property_1pgproperty_creating">
<title>Creating Custom Properties</title>
<para>New properties can be created by subclassing <ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> or one of the provided property classes, and (re)implementing necessary member functions. Below, each virtual member function has ample documentation about its purpose and any odd details which to keep in mind.</para><para>Here is a very simple &apos;template&apos; code:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyProperty<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyProperty()<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>arguments<sp/>of<sp/>this<sp/>ctor<sp/>must<sp/>have<sp/>a<sp/>default<sp/>value<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>wxPG_LABEL<sp/>for<sp/>label<sp/>and<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MyProperty(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>&amp;<sp/>label<sp/>=<sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>&amp;<sp/>name<sp/>=<sp/>wxPG_LABEL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>&amp;<sp/>value<sp/>=<sp/><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member" tooltip="The global wxString instance of an empty string.">wxEmptyString</ref><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classwx_p_g_property" kindref="compound" tooltip="wxPGProperty is base class for all wxPropertyGrid properties.">wxPGProperty</ref>(label,<sp/>name)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_value<sp/>is<sp/>wxVariant</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~MyProperty()<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_p_g_editor" kindref="compound" tooltip="Base class for custom wxPropertyGrid editors.">wxPGEditor</ref>*<sp/><ref refid="classwx_p_g_property_1a2a890026b842c51658e8c358e137722d" kindref="member" tooltip="Returns pointer to an instance of used editor.">DoGetEditorClass</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determines<sp/>editor<sp/>used<sp/>by<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>replace<sp/>&apos;TextCtrl&apos;<sp/>below<sp/>with<sp/>any<sp/>of<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>builtin-in<sp/>property<sp/>editor<sp/>identifiers:<sp/>Choice,<sp/>ComboBox,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TextCtrlAndButton,<sp/>ChoiceAndButton,<sp/>CheckBox,<sp/>SpinCtrl,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DatePickerCtrl.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wxPGEditor_TextCtrl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref><sp/><ref refid="classwx_p_g_property_1a7bef52444b2c03a4f10eef54ef9e9739" kindref="member" tooltip="Converts property value into a text representation.">ValueToString</ref>(<sp/><ref refid="classwx_variant" kindref="compound" tooltip="The wxVariant class represents a container for any type.">wxVariant</ref>&amp;<sp/>value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argFlags<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Convert<sp/>given<sp/>property<sp/>value<sp/>to<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classwx_p_g_property_1a974a9b01c1f88cf4db630b6895453db8" kindref="member" tooltip="Converts text into wxVariant value appropriate for this property.">StringToValue</ref>(<sp/><ref refid="classwx_variant" kindref="compound" tooltip="The wxVariant class represents a container for any type.">wxVariant</ref>&amp;<sp/>variant,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classwx_string" kindref="compound" tooltip="The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...">wxString</ref>&amp;<sp/>text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argFlags<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Adapt<sp/>string<sp/>to<sp/>property<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
</programlisting></para><para>Since <ref refid="classwx_p_g_property" kindref="compound">wxPGProperty</ref> derives from <ref refid="classwx_object" kindref="compound">wxObject</ref>, you can use standard wxDECLARE_DYNAMIC_CLASS and wxIMPLEMENT_DYNAMIC_CLASS macros. From the above example they were omitted for sake of simplicity, and besides, they are only really needed if you need to use wxRTTI with your property class.</para><para>You can change the &apos;value type&apos; of a property by simply assigning different type of variant with SetValue. <bold>It is mandatory to implement <ref refid="classwx_variant_data" kindref="compound">wxVariantData</ref> class for all data types used as property values.</bold> You can use macros declared in <ref refid="classwx_property_grid" kindref="compound">wxPropertyGrid</ref> headers. For instance:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>header<sp/>file:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(If<sp/>you<sp/>need<sp/>to<sp/>have<sp/>export<sp/>declaration,<sp/>use<sp/>version<sp/>of<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>_EXPORTED<sp/>postfix)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_PG_DECLARE_VARIANT_DATA(MyDataClass)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>sources<sp/>file:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_PG_IMPLEMENT_VARIANT_DATA(MyDataClass)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Or,<sp/>if<sp/>you<sp/>don&apos;t<sp/>have<sp/>valid<sp/>==<sp/>operator:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WX_PG_IMPLEMENT_VARIANT_DATA_DUMMY_EQ(MyDataClass)</highlight></codeline>
</programlisting></para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxpropgrid" kindref="member">wxPropertyGrid</ref></para><para>Category:<nonbreakablespace/><nonbreakablespace/><ref refid="group__group__class__propgrid" kindref="compound">wxPropertyGrid</ref> </para></sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="8857">
        <label>wxPGProperty</label>
        <link refid="classwx_p_g_property"/>
        <childnode refid="8858" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8858">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8859">
        <label>wxPGProperty</label>
        <link refid="classwx_p_g_property"/>
        <childnode refid="8860" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8860">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="8861" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="8861">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" line="690" bodyfile="/home/jgm/Development/wxWidgets-svn/interface/wx/propgrid/property.h" bodystart="689" bodyend="1762"/>
    <listofallmembers>
      <member refid="classwx_p_g_property_1a0202ce34acdf8114a55b1180ecffeeda" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>AdaptListToValue</name></member>
      <member refid="classwx_p_g_property_1ab58afbdcd83f0626f44d152127038a89" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>AddChoice</name></member>
      <member refid="classwx_p_g_property_1abec97e799f836560d4f65c7c5fc97f6f" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>AddPrivateChild</name></member>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxPGProperty</scope><name>AllocExclusive</name></member>
      <member refid="classwx_p_g_property_1a77549498512cfa99b3b3e2c4317d5b70" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>AppendChild</name></member>
      <member refid="classwx_p_g_property_1a4f8871590e381ee0d63efc72ed76bba9" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>AreAllChildrenSpecified</name></member>
      <member refid="classwx_p_g_property_1a1a4ff5d3a02a006dc27e33af02d093a2" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>AreChildrenComponents</name></member>
      <member refid="classwx_p_g_property_1a8cebe6f162709ab46c878f9c4e7b53a4" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>ChangeFlag</name></member>
      <member refid="classwx_p_g_property_1ac3d79ee3ebbbff20c36627d92ea926e1" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>ChildChanged</name></member>
      <member refid="classwx_object_1a1d39f1d3650fe0982c9a1abe7f9fe7b7" prot="protected" virt="virtual"><scope>wxPGProperty</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a95c6a5e4e1e03ff23c7b9efe4cff0c1a" prot="protected" virt="virtual"><scope>wxPGProperty</scope><name>CreateRefData</name></member>
      <member refid="classwx_p_g_property_1aa8d29e4896c228f93d14fe2420c99f36" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>DeleteChildren</name></member>
      <member refid="classwx_p_g_property_1a137f1b7ea16f1f18fcc3e50ec107da1f" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>DeleteChoice</name></member>
      <member refid="classwx_p_g_property_1a4417dd87a03fd41d6e4b831c5b2a4548" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>DoGetAttribute</name></member>
      <member refid="classwx_p_g_property_1a2a890026b842c51658e8c358e137722d" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>DoGetEditorClass</name></member>
      <member refid="classwx_p_g_property_1af1b9f11eab24b1c1331f3f4a663ff98e" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>DoGetValidator</name></member>
      <member refid="classwx_p_g_property_1ad34da516faa44c994598ce0a6dda4063" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>DoGetValue</name></member>
      <member refid="classwx_p_g_property_1a7d355ae4bd55f00bc149e5416c39908c" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>DoSetAttribute</name></member>
      <member refid="classwx_p_g_property_1abcd8337b04de4934c15b81e4470c5919" prot="protected" virt="non-virtual"><scope>wxPGProperty</scope><name>Empty</name></member>
      <member refid="classwx_p_g_property_1aa024322106dfb1300ed68919c27dd1e1" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>Enable</name></member>
      <member refid="classwx_p_g_property_1a68b0ae8aab37c387f5fc4b7e9c53968e" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>FlagType</name></member>
      <member refid="classwx_p_g_property_1a5f266fcee82f96b626914e1876078135" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GenerateComposedValue</name></member>
      <member refid="classwx_p_g_property_1aef37546c4f5bf61e20f67a28df9e7093" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetAttribute</name></member>
      <member refid="classwx_p_g_property_1aca7fc7738d8ed57e13e2cee6adc6d7d1" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetAttribute</name></member>
      <member refid="classwx_p_g_property_1afb2c6fd9dc99d6a56d45eda1cdc1db79" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetAttributeAsDouble</name></member>
      <member refid="classwx_p_g_property_1a5084cee03676645c40dc8c5dcb9ef802" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetAttributeAsLong</name></member>
      <member refid="classwx_p_g_property_1ac5e17dd4ace122b9ba8e007538ba7a02" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetAttributesAsList</name></member>
      <member refid="classwx_p_g_property_1adc211e2a17cfaab3a1c7d4b6fd8788b6" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetBaseName</name></member>
      <member refid="classwx_p_g_property_1af2f256f0d3eda31b18548eaf3c5e992d" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetCell</name></member>
      <member refid="classwx_p_g_property_1aca895baa1adfa0536d1b623595ad198b" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetCell</name></member>
      <member refid="classwx_p_g_property_1a200356776151608f0ca63e8cc68fdc8b" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>GetCellRenderer</name></member>
      <member refid="classwx_p_g_property_1aaa1e0364c2a3d0bd34d989634a828fcc" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetChildCount</name></member>
      <member refid="classwx_p_g_property_1a6aedf98d88f968610f6adef45d391e80" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetChildrenHeight</name></member>
      <member refid="classwx_p_g_property_1a5659f9cc520b7093b64a10d5ceda04d3" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetChoices</name></member>
      <member refid="classwx_p_g_property_1a5423122f2b186d07f5b73d9e119f0549" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>GetChoiceSelection</name></member>
      <member refid="classwx_object_1ab3a0c6f723cbaddb47be4e8dd98cc8e2" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>GetClassInfo</name></member>
      <member refid="classwx_p_g_property_1acb1585da22f65d15e7015b66ca3a455c" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetClientData</name></member>
      <member refid="classwx_p_g_property_1ac9b089203d786e268b73ec77f0a42504" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetClientObject</name></member>
      <member refid="classwx_p_g_property_1a7e360285dcfa6fc18c6bc8a88e261baf" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetColumnEditor</name></member>
      <member refid="classwx_p_g_property_1aab8de8a18aa6817ac262d37a1c18e591" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetDefaultValue</name></member>
      <member refid="classwx_p_g_property_1afc4727eecd9a28a4f7a5361dbc1e5e76" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetDisplayedString</name></member>
      <member refid="classwx_p_g_property_1a2f15b192dc294f8a66f2584d8bf0974f" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetEditorClass</name></member>
      <member refid="classwx_p_g_property_1a874654d10c66572f2a4c4c41c843f557" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>GetEditorDialog</name></member>
      <member refid="classwx_p_g_property_1a20532654013f84d21774f939c4283546" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetFlags</name></member>
      <member refid="classwx_p_g_property_1a921b49bc576e83b6cb900ade60f3787a" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetGrid</name></member>
      <member refid="classwx_p_g_property_1ab116666b230d5d98e8fcb7619eea162c" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetGridIfDisplayed</name></member>
      <member refid="classwx_p_g_property_1a83843454085c699c2d886671c3460b5f" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetHelpString</name></member>
      <member refid="classwx_p_g_property_1aef71581ec3dcd1e17457457def9f9d24" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetIndexInParent</name></member>
      <member refid="classwx_p_g_property_1a7610de7df326219f954133b2460f7bd9" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetLabel</name></member>
      <member refid="classwx_p_g_property_1aef439150fcdfcc32bebedb278aea9806" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetLastVisibleSubItem</name></member>
      <member refid="classwx_p_g_property_1a50aa7238a183862723e1505d5cffc341" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetMainParent</name></member>
      <member refid="classwx_p_g_property_1a78a3bf23304ec8a483c75fac5002986e" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetMaxLength</name></member>
      <member refid="classwx_p_g_property_1a38b7e68b49282ac71d6e4cea7643aea1" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetName</name></member>
      <member refid="classwx_p_g_property_1a5c3624606ec872e85fcba2e9d411475c" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetOrCreateCell</name></member>
      <member refid="classwx_p_g_property_1a88aa40a48c253824dcc296bcf1ff9f89" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetParent</name></member>
      <member refid="classwx_p_g_property_1ac19bf570e71050edb3b100a3bdb68734" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetPropertyByName</name></member>
      <member refid="classwx_object_1aabdb4fc957226544a8408167844e4f42" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetRefData</name></member>
      <member refid="classwx_p_g_property_1a79cb24032f2aaee16a260ca560957a6f" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetValidator</name></member>
      <member refid="classwx_p_g_property_1a76fdd0b4782957b18aca2e8b8e170a0d" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetValue</name></member>
      <member refid="classwx_p_g_property_1a29f70a60e4844efbebc140270e1a4358" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>GetValueAsString</name></member>
      <member refid="classwx_p_g_property_1a2565aba121d1df376d7ba7c16fbc0553" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetValueImage</name></member>
      <member refid="classwx_p_g_property_1a729634b1a2f7574e4f98f48bcfe5b937" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetValueType</name></member>
      <member refid="classwx_p_g_property_1aa36f8e8d6f0e48c9bbb105905220605f" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>GetY</name></member>
      <member refid="classwx_p_g_property_1a3cf53ef7dff19595ab4b62bb3af738bd" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>HasFlag</name></member>
      <member refid="classwx_p_g_property_1a58d3125c3b7eebef540363d5720eafa3" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>HasVisibleChildren</name></member>
      <member refid="classwx_p_g_property_1ad1bd50c81626773176c5d951d0e34c60" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>Hide</name></member>
      <member refid="classwx_p_g_property_1a83f63b596fd2a2a677d8096485f0299e" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>Index</name></member>
      <member refid="classwx_p_g_property_1a572697e79fd8785f3477cc7f8d72f5d5" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>InsertChild</name></member>
      <member refid="classwx_p_g_property_1ae9f9995783eeaf5320cb0c71482cbbc8" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>InsertChoice</name></member>
      <member refid="classwx_p_g_property_1a571ac2cc435cffa9a2d2377f3430f19d" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>IntToValue</name></member>
      <member refid="classwx_p_g_property_1aaf32ea058af511067b6f496dd55072eb" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsCategory</name></member>
      <member refid="classwx_p_g_property_1afbcf920da6022bfdbc6050aea3ded3be" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsEnabled</name></member>
      <member refid="classwx_p_g_property_1ad49b8eb1fcd8b275ce20b2f18be05755" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsExpanded</name></member>
      <member refid="classwx_object_1af40d580385cf4f8112fae7713404b01e" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsKindOf</name></member>
      <member refid="classwx_p_g_property_1aa9313d6d246d9cd3643a6bb34808c695" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsRoot</name></member>
      <member refid="classwx_object_1a80a1a3fda7b14396a9ddd3d7a46a88bd" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsSameAs</name></member>
      <member refid="classwx_p_g_property_1ab1ca1b66276badfc8e7c32b458181786" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsSomeParent</name></member>
      <member refid="classwx_p_g_property_1aa5a9ebcac6c954178f97a4c100bb3ac0" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsTextEditable</name></member>
      <member refid="classwx_p_g_property_1a785c3679e91f5b878bcbaec31aa1bccc" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsValueUnspecified</name></member>
      <member refid="classwx_p_g_property_1a8050a0de4f8625d544851fbcacb1961c" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>IsVisible</name></member>
      <member refid="classwx_p_g_property_1af2f7f8a157295b8d56138f59573a8254" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>Item</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxPGProperty</scope><name>m_refData</name></member>
      <member refid="classwx_p_g_property_1ad0b00df4a3916cb80adfa1227c70baf4" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>OnCustomPaint</name></member>
      <member refid="classwx_p_g_property_1a16fbe26240bf47ab0a9a02d21781da73" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>OnEvent</name></member>
      <member refid="classwx_p_g_property_1a8c4008c4d7d148bd06f9db590301df76" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>OnMeasureImage</name></member>
      <member refid="classwx_p_g_property_1ae5c4f47d3ff609d19346b994a9a25acb" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>OnSetValue</name></member>
      <member refid="classwx_p_g_property_1acbffb1a7f8dee530918ff74c5cb70363" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>OnValidationFailure</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>operator new</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>Ref</name></member>
      <member refid="classwx_p_g_property_1a167afcb85ed4d527e34567e32a0cc714" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>RefreshChildren</name></member>
      <member refid="classwx_p_g_property_1af154d4b9d070c594a75164a5482d6888" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>RefreshEditor</name></member>
      <member refid="classwx_p_g_property_1a418c1539969b7a0a9378a3411a5680a6" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetAttribute</name></member>
      <member refid="classwx_p_g_property_1a126a59cc86786f51cc72469bc2143b4c" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetAutoUnspecified</name></member>
      <member refid="classwx_p_g_property_1a5a3851a607cf1f73f34caeaba24374be" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetBackgroundColour</name></member>
      <member refid="classwx_p_g_property_1a0ec5afcf091d8100142887f459d3dd52" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetCell</name></member>
      <member refid="classwx_p_g_property_1a7275467270d2c7ac3f847f4d1b6a1194" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetChoices</name></member>
      <member refid="classwx_p_g_property_1a4244276bf942fd52e1dd182535e7ba5d" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetChoiceSelection</name></member>
      <member refid="classwx_p_g_property_1aa27f45f58bbcd53802e6644db33aec83" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetClientData</name></member>
      <member refid="classwx_p_g_property_1ab35b3529f2b6afbc1ec02d2bbb187709" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetClientObject</name></member>
      <member refid="classwx_p_g_property_1a7722a2c503051fd6ef1477a9c0c081a4" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetDefaultValue</name></member>
      <member refid="classwx_p_g_property_1a2cd2e6f0b30a1ab789f9ea8b58226260" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetEditor</name></member>
      <member refid="classwx_p_g_property_1a90294ea6cae6cf504d032b46787bb6e4" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetEditor</name></member>
      <member refid="classwx_p_g_property_1a02dd250ff0cfe074a8de9f8cd8643880" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetFlagRecursively</name></member>
      <member refid="classwx_p_g_property_1a839af036b24fc35696f0ef3cb2b0670a" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetHelpString</name></member>
      <member refid="classwx_p_g_property_1a5acdc1db23a6e219de6619bc54e1a2e3" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetLabel</name></member>
      <member refid="classwx_p_g_property_1aa74671893440ce2a0f2a0e47ba897ad5" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetMaxLength</name></member>
      <member refid="classwx_p_g_property_1a43f07192741d219d50e94b2d54e93847" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetModifiedStatus</name></member>
      <member refid="classwx_p_g_property_1a79f28d83cf79c6bb87337183fb8c56f5" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetName</name></member>
      <member refid="classwx_p_g_property_1af7e9a4c245025e118373a3c876c7904d" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetParentalType</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetRefData</name></member>
      <member refid="classwx_p_g_property_1a8d34f624ad2f38300741c3caa0929629" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetTextColour</name></member>
      <member refid="classwx_p_g_property_1a9eb7d1f243c6fb993b3563c241b2ef4a" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetValidator</name></member>
      <member refid="classwx_p_g_property_1aa8e771a01a93fe94f87a449f430afa79" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetValue</name></member>
      <member refid="classwx_p_g_property_1a0b3351061910b91a954237735466ca88" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetValueFromInt</name></member>
      <member refid="classwx_p_g_property_1a0fbb7142a10cfcf02bb45000ab4527cd" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetValueFromString</name></member>
      <member refid="classwx_p_g_property_1a5c5be1292d329945b0a24e33db485207" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetValueImage</name></member>
      <member refid="classwx_p_g_property_1ade9385b0bc3c9ba4833b271157e87354" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetValueInEvent</name></member>
      <member refid="classwx_p_g_property_1a4e55506bbc49f0b7d447df71a00f2df6" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetValueToUnspecified</name></member>
      <member refid="classwx_p_g_property_1a46da7a139ba90c3852710f181280667d" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>SetWasModified</name></member>
      <member refid="classwx_p_g_property_1a974a9b01c1f88cf4db630b6895453db8" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>StringToValue</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>UnShare</name></member>
      <member refid="classwx_p_g_property_1a7b2f517388b0f0038354d5fd9f0bab43" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>UpdateParentValues</name></member>
      <member refid="classwx_p_g_property_1a9de64f67dc90b2aaad1f5e1a6d30e7e8" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>UsesAutoUnspecified</name></member>
      <member refid="classwx_p_g_property_1a2e0c041aa3e19a5934a02c65b53f9f7d" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>ValidateValue</name></member>
      <member refid="classwx_p_g_property_1a7bef52444b2c03a4f10eef54ef9e9739" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>ValueToString</name></member>
      <member refid="classwx_p_g_property_1af9aa04abe8dc641dec6211568fb74fcc" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>wxDEPRECATED</name></member>
      <member refid="classwx_p_g_property_1a0db56c7df1153eacebc53e428f22f322" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>wxDEPRECATED</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>wxObject</name></member>
      <member refid="classwx_p_g_property_1ade8edb58a7853a539664c77b2d9c9c81" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>wxPGProperty</name></member>
      <member refid="classwx_p_g_property_1adde08613b47eda8e324483ac754e8920" prot="public" virt="non-virtual"><scope>wxPGProperty</scope><name>wxPGProperty</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>~wxObject</name></member>
      <member refid="classwx_p_g_property_1ac18fca1cac5343b510220929a4f6a0bc" prot="public" virt="virtual"><scope>wxPGProperty</scope><name>~wxPGProperty</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

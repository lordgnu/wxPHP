<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="overview_validator" kind="page">
    <compoundname>overview_validator</compoundname>
    <title>wxValidator Overview</title>
    <detaileddescription>
<para>Classes: <ref refid="classwx_validator" kindref="compound">wxValidator</ref>, <ref refid="classwx_text_validator" kindref="compound">wxTextValidator</ref>, <ref refid="classwx_generic_validator" kindref="compound">wxGenericValidator</ref>, <ref refid="classwx_integer_validator" kindref="compound">wxIntegerValidator</ref>, <ref refid="classwx_floating_point_validator" kindref="compound">wxFloatingPointValidator</ref></para><para><itemizedlist>
<listitem><para><ref refid="overview_validator_1overview_validator_intro" kindref="member">Validator basic concepts</ref> </para></listitem>
<listitem><para><ref refid="overview_validator_1overview_validator_anatomy" kindref="member">Anatomy of a Validator</ref> </para></listitem>
<listitem><para><ref refid="overview_validator_1overview_validator_dialogs" kindref="member">How Validators Interact with Dialogs</ref></para></listitem>
</itemizedlist>
<hruler/>
</para><sect1 id="overview_validator_1overview_validator_intro">
<title>Validator basic concepts</title>
<para>The aim of the validator concept is to make dialogs very much easier to write. A validator is an object that can be plugged into a control (such as a <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref>), and mediates between C++ data and the control, transferring the data in either direction and validating it. It also is able to intercept events generated by the control, providing filtering behaviour without the need to derive a new control class.</para><para>You can use a stock validator, such as <ref refid="classwx_text_validator" kindref="compound">wxTextValidator</ref> (which does text control data transfer, validation and filtering) and <ref refid="classwx_generic_validator" kindref="compound">wxGenericValidator</ref> (which does data transfer for a range of controls); or you can write your own.</para><para>Here is an example of <ref refid="classwx_text_validator" kindref="compound">wxTextValidator</ref> usage.</para><para><programlisting><codeline><highlight class="normal"><ref refid="classwx_text_ctrl" kindref="compound" tooltip="A text control allows text to be displayed and edited.">wxTextCtrl</ref><sp/>*txt1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classwx_text_ctrl" kindref="compound" tooltip="A text control allows text to be displayed and edited.">wxTextCtrl</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>-1,<sp/><ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member" tooltip="This macro can be used with character and string literals (in other words, &amp;#39;x&amp;#39; or &amp;quot;foo&amp;quot;) to automatic...">wxT</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member" tooltip="Global instance of a wxPoint initialized with values (-1,-1).">wxDefaultPosition</ref>,<sp/><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member" tooltip="Global instance of a wxSize object initialized to (-1,-1).">wxDefaultSize</ref>,<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classwx_text_validator" kindref="compound" tooltip="wxTextValidator validates text controls, providing a variety of filtering behaviours.">wxTextValidator</ref>(<ref refid="valtext_8h_1aa02d29254d60e0c81f17696c9cecbd07ab7fa483928635f2e066229fe0bceec93" kindref="member" tooltip="Non-alpha characters are filtered out.">wxFILTER_ALPHA</ref>,<sp/>&amp;g_data.m_string));</highlight></codeline>
</programlisting></para><para>In this example, the text validator object provides the following functionality:</para><para><itemizedlist>
<listitem><para>It transfers the value of g_data.m_string (a <ref refid="classwx_string" kindref="compound">wxString</ref> variable) to the <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> when the dialog is initialised. </para></listitem>
<listitem><para>It transfers the <ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> data back to this variable when the dialog is dismissed. </para></listitem>
<listitem><para>It filters input characters so that only alphabetic characters are allowed.</para></listitem>
</itemizedlist>
The validation and filtering of input is accomplished in two ways. When a character is input, <ref refid="classwx_text_validator" kindref="compound">wxTextValidator</ref> checks the character against the allowed filter flag (<computeroutput>wxFILTER_ALPHA</computeroutput> in this case). If the character is inappropriate, it is vetoed (does not appear) and a warning beep sounds (unless wxValidator::SetBellOnError(false) has been called). The second type of validation is performed when the dialog is about to be dismissed, so if the default string contained invalid characters already, a dialog box is shown giving the error, and the dialog is not dismissed.</para><para>Note that any <ref refid="classwx_window" kindref="compound">wxWindow</ref> may have a validator; using the <computeroutput>wxWS_EX_VALIDATE_RECURSIVELY</computeroutput> style (see <ref refid="classwx_window" kindref="compound">wxWindow</ref> extended styles) you can also implement recursive validation.</para></sect1>
<sect1 id="overview_validator_1overview_validator_anatomy">
<title>Anatomy of a Validator</title>
<para>A programmer creating a new validator class should provide the following functionality.</para><para>A validator constructor is responsible for allowing the programmer to specify the kind of validation required, and perhaps a pointer to a C++ variable that is used for storing the data for the control. If such a variable address is not supplied by the user, then the validator should store the data internally.</para><para>The <ref refid="classwx_validator_1abe48368bac7f540f0c20b1436e5c71af" kindref="member">wxValidator::Validate</ref> member function should return true if the data in the control (not the C++ variable) is valid. It should also show an appropriate message if data was not valid.</para><para>The <ref refid="classwx_validator_1aa09f9ae3bace5de7a8e577206b75aeae" kindref="member">wxValidator::TransferToWindow</ref> member function should transfer the data from the validator or associated C++ variable to the control.</para><para>The <ref refid="classwx_validator_1acffa9472b2f741ab29dbfad3b80934da" kindref="member">wxValidator::TransferFromWindow</ref> member function should transfer the data from the control to the validator or associated C++ variable.</para><para>There should be a copy constructor, and a <ref refid="classwx_validator_1a25a4e0250afe9451059fd7a967c4883f" kindref="member">wxValidator::Clone</ref> function which returns a copy of the validator object. This is important because validators are passed by reference to window constructors, and must therefore be cloned internally.</para><para>You can optionally define event handlers for the validator, to implement filtering. These handlers will capture events before the control itself does (see <ref refid="overview_events_1overview_events_processing" kindref="member">How Events are Processed</ref>). For an example implementation, see the <computeroutput><ref refid="valtext_8h" kindref="compound">valtext.h</ref></computeroutput> and <computeroutput>valtext.cpp</computeroutput> files in the wxWidgets library.</para></sect1>
<sect1 id="overview_validator_1overview_validator_dialogs">
<title>How Validators Interact with Dialogs</title>
<para>For validators to work correctly, validator functions must be called at the right times during dialog initialisation and dismissal.</para><para>When a <ref refid="classwx_dialog_1ae8e5fa98d473b812b8d1c2f163b65c67" kindref="member">wxDialog::Show</ref> is called (for a modeless dialog) or <ref refid="classwx_dialog_1a6e078c3d0653f75ad3c34a37c0b54637" kindref="member">wxDialog::ShowModal</ref> is called (for a modal dialog), the function <ref refid="classwx_window_1aa90a260c0a835a133043460b7d0024a8" kindref="member">wxWindow::InitDialog</ref> is automatically called. This in turn sends an initialisation event to the dialog. The default handler for the <computeroutput>wxEVT_INIT_DIALOG</computeroutput> event is defined in the <ref refid="classwx_window" kindref="compound">wxWindow</ref> class to simply call the function <ref refid="classwx_window_1a88cc65e424a129d9b0057756cdb67ec9" kindref="member">wxWindow::TransferDataToWindow</ref>. This function finds all the validators in the window&apos;s children and calls the <ref refid="classwx_validator_1aa09f9ae3bace5de7a8e577206b75aeae" kindref="member">wxValidator::TransferToWindow</ref> function for each. Thus, data is transferred from C++ variables to the dialog just as the dialog is being shown.</para><para><simplesect kind="note"><para>If you are using a window or panel instead of a dialog, you will need to call <ref refid="classwx_window_1aa90a260c0a835a133043460b7d0024a8" kindref="member">wxWindow::InitDialog</ref> explicitly before showing the window.</para></simplesect>
When the user clicks on a button, for example the OK button, the application should first call <ref refid="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" kindref="member">wxWindow::Validate</ref>, which returns false if any of the child window validators failed to validate the window data. The button handler should return immediately if validation failed. Secondly, the application should call <ref refid="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" kindref="member">wxWindow::TransferDataFromWindow</ref> and return if this failed. It is then safe to end the dialog by calling <ref refid="classwx_dialog_1a89b6085b05b63e98001311fafcfb21f0" kindref="member">wxDialog::EndModal</ref> (if modal) or <ref refid="classwx_dialog_1ae8e5fa98d473b812b8d1c2f163b65c67" kindref="member">wxDialog::Show</ref> (if modeless).</para><para>In fact, <ref refid="classwx_dialog" kindref="compound">wxDialog</ref> contains a default command event handler for the <computeroutput>wxID_OK</computeroutput> button. It goes like this:</para><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>wxDialog::OnOK(<ref refid="classwx_command_event" kindref="compound" tooltip="This event class contains information about command events, which originate from a variety of simple ...">wxCommandEvent</ref>&amp;<sp/>event)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" kindref="member" tooltip="Validates the current values of the child controls using their validators.">Validate</ref>()<sp/>&amp;&amp;<sp/><ref refid="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" kindref="member" tooltip="Transfers values from child controls to data areas specified by their validators.">TransferDataFromWindow</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classwx_dialog_1a2c135c1ae94d87a64ab6b6390fa8ce1e" kindref="member" tooltip="Returns true if the dialog box is modal, false otherwise.">IsModal</ref>()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_dialog_1a89b6085b05b63e98001311fafcfb21f0" kindref="member" tooltip="Ends a modal dialog, passing a value to be returned from the ShowModal() invocation.">EndModal</ref>(<ref refid="defs_8h_1ac66d0a09761e7d86b2ac0b2e0c6a8cbbaeeb1bdf97306d7f0fdffb62c8af3d02f" kindref="member" tooltip="Standard button and menu IDs.">wxID_OK</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classwx_dialog_1a0d04ed85ac5cd271a61514d446340673" kindref="member" tooltip="Sets the return code for this window.">SetReturnCode</ref>(<ref refid="defs_8h_1ac66d0a09761e7d86b2ac0b2e0c6a8cbbaeeb1bdf97306d7f0fdffb62c8af3d02f" kindref="member" tooltip="Standard button and menu IDs.">wxID_OK</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classwx_dialog_1ae8e5fa98d473b812b8d1c2f163b65c67" kindref="member" tooltip="Hides or shows the dialog.">Show</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>So if using validators and a normal OK button, you may not even need to write any code for handling dialog dismissal.</para><para>If you load your dialog from a resource file, you will need to iterate through the controls setting validators, since validators can&apos;t be specified in a dialog resource. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

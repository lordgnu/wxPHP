/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "cfg.h"
#include "bookctrl.h"
#include "dnd.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "docview.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "html.h"
#include "help.h"
#include "logging.h"
#include "managedwnd.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "media.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "aui.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "dvc.h"
#include "others.h"


void php_wxDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxDC_php* object = static_cast<wxDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxDC, StartPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::StartPage\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::StartPage\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::StartPage()\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->StartPage();
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->StartPage();
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, StartDoc)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::StartDoc\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::StartDoc\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&message0, &message_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::StartDoc(wxString(message0, wxConvUTF8)))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->StartDoc(wxString(message0, wxConvUTF8)));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetUserScale)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetUserScale\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetUserScale\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	double xScale0;
	double yScale0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'dd' (&xScale0, &yScale0)\n");
		#endif
		char parse_parameters_string[] = "dd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &xScale0, &yScale0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetUserScale(xScale0, yScale0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetUserScale(xScale0, yScale0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetTextForeground)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetTextForeground\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetTextForeground\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* colour0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&colour0, php_wxColour_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &colour0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(colour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetTextForeground(*(wxColour*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetTextForeground(*(wxColour*) object_pointer0_0);
				}

				references->AddReference(colour0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetTextBackground)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetTextBackground\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetTextBackground\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* colour0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&colour0, php_wxColour_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &colour0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(colour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetTextBackground(*(wxColour*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetTextBackground(*(wxColour*) object_pointer0_0);
				}

				references->AddReference(colour0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, CalcBoundingBox)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::CalcBoundingBox\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::CalcBoundingBox\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::CalcBoundingBox((wxCoord) x0, (wxCoord) y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->CalcBoundingBox((wxCoord) x0, (wxCoord) y0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, CanUseTransformMatrix)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::CanUseTransformMatrix\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::CanUseTransformMatrix\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::CanUseTransformMatrix())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->CanUseTransformMatrix());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->CanUseTransformMatrix());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, Clear)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::Clear\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::Clear\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::Clear()\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->Clear();
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->Clear();
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, CopyAttributes)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::CopyAttributes\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::CopyAttributes\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* dc0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&dc0, php_wxDC_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc0, php_wxDC_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::CopyAttributes(*(wxDC*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->CopyAttributes(*(wxDC*) object_pointer0_0);
				}

				references->AddReference(dc0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, CrossHair)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::CrossHair\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::CrossHair\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt1, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt1, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::CrossHair((wxCoord) x0, (wxCoord) y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->CrossHair((wxCoord) x0, (wxCoord) y0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::CrossHair(*(wxPoint*) object_pointer1_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->CrossHair(*(wxPoint*) object_pointer1_0);
				}

				references->AddReference(pt1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DestroyClippingRegion)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DestroyClippingRegion\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DestroyClippingRegion\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DestroyClippingRegion()\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DestroyClippingRegion();
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DestroyClippingRegion();
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DeviceToLogicalX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DeviceToLogicalX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DeviceToLogicalX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::DeviceToLogicalX((wxCoord) x0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->DeviceToLogicalX((wxCoord) x0));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DeviceToLogicalXRel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DeviceToLogicalXRel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DeviceToLogicalXRel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::DeviceToLogicalXRel((wxCoord) x0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->DeviceToLogicalXRel((wxCoord) x0));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DeviceToLogicalY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DeviceToLogicalY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DeviceToLogicalY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&y0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::DeviceToLogicalY((wxCoord) y0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->DeviceToLogicalY((wxCoord) y0));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DeviceToLogicalYRel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DeviceToLogicalYRel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DeviceToLogicalYRel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&y0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::DeviceToLogicalYRel((wxCoord) y0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->DeviceToLogicalYRel((wxCoord) y0));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawArc)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawArc\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawArc\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long xStart0;
	long yStart0;
	long xEnd0;
	long yEnd0;
	long xc0;
	long yc0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* ptStart1 = 0;
	void* object_pointer1_0 = 0;
	zval* ptEnd1 = 0;
	void* object_pointer1_1 = 0;
	zval* centre1 = 0;
	void* object_pointer1_2 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llllll' (&xStart0, &yStart0, &xEnd0, &yEnd0, &xc0, &yc0)\n");
		#endif
		char parse_parameters_string[] = "llllll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &xStart0, &yStart0, &xEnd0, &yEnd0, &xc0, &yc0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOO' (&ptStart1, php_wxPoint_entry, &ptEnd1, php_wxPoint_entry, &centre1, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "OOO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &ptStart1, php_wxPoint_entry, &ptEnd1, php_wxPoint_entry, &centre1, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(ptStart1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(ptStart1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(ptStart1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(ptEnd1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(ptEnd1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(ptEnd1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(centre1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(centre1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(centre1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawArc((wxCoord) xStart0, (wxCoord) yStart0, (wxCoord) xEnd0, (wxCoord) yEnd0, (wxCoord) xc0, (wxCoord) yc0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawArc(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1, *(wxPoint*) object_pointer1_2);
				}

				references->AddReference(ptStart1);
				references->AddReference(ptEnd1);
				references->AddReference(centre1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawBitmap)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawBitmap\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawBitmap\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* bitmap0 = 0;
	void* object_pointer0_0 = 0;
	long x0;
	long y0;
	bool useMask0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* bmp1 = 0;
	void* object_pointer1_0 = 0;
	zval* pt1 = 0;
	void* object_pointer1_1 = 0;
	bool useMask1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Oll|b' (&bitmap0, php_wxBitmap_entry, &x0, &y0, &useMask0)\n");
		#endif
		char parse_parameters_string[] = "Oll|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bitmap0, php_wxBitmap_entry, &x0, &y0, &useMask0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bitmap0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bitmap0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(bitmap0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO|b' (&bmp1, php_wxBitmap_entry, &pt1, php_wxPoint_entry, &useMask1)\n");
		#endif
		char parse_parameters_string[] = "OO|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bmp1, php_wxBitmap_entry, &pt1, php_wxPoint_entry, &useMask1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bmp1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bmp1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bmp1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}

				references->AddReference(bitmap0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0, useMask0);
				}

				references->AddReference(bitmap0);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}

				references->AddReference(bmp1);
				references->AddReference(pt1);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawBitmap(*(wxBitmap*) object_pointer1_0, *(wxPoint*) object_pointer1_1, useMask1);
				}

				references->AddReference(bmp1);
				references->AddReference(pt1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawCheckMark)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawCheckMark\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawCheckMark\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	long width0;
	long height0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* rect1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
		#endif
		char parse_parameters_string[] = "llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect1, php_wxRect_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect1, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawCheckMark((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawCheckMark(*(wxRect*) object_pointer1_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawCheckMark(*(wxRect*) object_pointer1_0);
				}

				references->AddReference(rect1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawCircle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawCircle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawCircle\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	long radius0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt1 = 0;
	void* object_pointer1_0 = 0;
	long radius1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lll' (&x0, &y0, &radius0)\n");
		#endif
		char parse_parameters_string[] = "lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &radius0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ol' (&pt1, php_wxPoint_entry, &radius1)\n");
		#endif
		char parse_parameters_string[] = "Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt1, php_wxPoint_entry, &radius1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawCircle((wxCoord) x0, (wxCoord) y0, (wxCoord) radius0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawCircle(*(wxPoint*) object_pointer1_0, (wxCoord) radius1);
				}

				references->AddReference(pt1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawEllipse)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawEllipse\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawEllipse\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	long width0;
	long height0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt1 = 0;
	void* object_pointer1_0 = 0;
	zval* size1 = 0;
	void* object_pointer1_1 = 0;
	bool overload1_called = false;
	//Parameters for overload 2
	zval* rect2 = 0;
	void* object_pointer2_0 = 0;
	bool overload2_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
		#endif
		char parse_parameters_string[] = "llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&pt1, php_wxPoint_entry, &size1, php_wxSize_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt1, php_wxPoint_entry, &size1, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						goto overload2;
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(size1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect2, php_wxRect_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect2, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect2) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawEllipse((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawEllipse(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}

				references->AddReference(pt1);
				references->AddReference(size1);

				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawEllipse(*(wxRect*) object_pointer2_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawEllipse(*(wxRect*) object_pointer2_0);
				}

				references->AddReference(rect2);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawEllipticArc)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawEllipticArc\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawEllipticArc\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	long width0;
	long height0;
	double start0;
	double end0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt1 = 0;
	void* object_pointer1_0 = 0;
	zval* sz1 = 0;
	void* object_pointer1_1 = 0;
	double sa1;
	double ea1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lllldd' (&x0, &y0, &width0, &height0, &start0, &end0)\n");
		#endif
		char parse_parameters_string[] = "lllldd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &width0, &height0, &start0, &end0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOdd' (&pt1, php_wxPoint_entry, &sz1, php_wxSize_entry, &sa1, &ea1)\n");
		#endif
		char parse_parameters_string[] = "OOdd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt1, php_wxPoint_entry, &sz1, php_wxSize_entry, &sa1, &ea1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(sz1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(sz1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(sz1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawEllipticArc((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, start0, end0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawEllipticArc(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, sa1, ea1);
				}

				references->AddReference(pt1);
				references->AddReference(sz1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawIcon\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawIcon\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* icon0 = 0;
	void* object_pointer0_0 = 0;
	long x0;
	long y0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* icon1 = 0;
	void* object_pointer1_0 = 0;
	zval* pt1 = 0;
	void* object_pointer1_1 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Oll' (&icon0, php_wxIcon_entry, &x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "Oll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &icon0, php_wxIcon_entry, &x0, &y0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&icon1, php_wxIcon_entry, &pt1, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &icon1, php_wxIcon_entry, &pt1, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(icon1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer0_0, (wxCoord) x0, (wxCoord) y0);
				}

				references->AddReference(icon0);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawIcon(*(wxIcon*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}

				references->AddReference(icon1);
				references->AddReference(pt1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawLabel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawLabel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	zval* bitmap0 = 0;
	void* object_pointer0_1 = 0;
	zval* rect0 = 0;
	void* object_pointer0_2 = 0;
	long alignment0;
	long indexAccel0;
	zval* rectBounding0 = 0;
	void* object_pointer0_5 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* text1;
	long text_len1;
	zval* rect1 = 0;
	void* object_pointer1_1 = 0;
	long alignment1;
	long indexAccel1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sOO|llz' (&text0, &text_len0, &bitmap0, php_wxBitmap_entry, &rect0, php_wxRect_entry, &alignment0, &indexAccel0, &rectBounding0)\n");
		#endif
		char parse_parameters_string[] = "sOO|llz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &bitmap0, php_wxBitmap_entry, &rect0, php_wxRect_entry, &alignment0, &indexAccel0, &rectBounding0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(bitmap0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bitmap0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(bitmap0) != IS_NULL)
				{
						goto overload1;
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(rect0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(rect0) != IS_NULL)
				{
						goto overload1;
				}
			}

			if(arguments_received >= 6){
				if(Z_TYPE_P(rectBounding0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rectBounding0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_5 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_5 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(rectBounding0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sO|ll' (&text1, &text_len1, &rect1, php_wxRect_entry, &alignment1, &indexAccel1)\n");
		#endif
		char parse_parameters_string[] = "sO|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text1, &text_len1, &rect1, php_wxRect_entry, &alignment1, &indexAccel1 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(rect1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2);
				}

				references->AddReference(bitmap0);
				references->AddReference(rect0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0);
				}

				references->AddReference(bitmap0);
				references->AddReference(rect0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0);
				}

				references->AddReference(bitmap0);
				references->AddReference(rect0);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawLabel(wxString(text0, wxConvUTF8), *(wxBitmap*) object_pointer0_1, *(wxRect*) object_pointer0_2, (int) alignment0, (int) indexAccel0, (wxRect*) object_pointer0_5);
				}

				references->AddReference(bitmap0);
				references->AddReference(rect0);
				references->AddReference(rectBounding0);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1);
				}

				references->AddReference(rect1);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1);
				}

				references->AddReference(rect1);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawLabel(wxString(text1, wxConvUTF8), *(wxRect*) object_pointer1_1, (int) alignment1, (int) indexAccel1);
				}

				references->AddReference(rect1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawLine)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawLine\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawLine\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x10;
	long y10;
	long x20;
	long y20;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt11 = 0;
	void* object_pointer1_0 = 0;
	zval* pt21 = 0;
	void* object_pointer1_1 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (&x10, &y10, &x20, &y20)\n");
		#endif
		char parse_parameters_string[] = "llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x10, &y10, &x20, &y20 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&pt11, php_wxPoint_entry, &pt21, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt11, php_wxPoint_entry, &pt21, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt11) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt11), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt11) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(pt21) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt21), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt21) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawLine((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawLine(*(wxPoint*) object_pointer1_0, *(wxPoint*) object_pointer1_1);
				}

				references->AddReference(pt11);
				references->AddReference(pt21);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawPoint)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawPoint\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawPoint\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt1, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt1, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawPoint((wxCoord) x0, (wxCoord) y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawPoint((wxCoord) x0, (wxCoord) y0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawPoint(*(wxPoint*) object_pointer1_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawPoint(*(wxPoint*) object_pointer1_0);
				}

				references->AddReference(pt1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawRectangle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawRectangle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawRectangle\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	long width0;
	long height0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt1 = 0;
	void* object_pointer1_0 = 0;
	zval* sz1 = 0;
	void* object_pointer1_1 = 0;
	bool overload1_called = false;
	//Parameters for overload 2
	zval* rect2 = 0;
	void* object_pointer2_0 = 0;
	bool overload2_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
		#endif
		char parse_parameters_string[] = "llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&pt1, php_wxPoint_entry, &sz1, php_wxSize_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt1, php_wxPoint_entry, &sz1, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						goto overload2;
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(sz1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(sz1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(sz1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect2, php_wxRect_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect2, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect2) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}

				references->AddReference(pt1);
				references->AddReference(sz1);

				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawRectangle(*(wxRect*) object_pointer2_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawRectangle(*(wxRect*) object_pointer2_0);
				}

				references->AddReference(rect2);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawRotatedText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawRotatedText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawRotatedText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	long x0;
	long y0;
	double angle0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* text1;
	long text_len1;
	zval* point1 = 0;
	void* object_pointer1_1 = 0;
	double angle1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'slld' (&text0, &text_len0, &x0, &y0, &angle0)\n");
		#endif
		char parse_parameters_string[] = "slld";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &x0, &y0, &angle0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sOd' (&text1, &text_len1, &point1, php_wxPoint_entry, &angle1)\n");
		#endif
		char parse_parameters_string[] = "sOd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text1, &text_len1, &point1, php_wxPoint_entry, &angle1 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(point1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(point1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(point1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawRotatedText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0, angle0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawRotatedText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1, angle1);
				}

				references->AddReference(point1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawRoundedRectangle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawRoundedRectangle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawRoundedRectangle\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	long width0;
	long height0;
	double radius0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt1 = 0;
	void* object_pointer1_0 = 0;
	zval* sz1 = 0;
	void* object_pointer1_1 = 0;
	double radius1;
	bool overload1_called = false;
	//Parameters for overload 2
	zval* rect2 = 0;
	void* object_pointer2_0 = 0;
	double radius2;
	bool overload2_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lllld' (&x0, &y0, &width0, &height0, &radius0)\n");
		#endif
		char parse_parameters_string[] = "lllld";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &width0, &height0, &radius0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOd' (&pt1, php_wxPoint_entry, &sz1, php_wxSize_entry, &radius1)\n");
		#endif
		char parse_parameters_string[] = "OOd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt1, php_wxPoint_entry, &sz1, php_wxSize_entry, &radius1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						goto overload2;
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(sz1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(sz1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(sz1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Od' (&rect2, php_wxRect_entry, &radius2)\n");
		#endif
		char parse_parameters_string[] = "Od";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect2, php_wxRect_entry, &radius2 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect2) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawRoundedRectangle((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0, radius0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawRoundedRectangle(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1, radius1);
				}

				references->AddReference(pt1);
				references->AddReference(sz1);

				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawRoundedRectangle(*(wxRect*) object_pointer2_0, radius2);
				}

				references->AddReference(rect2);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawSpline)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawSpline\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawSpline\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x10;
	long y10;
	long x20;
	long y20;
	long x30;
	long y30;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llllll' (&x10, &y10, &x20, &y20, &x30, &y30)\n");
		#endif
		char parse_parameters_string[] = "llllll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x10, &y10, &x20, &y20, &x30, &y30 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawSpline((wxCoord) x10, (wxCoord) y10, (wxCoord) x20, (wxCoord) y20, (wxCoord) x30, (wxCoord) y30);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, DrawText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::DrawText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::DrawText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	long x0;
	long y0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* text1;
	long text_len1;
	zval* pt1 = 0;
	void* object_pointer1_1 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sll' (&text0, &text_len0, &x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sO' (&text1, &text_len1, &pt1, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "sO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text1, &text_len1, &pt1, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawText(wxString(text0, wxConvUTF8), (wxCoord) x0, (wxCoord) y0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->DrawText(wxString(text1, wxConvUTF8), *(wxPoint*) object_pointer1_1);
				}

				references->AddReference(pt1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, EndDoc)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::EndDoc\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::EndDoc\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::EndDoc()\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->EndDoc();
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->EndDoc();
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, EndPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::EndPage\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::EndPage\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::EndPage()\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->EndPage();
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->EndPage();
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, FloodFill)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::FloodFill\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::FloodFill\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	zval* colour0 = 0;
	void* object_pointer0_2 = 0;
	long style0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt1 = 0;
	void* object_pointer1_0 = 0;
	zval* col1 = 0;
	void* object_pointer1_1 = 0;
	long style1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llO|l' (&x0, &y0, &colour0, php_wxColour_entry, &style0)\n");
		#endif
		char parse_parameters_string[] = "llO|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &colour0, php_wxColour_entry, &style0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(colour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(colour0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO|l' (&pt1, php_wxPoint_entry, &col1, php_wxColour_entry, &style1)\n");
		#endif
		char parse_parameters_string[] = "OO|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt1, php_wxPoint_entry, &col1, php_wxColour_entry, &style1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(col1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(col1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(col1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2));
				}

				references->AddReference(colour0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->FloodFill((wxCoord) x0, (wxCoord) y0, *(wxColour*) object_pointer0_2, (wxFloodFillStyle) style0));
				}

				references->AddReference(colour0);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1));
				}

				references->AddReference(pt1);
				references->AddReference(col1);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->FloodFill(*(wxPoint*) object_pointer1_0, *(wxColour*) object_pointer1_1, (wxFloodFillStyle) style1));
				}

				references->AddReference(pt1);
				references->AddReference(col1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetBackground)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetBackground\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetBackground\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetBackground() to return object reference\n\n");
				#endif
				wxBrush_php* value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxWindowDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxClientDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxPaintDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxScreenDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxPostScriptDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxPrinterDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxMemoryDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxBufferedDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxBufferedPaintDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxAutoBufferedPaintDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxMirrorDC_php*)_this)->GetBackground();

				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxDC_php*)_this)->GetBackground();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxBrush_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxBrush));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetBackgroundMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetBackgroundMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetBackgroundMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::GetBackgroundMode())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->GetBackgroundMode());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->GetBackgroundMode());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetBrush)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetBrush\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetBrush\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetBrush() to return object reference\n\n");
				#endif
				wxBrush_php* value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxWindowDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxClientDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxPaintDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxScreenDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxPostScriptDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxPrinterDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxMemoryDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxBufferedDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxBufferedPaintDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxAutoBufferedPaintDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxMirrorDC_php*)_this)->GetBrush();

				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = (wxBrush_php*) &((wxDC_php*)_this)->GetBrush();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxBrush_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxBrush));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetCharHeight)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetCharHeight\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetCharHeight\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::GetCharHeight())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->GetCharHeight());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->GetCharHeight());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetCharWidth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetCharWidth\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetCharWidth\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::GetCharWidth())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->GetCharWidth());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->GetCharWidth());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetClippingBox)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetClippingBox\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetClippingBox\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	long width0;
	long height0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
		#endif
		char parse_parameters_string[] = "llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetClippingBox((wxCoord*) x0, (wxCoord*) y0, (wxCoord*) width0, (wxCoord*) height0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetDepth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetDepth\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetDepth\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::GetDepth())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->GetDepth());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->GetDepth());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetDeviceOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetDeviceOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetDeviceOrigin\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetDeviceOrigin() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = ((wxWindowDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = ((wxClientDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = ((wxPaintDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = ((wxScreenDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = ((wxPostScriptDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = ((wxPrinterDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = ((wxMemoryDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = ((wxBufferedDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = ((wxBufferedPaintDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = ((wxAutoBufferedPaintDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = ((wxMirrorDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = ((wxDC_php*)_this)->GetDeviceOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetFont)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetFont\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetFont\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetFont() to return object reference\n\n");
				#endif
				wxFont_php* value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = (wxFont_php*) &((wxWindowDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = (wxFont_php*) &((wxClientDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = (wxFont_php*) &((wxPaintDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = (wxFont_php*) &((wxScreenDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = (wxFont_php*) &((wxPostScriptDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = (wxFont_php*) &((wxPrinterDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = (wxFont_php*) &((wxMemoryDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = (wxFont_php*) &((wxBufferedDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = (wxFont_php*) &((wxBufferedPaintDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = (wxFont_php*) &((wxAutoBufferedPaintDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = (wxFont_php*) &((wxMirrorDC_php*)_this)->GetFont();

				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = (wxFont_php*) &((wxDC_php*)_this)->GetFont();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxFont_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxFont));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetLayoutDirection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetLayoutDirection\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetLayoutDirection\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::GetLayoutDirection())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->GetLayoutDirection());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->GetLayoutDirection());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetLogicalFunction)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetLogicalFunction\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetLogicalFunction\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::GetLogicalFunction())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->GetLogicalFunction());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->GetLogicalFunction());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetLogicalOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetLogicalOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetLogicalOrigin\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
	//Parameters for overload 1
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload1_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetLogicalOrigin((wxCoord*) x0, (wxCoord*) y0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetLogicalOrigin() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = ((wxWindowDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = ((wxClientDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = ((wxPaintDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = ((wxScreenDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = ((wxPostScriptDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = ((wxPrinterDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = ((wxMemoryDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = ((wxBufferedDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = ((wxBufferedPaintDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = ((wxAutoBufferedPaintDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = ((wxMirrorDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = ((wxDC_php*)_this)->GetLogicalOrigin();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetLogicalScale)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetLogicalScale\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetLogicalScale\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	double* x0;
	zval* x0_ref;
	double* y0;
	zval* y0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'dd' (x0, y0)\n");
		#endif
		char parse_parameters_string[] = "dd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, x0, y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &x0_ref, &y0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetLogicalScale(x0, y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetLogicalScale(x0, y0);
				}

				size_t elements_returned0_0 = sizeof(x0)/sizeof(*x0);
				array_init(x0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(x0_ref, x0[i]);
				}
				size_t elements_returned0_1 = sizeof(y0)/sizeof(*y0);
				array_init(y0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(y0_ref, y0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetMapMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetMapMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetMapMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::GetMapMode())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->GetMapMode());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->GetMapMode());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetMultiLineTextExtent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetMultiLineTextExtent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetMultiLineTextExtent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	long w0;
	long h0;
	long heightLine0;
	zval* font0 = 0;
	void* object_pointer0_4 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* string1;
	long string_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sll|lz' (&string0, &string_len0, &w0, &h0, &heightLine0, &font0)\n");
		#endif
		char parse_parameters_string[] = "sll|lz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0, &w0, &h0, &heightLine0, &font0 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(font0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(font0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&string1, &string_len1)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string1, &string_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0);
				}


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetMultiLineTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) heightLine0, (const wxFont*) object_pointer0_4);
				}

				references->AddReference(font0);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetMultiLineTextExtent(wxString(string1, wxConvUTF8)) to return new object\n\n");
				#endif
				wxSize value_to_return1;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return1 = ((wxWindowDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return1 = ((wxClientDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return1 = ((wxPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return1 = ((wxScreenDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return1 = ((wxPostScriptDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return1 = ((wxPrinterDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return1 = ((wxMemoryDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return1 = ((wxBufferedDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return1 = ((wxBufferedPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return1 = ((wxAutoBufferedPaintDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return1 = ((wxMirrorDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return1 = ((wxDC_php*)_this)->GetMultiLineTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetPPI)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetPPI\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetPPI\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetPPI() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = ((wxWindowDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = ((wxClientDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = ((wxPaintDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = ((wxScreenDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = ((wxPostScriptDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = ((wxPrinterDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = ((wxMemoryDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = ((wxBufferedDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = ((wxBufferedPaintDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = ((wxAutoBufferedPaintDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = ((wxMirrorDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = ((wxDC_php*)_this)->GetPPI();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetPen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetPen\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetPen\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetPen() to return object reference\n\n");
				#endif
				wxPen_php* value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = (wxPen_php*) &((wxWindowDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = (wxPen_php*) &((wxClientDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = (wxPen_php*) &((wxPaintDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = (wxPen_php*) &((wxScreenDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = (wxPen_php*) &((wxPostScriptDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = (wxPen_php*) &((wxPrinterDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = (wxPen_php*) &((wxMemoryDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = (wxPen_php*) &((wxBufferedDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = (wxPen_php*) &((wxBufferedPaintDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = (wxPen_php*) &((wxAutoBufferedPaintDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = (wxPen_php*) &((wxMirrorDC_php*)_this)->GetPen();

				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = (wxPen_php*) &((wxDC_php*)_this)->GetPen();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxPen_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxPen));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetPixel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetPixel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetPixel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	zval* colour0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llz' (&x0, &y0, &colour0)\n");
		#endif
		char parse_parameters_string[] = "llz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &colour0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(colour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->GetPixel((wxCoord) x0, (wxCoord) y0, (wxColour*) object_pointer0_2));
				}

				references->AddReference(colour0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long width0;
	long height0;
	bool overload0_called = false;
	//Parameters for overload 1
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&width0, &height0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &width0, &height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload1_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetSize((wxCoord*) width0, (wxCoord*) height0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetSize((wxCoord*) width0, (wxCoord*) height0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetSize() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = ((wxWindowDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = ((wxClientDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = ((wxPaintDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = ((wxScreenDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = ((wxPostScriptDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = ((wxPrinterDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = ((wxMemoryDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = ((wxBufferedDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = ((wxBufferedPaintDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = ((wxAutoBufferedPaintDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = ((wxMirrorDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = ((wxDC_php*)_this)->GetSize();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetSizeMM)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetSizeMM\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetSizeMM\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long width0;
	long height0;
	bool overload0_called = false;
	//Parameters for overload 1
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&width0, &height0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &width0, &height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload1_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetSizeMM((wxCoord*) width0, (wxCoord*) height0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetSizeMM((wxCoord*) width0, (wxCoord*) height0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetSizeMM() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = ((wxWindowDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = ((wxClientDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = ((wxPaintDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = ((wxScreenDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = ((wxPostScriptDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = ((wxPrinterDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = ((wxMemoryDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = ((wxBufferedDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = ((wxBufferedPaintDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = ((wxAutoBufferedPaintDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = ((wxMirrorDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = ((wxDC_php*)_this)->GetSizeMM();
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetTextBackground)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetTextBackground\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetTextBackground\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetTextBackground() to return object reference\n\n");
				#endif
				wxColour_php* value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = (wxColour_php*) &((wxWindowDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = (wxColour_php*) &((wxClientDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = (wxColour_php*) &((wxPaintDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = (wxColour_php*) &((wxScreenDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = (wxColour_php*) &((wxPostScriptDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = (wxColour_php*) &((wxPrinterDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = (wxColour_php*) &((wxMemoryDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = (wxColour_php*) &((wxBufferedDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = (wxColour_php*) &((wxBufferedPaintDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = (wxColour_php*) &((wxAutoBufferedPaintDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = (wxColour_php*) &((wxMirrorDC_php*)_this)->GetTextBackground();

				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = (wxColour_php*) &((wxDC_php*)_this)->GetTextBackground();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxColour_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxColour));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetTextExtent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetTextExtent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetTextExtent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	long w0;
	long h0;
	long descent0;
	long externalLeading0;
	zval* font0 = 0;
	void* object_pointer0_5 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* string1;
	long string_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sll|llz' (&string0, &string_len0, &w0, &h0, &descent0, &externalLeading0, &font0)\n");
		#endif
		char parse_parameters_string[] = "sll|llz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0, &w0, &h0, &descent0, &externalLeading0, &font0 ) == SUCCESS)
		{
			if(arguments_received >= 6){
				if(Z_TYPE_P(font0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(font0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_5 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_5 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&string1, &string_len1)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string1, &string_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0);
				}


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0);
				}


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0);
				}


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetTextExtent(wxString(string0, wxConvUTF8), (wxCoord*) w0, (wxCoord*) h0, (wxCoord*) descent0, (wxCoord*) externalLeading0, (const wxFont*) object_pointer0_5);
				}

				references->AddReference(font0);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetTextExtent(wxString(string1, wxConvUTF8)) to return new object\n\n");
				#endif
				wxSize value_to_return1;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return1 = ((wxWindowDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return1 = ((wxClientDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return1 = ((wxPaintDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return1 = ((wxScreenDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return1 = ((wxPostScriptDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return1 = ((wxPrinterDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return1 = ((wxMemoryDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return1 = ((wxBufferedDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return1 = ((wxBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return1 = ((wxAutoBufferedPaintDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return1 = ((wxMirrorDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return1 = ((wxDC_php*)_this)->GetTextExtent(wxString(string1, wxConvUTF8));
					void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
					memcpy(ptr, &value_to_return1, sizeof(wxSize));
					object_init_ex(return_value, php_wxSize_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetTextForeground)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetTextForeground\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetTextForeground\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetTextForeground() to return object reference\n\n");
				#endif
				wxColour_php* value_to_return0;
				if(parent_rsrc_type == le_wxWindowDC)
				{
					value_to_return0 = (wxColour_php*) &((wxWindowDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					value_to_return0 = (wxColour_php*) &((wxClientDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					value_to_return0 = (wxColour_php*) &((wxPaintDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					value_to_return0 = (wxColour_php*) &((wxScreenDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					value_to_return0 = (wxColour_php*) &((wxPostScriptDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					value_to_return0 = (wxColour_php*) &((wxPrinterDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					value_to_return0 = (wxColour_php*) &((wxMemoryDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					value_to_return0 = (wxColour_php*) &((wxBufferedDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					value_to_return0 = (wxColour_php*) &((wxBufferedPaintDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					value_to_return0 = (wxColour_php*) &((wxAutoBufferedPaintDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					value_to_return0 = (wxColour_php*) &((wxMirrorDC_php*)_this)->GetTextForeground();

				}
				else if(parent_rsrc_type == le_wxDC)
				{
					value_to_return0 = (wxColour_php*) &((wxDC_php*)_this)->GetTextForeground();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxColour_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxColour));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GetUserScale)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GetUserScale\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GetUserScale\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	double* x0;
	zval* x0_ref;
	double* y0;
	zval* y0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'dd' (x0, y0)\n");
		#endif
		char parse_parameters_string[] = "dd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, x0, y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &x0_ref, &y0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GetUserScale(x0, y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GetUserScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GetUserScale(x0, y0);
				}

				size_t elements_returned0_0 = sizeof(x0)/sizeof(*x0);
				array_init(x0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(x0_ref, x0[i]);
				}
				size_t elements_returned0_1 = sizeof(y0)/sizeof(*y0);
				array_init(y0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(y0_ref, y0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GradientFillConcentric)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GradientFillConcentric\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GradientFillConcentric\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* rect0 = 0;
	void* object_pointer0_0 = 0;
	zval* initialColour0 = 0;
	void* object_pointer0_1 = 0;
	zval* destColour0 = 0;
	void* object_pointer0_2 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* rect1 = 0;
	void* object_pointer1_0 = 0;
	zval* initialColour1 = 0;
	void* object_pointer1_1 = 0;
	zval* destColour1 = 0;
	void* object_pointer1_2 = 0;
	zval* circleCenter1 = 0;
	void* object_pointer1_3 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOO' (&rect0, php_wxRect_entry, &initialColour0, php_wxColour_entry, &destColour0, php_wxColour_entry)\n");
		#endif
		char parse_parameters_string[] = "OOO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect0, php_wxRect_entry, &initialColour0, php_wxColour_entry, &destColour0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(rect0) != IS_NULL)
				{
						goto overload1;
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(initialColour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(initialColour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(initialColour0) != IS_NULL)
				{
						goto overload1;
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(destColour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(destColour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(destColour0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOOO' (&rect1, php_wxRect_entry, &initialColour1, php_wxColour_entry, &destColour1, php_wxColour_entry, &circleCenter1, php_wxPoint_entry)\n");
		#endif
		char parse_parameters_string[] = "OOOO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect1, php_wxRect_entry, &initialColour1, php_wxColour_entry, &destColour1, php_wxColour_entry, &circleCenter1, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(initialColour1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(initialColour1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(initialColour1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(destColour1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(destColour1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(destColour1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(circleCenter1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(circleCenter1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(circleCenter1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}

				references->AddReference(rect0);
				references->AddReference(initialColour0);
				references->AddReference(destColour0);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GradientFillConcentric(*(wxRect*) object_pointer1_0, *(wxColour*) object_pointer1_1, *(wxColour*) object_pointer1_2, *(wxPoint*) object_pointer1_3);
				}

				references->AddReference(rect1);
				references->AddReference(initialColour1);
				references->AddReference(destColour1);
				references->AddReference(circleCenter1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, GradientFillLinear)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::GradientFillLinear\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::GradientFillLinear\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* rect0 = 0;
	void* object_pointer0_0 = 0;
	zval* initialColour0 = 0;
	void* object_pointer0_1 = 0;
	zval* destColour0 = 0;
	void* object_pointer0_2 = 0;
	long nDirection0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOO|l' (&rect0, php_wxRect_entry, &initialColour0, php_wxColour_entry, &destColour0, php_wxColour_entry, &nDirection0)\n");
		#endif
		char parse_parameters_string[] = "OOO|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect0, php_wxRect_entry, &initialColour0, php_wxColour_entry, &destColour0, php_wxColour_entry, &nDirection0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(initialColour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(initialColour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(initialColour0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(destColour0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(destColour0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(destColour0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2);
				}

				references->AddReference(rect0);
				references->AddReference(initialColour0);
				references->AddReference(destColour0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->GradientFillLinear(*(wxRect*) object_pointer0_0, *(wxColour*) object_pointer0_1, *(wxColour*) object_pointer0_2, (wxDirection) nDirection0);
				}

				references->AddReference(rect0);
				references->AddReference(initialColour0);
				references->AddReference(destColour0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, IsOk)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::IsOk\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::IsOk\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::IsOk())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->IsOk());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->IsOk());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, LogicalToDeviceX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::LogicalToDeviceX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::LogicalToDeviceX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::LogicalToDeviceX((wxCoord) x0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->LogicalToDeviceX((wxCoord) x0));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, LogicalToDeviceY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::LogicalToDeviceY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::LogicalToDeviceY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&y0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::LogicalToDeviceY((wxCoord) y0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->LogicalToDeviceY((wxCoord) y0));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, LogicalToDeviceXRel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::LogicalToDeviceXRel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::LogicalToDeviceXRel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::LogicalToDeviceXRel((wxCoord) x0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->LogicalToDeviceXRel((wxCoord) x0));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, LogicalToDeviceYRel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::LogicalToDeviceYRel\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::LogicalToDeviceYRel\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&y0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::LogicalToDeviceYRel((wxCoord) y0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->LogicalToDeviceYRel((wxCoord) y0));
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, MaxX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::MaxX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::MaxX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::MaxX())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->MaxX());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->MaxX());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, MaxY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::MaxY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::MaxY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::MaxY())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->MaxY());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->MaxY());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, MinX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::MinX\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::MinX\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::MinX())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->MinX());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->MinX());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, MinY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::MinY\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::MinY\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDC::MinY())\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_LONG(return_value, ((wxWindowDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_LONG(return_value, ((wxClientDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_LONG(return_value, ((wxPaintDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_LONG(return_value, ((wxScreenDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_LONG(return_value, ((wxPostScriptDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_LONG(return_value, ((wxPrinterDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_LONG(return_value, ((wxMemoryDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxBufferedPaintDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_LONG(return_value, ((wxAutoBufferedPaintDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_LONG(return_value, ((wxMirrorDC_php*)_this)->MinY());
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_LONG(return_value, ((wxDC_php*)_this)->MinY());
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, ResetBoundingBox)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::ResetBoundingBox\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::ResetBoundingBox\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::ResetBoundingBox()\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->ResetBoundingBox();
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->ResetBoundingBox();
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, ResetTransformMatrix)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::ResetTransformMatrix\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::ResetTransformMatrix\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::ResetTransformMatrix()\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->ResetTransformMatrix();
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->ResetTransformMatrix();
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetAxisOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetAxisOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetAxisOrientation\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool xLeftRight0;
	bool yBottomUp0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'bb' (&xLeftRight0, &yBottomUp0)\n");
		#endif
		char parse_parameters_string[] = "bb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &xLeftRight0, &yBottomUp0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetAxisOrientation(xLeftRight0, yBottomUp0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetAxisOrientation(xLeftRight0, yBottomUp0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetBackground)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetBackground\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetBackground\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* brush0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&brush0, php_wxBrush_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &brush0, php_wxBrush_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(brush0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(brush0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(brush0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetBackground(*(wxBrush*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetBackground(*(wxBrush*) object_pointer0_0);
				}

				references->AddReference(brush0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetBackgroundMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetBackgroundMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetBackgroundMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&mode0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetBackgroundMode((int) mode0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetBackgroundMode((int) mode0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetBackgroundMode((int) mode0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetBrush)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetBrush\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetBrush\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* brush0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&brush0, php_wxBrush_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &brush0, php_wxBrush_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(brush0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(brush0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(brush0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetBrush(*(wxBrush*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetBrush(*(wxBrush*) object_pointer0_0);
				}

				references->AddReference(brush0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetClippingRegion)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetClippingRegion\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetClippingRegion\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	long width0;
	long height0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* pt1 = 0;
	void* object_pointer1_0 = 0;
	zval* sz1 = 0;
	void* object_pointer1_1 = 0;
	bool overload1_called = false;
	//Parameters for overload 2
	zval* rect2 = 0;
	void* object_pointer2_0 = 0;
	bool overload2_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (&x0, &y0, &width0, &height0)\n");
		#endif
		char parse_parameters_string[] = "llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0, &width0, &height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&pt1, php_wxPoint_entry, &sz1, php_wxSize_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt1, php_wxPoint_entry, &sz1, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(pt1) != IS_NULL)
				{
						goto overload2;
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(sz1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(sz1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(sz1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect2, php_wxRect_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect2, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect2) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetClippingRegion((wxCoord) x0, (wxCoord) y0, (wxCoord) width0, (wxCoord) height0);
				}


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetClippingRegion(*(wxPoint*) object_pointer1_0, *(wxSize*) object_pointer1_1);
				}

				references->AddReference(pt1);
				references->AddReference(sz1);

				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetClippingRegion(*(wxRect*) object_pointer2_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetClippingRegion(*(wxRect*) object_pointer2_0);
				}

				references->AddReference(rect2);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetDeviceClippingRegion)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetDeviceClippingRegion\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetDeviceClippingRegion\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* region0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&region0, php_wxRegion_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &region0, php_wxRegion_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(region0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(region0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(region0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetDeviceClippingRegion(*(wxRegion*) object_pointer0_0);
				}

				references->AddReference(region0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetDeviceOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetDeviceOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetDeviceOrigin\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetDeviceOrigin((wxCoord) x0, (wxCoord) y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetDeviceOrigin((wxCoord) x0, (wxCoord) y0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetFont)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetFont\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetFont\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* font0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&font0, php_wxFont_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &font0, php_wxFont_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(font0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(font0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetFont(*(wxFont*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetFont(*(wxFont*) object_pointer0_0);
				}

				references->AddReference(font0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetLayoutDirection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetLayoutDirection\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetLayoutDirection\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long dir0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&dir0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dir0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetLayoutDirection((wxLayoutDirection) dir0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetLayoutDirection((wxLayoutDirection) dir0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetLogicalFunction)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetLogicalFunction\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetLogicalFunction\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long function0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&function0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &function0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetLogicalFunction((wxRasterOperationMode) function0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetLogicalFunction((wxRasterOperationMode) function0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetLogicalOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetLogicalOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetLogicalOrigin\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetLogicalOrigin((wxCoord) x0, (wxCoord) y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetLogicalOrigin((wxCoord) x0, (wxCoord) y0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetLogicalScale)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetLogicalScale\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetLogicalScale\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	double x0;
	double y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'dd' (&x0, &y0)\n");
		#endif
		char parse_parameters_string[] = "dd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetLogicalScale(x0, y0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetLogicalScale(x0, y0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetLogicalScale(x0, y0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetMapMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetMapMode\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetMapMode\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&mode0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetMapMode((wxMappingMode) mode0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetMapMode((wxMappingMode) mode0);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetPalette)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetPalette\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetPalette\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* palette0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&palette0, php_wxPalette_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &palette0, php_wxPalette_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(palette0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(palette0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(palette0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetPalette(*(wxPalette*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetPalette(*(wxPalette*) object_pointer0_0);
				}

				references->AddReference(palette0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, SetPen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::SetPen\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::SetPen\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* pen0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pen0, php_wxPen_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pen0, php_wxPen_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pen0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pen0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pen0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDC::SetPen(*(wxPen*) object_pointer0_0)\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					((wxWindowDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					((wxClientDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					((wxPaintDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					((wxScreenDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					((wxPostScriptDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					((wxPrinterDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					((wxMemoryDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					((wxBufferedDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					((wxBufferedPaintDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					((wxAutoBufferedPaintDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					((wxMirrorDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					((wxDC_php*)_this)->SetPen(*(wxPen*) object_pointer0_0);
				}

				references->AddReference(pen0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, StretchBlit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::StretchBlit\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::StretchBlit\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long xdest0;
	long ydest0;
	long dstWidth0;
	long dstHeight0;
	zval* source0 = 0;
	void* object_pointer0_4 = 0;
	long xsrc0;
	long ysrc0;
	long srcWidth0;
	long srcHeight0;
	long logicalFunc0;
	bool useMask0;
	long xsrcMask0;
	long ysrcMask0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 9  && arguments_received <= 13)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llllzllll|lbll' (&xdest0, &ydest0, &dstWidth0, &dstHeight0, &source0, &xsrc0, &ysrc0, &srcWidth0, &srcHeight0, &logicalFunc0, &useMask0, &xsrcMask0, &ysrcMask0)\n");
		#endif
		char parse_parameters_string[] = "llllzllll|lbll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &xdest0, &ydest0, &dstWidth0, &dstHeight0, &source0, &xsrc0, &ysrc0, &srcWidth0, &srcHeight0, &logicalFunc0, &useMask0, &xsrcMask0, &ysrcMask0 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(source0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(source0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(source0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0));
				}

				references->AddReference(source0);

				return;
				break;
			}
			case 10:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0));
				}

				references->AddReference(source0);

				return;
				break;
			}
			case 11:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}

				references->AddReference(source0);

				return;
				break;
			}
			case 12:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}

				references->AddReference(source0);

				return;
				break;
			}
			case 13:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->StretchBlit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) dstWidth0, (wxCoord) dstHeight0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxCoord) srcWidth0, (wxCoord) srcHeight0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}

				references->AddReference(source0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxDC, Blit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDC::Blit\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxDC::Blit\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxDC){
				references = &((wxDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWindowDC) && (!reference_type_found)){
				references = &((wxWindowDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxClientDC) && (!reference_type_found)){
				references = &((wxClientDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPaintDC) && (!reference_type_found)){
				references = &((wxPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxScreenDC) && (!reference_type_found)){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPostScriptDC) && (!reference_type_found)){
				references = &((wxPostScriptDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrinterDC) && (!reference_type_found)){
				references = &((wxPrinterDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMemoryDC) && (!reference_type_found)){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMirrorDC) && (!reference_type_found)){
				references = &((wxMirrorDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long xdest0;
	long ydest0;
	long width0;
	long height0;
	zval* source0 = 0;
	void* object_pointer0_4 = 0;
	long xsrc0;
	long ysrc0;
	long logicalFunc0;
	bool useMask0;
	long xsrcMask0;
	long ysrcMask0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 7  && arguments_received <= 11)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llllzll|lbll' (&xdest0, &ydest0, &width0, &height0, &source0, &xsrc0, &ysrc0, &logicalFunc0, &useMask0, &xsrcMask0, &ysrcMask0)\n");
		#endif
		char parse_parameters_string[] = "llllzll|lbll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &xdest0, &ydest0, &width0, &height0, &source0, &xsrc0, &ysrc0, &logicalFunc0, &useMask0, &xsrcMask0, &ysrcMask0 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(source0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(source0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(source0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0));
				}

				references->AddReference(source0);

				return;
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0));
				}

				references->AddReference(source0);

				return;
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0));
				}

				references->AddReference(source0);

				return;
				break;
			}
			case 10:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0));
				}

				references->AddReference(source0);

				return;
				break;
			}
			case 11:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDC::Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0))\n\n");
				#endif
				if(parent_rsrc_type == le_wxWindowDC)
				{
					ZVAL_BOOL(return_value, ((wxWindowDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxClientDC)
				{
					ZVAL_BOOL(return_value, ((wxClientDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxScreenDC)
				{
					ZVAL_BOOL(return_value, ((wxScreenDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxPostScriptDC)
				{
					ZVAL_BOOL(return_value, ((wxPostScriptDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxPrinterDC)
				{
					ZVAL_BOOL(return_value, ((wxPrinterDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxMemoryDC)
				{
					ZVAL_BOOL(return_value, ((wxMemoryDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxAutoBufferedPaintDC)
				{
					ZVAL_BOOL(return_value, ((wxAutoBufferedPaintDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxMirrorDC)
				{
					ZVAL_BOOL(return_value, ((wxMirrorDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}
				else if(parent_rsrc_type == le_wxDC)
				{
					ZVAL_BOOL(return_value, ((wxDC_php*)_this)->Blit((wxCoord) xdest0, (wxCoord) ydest0, (wxCoord) width0, (wxCoord) height0, (wxDC*) object_pointer0_4, (wxCoord) xsrc0, (wxCoord) ysrc0, (wxRasterOperationMode) logicalFunc0, useMask0, (wxCoord) xsrcMask0, (wxCoord) ysrcMask0));
				}

				references->AddReference(source0);

				return;
				break;
			}
		}
	}

		
}
void php_wxBufferedDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxBufferedDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxBufferedDC_php* object = static_cast<wxBufferedDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxBufferedDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxBufferedDC, Init)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxBufferedDC::Init\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxBufferedDC::Init\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxBufferedDC){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* dc0 = 0;
	void* object_pointer0_0 = 0;
	zval* area0 = 0;
	void* object_pointer0_1 = 0;
	long style0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* dc1 = 0;
	void* object_pointer1_0 = 0;
	zval* buffer1 = 0;
	void* object_pointer1_1 = 0;
	long style1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO|l' (&dc0, &area0, php_wxSize_entry, &style0)\n");
		#endif
		char parse_parameters_string[] = "zO|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc0, &area0, php_wxSize_entry, &style0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
						goto overload1;
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(area0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(area0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(area0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|Ol' (&dc1, &buffer1, php_wxBitmap_entry, &style1)\n");
		#endif
		char parse_parameters_string[] = "z|Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc1, &buffer1, php_wxBitmap_entry, &style1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(buffer1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(buffer1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(buffer1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer0_0, *(wxSize*) object_pointer0_1)\n\n");
				#endif
				((wxBufferedDC_php*)_this)->Init((wxDC*) object_pointer0_0, *(wxSize*) object_pointer0_1);

				references->AddReference(dc0);
				references->AddReference(area0);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer0_0, *(wxSize*) object_pointer0_1, (int) style0)\n\n");
				#endif
				((wxBufferedDC_php*)_this)->Init((wxDC*) object_pointer0_0, *(wxSize*) object_pointer0_1, (int) style0);

				references->AddReference(dc0);
				references->AddReference(area0);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer1_0)\n\n");
				#endif
				((wxBufferedDC_php*)_this)->Init((wxDC*) object_pointer1_0);

				references->AddReference(dc1);

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer1_0, *(wxBitmap*) object_pointer1_1)\n\n");
				#endif
				((wxBufferedDC_php*)_this)->Init((wxDC*) object_pointer1_0, *(wxBitmap*) object_pointer1_1);

				references->AddReference(dc1);
				references->AddReference(buffer1);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxBufferedDC::Init((wxDC*) object_pointer1_0, *(wxBitmap*) object_pointer1_1, (int) style1)\n\n");
				#endif
				((wxBufferedDC_php*)_this)->Init((wxDC*) object_pointer1_0, *(wxBitmap*) object_pointer1_1, (int) style1);

				references->AddReference(dc1);
				references->AddReference(buffer1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxBufferedDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxBufferedDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* dc1 = 0;
	void* object_pointer1_0 = 0;
	zval* area1 = 0;
	void* object_pointer1_1 = 0;
	long style1;
	bool overload1_called = false;
	//Parameters for overload 2
	zval* dc2 = 0;
	void* object_pointer2_0 = 0;
	zval* buffer2 = 0;
	void* object_pointer2_1 = 0;
	long style2;
	bool overload2_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO|l' (&dc1, &area1, php_wxSize_entry, &style1)\n");
		#endif
		char parse_parameters_string[] = "zO|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc1, &area1, php_wxSize_entry, &style1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(dc1) != IS_NULL)
				{
						goto overload2;
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(area1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(area1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(area1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|Ol' (&dc2, &buffer2, php_wxBitmap_entry, &style2)\n");
		#endif
		char parse_parameters_string[] = "z|Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc2, &buffer2, php_wxBitmap_entry, &style2 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_0 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc2) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(buffer2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(buffer2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(buffer2) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxBufferedDC_php();

				((wxBufferedDC_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxDC*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n");
				#endif
				_this = new wxBufferedDC_php((wxDC*) object_pointer1_0, *(wxSize*) object_pointer1_1);

				((wxBufferedDC_php*) _this)->references.Initialize();
				((wxBufferedDC_php*) _this)->references.AddReference(dc1);
				((wxBufferedDC_php*) _this)->references.AddReference(area1);
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxDC*) object_pointer1_0, *(wxSize*) object_pointer1_1, (int) style1)\n");
				#endif
				_this = new wxBufferedDC_php((wxDC*) object_pointer1_0, *(wxSize*) object_pointer1_1, (int) style1);

				((wxBufferedDC_php*) _this)->references.Initialize();
				((wxBufferedDC_php*) _this)->references.AddReference(dc1);
				((wxBufferedDC_php*) _this)->references.AddReference(area1);
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxDC*) object_pointer2_0)\n");
				#endif
				_this = new wxBufferedDC_php((wxDC*) object_pointer2_0);

				((wxBufferedDC_php*) _this)->references.Initialize();
				((wxBufferedDC_php*) _this)->references.AddReference(dc2);
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxDC*) object_pointer2_0, *(wxBitmap*) object_pointer2_1)\n");
				#endif
				_this = new wxBufferedDC_php((wxDC*) object_pointer2_0, *(wxBitmap*) object_pointer2_1);

				((wxBufferedDC_php*) _this)->references.Initialize();
				((wxBufferedDC_php*) _this)->references.AddReference(dc2);
				((wxBufferedDC_php*) _this)->references.AddReference(buffer2);
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxDC*) object_pointer2_0, *(wxBitmap*) object_pointer2_1, (int) style2)\n");
				#endif
				_this = new wxBufferedDC_php((wxDC*) object_pointer2_0, *(wxBitmap*) object_pointer2_1, (int) style2);

				((wxBufferedDC_php*) _this)->references.Initialize();
				((wxBufferedDC_php*) _this)->references.AddReference(dc2);
				((wxBufferedDC_php*) _this)->references.AddReference(buffer2);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxBufferedDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxBufferedDC_php*) _this)->evnArray);
		
		array_init(((wxBufferedDC_php*) _this)->evnArray);
		
		((wxBufferedDC_php*) _this)->phpObj = getThis();
		
		((wxBufferedDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxBufferedDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxAutoBufferedPaintDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxAutoBufferedPaintDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxAutoBufferedPaintDC_php* object = static_cast<wxAutoBufferedPaintDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxAutoBufferedPaintDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxAutoBufferedPaintDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxAutoBufferedPaintDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* window0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxAutoBufferedPaintDC_php((wxWindow*) object_pointer0_0);

				((wxAutoBufferedPaintDC_php*) _this)->references.Initialize();
				((wxAutoBufferedPaintDC_php*) _this)->references.AddReference(window0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxAutoBufferedPaintDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxAutoBufferedPaintDC_php*) _this)->evnArray);
		
		array_init(((wxAutoBufferedPaintDC_php*) _this)->evnArray);
		
		((wxAutoBufferedPaintDC_php*) _this)->phpObj = getThis();
		
		((wxAutoBufferedPaintDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxAutoBufferedPaintDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxBufferedPaintDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxBufferedPaintDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxBufferedPaintDC_php* object = static_cast<wxBufferedPaintDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxBufferedPaintDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxBufferedPaintDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxBufferedPaintDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* window0 = 0;
	void* object_pointer0_0 = 0;
	zval* buffer0 = 0;
	void* object_pointer0_1 = 0;
	long style0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* window1 = 0;
	void* object_pointer1_0 = 0;
	long style1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO|l' (&window0, &buffer0, php_wxBitmap_entry, &style0)\n");
		#endif
		char parse_parameters_string[] = "zO|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0, &buffer0, php_wxBitmap_entry, &style0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
						goto overload1;
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(buffer0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(buffer0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(buffer0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&window1, &style1)\n");
		#endif
		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window1, &style1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, *(wxBitmap*) object_pointer0_1)\n");
				#endif
				_this = new wxBufferedPaintDC_php((wxWindow*) object_pointer0_0, *(wxBitmap*) object_pointer0_1);

				((wxBufferedPaintDC_php*) _this)->references.Initialize();
				((wxBufferedPaintDC_php*) _this)->references.AddReference(window0);
				((wxBufferedPaintDC_php*) _this)->references.AddReference(buffer0);
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, *(wxBitmap*) object_pointer0_1, (int) style0)\n");
				#endif
				_this = new wxBufferedPaintDC_php((wxWindow*) object_pointer0_0, *(wxBitmap*) object_pointer0_1, (int) style0);

				((wxBufferedPaintDC_php*) _this)->references.Initialize();
				((wxBufferedPaintDC_php*) _this)->references.AddReference(window0);
				((wxBufferedPaintDC_php*) _this)->references.AddReference(buffer0);
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
				#endif
				_this = new wxBufferedPaintDC_php((wxWindow*) object_pointer1_0);

				((wxBufferedPaintDC_php*) _this)->references.Initialize();
				((wxBufferedPaintDC_php*) _this)->references.AddReference(window1);
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (int) style1)\n");
				#endif
				_this = new wxBufferedPaintDC_php((wxWindow*) object_pointer1_0, (int) style1);

				((wxBufferedPaintDC_php*) _this)->references.Initialize();
				((wxBufferedPaintDC_php*) _this)->references.AddReference(window1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxBufferedPaintDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxBufferedPaintDC_php*) _this)->evnArray);
		
		array_init(((wxBufferedPaintDC_php*) _this)->evnArray);
		
		((wxBufferedPaintDC_php*) _this)->phpObj = getThis();
		
		((wxBufferedPaintDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxBufferedPaintDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxPaintDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPaintDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxPaintDC_php* object = static_cast<wxPaintDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxPaintDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxPaintDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPaintDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* window0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxPaintDC_php((wxWindow*) object_pointer0_0);

				((wxPaintDC_php*) _this)->references.Initialize();
				((wxPaintDC_php*) _this)->references.AddReference(window0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxPaintDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxPaintDC_php*) _this)->evnArray);
		
		array_init(((wxPaintDC_php*) _this)->evnArray);
		
		((wxPaintDC_php*) _this)->phpObj = getThis();
		
		((wxPaintDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxPaintDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxClientDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxClientDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxClientDC_php* object = static_cast<wxClientDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxClientDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxClientDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxClientDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* window0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxClientDC_php((wxWindow*) object_pointer0_0);

				((wxClientDC_php*) _this)->references.Initialize();
				((wxClientDC_php*) _this)->references.AddReference(window0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxClientDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxClientDC_php*) _this)->evnArray);
		
		array_init(((wxClientDC_php*) _this)->evnArray);
		
		((wxClientDC_php*) _this)->phpObj = getThis();
		
		((wxClientDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxClientDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxWindowDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWindowDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxWindowDC_php* object = static_cast<wxWindowDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxWindowDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxWindowDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWindowDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* window0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxWindowDC_php((wxWindow*) object_pointer0_0);

				((wxWindowDC_php*) _this)->references.Initialize();
				((wxWindowDC_php*) _this)->references.AddReference(window0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxWindowDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxWindowDC_php*) _this)->evnArray);
		
		array_init(((wxWindowDC_php*) _this)->evnArray);
		
		((wxWindowDC_php*) _this)->phpObj = getThis();
		
		((wxWindowDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxWindowDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxMemoryDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMemoryDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxMemoryDC_php* object = static_cast<wxMemoryDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMemoryDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxMemoryDC, SelectObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMemoryDC::SelectObject\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMemoryDC::SelectObject\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMemoryDC){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* bitmap0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&bitmap0, php_wxBitmap_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bitmap0, php_wxBitmap_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bitmap0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bitmap0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bitmap0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMemoryDC::SelectObject(*(wxBitmap*) object_pointer0_0)\n\n");
				#endif
				((wxMemoryDC_php*)_this)->SelectObject(*(wxBitmap*) object_pointer0_0);

				references->AddReference(bitmap0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMemoryDC, SelectObjectAsSource)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMemoryDC::SelectObjectAsSource\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMemoryDC::SelectObjectAsSource\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMemoryDC){
				references = &((wxMemoryDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedDC) && (!reference_type_found)){
				references = &((wxBufferedDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxBufferedPaintDC) && (!reference_type_found)){
				references = &((wxBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxAutoBufferedPaintDC) && (!reference_type_found)){
				references = &((wxAutoBufferedPaintDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* bitmap0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&bitmap0, php_wxBitmap_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bitmap0, php_wxBitmap_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bitmap0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bitmap0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bitmap0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMemoryDC::SelectObjectAsSource(*(wxBitmap*) object_pointer0_0)\n\n");
				#endif
				((wxMemoryDC_php*)_this)->SelectObjectAsSource(*(wxBitmap*) object_pointer0_0);

				references->AddReference(bitmap0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMemoryDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMemoryDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* dc1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
	//Parameters for overload 2
	zval* bitmap2 = 0;
	void* object_pointer2_0 = 0;
	bool overload2_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&dc1)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 || (rsrc_type != le_wxWindowDC && rsrc_type != le_wxClientDC && rsrc_type != le_wxPaintDC && rsrc_type != le_wxScreenDC && rsrc_type != le_wxPostScriptDC && rsrc_type != le_wxPrinterDC && rsrc_type != le_wxMemoryDC && rsrc_type != le_wxBufferedDC && rsrc_type != le_wxBufferedPaintDC && rsrc_type != le_wxAutoBufferedPaintDC && rsrc_type != le_wxMirrorDC))
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(dc1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&bitmap2, php_wxBitmap_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bitmap2, php_wxBitmap_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bitmap2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bitmap2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bitmap2) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMemoryDC_php();

				((wxMemoryDC_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxDC*) object_pointer1_0)\n");
				#endif
				_this = new wxMemoryDC_php((wxDC*) object_pointer1_0);

				((wxMemoryDC_php*) _this)->references.Initialize();
				((wxMemoryDC_php*) _this)->references.AddReference(dc1);
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer2_0)\n");
				#endif
				_this = new wxMemoryDC_php(*(wxBitmap*) object_pointer2_0);

				((wxMemoryDC_php*) _this)->references.Initialize();
				((wxMemoryDC_php*) _this)->references.AddReference(bitmap2);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMemoryDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMemoryDC_php*) _this)->evnArray);
		
		array_init(((wxMemoryDC_php*) _this)->evnArray);
		
		((wxMemoryDC_php*) _this)->phpObj = getThis();
		
		((wxMemoryDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMemoryDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxMirrorDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMirrorDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxMirrorDC_php* object = static_cast<wxMirrorDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMirrorDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxMirrorDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMirrorDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* dc0 = 0;
	void* object_pointer0_0 = 0;
	bool mirror0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ob' (&dc0, php_wxDC_entry, &mirror0)\n");
		#endif
		char parse_parameters_string[] = "Ob";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc0, php_wxDC_entry, &mirror0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dc0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxDC*) object_pointer0_0, mirror0)\n");
				#endif
				_this = new wxMirrorDC_php(*(wxDC*) object_pointer0_0, mirror0);

				((wxMirrorDC_php*) _this)->references.Initialize();
				((wxMirrorDC_php*) _this)->references.AddReference(dc0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMirrorDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMirrorDC_php*) _this)->evnArray);
		
		array_init(((wxMirrorDC_php*) _this)->evnArray);
		
		((wxMirrorDC_php*) _this)->phpObj = getThis();
		
		((wxMirrorDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMirrorDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxPostScriptDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPostScriptDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxPostScriptDC_php* object = static_cast<wxPostScriptDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxPostScriptDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxPostScriptDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPostScriptDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* printData1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&printData1, php_wxPrintData_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &printData1, php_wxPrintData_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(printData1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(printData1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(printData1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxPostScriptDC_php();

				((wxPostScriptDC_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxPrintData*) object_pointer1_0)\n");
				#endif
				_this = new wxPostScriptDC_php(*(wxPrintData*) object_pointer1_0);

				((wxPostScriptDC_php*) _this)->references.Initialize();
				((wxPostScriptDC_php*) _this)->references.AddReference(printData1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxPostScriptDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxPostScriptDC_php*) _this)->evnArray);
		
		array_init(((wxPostScriptDC_php*) _this)->evnArray);
		
		((wxPostScriptDC_php*) _this)->phpObj = getThis();
		
		((wxPostScriptDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxPostScriptDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxScreenDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxScreenDC_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxScreenDC_php* object = static_cast<wxScreenDC_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			delete object;
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxScreenDC done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxScreenDC, EndDrawingOnTop)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScreenDC::EndDrawingOnTop\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScreenDC::EndDrawingOnTop\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScreenDC){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_BOOL(wxScreenDC::EndDrawingOnTop())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxScreenDC::EndDrawingOnTop());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxScreenDC, StartDrawingOnTop)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScreenDC::StartDrawingOnTop\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxScreenDC::StartDrawingOnTop\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxScreenDC){
				references = &((wxScreenDC_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* window0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* rect1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&rect1)\n");
		#endif
		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(rect1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_BOOL(wxScreenDC::StartDrawingOnTop((wxWindow*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxScreenDC::StartDrawingOnTop((wxWindow*) object_pointer0_0));


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_BOOL(wxScreenDC::StartDrawingOnTop())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxScreenDC::StartDrawingOnTop());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_BOOL(wxScreenDC::StartDrawingOnTop((wxRect*) object_pointer1_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxScreenDC::StartDrawingOnTop((wxRect*) object_pointer1_0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxScreenDC, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScreenDC::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxScreenDC_php();

				((wxScreenDC_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxScreenDC);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxScreenDC_php*) _this)->evnArray);
		
		array_init(((wxScreenDC_php*) _this)->evnArray);
		
		((wxScreenDC_php*) _this)->phpObj = getThis();
		
		((wxScreenDC_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxScreenDC_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}

/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "cfg.h"
#include "bookctrl.h"
#include "dnd.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "docview.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "html.h"
#include "help.h"
#include "logging.h"
#include "managedwnd.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "media.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "aui.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "dvc.h"
#include "others.h"


void php_wxFrame_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	zend_error(E_NOTICE, "Object of class wxFrame went out of scope. Remember to always call Destroy() to prevent memory leaks.");
}
PHP_METHOD(php_wxFrame, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* parent1 = 0;
	void* object_pointer1_0 = 0;
	long id1;
	char* title1;
	long title_len1;
	zval* pos1 = 0;
	void* object_pointer1_3 = 0;
	zval* size1 = 0;
	void* object_pointer1_4 = 0;
	long style1;
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxFrame_php();

				((wxFrame_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8))\n");
				#endif
				_this = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8));

				((wxFrame_php*) _this)->references.Initialize();
				((wxFrame_php*) _this)->references.AddReference(parent1);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3)\n");
				#endif
				_this = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3);

				((wxFrame_php*) _this)->references.Initialize();
				((wxFrame_php*) _this)->references.AddReference(parent1);
				((wxFrame_php*) _this)->references.AddReference(pos1);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
				#endif
				_this = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

				((wxFrame_php*) _this)->references.Initialize();
				((wxFrame_php*) _this)->references.AddReference(parent1);
				((wxFrame_php*) _this)->references.AddReference(pos1);
				((wxFrame_php*) _this)->references.AddReference(size1);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
				#endif
				_this = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

				((wxFrame_php*) _this)->references.Initialize();
				((wxFrame_php*) _this)->references.AddReference(parent1);
				((wxFrame_php*) _this)->references.AddReference(pos1);
				((wxFrame_php*) _this)->references.AddReference(size1);
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8))\n");
				#endif
				_this = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8));

				((wxFrame_php*) _this)->references.Initialize();
				((wxFrame_php*) _this)->references.AddReference(parent1);
				((wxFrame_php*) _this)->references.AddReference(pos1);
				((wxFrame_php*) _this)->references.AddReference(size1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxFrame);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxFrame_php*) _this)->evnArray);
		
		array_init(((wxFrame_php*) _this)->evnArray);
		
		((wxFrame_php*) _this)->phpObj = getThis();
		
		((wxFrame_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxFrame_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxFrame, Centre)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::Centre\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::Centre\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long direction0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&direction0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &direction0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::Centre()\n\n");
				#endif
				((wxFrame_php*)_this)->Centre();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::Centre((int) direction0)\n\n");
				#endif
				((wxFrame_php*)_this)->Centre((int) direction0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::Create\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::Create\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* size0 = 0;
	void* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0);
				references->AddReference(pos0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, SetStatusBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetStatusBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::SetStatusBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* statusBar0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&statusBar0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &statusBar0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(statusBar0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(statusBar0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(statusBar0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusBar((wxStatusBar*) object_pointer0_0)\n\n");
				#endif
				((wxFrame_php*)_this)->SetStatusBar((wxStatusBar*) object_pointer0_0);

				references->AddReference(statusBar0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, SetStatusBarPane)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetStatusBarPane\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::SetStatusBarPane\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long n0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&n0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusBarPane((int) n0)\n\n");
				#endif
				((wxFrame_php*)_this)->SetStatusBarPane((int) n0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, SetStatusText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetStatusText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::SetStatusText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	long number0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&text0, &text_len0, &number0)\n");
		#endif
		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &number0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusText(wxString(text0, wxConvUTF8))\n\n");
				#endif
				((wxFrame_php*)_this)->SetStatusText(wxString(text0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusText(wxString(text0, wxConvUTF8), (int) number0)\n\n");
				#endif
				((wxFrame_php*)_this)->SetStatusText(wxString(text0, wxConvUTF8), (int) number0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, SetMenuBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetMenuBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::SetMenuBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* menuBar0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&menuBar0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &menuBar0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(menuBar0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(menuBar0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(menuBar0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetMenuBar((wxMenuBar*) object_pointer0_0)\n\n");
				#endif
				((wxFrame_php*)_this)->SetMenuBar((wxMenuBar*) object_pointer0_0);

				references->AddReference(menuBar0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, GetMenuBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetMenuBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::GetMenuBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::GetMenuBar() to return object pointer\n\n");
				#endif
				wxMenuBar_php* value_to_return0;
				value_to_return0 = (wxMenuBar_php*) ((wxFrame_php*)_this)->GetMenuBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxMenuBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxMenuBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
wxStatusBar* wxFrame_php::OnCreateStatusBar(int number, long style, wxWindowID id, const wxString& name)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxFrame::OnCreateStatusBar\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[4];
	
	//Initilize arguments array
	for(int i=0; i<4; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnCreateStatusBar", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], number);
	ZVAL_LONG(arguments[1], style);
	ZVAL_LONG(arguments[2], id);
	temp_string = (char*)malloc(sizeof(wxChar)*(name.size()+1));
	strcpy(temp_string, (const char *) name.char_str());
	ZVAL_STRING(arguments[3], temp_string, 1);
	free(temp_string);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 4, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		if(Z_TYPE_P(return_value) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(return_value), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
		{
			id_to_find = Z_RESVAL_P(*tmp);
			return_object = zend_list_find(id_to_find, &rsrc_type);
		}
		return (wxStatusBar*) return_object;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxFrame::OnCreateStatusBar(number, style, id, name);

}
PHP_METHOD(php_wxFrame, GetStatusBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetStatusBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::GetStatusBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::GetStatusBar() to return object pointer\n\n");
				#endif
				wxStatusBar_php* value_to_return0;
				value_to_return0 = (wxStatusBar_php*) ((wxFrame_php*)_this)->GetStatusBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxStatusBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxStatusBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, GetStatusBarPane)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetStatusBarPane\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::GetStatusBarPane\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxFrame::GetStatusBarPane())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxFrame_php*)_this)->GetStatusBarPane());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, GetClientAreaOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetClientAreaOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::GetClientAreaOrigin\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::GetClientAreaOrigin() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = ((wxFrame_php*)_this)->GetClientAreaOrigin();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, PopStatusText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::PopStatusText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::PopStatusText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long number0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&number0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &number0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::PopStatusText()\n\n");
				#endif
				((wxFrame_php*)_this)->PopStatusText();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::PopStatusText((int) number0)\n\n");
				#endif
				((wxFrame_php*)_this)->PopStatusText((int) number0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, ProcessCommand)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::ProcessCommand\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::ProcessCommand\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&id0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::ProcessCommand((int) id0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxFrame_php*)_this)->ProcessCommand((int) id0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, PushStatusText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::PushStatusText\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::PushStatusText\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	long number0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&text0, &text_len0, &number0)\n");
		#endif
		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &number0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::PushStatusText(wxString(text0, wxConvUTF8))\n\n");
				#endif
				((wxFrame_php*)_this)->PushStatusText(wxString(text0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::PushStatusText(wxString(text0, wxConvUTF8), (int) number0)\n\n");
				#endif
				((wxFrame_php*)_this)->PushStatusText(wxString(text0, wxConvUTF8), (int) number0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, SetStatusWidths)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetStatusWidths\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::SetStatusWidths\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long n0;
	zval* widths_field0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'la' (&n0, &widths_field0)\n");
		#endif
		char parse_parameters_string[] = "la";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &n0, &widths_field0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		int array_count0_1 = 1;
		HashTable* arr_hash0_1;
		if(arguments_received > 1)
		{
			arr_hash0_1 = Z_ARRVAL_P(widths_field0);
			array_count0_1 = zend_hash_num_elements(arr_hash0_1);
		}
		int* integers_array0_1 = new int[array_count0_1];
		bool integers_continue0_1 = true;

		switch(arguments_received)
		{
			case 2:
			{
				int array_index0_1 = 0;
				zval** temp_array_value0_1 = 0;
				while(integers_continue0_1)
				{
					if(zend_hash_index_find(HASH_OF(widths_field0), array_index0_1, (void**)&temp_array_value0_1) == SUCCESS)
					{
						convert_to_long_ex(temp_array_value0_1);
						integers_array0_1[array_index0_1] = (int) Z_LVAL_PP(temp_array_value0_1);
						array_index0_1++;
					}
					else
					{
						integers_continue0_1 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusWidths((int) n0, (const int*) integers_array0_1)\n\n");
				#endif
				((wxFrame_php*)_this)->SetStatusWidths((int) n0, (const int*) integers_array0_1);

				delete[] integers_array0_1;

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, CreateToolBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::CreateToolBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::CreateToolBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long style0;
	long id0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lls' (&style0, &id0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "|lls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &style0, &id0, &name0, &name_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateToolBar() to return object pointer\n\n");
				#endif
				wxToolBar_php* value_to_return0;
				value_to_return0 = (wxToolBar_php*) ((wxFrame_php*)_this)->CreateToolBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxToolBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxToolBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateToolBar((long) style0) to return object pointer\n\n");
				#endif
				wxToolBar_php* value_to_return1;
				value_to_return1 = (wxToolBar_php*) ((wxFrame_php*)_this)->CreateToolBar((long) style0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxToolBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxToolBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return1 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateToolBar((long) style0, (wxWindowID) id0) to return object pointer\n\n");
				#endif
				wxToolBar_php* value_to_return2;
				value_to_return2 = (wxToolBar_php*) ((wxFrame_php*)_this)->CreateToolBar((long) style0, (wxWindowID) id0);

				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxToolBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return2, le_wxToolBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return2 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateToolBar((long) style0, (wxWindowID) id0, wxString(name0, wxConvUTF8)) to return object pointer\n\n");
				#endif
				wxToolBar_php* value_to_return3;
				value_to_return3 = (wxToolBar_php*) ((wxFrame_php*)_this)->CreateToolBar((long) style0, (wxWindowID) id0, wxString(name0, wxConvUTF8));

				if(value_to_return3 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return3->references.IsUserInitialized()){
					if(value_to_return3->phpObj != NULL){
						*return_value = *value_to_return3->phpObj;
						zval_add_ref(&value_to_return3->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxToolBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return3, le_wxToolBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return3 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, GetToolBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetToolBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::GetToolBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::GetToolBar() to return object pointer\n\n");
				#endif
				wxToolBar_php* value_to_return0;
				value_to_return0 = (wxToolBar_php*) ((wxFrame_php*)_this)->GetToolBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxToolBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxToolBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
wxToolBar* wxFrame_php::OnCreateToolBar(long style, wxWindowID id, const wxString& name)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxFrame::OnCreateToolBar\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		MAKE_STD_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnCreateToolBar", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], style);
	ZVAL_LONG(arguments[1], id);
	temp_string = (char*)malloc(sizeof(wxChar)*(name.size()+1));
	strcpy(temp_string, (const char *) name.char_str());
	ZVAL_STRING(arguments[2], temp_string, 1);
	free(temp_string);
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 3, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		if(Z_TYPE_P(return_value) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(return_value), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
		{
			id_to_find = Z_RESVAL_P(*tmp);
			return_object = zend_list_find(id_to_find, &rsrc_type);
		}
		return (wxToolBar*) return_object;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxFrame::OnCreateToolBar(style, id, name);

}
PHP_METHOD(php_wxFrame, SetToolBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetToolBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::SetToolBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* toolBar0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&toolBar0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &toolBar0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(toolBar0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(toolBar0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(toolBar0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetToolBar((wxToolBar*) object_pointer0_0)\n\n");
				#endif
				((wxFrame_php*)_this)->SetToolBar((wxToolBar*) object_pointer0_0);

				references->AddReference(toolBar0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxFrame, CreateStatusBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::CreateStatusBar\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxFrame::CreateStatusBar\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxFrame){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long number0;
	long style0;
	long id0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llls' (&number0, &style0, &id0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "|llls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &number0, &style0, &id0, &name0, &name_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar() to return object pointer\n\n");
				#endif
				wxStatusBar_php* value_to_return0;
				value_to_return0 = (wxStatusBar_php*) ((wxFrame_php*)_this)->CreateStatusBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxStatusBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxStatusBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar((int) number0) to return object pointer\n\n");
				#endif
				wxStatusBar_php* value_to_return1;
				value_to_return1 = (wxStatusBar_php*) ((wxFrame_php*)_this)->CreateStatusBar((int) number0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxStatusBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxStatusBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return1 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar((int) number0, (long) style0) to return object pointer\n\n");
				#endif
				wxStatusBar_php* value_to_return2;
				value_to_return2 = (wxStatusBar_php*) ((wxFrame_php*)_this)->CreateStatusBar((int) number0, (long) style0);

				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxStatusBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return2, le_wxStatusBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return2 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar((int) number0, (long) style0, (wxWindowID) id0) to return object pointer\n\n");
				#endif
				wxStatusBar_php* value_to_return3;
				value_to_return3 = (wxStatusBar_php*) ((wxFrame_php*)_this)->CreateStatusBar((int) number0, (long) style0, (wxWindowID) id0);

				if(value_to_return3 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return3->references.IsUserInitialized()){
					if(value_to_return3->phpObj != NULL){
						*return_value = *value_to_return3->phpObj;
						zval_add_ref(&value_to_return3->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxStatusBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return3, le_wxStatusBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return3 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar((int) number0, (long) style0, (wxWindowID) id0, wxString(name0, wxConvUTF8)) to return object pointer\n\n");
				#endif
				wxStatusBar_php* value_to_return4;
				value_to_return4 = (wxStatusBar_php*) ((wxFrame_php*)_this)->CreateStatusBar((int) number0, (long) style0, (wxWindowID) id0, wxString(name0, wxConvUTF8));

				if(value_to_return4 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return4->references.IsUserInitialized()){
					if(value_to_return4->phpObj != NULL){
						*return_value = *value_to_return4->phpObj;
						zval_add_ref(&value_to_return4->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxStatusBar_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return4, le_wxStatusBar));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return4 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
void php_wxMDIClientWindow_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMDIClientWindow_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxMDIClientWindow_php* object = static_cast<wxMDIClientWindow_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting object by calling destroy\n");
			#endif
			
			object->Destroy();
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMDIClientWindow done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxMDIClientWindow, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIClientWindow::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMDIClientWindow_php();

				((wxMDIClientWindow_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMDIClientWindow);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMDIClientWindow_php*) _this)->evnArray);
		
		array_init(((wxMDIClientWindow_php*) _this)->evnArray);
		
		((wxMDIClientWindow_php*) _this)->phpObj = getThis();
		
		((wxMDIClientWindow_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMDIClientWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxMDIClientWindow, CreateClient)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIClientWindow::CreateClient\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIClientWindow::CreateClient\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIClientWindow){
				references = &((wxMDIClientWindow_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&parent0, &style0)\n");
		#endif
		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &style0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIClientWindow::CreateClient((wxMDIParentFrame*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIClientWindow_php*)_this)->CreateClient((wxMDIParentFrame*) object_pointer0_0));

				references->AddReference(parent0);

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIClientWindow::CreateClient((wxMDIParentFrame*) object_pointer0_0, (long) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIClientWindow_php*)_this)->CreateClient((wxMDIParentFrame*) object_pointer0_0, (long) style0));

				references->AddReference(parent0);

				return;
				break;
			}
		}
	}

		
}
void php_wxMDIParentFrame_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	zend_error(E_NOTICE, "Object of class wxMDIParentFrame went out of scope. Remember to always call Destroy() to prevent memory leaks.");
}
PHP_METHOD(php_wxMDIParentFrame, ActivateNext)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::ActivateNext\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::ActivateNext\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::ActivateNext()\n\n");
				#endif
				((wxMDIParentFrame_php*)_this)->ActivateNext();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIParentFrame, ActivatePrevious)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::ActivatePrevious\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::ActivatePrevious\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::ActivatePrevious()\n\n");
				#endif
				((wxMDIParentFrame_php*)_this)->ActivatePrevious();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIParentFrame, ArrangeIcons)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::ArrangeIcons\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::ArrangeIcons\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::ArrangeIcons()\n\n");
				#endif
				((wxMDIParentFrame_php*)_this)->ArrangeIcons();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIParentFrame, Cascade)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::Cascade\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::Cascade\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::Cascade()\n\n");
				#endif
				((wxMDIParentFrame_php*)_this)->Cascade();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIParentFrame, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::Create\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::Create\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* size0 = 0;
	void* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0);
				references->AddReference(pos0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIParentFrame, GetActiveChild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::GetActiveChild\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::GetActiveChild\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::GetActiveChild() to return object pointer\n\n");
				#endif
				wxMDIChildFrame_php* value_to_return0;
				value_to_return0 = (wxMDIChildFrame_php*) ((wxMDIParentFrame_php*)_this)->GetActiveChild();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxMDIChildFrame_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxMDIChildFrame));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIParentFrame, GetWindowMenu)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::GetWindowMenu\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::GetWindowMenu\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::GetWindowMenu() to return object pointer\n\n");
				#endif
				wxMenu_php* value_to_return0;
				value_to_return0 = (wxMenu_php*) ((wxMDIParentFrame_php*)_this)->GetWindowMenu();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxMenu_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxMenu));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIParentFrame, IsTDI)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::IsTDI\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::IsTDI\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::IsTDI())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxMDIParentFrame::IsTDI());


				return;
				break;
			}
		}
	}

		
}
wxMDIClientWindow* wxMDIParentFrame_php::OnCreateClient()
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMDIParentFrame::OnCreateClient\n");
	php_printf("===========================================\n");
	#endif
	
	zval* arguments[1];
	arguments[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnCreateClient", 0);
	char* temp_string;
	char _wxResource[] = "wxResource";
	zval **tmp;
	int id_to_find;
	void* return_object;
	int rsrc_type;
	
	//Parameters for conversion
		
	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(call_user_function(NULL, (zval**) &this->phpObj, &function_name, return_value, 0, arguments TSRMLS_CC) == FAILURE)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		if(Z_TYPE_P(return_value) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(return_value), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
		{
			id_to_find = Z_RESVAL_P(*tmp);
			return_object = zend_list_find(id_to_find, &rsrc_type);
		}
		return (wxMDIClientWindow*) return_object;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxMDIParentFrame::OnCreateClient();

}
PHP_METHOD(php_wxMDIParentFrame, SetWindowMenu)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::SetWindowMenu\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::SetWindowMenu\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* menu0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&menu0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &menu0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(menu0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(menu0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(menu0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::SetWindowMenu((wxMenu*) object_pointer0_0)\n\n");
				#endif
				((wxMDIParentFrame_php*)_this)->SetWindowMenu((wxMenu*) object_pointer0_0);

				references->AddReference(menu0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIParentFrame, Tile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::Tile\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIParentFrame::Tile\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIParentFrame){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long orient0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&orient0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &orient0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::Tile()\n\n");
				#endif
				((wxMDIParentFrame_php*)_this)->Tile();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::Tile((wxOrientation) orient0)\n\n");
				#endif
				((wxMDIParentFrame_php*)_this)->Tile((wxOrientation) orient0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIParentFrame, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* parent1 = 0;
	void* object_pointer1_0 = 0;
	long id1;
	char* title1;
	long title_len1;
	zval* pos1 = 0;
	void* object_pointer1_3 = 0;
	zval* size1 = 0;
	void* object_pointer1_4 = 0;
	long style1;
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMDIParentFrame_php();

				((wxMDIParentFrame_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8))\n");
				#endif
				_this = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8));

				((wxMDIParentFrame_php*) _this)->references.Initialize();
				((wxMDIParentFrame_php*) _this)->references.AddReference(parent1);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3)\n");
				#endif
				_this = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3);

				((wxMDIParentFrame_php*) _this)->references.Initialize();
				((wxMDIParentFrame_php*) _this)->references.AddReference(parent1);
				((wxMDIParentFrame_php*) _this)->references.AddReference(pos1);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
				#endif
				_this = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

				((wxMDIParentFrame_php*) _this)->references.Initialize();
				((wxMDIParentFrame_php*) _this)->references.AddReference(parent1);
				((wxMDIParentFrame_php*) _this)->references.AddReference(pos1);
				((wxMDIParentFrame_php*) _this)->references.AddReference(size1);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
				#endif
				_this = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

				((wxMDIParentFrame_php*) _this)->references.Initialize();
				((wxMDIParentFrame_php*) _this)->references.AddReference(parent1);
				((wxMDIParentFrame_php*) _this)->references.AddReference(pos1);
				((wxMDIParentFrame_php*) _this)->references.AddReference(size1);
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8))\n");
				#endif
				_this = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8));

				((wxMDIParentFrame_php*) _this)->references.Initialize();
				((wxMDIParentFrame_php*) _this)->references.AddReference(parent1);
				((wxMDIParentFrame_php*) _this)->references.AddReference(pos1);
				((wxMDIParentFrame_php*) _this)->references.AddReference(size1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMDIParentFrame);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMDIParentFrame_php*) _this)->evnArray);
		
		array_init(((wxMDIParentFrame_php*) _this)->evnArray);
		
		((wxMDIParentFrame_php*) _this)->phpObj = getThis();
		
		((wxMDIParentFrame_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMDIParentFrame_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxMDIChildFrame_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	zend_error(E_NOTICE, "Object of class wxMDIChildFrame went out of scope. Remember to always call Destroy() to prevent memory leaks.");
}
PHP_METHOD(php_wxMDIChildFrame, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* size0 = 0;
	void* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						goto overload1;
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						goto overload1;
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload1_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8))\n");
				#endif
				_this = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8));

				((wxMDIChildFrame_php*) _this)->references.Initialize();
				((wxMDIChildFrame_php*) _this)->references.AddReference(parent0);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3)\n");
				#endif
				_this = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3);

				((wxMDIChildFrame_php*) _this)->references.Initialize();
				((wxMDIChildFrame_php*) _this)->references.AddReference(parent0);
				((wxMDIChildFrame_php*) _this)->references.AddReference(pos0);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4)\n");
				#endif
				_this = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4);

				((wxMDIChildFrame_php*) _this)->references.Initialize();
				((wxMDIChildFrame_php*) _this)->references.AddReference(parent0);
				((wxMDIChildFrame_php*) _this)->references.AddReference(pos0);
				((wxMDIChildFrame_php*) _this)->references.AddReference(size0);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0)\n");
				#endif
				_this = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0);

				((wxMDIChildFrame_php*) _this)->references.Initialize();
				((wxMDIChildFrame_php*) _this)->references.AddReference(parent0);
				((wxMDIChildFrame_php*) _this)->references.AddReference(pos0);
				((wxMDIChildFrame_php*) _this)->references.AddReference(size0);
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8))\n");
				#endif
				_this = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8));

				((wxMDIChildFrame_php*) _this)->references.Initialize();
				((wxMDIChildFrame_php*) _this)->references.AddReference(parent0);
				((wxMDIChildFrame_php*) _this)->references.AddReference(pos0);
				((wxMDIChildFrame_php*) _this)->references.AddReference(size0);
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMDIChildFrame_php();

				((wxMDIChildFrame_php*) _this)->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMDIChildFrame);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMDIChildFrame_php*) _this)->evnArray);
		
		array_init(((wxMDIChildFrame_php*) _this)->evnArray);
		
		((wxMDIChildFrame_php*) _this)->phpObj = getThis();
		
		((wxMDIChildFrame_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMDIChildFrame_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxMDIChildFrame, Restore)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::Restore\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIChildFrame::Restore\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIChildFrame){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::Restore()\n\n");
				#endif
				((wxMDIChildFrame_php*)_this)->Restore();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIChildFrame, Maximize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::Maximize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIChildFrame::Maximize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIChildFrame){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool maximize0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&maximize0)\n");
		#endif
		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &maximize0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::Maximize()\n\n");
				#endif
				((wxMDIChildFrame_php*)_this)->Maximize();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::Maximize(maximize0)\n\n");
				#endif
				((wxMDIChildFrame_php*)_this)->Maximize(maximize0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIChildFrame, IsAlwaysMaximized)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::IsAlwaysMaximized\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIChildFrame::IsAlwaysMaximized\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIChildFrame){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::IsAlwaysMaximized())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)_this)->IsAlwaysMaximized());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIChildFrame, GetMDIParent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::GetMDIParent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIChildFrame::GetMDIParent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIChildFrame){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::GetMDIParent() to return object pointer\n\n");
				#endif
				wxMDIParentFrame_php* value_to_return0;
				value_to_return0 = (wxMDIParentFrame_php*) ((wxMDIChildFrame_php*)_this)->GetMDIParent();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxMDIParentFrame_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxMDIParentFrame));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIChildFrame, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::Create\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIChildFrame::Create\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIChildFrame){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* size0 = 0;
	void* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)_this)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)_this)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0);
				references->AddReference(pos0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)_this)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)_this)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)_this)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMDIChildFrame, Activate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::Activate\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMDIChildFrame::Activate\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMDIChildFrame){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::Activate()\n\n");
				#endif
				((wxMDIChildFrame_php*)_this)->Activate();


				return;
				break;
			}
		}
	}

		
}
void php_wxMiniFrame_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	zend_error(E_NOTICE, "Object of class wxMiniFrame went out of scope. Remember to always call Destroy() to prevent memory leaks.");
}
PHP_METHOD(php_wxMiniFrame, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMiniFrame::Create\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxMiniFrame::Create\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxMiniFrame){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* size0 = 0;
	void* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0);
				references->AddReference(pos0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxMiniFrame, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMiniFrame::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* parent1 = 0;
	void* object_pointer1_0 = 0;
	long id1;
	char* title1;
	long title_len1;
	zval* pos1 = 0;
	void* object_pointer1_3 = 0;
	zval* size1 = 0;
	void* object_pointer1_4 = 0;
	long style1;
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxMiniFrame_php();

				((wxMiniFrame_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8))\n");
				#endif
				_this = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8));

				((wxMiniFrame_php*) _this)->references.Initialize();
				((wxMiniFrame_php*) _this)->references.AddReference(parent1);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3)\n");
				#endif
				_this = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3);

				((wxMiniFrame_php*) _this)->references.Initialize();
				((wxMiniFrame_php*) _this)->references.AddReference(parent1);
				((wxMiniFrame_php*) _this)->references.AddReference(pos1);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
				#endif
				_this = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

				((wxMiniFrame_php*) _this)->references.Initialize();
				((wxMiniFrame_php*) _this)->references.AddReference(parent1);
				((wxMiniFrame_php*) _this)->references.AddReference(pos1);
				((wxMiniFrame_php*) _this)->references.AddReference(size1);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
				#endif
				_this = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

				((wxMiniFrame_php*) _this)->references.Initialize();
				((wxMiniFrame_php*) _this)->references.AddReference(parent1);
				((wxMiniFrame_php*) _this)->references.AddReference(pos1);
				((wxMiniFrame_php*) _this)->references.AddReference(size1);
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8))\n");
				#endif
				_this = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8));

				((wxMiniFrame_php*) _this)->references.Initialize();
				((wxMiniFrame_php*) _this)->references.AddReference(parent1);
				((wxMiniFrame_php*) _this)->references.AddReference(pos1);
				((wxMiniFrame_php*) _this)->references.AddReference(size1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxMiniFrame);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxMiniFrame_php*) _this)->evnArray);
		
		array_init(((wxMiniFrame_php*) _this)->evnArray);
		
		((wxMiniFrame_php*) _this)->phpObj = getThis();
		
		((wxMiniFrame_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxMiniFrame_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxPopupWindow_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPopupWindow_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxPopupWindow_php* object = static_cast<wxPopupWindow_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting object by calling destroy\n");
			#endif
			
			object->Destroy();
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxPopupWindow done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxPopupWindow, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupWindow::Create\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPopupWindow::Create\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPopupWindow){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&parent0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &flags0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPopupWindow::Create((wxWindow*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxPopupWindow_php*)_this)->Create((wxWindow*) object_pointer0_0));

				references->AddReference(parent0);

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPopupWindow::Create((wxWindow*) object_pointer0_0, (int) flags0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxPopupWindow_php*)_this)->Create((wxWindow*) object_pointer0_0, (int) flags0));

				references->AddReference(parent0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPopupWindow, Position)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupWindow::Position\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPopupWindow::Position\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPopupWindow){
				references = &((wxPopupWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPopupTransientWindow) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* ptOrigin0 = 0;
	void* object_pointer0_0 = 0;
	zval* sizePopup0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&ptOrigin0, php_wxPoint_entry, &sizePopup0, php_wxSize_entry)\n");
		#endif
		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &ptOrigin0, php_wxPoint_entry, &sizePopup0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(ptOrigin0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(ptOrigin0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(ptOrigin0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(sizePopup0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(sizePopup0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(sizePopup0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPopupWindow::Position(*(wxPoint*) object_pointer0_0, *(wxSize*) object_pointer0_1)\n\n");
				#endif
				((wxPopupWindow_php*)_this)->Position(*(wxPoint*) object_pointer0_0, *(wxSize*) object_pointer0_1);

				references->AddReference(ptOrigin0);
				references->AddReference(sizePopup0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPopupWindow, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupWindow::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&parent0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &flags0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxPopupWindow_php((wxWindow*) object_pointer0_0);

				((wxPopupWindow_php*) _this)->references.Initialize();
				((wxPopupWindow_php*) _this)->references.AddReference(parent0);
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (int) flags0)\n");
				#endif
				_this = new wxPopupWindow_php((wxWindow*) object_pointer0_0, (int) flags0);

				((wxPopupWindow_php*) _this)->references.Initialize();
				((wxPopupWindow_php*) _this)->references.AddReference(parent0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxPopupWindow);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxPopupWindow_php*) _this)->evnArray);
		
		array_init(((wxPopupWindow_php*) _this)->evnArray);
		
		((wxPopupWindow_php*) _this)->phpObj = getThis();
		
		((wxPopupWindow_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxPopupWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxPopupTransientWindow_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPopupTransientWindow_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxPopupTransientWindow_php* object = static_cast<wxPopupTransientWindow_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting object by calling destroy\n");
			#endif
			
			object->Destroy();
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxPopupTransientWindow done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxPopupTransientWindow, Dismiss)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupTransientWindow::Dismiss\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPopupTransientWindow::Dismiss\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPopupTransientWindow){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPopupTransientWindow::Dismiss()\n\n");
				#endif
				((wxPopupTransientWindow_php*)_this)->Dismiss();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPopupTransientWindow, Popup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupTransientWindow::Popup\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPopupTransientWindow::Popup\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPopupTransientWindow){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* focus0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&focus0)\n");
		#endif
		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &focus0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(focus0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(focus0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(focus0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPopupTransientWindow::Popup()\n\n");
				#endif
				((wxPopupTransientWindow_php*)_this)->Popup();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPopupTransientWindow::Popup((wxWindow*) object_pointer0_0)\n\n");
				#endif
				((wxPopupTransientWindow_php*)_this)->Popup((wxWindow*) object_pointer0_0);

				references->AddReference(focus0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPopupTransientWindow, ProcessLeftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupTransientWindow::ProcessLeftDown\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPopupTransientWindow::ProcessLeftDown\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPopupTransientWindow){
				references = &((wxPopupTransientWindow_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* event0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event0, php_wxMouseEvent_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0, php_wxMouseEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPopupTransientWindow::ProcessLeftDown(*(wxMouseEvent*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxPopupTransientWindow_php*)_this)->ProcessLeftDown(*(wxMouseEvent*) object_pointer0_0));

				references->AddReference(event0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPopupTransientWindow, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupTransientWindow::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&parent0, &flags0)\n");
		#endif
		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &flags0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif
				_this = new wxPopupTransientWindow_php((wxWindow*) object_pointer0_0);

				((wxPopupTransientWindow_php*) _this)->references.Initialize();
				((wxPopupTransientWindow_php*) _this)->references.AddReference(parent0);
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (int) flags0)\n");
				#endif
				_this = new wxPopupTransientWindow_php((wxWindow*) object_pointer0_0, (int) flags0);

				((wxPopupTransientWindow_php*) _this)->references.Initialize();
				((wxPopupTransientWindow_php*) _this)->references.AddReference(parent0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxPopupTransientWindow);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxPopupTransientWindow_php*) _this)->evnArray);
		
		array_init(((wxPopupTransientWindow_php*) _this)->evnArray);
		
		((wxPopupTransientWindow_php*) _this)->phpObj = getThis();
		
		((wxPopupTransientWindow_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxPopupTransientWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxPropertySheetDialog_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	zend_error(E_NOTICE, "Object of class wxPropertySheetDialog went out of scope. Remember to always call Destroy() to prevent memory leaks.");
}
PHP_METHOD(php_wxPropertySheetDialog, AddBookCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::AddBookCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::AddBookCtrl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* sizer0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&sizer0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &sizer0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(sizer0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(sizer0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxWrapSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxGridSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridBagSizer))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(sizer0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::AddBookCtrl((wxSizer*) object_pointer0_0)\n\n");
				#endif
				((wxPropertySheetDialog_php*)_this)->AddBookCtrl((wxSizer*) object_pointer0_0);

				references->AddReference(sizer0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::Create\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::Create\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* size0 = 0;
	void* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0);
				references->AddReference(pos0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, CreateBookCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::CreateBookCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::CreateBookCtrl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::CreateBookCtrl() to return object pointer\n\n");
				#endif
				wxBookCtrlBase_php* value_to_return0;
				value_to_return0 = (wxBookCtrlBase_php*) ((wxPropertySheetDialog_php*)_this)->CreateBookCtrl();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxBookCtrlBase_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxBookCtrlBase));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, CreateButtons)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::CreateButtons\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::CreateButtons\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&flags0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::CreateButtons()\n\n");
				#endif
				((wxPropertySheetDialog_php*)_this)->CreateButtons();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::CreateButtons((int) flags0)\n\n");
				#endif
				((wxPropertySheetDialog_php*)_this)->CreateButtons((int) flags0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, GetBookCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::GetBookCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::GetBookCtrl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::GetBookCtrl() to return object pointer\n\n");
				#endif
				wxBookCtrlBase_php* value_to_return0;
				value_to_return0 = (wxBookCtrlBase_php*) ((wxPropertySheetDialog_php*)_this)->GetBookCtrl();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxBookCtrlBase_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxBookCtrlBase));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, GetInnerSizer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::GetInnerSizer\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::GetInnerSizer\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::GetInnerSizer() to return object pointer\n\n");
				#endif
				wxSizer_php* value_to_return0;
				value_to_return0 = (wxSizer_php*) ((wxPropertySheetDialog_php*)_this)->GetInnerSizer();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxSizer_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxSizer));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, GetSheetStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::GetSheetStyle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::GetSheetStyle\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxPropertySheetDialog::GetSheetStyle())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxPropertySheetDialog_php*)_this)->GetSheetStyle());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, LayoutDialog)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::LayoutDialog\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::LayoutDialog\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long centreFlags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&centreFlags0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &centreFlags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::LayoutDialog()\n\n");
				#endif
				((wxPropertySheetDialog_php*)_this)->LayoutDialog();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::LayoutDialog((int) centreFlags0)\n\n");
				#endif
				((wxPropertySheetDialog_php*)_this)->LayoutDialog((int) centreFlags0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, SetBookCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::SetBookCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::SetBookCtrl\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* bookCtrl0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&bookCtrl0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bookCtrl0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bookCtrl0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bookCtrl0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bookCtrl0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::SetBookCtrl((wxBookCtrlBase*) object_pointer0_0)\n\n");
				#endif
				((wxPropertySheetDialog_php*)_this)->SetBookCtrl((wxBookCtrlBase*) object_pointer0_0);

				references->AddReference(bookCtrl0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, SetSheetStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::SetSheetStyle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxPropertySheetDialog::SetSheetStyle\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxPropertySheetDialog){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&style0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &style0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::SetSheetStyle((long) style0)\n\n");
				#endif
				((wxPropertySheetDialog_php*)_this)->SetSheetStyle((long) style0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxPropertySheetDialog, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* size0 = 0;
	void* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8))\n");
				#endif
				_this = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8));

				((wxPropertySheetDialog_php*) _this)->references.Initialize();
				((wxPropertySheetDialog_php*) _this)->references.AddReference(parent0);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3)\n");
				#endif
				_this = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3);

				((wxPropertySheetDialog_php*) _this)->references.Initialize();
				((wxPropertySheetDialog_php*) _this)->references.AddReference(parent0);
				((wxPropertySheetDialog_php*) _this)->references.AddReference(pos0);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4)\n");
				#endif
				_this = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4);

				((wxPropertySheetDialog_php*) _this)->references.Initialize();
				((wxPropertySheetDialog_php*) _this)->references.AddReference(parent0);
				((wxPropertySheetDialog_php*) _this)->references.AddReference(pos0);
				((wxPropertySheetDialog_php*) _this)->references.AddReference(size0);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0)\n");
				#endif
				_this = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0);

				((wxPropertySheetDialog_php*) _this)->references.Initialize();
				((wxPropertySheetDialog_php*) _this)->references.AddReference(parent0);
				((wxPropertySheetDialog_php*) _this)->references.AddReference(pos0);
				((wxPropertySheetDialog_php*) _this)->references.AddReference(size0);
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8))\n");
				#endif
				_this = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8));

				((wxPropertySheetDialog_php*) _this)->references.Initialize();
				((wxPropertySheetDialog_php*) _this)->references.AddReference(parent0);
				((wxPropertySheetDialog_php*) _this)->references.AddReference(pos0);
				((wxPropertySheetDialog_php*) _this)->references.AddReference(size0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxPropertySheetDialog);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxPropertySheetDialog_php*) _this)->evnArray);
		
		array_init(((wxPropertySheetDialog_php*) _this)->evnArray);
		
		((wxPropertySheetDialog_php*) _this)->phpObj = getThis();
		
		((wxPropertySheetDialog_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxPropertySheetDialog_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxSplashScreen_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	zend_error(E_NOTICE, "Object of class wxSplashScreen went out of scope. Remember to always call Destroy() to prevent memory leaks.");
}
PHP_METHOD(php_wxSplashScreen, GetSplashStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplashScreen::GetSplashStyle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSplashScreen::GetSplashStyle\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSplashScreen){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplashScreen::GetSplashStyle())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSplashScreen_php*)_this)->GetSplashStyle());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSplashScreen, GetTimeout)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplashScreen::GetTimeout\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxSplashScreen::GetTimeout\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxSplashScreen){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplashScreen::GetTimeout())\n\n");
				#endif
				ZVAL_LONG(return_value, ((wxSplashScreen_php*)_this)->GetTimeout());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxSplashScreen, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplashScreen::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* bitmap0 = 0;
	void* object_pointer0_0 = 0;
	long splashStyle0;
	long milliseconds0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long id0;
	zval* pos0 = 0;
	void* object_pointer0_5 = 0;
	zval* size0 = 0;
	void* object_pointer0_6 = 0;
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 5  && arguments_received <= 8)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ollzl|OOl' (&bitmap0, php_wxBitmap_entry, &splashStyle0, &milliseconds0, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0)\n");
		#endif
		char parse_parameters_string[] = "Ollzl|OOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bitmap0, php_wxBitmap_entry, &splashStyle0, &milliseconds0, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bitmap0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(bitmap0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bitmap0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 6){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_5 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_5 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 7){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_6 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_6 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0)\n");
				#endif
				_this = new wxSplashScreen_php(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0);

				((wxSplashScreen_php*) _this)->references.Initialize();
				((wxSplashScreen_php*) _this)->references.AddReference(bitmap0);
				((wxSplashScreen_php*) _this)->references.AddReference(parent0);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5)\n");
				#endif
				_this = new wxSplashScreen_php(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5);

				((wxSplashScreen_php*) _this)->references.Initialize();
				((wxSplashScreen_php*) _this)->references.AddReference(bitmap0);
				((wxSplashScreen_php*) _this)->references.AddReference(parent0);
				((wxSplashScreen_php*) _this)->references.AddReference(pos0);
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6)\n");
				#endif
				_this = new wxSplashScreen_php(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6);

				((wxSplashScreen_php*) _this)->references.Initialize();
				((wxSplashScreen_php*) _this)->references.AddReference(bitmap0);
				((wxSplashScreen_php*) _this)->references.AddReference(parent0);
				((wxSplashScreen_php*) _this)->references.AddReference(pos0);
				((wxSplashScreen_php*) _this)->references.AddReference(size0);
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0)\n");
				#endif
				_this = new wxSplashScreen_php(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0);

				((wxSplashScreen_php*) _this)->references.Initialize();
				((wxSplashScreen_php*) _this)->references.AddReference(bitmap0);
				((wxSplashScreen_php*) _this)->references.AddReference(parent0);
				((wxSplashScreen_php*) _this)->references.AddReference(pos0);
				((wxSplashScreen_php*) _this)->references.AddReference(size0);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxSplashScreen);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxSplashScreen_php*) _this)->evnArray);
		
		array_init(((wxSplashScreen_php*) _this)->evnArray);
		
		((wxSplashScreen_php*) _this)->phpObj = getThis();
		
		((wxSplashScreen_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxSplashScreen_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
void php_wxTopLevelWindow_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTopLevelWindow_destruction_handler on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	
	wxTopLevelWindow_php* object = static_cast<wxTopLevelWindow_php*>(rsrc->ptr);
	
	if(rsrc->ptr != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)rsrc->ptr);
		#endif
		
		if(object->references.IsUserInitialized())
		{	
	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting object by calling destroy\n");
			#endif
			
			object->Destroy();
			
			rsrc->ptr = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxTopLevelWindow done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}
}
PHP_METHOD(php_wxTopLevelWindow, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* parent1 = 0;
	void* object_pointer1_0 = 0;
	long id1;
	char* title1;
	long title_len1;
	zval* pos1 = 0;
	void* object_pointer1_3 = 0;
	zval* size1 = 0;
	void* object_pointer1_4 = 0;
	long style1;
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif
				_this = new wxTopLevelWindow_php();

				((wxTopLevelWindow_php*) _this)->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8))\n");
				#endif
				_this = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8));

				((wxTopLevelWindow_php*) _this)->references.Initialize();
				((wxTopLevelWindow_php*) _this)->references.AddReference(parent1);
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3)\n");
				#endif
				_this = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3);

				((wxTopLevelWindow_php*) _this)->references.Initialize();
				((wxTopLevelWindow_php*) _this)->references.AddReference(parent1);
				((wxTopLevelWindow_php*) _this)->references.AddReference(pos1);
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
				#endif
				_this = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

				((wxTopLevelWindow_php*) _this)->references.Initialize();
				((wxTopLevelWindow_php*) _this)->references.AddReference(parent1);
				((wxTopLevelWindow_php*) _this)->references.AddReference(pos1);
				((wxTopLevelWindow_php*) _this)->references.AddReference(size1);
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
				#endif
				_this = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

				((wxTopLevelWindow_php*) _this)->references.Initialize();
				((wxTopLevelWindow_php*) _this)->references.AddReference(parent1);
				((wxTopLevelWindow_php*) _this)->references.AddReference(pos1);
				((wxTopLevelWindow_php*) _this)->references.AddReference(size1);
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8))\n");
				#endif
				_this = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8));

				((wxTopLevelWindow_php*) _this)->references.Initialize();
				((wxTopLevelWindow_php*) _this)->references.AddReference(parent1);
				((wxTopLevelWindow_php*) _this)->references.AddReference(pos1);
				((wxTopLevelWindow_php*) _this)->references.AddReference(size1);
				break;
			}
		}
	}

		
	if(already_called)
	{
		long id_to_find = zend_list_insert(_this, le_wxTopLevelWindow);
		
		add_property_resource(getThis(), _wxResource, id_to_find);
		
		MAKE_STD_ZVAL(((wxTopLevelWindow_php*) _this)->evnArray);
		
		array_init(((wxTopLevelWindow_php*) _this)->evnArray);
		
		((wxTopLevelWindow_php*) _this)->phpObj = getThis();
		
		((wxTopLevelWindow_php*) _this)->InitProperties();
		
		#ifdef ZTS 
		((wxTopLevelWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract type: failed to call a proper constructor");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
PHP_METHOD(php_wxTopLevelWindow, SetTitle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetTitle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::SetTitle\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	char* title0;
	long title_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&title0, &title_len0)\n");
		#endif
		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &title0, &title_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetTitle(wxString(title0, wxConvUTF8))\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetTitle(wxString(title0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, Maximize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::Maximize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::Maximize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool maximize0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&maximize0)\n");
		#endif
		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &maximize0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::Maximize()\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->Maximize();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::Maximize(maximize0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->Maximize(maximize0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, GetTitle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetTitle\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::GetTitle\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxTopLevelWindow::GetTitle().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = ((wxTopLevelWindow_php*)_this)->GetTitle();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, ShowFullScreen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::ShowFullScreen\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::ShowFullScreen\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool show0;
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b|l' (&show0, &style0)\n");
		#endif
		char parse_parameters_string[] = "b|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &show0, &style0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::ShowFullScreen(show0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->ShowFullScreen(show0));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::ShowFullScreen(show0, (long) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->ShowFullScreen(show0, (long) style0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, IsFullScreen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsFullScreen\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::IsFullScreen\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsFullScreen())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->IsFullScreen());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, SetIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetIcon\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::SetIcon\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* icon0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&icon0, php_wxIcon_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(icon0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icon0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetIcon(*(wxIcon*) object_pointer0_0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetIcon(*(wxIcon*) object_pointer0_0);

				references->AddReference(icon0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, CanSetTransparent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::CanSetTransparent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::CanSetTransparent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::CanSetTransparent())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->CanSetTransparent());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, CenterOnScreen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::CenterOnScreen\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::CenterOnScreen\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long direction0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&direction0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &direction0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::CenterOnScreen((int) direction0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->CenterOnScreen((int) direction0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, CentreOnScreen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::CentreOnScreen\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::CentreOnScreen\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long direction0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&direction0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &direction0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::CentreOnScreen()\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->CentreOnScreen();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::CentreOnScreen((int) direction0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->CentreOnScreen((int) direction0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::Create\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::Create\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* size0 = 0;
	void* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif
		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0);
				references->AddReference(pos0);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0);
				references->AddReference(pos0);
				references->AddReference(size0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, GetDefaultItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetDefaultItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::GetDefaultItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::GetDefaultItem() to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxTopLevelWindow_php*)_this)->GetDefaultItem();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, GetDefaultSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetDefaultSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::GetDefaultSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxTopLevelWindow::GetDefaultSize() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				value_to_return0 = wxTopLevelWindow::GetDefaultSize();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				add_property_resource(return_value, _wxResource, zend_list_insert(ptr, le_wxSize));
				((wxSize_php*)ptr)->phpObj = return_value;
				MAKE_STD_ZVAL(((wxSize_php*) ptr)->evnArray);
				array_init(((wxSize_php*) ptr)->evnArray);
				((wxSize_php*)ptr)->InitProperties();


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, GetIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetIcon\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::GetIcon\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::GetIcon() to return new object\n\n");
				#endif
				wxIcon value_to_return0;
				value_to_return0 = ((wxTopLevelWindow_php*)_this)->GetIcon();
				void* ptr = safe_emalloc(1, sizeof(wxIcon_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxIcon));
				object_init_ex(return_value, php_wxIcon_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxIcon));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, GetIcons)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetIcons\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::GetIcons\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::GetIcons() to return object reference\n\n");
				#endif
				wxIconBundle_php* value_to_return0;
				value_to_return0 = (wxIconBundle_php*) &((wxTopLevelWindow_php*)_this)->GetIcons();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxIconBundle_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxIconBundle));
				}

				if(value_to_return0 != _this && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, GetTmpDefaultItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetTmpDefaultItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::GetTmpDefaultItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::GetTmpDefaultItem() to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxTopLevelWindow_php*)_this)->GetTmpDefaultItem();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return0 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, Iconize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::Iconize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::Iconize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool iconize0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&iconize0)\n");
		#endif
		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &iconize0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::Iconize()\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->Iconize();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::Iconize(iconize0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->Iconize(iconize0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, IsActive)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsActive\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::IsActive\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsActive())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->IsActive());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, IsAlwaysMaximized)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsAlwaysMaximized\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::IsAlwaysMaximized\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsAlwaysMaximized())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->IsAlwaysMaximized());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, IsIconized)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsIconized\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::IsIconized\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsIconized())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->IsIconized());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, IsMaximized)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsMaximized\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::IsMaximized\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsMaximized())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->IsMaximized());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, Layout)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::Layout\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::Layout\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Layout())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->Layout());


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, RequestUserAttention)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::RequestUserAttention\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::RequestUserAttention\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&flags0)\n");
		#endif
		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::RequestUserAttention()\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->RequestUserAttention();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::RequestUserAttention((int) flags0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->RequestUserAttention((int) flags0);


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, SetDefaultItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetDefaultItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::SetDefaultItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetDefaultItem((wxWindow*) object_pointer0_0) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) ((wxTopLevelWindow_php*)_this)->SetDefaultItem((wxWindow*) object_pointer0_0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return1 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}

				references->AddReference(win0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, SetIcons)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetIcons\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::SetIcons\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* icons0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&icons0, php_wxIconBundle_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &icons0, php_wxIconBundle_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(icons0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(icons0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icons0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetIcons(*(wxIconBundle*) object_pointer0_0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetIcons(*(wxIconBundle*) object_pointer0_0);

				references->AddReference(icons0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, SetMaxSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetMaxSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::SetMaxSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* size0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&size0, php_wxSize_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetMaxSize(*(wxSize*) object_pointer0_0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetMaxSize(*(wxSize*) object_pointer0_0);

				references->AddReference(size0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, SetMinSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetMinSize\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::SetMinSize\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* size0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&size0, php_wxSize_entry)\n");
		#endif
		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(size0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(size0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetMinSize(*(wxSize*) object_pointer0_0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetMinSize(*(wxSize*) object_pointer0_0);

				references->AddReference(size0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, SetSizeHints)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetSizeHints\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::SetSizeHints\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long minW0;
	long minH0;
	long maxW0;
	long maxH0;
	long incW0;
	long incH0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* minSize1 = 0;
	void* object_pointer1_0 = 0;
	zval* maxSize1 = 0;
	void* object_pointer1_1 = 0;
	zval* incSize1 = 0;
	void* object_pointer1_2 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll|llll' (&minW0, &minH0, &maxW0, &maxH0, &incW0, &incH0)\n");
		#endif
		char parse_parameters_string[] = "ll|llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &minW0, &minH0, &maxW0, &maxH0, &incW0, &incH0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O|OO' (&minSize1, php_wxSize_entry, &maxSize1, php_wxSize_entry, &incSize1, php_wxSize_entry)\n");
		#endif
		char parse_parameters_string[] = "O|OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &minSize1, php_wxSize_entry, &maxSize1, php_wxSize_entry, &incSize1, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(minSize1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(minSize1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(minSize1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(maxSize1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(maxSize1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(maxSize1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(incSize1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(incSize1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_2 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_2 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(incSize1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetSizeHints((int) minW0, (int) minH0);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0, (int) maxW0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetSizeHints((int) minW0, (int) minH0, (int) maxW0);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0, (int) incW0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0, (int) incW0);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0, (int) incW0, (int) incH0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0, (int) incW0, (int) incH0);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints(*(wxSize*) object_pointer1_0)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetSizeHints(*(wxSize*) object_pointer1_0);

				references->AddReference(minSize1);

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints(*(wxSize*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetSizeHints(*(wxSize*) object_pointer1_0, *(wxSize*) object_pointer1_1);

				references->AddReference(minSize1);
				references->AddReference(maxSize1);

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints(*(wxSize*) object_pointer1_0, *(wxSize*) object_pointer1_1, *(wxSize*) object_pointer1_2)\n\n");
				#endif
				((wxTopLevelWindow_php*)_this)->SetSizeHints(*(wxSize*) object_pointer1_0, *(wxSize*) object_pointer1_1, *(wxSize*) object_pointer1_2);

				references->AddReference(minSize1);
				references->AddReference(maxSize1);
				references->AddReference(incSize1);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, SetTmpDefaultItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetTmpDefaultItem\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::SetTmpDefaultItem\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win0)\n");
		#endif
		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxGenericProgressDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetTmpDefaultItem((wxWindow*) object_pointer0_0) to return object pointer\n\n");
				#endif
				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) ((wxTopLevelWindow_php*)_this)->SetTmpDefaultItem((wxWindow*) object_pointer0_0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxWindow_entry);
					add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));
				}

				if(Z_TYPE_P(return_value) != IS_NULL && value_to_return1 != _this && return_is_user_initialized){
					references->AddReference(return_value);
				}

				references->AddReference(win0);

				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, SetTransparent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetTransparent\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::SetTransparent\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	long alpha0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&alpha0)\n");
		#endif
		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &alpha0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::SetTransparent((wxByte) alpha0))\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->SetTransparent((wxByte) alpha0));


				return;
				break;
			}
		}
	}

		
}
PHP_METHOD(php_wxTopLevelWindow, ShouldPreventAppExit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::ShouldPreventAppExit\n");
	php_printf("===========================================\n");
	#endif
	
	//In case the constructor uses objects
	zval **tmp;
	int rsrc_type;
	int parent_rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	void *_this;
	zval* dummy;
	bool already_called = false;
	wxPHPObjectReferences* references;
	bool return_is_user_initialized = false;
	
	//Get pointer of object that called this method if not a static method
	if (getThis() != NULL) 
	{
		if(zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
		{
			zend_error(E_ERROR, "Failed to get the parent object that called wxTopLevelWindow::ShouldPreventAppExit\n");
			
			return;
		}
		else
		{
			id_to_find = Z_RESVAL_P(*tmp);
			_this = zend_list_find(id_to_find, &parent_rsrc_type);
			
			bool reference_type_found = false;

			if(parent_rsrc_type == le_wxTopLevelWindow){
				references = &((wxTopLevelWindow_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFrame) && (!reference_type_found)){
				references = &((wxFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSplashScreen) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIChildFrame) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMDIParentFrame) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMiniFrame) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPreviewFrame) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpDialog) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxHtmlHelpFrame) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDialog) && (!reference_type_found)){
				references = &((wxDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxTextEntryDialog) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPasswordEntryDialog) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxMessageDialog) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFindReplaceDialog) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxDirDialog) && (!reference_type_found)){
				references = &((wxDirDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSymbolPickerDialog) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPropertySheetDialog) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxWizard) && (!reference_type_found)){
				references = &((wxWizard_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxProgressDialog) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxColourDialog) && (!reference_type_found)){
				references = &((wxColourDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFileDialog) && (!reference_type_found)){
				references = &((wxFileDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxFontDialog) && (!reference_type_found)){
				references = &((wxFontDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPageSetupDialog) && (!reference_type_found)){
				references = &((wxPageSetupDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxPrintDialog) && (!reference_type_found)){
				references = &((wxPrintDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxSingleChoiceDialog) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)_this)->references;
				reference_type_found = true;
			}
			if((parent_rsrc_type == le_wxGenericProgressDialog) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)_this)->references;
				reference_type_found = true;
			}
		}
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Processing the method call as static\n");
		#endif
	}
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::ShouldPreventAppExit())\n\n");
				#endif
				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)_this)->ShouldPreventAppExit());


				return;
				break;
			}
		}
	}

		
}

<?php
/**
 * Sample application of multithreading networking and AUI
 * that implements a simple chat.
 * 
 * @note:
 * Not fully implemented yet (work in progress)
 */

dl("wxwidgets.so");

//Resources generated by wxFormBuilder
include("resources.php");

class AcceptConnections extends wxThread
{
	function __construct($parent)
	{
		parent::__construct(wxTHREAD_JOINABLE);
		
		$this->parent = $parent;
	}
	
	function Entry()
    {
		$socket = socket_create_listen(2500, 100);
		
		while($socket == false)
		{
			print "socket_create() failed: reason: " . socket_strerror(socket_last_error()) . "\n";
			print "re-trying connection...\n";
			$socket = socket_create_listen(2500, 100);
		}
		
		$clients = &$this->parent->m_user_sockets;
		$this->parent->m_main_socket = $socket;
		
		while(true)
		{
			foreach($this->parent->connections as $ip)
			{
				if(!$this->parent->isAlreadyConnected($ip))
				{
					$socket_connect = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
					
					if(socket_connect($socket_connect, $ip, 2500))
					{
						$clients[] = $socket_connect;
						$message = "name,".$this->parent->m_name;
						socket_write($socket_connect, $message, strlen($message));
						
						continue 2;
					}
				}
			}
			
			$clients_to_read = array();
			$clients_to_read[] = $socket;
			
			foreach($clients as $client_position=>$client_socket)
			{
				$clients_to_read[] = $client_socket;
			}
			
			$num_clients_sending_data = socket_select($clients_to_read, $dummy1=null, $dumm2=null, $dummy3=null);
			
			if(in_array($socket, $clients_to_read))
			{
				$temp = socket_accept($socket);
				
				socket_getpeername($temp, $ip);
				
				if(!$this->parent->isAlreadyConnected($ip))
				{
					$clients[] = $temp;
					
					$message = "name,".$this->parent->m_name;
					socket_write($temp, $message, strlen($message));
				}
				
				$num_clients_sending_data--;
				
				if($num_clients_sending_data <= 0)
				{
					continue;
				}
			}
			
			foreach($clients as $client_position=>$client_socket)
			{
				if(in_array($client_socket, $clients_to_read))
				{
					$input = trim(socket_read($client_socket, 2048));
					
					if($input == "")
					{
						socket_close($client_socket);
						unset($clients[$client_position]);
						$this->parent->onUserDisconnected($client_position);
						continue;
					}
					
					$input = explode(",", $input, 2);
					
					if($input[0] == "name")
					{
						$this->parent->onUserConnected($client_position, $input[1]);
					}
					elseif($input[0] == "name_change")
					{
						$this->parent->onUserNameChanged($client_position, $input[1]);
					}
					elseif($input[0] == "send_file")
					{
						$this->parent->messages[] = array($client_position, "file_transfer", $input[1]);
					}
					elseif($input[0] == "accept_file")
					{
						if(isset($this->parent->files_to_send[$client_position]))
						{
							$file = "transfer," . file_get_contents($this->parent->files_to_send[$client_position]) . "\0";
							
							$len = strlen($file);
							$offset = 0;
							while ($offset < $len) {
								$sent = socket_write($client_socket, substr($file, $offset), $len-$offset);
								if ($sent === false) {
									// Error occurred, break the while loop
									break;
								}
								$offset += $sent;
							}
							if ($offset < $len) {
								$errorcode = socket_last_error();
								$errormsg = socket_strerror($errorcode);
								echo "SENDING ERROR: $errormsg";
							} else {
									// Data sent ok
							} 
							
							unset($this->parent->files_to_send[$client_position]);
						}
					}
					elseif($input[0] == "cancel_file")
					{
						if(isset($this->parent->files_to_send[$client_position]))
						{
							unset($this->parent->files_to_send[$client_position]);
						}
					}
					elseif($input[0] == "transfer")
					{
						if(isset($this->parent->files_to_store[$client_position]))
						{
							$file = $input[1];
							
							$data = "";
							
							do{
								$data = trim(socket_read($client_socket));
								$file .= $data;
							}while($data!="");
							
							file_put_contents($this->parent->files_to_store[$client_position], $file);
							unset($this->parent->files_to_store[$client_position]);
						}
					}
					elseif($input[0] == "message")
					{
						$this->parent->onUserMessage($client_position, $input[1]);
					}
				}
			}
			
			print_r($this->parent->m_user_sockets);
		}
		
		socket_close($socket);
		
		return;
	}
}

class LanChat extends LanChatFrame
{
	function __construct()
	{
		parent::__construct(null);
		
		$this->SetIcon(new wxIcon("images/app.png", wxBITMAP_TYPE_PNG));
		
		$this->activate_connection_timer = new wxTimer($this);
		$this->Connect(wxEVT_TIMER, array($this, "ActivateConnection"));
		
		$this->notifications_timer = new wxTimer($this);
		
		$this->connections[] = "192.168.1.101";
		
		$this->accpet_connections = new AcceptConnections($this);
		
		$this->Connect(wxEVT_CLOSE_WINDOW, array($this, "onWindowClose"));
		
		$this->m_users = array();
		$this->m_user_sockets = array();
		$this->m_main_socket = null;
		
		$this->m_users_list_root = $this->m_usersList->AddRoot("Peers");
		$this->m_users_list = array();
		
		$this->taskbar_icon = new TaskBarIcon();
		$this->taskbar_icon->Connect(wxEVT_TASKBAR_LEFT_DCLICK, array($this, "onTrayIconClick"));
		
		//Send file context menu click
		$this->Connect(15, wxEVT_COMMAND_MENU_SELECTED, array($this, "onSendFileClick"));
		
		$this->m_message->SetFocus();
		
		$this->m_name = "Guest";
		
		$this->preferences = new PreferencesDlg($this);
		
		$this->messages = array();
		
		$this->files_to_send = array();
		$this->files_to_store = array();
		
		$this->activate_connection_timer->Start(1000);
	}
	
	function isAlreadyConnected($ip)
	{
		$address = "";
		
		foreach($this->m_user_sockets as $user_socket)
		{
			socket_getpeername($user_socket, $address);
			
			if($address == $ip)
			{
				return true;
			}
		}
		
		return false;
	}
	
	function onUserConnected($id, $username)
	{
		$this->m_users[$id] = $username;
		$this->m_messages->AppendText("User: $username connected\n");
		
		$this->m_users_list[$id] = $this->m_usersList->AppendItem($this->m_users_list_root, $username);
		
		$this->m_usersList->ExpandAll();
	}
	
	function onUserDisconnected($id)
	{
		$this->m_messages->AppendText("User: {$this->m_users[$id]} disconnected\n");
		unset($this->m_users[$id]);
		
		$this->m_usersList->Delete($this->m_users_list[$id]);
		unset($this->m_users_list[$id]);
	}
	
	function onUserNameChanged($id, $username)
	{
		$this->m_messages->AppendText("User {$this->m_users[$id]} renamed to $username\n");
		
		$this->m_users[$id] = $username;
		
		$this->m_usersList->SetItemText($this->m_users_list[$id], $username);
	}
	
	function onUserMessage($id, $message)
	{
		$this->m_messages->AppendText("{$this->m_users[$id]}: $message\n");
	}
	
	function onWindowClose($event)
	{
		$this->accpet_connections->Kill();
		socket_close($this->m_main_socket);
		$event->Skip();
	}
	
	function onPeerRightClick($event)
	{
		$menu = new wxMenu();
		$menu->Append(15, "Send File");
		
		$this->m_usersList->PopupMenu($menu);
	}
	
	function onSendFileClick($event)
	{
		$fileDialog = new wxFileDialog($this, "Select  a file");
		
		if($fileDialog->ShowModal() != wxID_CANCEL)
		{
			$current_selection = $this->m_usersList->GetSelection();
			
			$name = $this->m_usersList->GetItemText($current_selection);
			
			foreach($this->m_users as $client_position=>$username)
			{
				if($name == $username)
				{
					$message = "send_file,".$fileDialog->GetFilename();
					socket_write($this->m_user_sockets[$client_position], $message, strlen($message));
					$this->files_to_send[$client_position] = $fileDialog->GetPath();
					break;
				}
			}
		}
	}
	
	function onMenuConnect($event)
	{
		wxMessageBox("test");
	}
	
	function onMenuQuit($event)
	{
		$this->Close();
	}
	
	function onMenuEditPreferences( $event )
	{
		$this->preferences->ShowModal();
		
		$this->m_name = $this->preferences->name;
		
		foreach($this->m_user_sockets as $client_socket)
		{
			$message = "name_change," . $this->m_name;
			socket_write($client_socket, $message, strlen($message));
		}
	}
	
	function onMenuEditContacts( $event ){
			
	}
	
	function onSendClick($event)
	{
		if(trim($this->m_message->GetValue()) != "")
		{
			$message = "message," . $this->m_message->GetValue();
			
			foreach($this->m_user_sockets as $user_socket)
			{
				socket_write($user_socket, $message, strlen($message));
			}
			
			$this->m_messages->AppendText("Me: " . $this->m_message->GetValue() . "\n");
			$this->m_message->SetValue("");
			
			$this->m_message->SetFocus();
		}
	}
	
	function onTrayIconClick($event)
	{
		if($this->IsShown())
		{
			$this->Hide();
		}
		else
		{
			$this->Show();
		}
	}
	
	function ActivateConnection($event)
	{
			$this->Connect(wxEVT_TIMER, array($this, "NotificationsCheckout"));
			
			$this->notifications_timer->Start(3000);
			
			$this->accpet_connections->Create();
			$this->accpet_connections->Run();
			
			$this->activate_connection_timer->Stop();
	}
	
	function NotificationsCheckout($event)
	{		
		foreach($this->messages as $message)
		{
			$client_position = $message[0];
			$action = $message[1];
			$data = $message[2];
			
			switch($action)
			{
				case "file_transfer":
					if(wxMessageBox("Accept $data?", "File Transfer", wxYES_NO) == wxYES)
					{
						$fileDialog = new wxFileDialog($this, "Select output file", "", "", "All Files(*.*)|*.*", wxFD_SAVE);
						$fileDialog->SetFilename($data);
						$fileDialog->ShowModal();
						$this->files_to_store[$client_position] = $fileDialog->GetPath();
						
						$message = "accept_file,";
						socket_write($this->m_user_sockets[$client_position], $message, strlen($message));
					}
					else
					{
						$message = "cancel_file,";
						socket_write($this->m_user_sockets[$client_position], $message, strlen($message));
					}
					break;
			}
		}
		
		$this->messages = array();
	}
}

class PreferencesDlg extends PreferencesDialog
{
	function __construct($parent)
	{
		parent::__construct($parent);
	}
	
	function onSaveClick($event)
	{
		$this->name = $this->m_name->GetValue();
		$this->EndModal(0);
	}
}

class TaskBarIcon extends wxTaskBarIcon
{
	function __construct()
	{
		parent::__construct();
		
		$this->SetIcon(new wxIcon("images/app.png", wxBITMAP_TYPE_PNG), "wxPHP Lan Chat v0.1");
	}
}

class LanChatApp extends wxApp
{
	function OnInit()
	{
		wxInitAllImageHandlers();
		
		$this->frame = new LanChat();
		$this->frame->Show();
		
		return true;
	}
	
	function OnExit()
	{
		return 0;
	}
}

$LanChatApp = new LanChatApp();

wxApp::SetInstance($LanChatApp);
wxEntry();

?>
